#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.9 $
# $Date: 2020/06/12 $
#
# description : This .audit is designed against the CIS Amazon Web Services Foundations Version 1.2.0.
#               https://workbench.cisecurity.org/files/1977
#
#<ui_metadata>
#<display_name>CIS Amazon Web Services Foundations L1 1.2.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Amazon Web Services Foundations L1</name>
#  <version>1.2.0</version>
#</spec>
#<labels>amazon_aws,amazon,aws,security,cis</labels>
#<benchmark_refs>LEVEL,CSCv6,CCE</benchmark_refs>
#<variables>
#  <variable>
#    <name>INACTIVE_ACCOUNT_DAYS</name>
#    <default>90</default>
#    <description>Days without Account activity</description>
#    <info>Inactive Days</info>
#  </variable>
#  <variable>
#    <name>ALARM_ARN</name>
#    <default>arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark</default>
#    <description>3.x - SNS subscription ARN</description>
#    <info>The SNS TopicARN used by the Metric Filter Alarms</info>
#  </variable>
#  <variable>
#    <name>API_METRIC_NAME</name>
#    <default>UnauthorizedAPICalls</default>
#    <description>3.1 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>MFA_METRIC_NAME</name>
#    <default>ManagementConsoleLoginWithoutMFA</default>
#    <description>3.2 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>ROOT_METRIC_NAME</name>
#    <default>RootAccountUsage</default>
#    <description>3.3 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>IAM_METRIC_NAME</name>
#    <default>IAMPolicyChanges</default>
#    <description>3.4 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>CLOUDTRAIL_METRIC_NAME</name>
#    <default>CloudTrailConfigChanges</default>
#    <description>3.5 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>S3_METRIC_NAME</name>
#    <default>S3BucketPolicyChanges</default>
#    <description>3.8 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>GATEWAY_METRIC_NAME</name>
#    <default>NetworkGatewayChanges</default>
#    <description>3.12 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>ROUTE_TABLE_METRIC_NAME</name>
#    <default>RouteTableChanges</default>
#    <description>3.13 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#  <variable>
#    <name>VPC_METRIC_NAME</name>
#    <default>VPCChanges</default>
#    <description>3.14 - Cloudtrail API MetricName</description>
#    <info>Value of MetricName for the Cloudtrail Metric Filter</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"amazon_aws">

# 1 Identity and Access Management

<custom_item>
  type        : IAM
  description : "1.1 Avoid the use of the 'root' account - 'password_enabled != true'"
  info        : "The 'root' account has unrestricted access to all resources in the AWS account. It is highly recommended that the use of this account be avoided.

The 'root' account is the most privileged AWS account. Minimizing the use of this account and adopting the principle of least privilege for access management will reduce the risk of accidental changes and unintended disclosure of highly privileged credentials."
  solution    : "Follow the remediation instructions of the 'Ensure IAM policies are attached only to groups or roles' recommendation"
  reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|4.3,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:text>[root_account] : Password Enabled = </xsl:text><xsl:value-of select=\"iam:password_enabled\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "\[root_account\] :"
  expect      : "\[root_account\] : Password Enabled = (false|not_supported)"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.1 Avoid the use of the 'root' account - 'access_key_1_active != true'"
  info        : "The 'root' account has unrestricted access to all resources in the AWS account. It is highly recommended that the use of this account be avoided.

The 'root' account is the most privileged AWS account. Minimizing the use of this account and adopting the principle of least privilege for access management will reduce the risk of accidental changes and unintended disclosure of highly privileged credentials."
  solution    : "Follow the remediation instructions of the 'Ensure IAM policies are attached only to groups or roles' recommendation"
  reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|4.3,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:text>[root_account] : Access Key 1 Active = </xsl:text><xsl:value-of select=\"iam:access_key_1_active\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "\[root_account\] :"
  expect      : "\[root_account\] : Access Key 1 Active = false"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.1 Avoid the use of the 'root' account - 'access_key_2_active != true'"
  info        : "The 'root' account has unrestricted access to all resources in the AWS account. It is highly recommended that the use of this account be avoided.

The 'root' account is the most privileged AWS account. Minimizing the use of this account and adopting the principle of least privilege for access management will reduce the risk of accidental changes and unintended disclosure of highly privileged credentials."
  solution    : "Follow the remediation instructions of the 'Ensure IAM policies are attached only to groups or roles' recommendation"
  reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|4.3,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:text>[root_account] : Access Key 2 Active = </xsl:text><xsl:value-of select=\"iam:access_key_2_active\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "\[root_account\] :"
  expect      : "\[root_account\] : Access Key 2 Active = false"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.2 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password 'AccountMFAEnabled'"
  info        : "Multi-Factor Authentication (MFA) adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. It is recommended that MFA be enabled for all accounts that have a console password.

Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential."
  solution    : "Perform the following to enable MFA:

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. In the navigation pane, choose Users.
3. In the User Name list, choose the name of the intended MFA user.
4. Choose the Security Credentials tab, and then choose Manage MFA Device.
5. In the Manage MFA Device wizard, choose A virtual MFA device, and then choose Next Step.

 IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.
6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).
7. Determine whether the MFA app supports QR codes, and then do one of the following:

 - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.
 - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.

 When you are finished, the virtual MFA device starts generating one-time passwords.
8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA.

**Forced IAM User Self-Service Remediation**

Amazon has published a pattern that forces users to self-service setup MFA before they have access to their complete permissions set. Until they complete this step, they cannot access their full permissions. This pattern can be used on new AWS accounts. It can also be used on existing accounts - it is recommended users are given instructions and a grace period to accomplish MFA enrollment before active enforcement on existing AWS accounts.

[How to Delegate Management of Multi-Factor Authentication to AWS IAM Users](http://blogs.aws.amazon.com/security/post/Tx2SJJYE082KBUK/How-to-Delegate-Management-of-Multi-Factor-Authentication-to-AWS-IAM-Users)"
  reference   : "800-53|IA-5(11),CCE|CCE-78901-6,CN-L3|7.1.3.1(f),CSCv6|4.5,CSF|PR.AC-1,LEVEL|1S,SWIFT-CSCv1|4.2,SWIFT-CSCv1|5.2"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountSummary"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:SummaryMap/iam:entry[iam:key = 'AccountMFAEnabled']/iam:value\">
      <xsl:for-each select=\"//iam:SummaryMap/iam:entry[iam:key = 'AccountMFAEnabled']\">
        <xsl:text>AccountMFAEnabled : </xsl:text><xsl:value-of select=\"iam:value\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>AccountMFAEnabled : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "AccountMFAEnabled :"
  expect      : "AccountMFAEnabled : 1$"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.2 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password - 'Root Account MFA enabled'"
  info        : "Multi-Factor Authentication (MFA) adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. It is recommended that MFA be enabled for all accounts that have a console password.

Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential."
  solution    : "Perform the following to enable MFA:

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. In the navigation pane, choose Users.
3. In the User Name list, choose the name of the intended MFA user.
4. Choose the Security Credentials tab, and then choose Manage MFA Device.
5. In the Manage MFA Device wizard, choose A virtual MFA device, and then choose Next Step.

 IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.
6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).
7. Determine whether the MFA app supports QR codes, and then do one of the following:

 - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.
 - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.

 When you are finished, the virtual MFA device starts generating one-time passwords.
8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA.

**Forced IAM User Self-Service Remediation**

Amazon has published a pattern that forces users to self-service setup MFA before they have access to their complete permissions set. Until they complete this step, they cannot access their full permissions. This pattern can be used on new AWS accounts. It can also be used on existing accounts - it is recommended users are given instructions and a grace period to accomplish MFA enrollment before active enforcement on existing AWS accounts.

[How to Delegate Management of Multi-Factor Authentication to AWS IAM Users](http://blogs.aws.amazon.com/security/post/Tx2SJJYE082KBUK/How-to-Delegate-Management-of-Multi-Factor-Authentication-to-AWS-IAM-Users)"
  reference   : "800-53|IA-5(11),CCE|CCE-78901-6,CN-L3|7.1.3.1(f),CSCv6|4.5,CSF|PR.AC-1,LEVEL|1S,SWIFT-CSCv1|4.2,SWIFT-CSCv1|5.2"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:choose>
          <xsl:when test=\"//iam:Member[iam:user = '[root_account]' and iam:password_enabled = 'true']\">
            <xsl:text>[root_account] : MFA Active = </xsl:text><xsl:value-of select=\"iam:mfa_active\"/><xsl:text>&#10;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>[root_account] : console password not enabled</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "\[root_account\] :"
  expect      : "\[root_account\] : (MFA Active = true|console password not enabled)"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.2 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password - 'User Accounts MFA enabled'"
  info        : "Multi-Factor Authentication (MFA) adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. It is recommended that MFA be enabled for all accounts that have a console password.

Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential."
  solution    : "Perform the following to enable MFA:

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. In the navigation pane, choose Users.
3. In the User Name list, choose the name of the intended MFA user.
4. Choose the Security Credentials tab, and then choose Manage MFA Device.
5. In the Manage MFA Device wizard, choose A virtual MFA device, and then choose Next Step.

 IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.
6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).
7. Determine whether the MFA app supports QR codes, and then do one of the following:

 - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.
 - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.

 When you are finished, the virtual MFA device starts generating one-time passwords.
8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA.

**Forced IAM User Self-Service Remediation**

Amazon has published a pattern that forces users to self-service setup MFA before they have access to their complete permissions set. Until they complete this step, they cannot access their full permissions. This pattern can be used on new AWS accounts. It can also be used on existing accounts - it is recommended users are given instructions and a grace period to accomplish MFA enrollment before active enforcement on existing AWS accounts.

[How to Delegate Management of Multi-Factor Authentication to AWS IAM Users](http://blogs.aws.amazon.com/security/post/Tx2SJJYE082KBUK/How-to-Delegate-Management-of-Multi-Factor-Authentication-to-AWS-IAM-Users)"
  reference   : "800-53|IA-5(11),CCE|CCE-78901-6,CN-L3|7.1.3.1(f),CSCv6|4.5,CSF|PR.AC-1,LEVEL|1S,SWIFT-CSCv1|4.2,SWIFT-CSCv1|5.2"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user != '[root_account]' and iam:password_enabled = 'true']\">
      <xsl:for-each select=\"//iam:Member[iam:user != '[root_account]' and iam:password_enabled = 'true']\">
        <xsl:value-of select=\"iam:user\"/><xsl:text> : MFA Active = </xsl:text><xsl:value-of select=\"iam:mfa_active\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "(.+ : MFA Active =|Not Found)"
  not_expect  : ".+ : MFA Active = false"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.3 Ensure credentials unused for 90 days or greater are disabled"
  info        : "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 90 or greater days be removed or deactivated.

Disabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used."
  solution    : "Perform the following to remove or deactivate credentials:

1. Login to the AWS Management Console:
2. Click 'Services'
3. Click 'IAM'
4. Click on 'Users'
5. Click on 'Security Credentials'
6. As an Administrator
 - Click on 'Make Inactive' for credentials that have not been used in '90' Days
7. As an IAM User
 - Click on 'Make' 'Inactive' or 'Delete' for credentials which have not been used in '90' Days"
  reference   : "800-53|AC-2(3),CCE|CCE-78900-8,CN-L3|7.1.3.2(e),CN-L3|8.1.4.2(c),CSCv6|16.9,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.6,ITSG-33|AC-2(3),LEVEL|1S,NIAv2|AM26,TBA-FIISB|36.2.2"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  name        : INACTIVE_USERS_AUDIT_STRICT
# Note: Variable @INACTIVE_ACCOUNT_DAYS@ replaced with "90" in field "days".
  days        : "90"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.4 Ensure access keys are rotated every 90 days or less - 'Root Account - Access Key 1'"
  info        : "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.

Rotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.

Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Perform the following to rotate access keys:

1. Login to the AWS Management Console:
2. Click 'Services'
3. Click 'IAM'
4. Click on 'Users'
5. Click on 'Security Credentials'
6. As an Administrator
 - Click on 'Make Inactive' for keys that have not been rotated in '90' Days
7. As an IAM User
 - Click on 'Make' 'Inactive' or 'Delete' for keys which have not been rotated or used in '90' Days
8. Click on '' Create Access ' Key'
9. Update programmatic call with new Access Key credentials

Via CLI

aws iam update-access-key
aws iam create-access-key
aws iam delete-access-key"
  reference   : "800-171|3.5.2,800-53|IA-5,CCE|CCE-78902-4,CSCv6|16,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1S,NESA|T5.2.3,NESA|T5.5.3,NIAv2|AM22b,TBA-FIISB|26.2.5"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:choose>
          <xsl:when test=\"//iam:Member[iam:user = '[root_account]' and iam:access_key_1_active = 'true']\">
            <xsl:text>[root_account] : Access Key 1 Last Rotated = </xsl:text><xsl:value-of select=\"iam:access_key_1_last_rotated\"/><xsl:text>&#10;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>[root_account] : Access Key 1 NOT Enabled</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".*"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : IAM
  description : "1.4 Ensure access keys are rotated every 90 days or less - 'Root Account - Access Key 2'"
  info        : "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.

Rotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.

Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Perform the following to rotate access keys:

1. Login to the AWS Management Console:
2. Click 'Services'
3. Click 'IAM'
4. Click on 'Users'
5. Click on 'Security Credentials'
6. As an Administrator
 - Click on 'Make Inactive' for keys that have not been rotated in '90' Days
7. As an IAM User
 - Click on 'Make' 'Inactive' or 'Delete' for keys which have not been rotated or used in '90' Days
8. Click on '' Create Access ' Key'
9. Update programmatic call with new Access Key credentials

Via CLI

aws iam update-access-key
aws iam create-access-key
aws iam delete-access-key"
  reference   : "800-171|3.5.2,800-53|IA-5,CCE|CCE-78902-4,CSCv6|16,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1S,NESA|T5.2.3,NESA|T5.5.3,NIAv2|AM22b,TBA-FIISB|26.2.5"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:choose>
          <xsl:when test=\"//iam:Member[iam:user = '[root_account]' and iam:access_key_2_active = 'true']\">
            <xsl:text>[root_account] : Access Key 1 Last Rotated = </xsl:text><xsl:value-of select=\"iam:access_key_2_last_rotated\"/><xsl:text>&#10;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>[root_account] : Access Key 2 NOT Enabled</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".*"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : IAM
  description : "1.4 Ensure access keys are rotated every 90 days or less - 'User Accounts - Access Key 1'"
  info        : "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.

Rotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.

Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Perform the following to rotate access keys:

1. Login to the AWS Management Console:
2. Click 'Services'
3. Click 'IAM'
4. Click on 'Users'
5. Click on 'Security Credentials'
6. As an Administrator
 - Click on 'Make Inactive' for keys that have not been rotated in '90' Days
7. As an IAM User
 - Click on 'Make' 'Inactive' or 'Delete' for keys which have not been rotated or used in '90' Days
8. Click on '' Create Access ' Key'
9. Update programmatic call with new Access Key credentials

Via CLI

aws iam update-access-key
aws iam create-access-key
aws iam delete-access-key"
  reference   : "800-171|3.5.2,800-53|IA-5,CCE|CCE-78902-4,CSCv6|16,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1S,NESA|T5.2.3,NESA|T5.5.3,NIAv2|AM22b,TBA-FIISB|26.2.5"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user != '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user != '[root_account]']\">
        <xsl:choose>
          <xsl:when test=\"//iam:Member[iam:user != '[root_account]' and iam:access_key_1_active = 'true']\">
            <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 1 Last Rotated = </xsl:text><xsl:value-of select=\"iam:access_key_1_last_rotated\"/><xsl:text>&#10;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 1 NOT Enabled</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No User Accounts Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".*"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : IAM
  description : "1.4 Ensure access keys are rotated every 90 days or less - 'User Accounts - Access Key 2'"
  info        : "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.

Rotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.

Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Perform the following to rotate access keys:

1. Login to the AWS Management Console:
2. Click 'Services'
3. Click 'IAM'
4. Click on 'Users'
5. Click on 'Security Credentials'
6. As an Administrator
 - Click on 'Make Inactive' for keys that have not been rotated in '90' Days
7. As an IAM User
 - Click on 'Make' 'Inactive' or 'Delete' for keys which have not been rotated or used in '90' Days
8. Click on '' Create Access ' Key'
9. Update programmatic call with new Access Key credentials

Via CLI

aws iam update-access-key
aws iam create-access-key
aws iam delete-access-key"
  reference   : "800-171|3.5.2,800-53|IA-5,CCE|CCE-78902-4,CSCv6|16,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1S,NESA|T5.2.3,NESA|T5.5.3,NIAv2|AM22b,TBA-FIISB|26.2.5"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user != '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user != '[root_account]']\">
        <xsl:choose>
          <xsl:when test=\"//iam:Member[iam:user != '[root_account]' and iam:access_key_2_active = 'true']\">
            <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 2 Last Rotated = </xsl:text><xsl:value-of select=\"iam:access_key_2_last_rotated\"/><xsl:text>&#10;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 2 NOT Enabled</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No User Accounts Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".*"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : IAM
  description : "1.5 Ensure IAM password policy requires at least one uppercase letter"
  info        : "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one uppercase letter.

Setting a password complexity policy increases account resiliency against brute force login attempts."
  solution    : "Perform the following to set the password policy as prescribed:

Via AWS Console

1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)
2. Go to IAM Service on the AWS Console
3. Click on Account Settings on the Left Pane
4. Check 'Requires at least one uppercase letter'
5. Click 'Apply password policy'

Via CLI

 aws iam update-account-password-policy --require-uppercase-characters

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-171|3.5.7,800-53|IA-5(1),CCE|CCE-78903-2,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv6|16,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:RequireUppercaseCharacters\">
        RequireUppercaseCharacters : <xsl:value-of select=\"iam:RequireUppercaseCharacters\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>RequireUppercaseCharacters : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "RequireUppercaseCharacters :"
  expect      : "RequireUppercaseCharacters : [Tt][Rr][Uu][Ee]"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.6 Ensure IAM password policy require at least one lowercase letter"
  info        : "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one lowercase letter.

Setting a password complexity policy increases account resiliency against brute force login attempts."
  solution    : "Perform the following to set the password policy as prescribed:

Via the AWS Console

1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)
2. Go to IAM Service on the AWS Console
3. Click on Account Settings on the Left Pane
4. Check 'Requires at least one lowercase letter'
5. Click 'Apply password policy'

Via CLI

 aws iam update-account-password-policy --require-lowercase-characters

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-171|3.5.7,800-53|IA-5(1),CCE|CCE-78904-0,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv6|16,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:RequireLowercaseCharacters\">
        RequireLowercaseCharacters : <xsl:value-of select=\"iam:RequireLowercaseCharacters\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>RequireLowercaseCharacters : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "RequireLowercaseCharacters :"
  expect      : "RequireLowercaseCharacters : [Tt][Rr][Uu][Ee]"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.7 Ensure IAM password policy require at least one symbol"
  info        : "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one symbol.

Setting a password complexity policy increases account resiliency against brute force login attempts."
  solution    : "Perform the following to set the password policy as prescribed:

Via AWS Console

1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)
2. Go to IAM Service on the AWS Console
3. Click on Account Settings on the Left Pane
4. Check 'Require at least one non-alphanumeric character'
5. Click 'Apply password policy'

 Via CLI

 aws iam update-account-password-policy --require-symbols

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-171|3.5.7,800-53|IA-5(1),CCE|CCE-78905-7,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv6|16,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:RequireSymbols\">
        RequireSymbols : <xsl:value-of select=\"iam:RequireSymbols\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>RequireSymbols : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "RequireSymbols :"
  expect      : "RequireSymbols : [Tt][Rr][Uu][Ee]"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.8 Ensure IAM password policy require at least one number"
  info        : "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one number.

Setting a password complexity policy increases account resiliency against brute force login attempts."
  solution    : "Perform the following to set the password policy as prescribed:

Via AWS Console

1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)
2. Go to IAM Service on the AWS Console
3. Click on Account Settings on the Left Pane
4. Check 'Require at least one number'
5. Click 'Apply password policy'

 Via CLI

 aws iam update-account-password-policy --require-numbers

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-171|3.5.7,800-53|IA-5(1),CCE|CCE-78906-5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv6|16,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:RequireNumbers\">
        RequireNumbers : <xsl:value-of select=\"iam:RequireNumbers\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>RequireNumbers : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "RequireNumbers :"
  expect      : "RequireNumbers : [Tt][Rr][Uu][Ee]"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.9 Ensure IAM password policy requires minimum length of 14 or greater"
  info        : "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.

Setting a password complexity policy increases account resiliency against brute force login attempts."
  solution    : "Perform the following to set the password policy as prescribed:

Via AWS Console

1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)
2. Go to IAM Service on the AWS Console
3. Click on Account Settings on the Left Pane
4. Set 'Minimum password length' to '14' or greater.
5. Click 'Apply password policy'

 Via CLI

 aws iam update-account-password-policy --minimum-password-length 14

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-171|3.5.7,800-53|IA-5(1),CCE|CCE-78907-3,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv6|16,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:MinimumPasswordLength\">
        MinimumPasswordLength : <xsl:value-of select=\"iam:MinimumPasswordLength\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>MinimumPasswordLength : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "MinimumPasswordLength :"
  expect      : "MinimumPasswordLength : (1[4-9]|[2-9][0-9]|1[01][0-9]|12[0-8])$"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.10 Ensure IAM password policy prevents password reuse"
  info        : "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.

Preventing password reuse increases account resiliency against brute force login attempts."
  solution    : "Perform the following to set the password policy as prescribed:

Via AWS Console

1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)
2. Go to IAM Service on the AWS Console
3. Click on Account Settings on the Left Pane
4. Check 'Prevent password reuse'
5. Set 'Number of passwords to remember' is set to '24'

 Via CLI

 aws iam update-account-password-policy --password-reuse-prevention 24

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-171|3.5.8,800-53|IA-5(1),CCE|CCE-78908-1,CSCv6|4.4,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM22c,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.3"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:PasswordReusePrevention\">
        PasswordReusePrevention : <xsl:value-of select=\"iam:PasswordReusePrevention\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>PasswordReusePrevention : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "PasswordReusePrevention :"
  expect      : "PasswordReusePrevention : (2[4-9]|[3-9][0-9])$"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.11 Ensure IAM password policy expires passwords within 90 days or less"
  info        : "IAM password policies can require passwords to be rotated or expired after a given number of days. It is recommended that the password policy expire passwords after 90 days or less.

Reducing the password lifetime increases account resiliency against brute force login attempts. Additionally, requiring regular password changes help in the following scenarios:

- Passwords can be stolen or compromised sometimes without your knowledge. This can happen via a system compromise, software vulnerability, or internal threat.
- Certain corporate and government web filters or proxy servers have the ability to intercept and record traffic even if it's encrypted.
- Many people use the same password for many systems such as work, email, and personal.
- Compromised end user workstations might have a keystroke logger."
  solution    : "Perform the following to set the password policy as prescribed:

Via AWS Console:

1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)
2. Go to IAM Service on the AWS Console
3. Click on Account Settings on the Left Pane
4. Check 'Enable password expiration'
5. Set 'Password expiration period (in days):' to 90 or less

 Via CLI

 aws iam update-account-password-policy --max-password-age 90

Note: All commands starting with 'aws iam update-account-password-policy' can be combined into a single command."
  reference   : "800-53|IA-5(1),CCE|CCE-78909-9,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv6|16,CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM20,NIAv2|AM21,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.2"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountPasswordPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:for-each select=\"//iam:GetAccountPasswordPolicyResult/iam:PasswordPolicy\">
    <xsl:choose>
      <xsl:when test=\"iam:MaxPasswordAge\">
        MaxPasswordAge : <xsl:value-of select=\"iam:MaxPasswordAge\"/><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>MaxPasswordAge : Not Found</xsl:text><xsl:text>&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  regex       : "MaxPasswordAge :"
  expect      : "MaxPasswordAge : ([1-9]|[1-8][0-9]|90)$"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.12 Ensure no root account access key exists - 'Access Key 1'"
  info        : "The root account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root account be removed.

Removing access keys associated with the root account limits vectors by which the account can be compromised. Additionally, removing the root access keys encourages the creation and use of role based accounts that are least privileged."
  solution    : "Perform the following to delete or disable active root access keys being

Via the AWS Console

1. Sign in to the AWS Management Console as Root and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. Click on __ at the top right and select 'Security Credentials' from the drop down list
3. On the pop out screen Click on 'Continue to Security Credentials'
4. Click on 'Access Keys' _(Access Key ID and Secret Access Key)_
5. Under the 'Status' column if there are any Keys which are Active
 1. Click on 'Make Inactive' - (Temporarily disable Key - may be needed again)
 2. Click 'Delete' - (Deleted keys cannot be recovered)"
  reference   : "800-171|3.1.5,800-53|AC-6,CCE|CCE-78910-7,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|4.3,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:text>[root_account] : Access Key 1 Active = </xsl:text><xsl:value-of select=\"iam:access_key_1_active\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "\[root_account\] :"
  expect      : "\[root_account\] : Access Key 1 Active = false"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.12 Ensure no root account access key exists - 'Access Key 2'"
  info        : "The root account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root account be removed.

Removing access keys associated with the root account limits vectors by which the account can be compromised. Additionally, removing the root access keys encourages the creation and use of role based accounts that are least privileged."
  solution    : "Perform the following to delete or disable active root access keys being

Via the AWS Console

1. Sign in to the AWS Management Console as Root and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. Click on __ at the top right and select 'Security Credentials' from the drop down list
3. On the pop out screen Click on 'Continue to Security Credentials'
4. Click on 'Access Keys' _(Access Key ID and Secret Access Key)_
5. Under the 'Status' column if there are any Keys which are Active
 1. Click on 'Make Inactive' - (Temporarily disable Key - may be needed again)
 2. Click 'Delete' - (Deleted keys cannot be recovered)"
  reference   : "800-171|3.1.5,800-53|AC-6,CCE|CCE-78910-7,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|4.3,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:user = '[root_account]']\">
      <xsl:for-each select=\"//iam:Member[iam:user = '[root_account]']\">
        <xsl:text>[root_account] : Access Key 2 Active = </xsl:text><xsl:value-of select=\"iam:access_key_2_active\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>[root_account] : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "\[root_account\] :"
  expect      : "\[root_account\] : Access Key 2 Active = false"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.13 Ensure MFA is enabled for the 'root' account"
  info        : "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device.

**Note:** When virtual MFA is used for root accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. ('non-personal virtual MFA') This lessens the risks of losing access to the MFA due to device loss, device trade-in or if the individual owning the device is no longer employed at the company.

Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential."
  solution    : "Perform the following to establish MFA for the root account:

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).

 Note: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.
2. Choose 'Dashboard' , and under 'Security Status' , expand 'Activate MFA' on your root account.
3. Choose 'Activate MFA'
4. In the wizard, choose 'A virtual MFA' device and then choose 'Next Step' .
5. IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.
6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).
7. Determine whether the MFA app supports QR codes, and then do one of the following:

 - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.
 - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.

When you are finished, the virtual MFA device starts generating one-time passwords.

1. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA."
  reference   : "800-53|IA-5(11),CCE|CCE-78911-5,CN-L3|7.1.3.1(f),CSCv6|4.5,CSF|PR.AC-1,LEVEL|1S,SWIFT-CSCv1|4.2,SWIFT-CSCv1|5.2"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetAccountSummary"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:SummaryMap/iam:entry[iam:key = 'AccountMFAEnabled']/iam:value\">
      <xsl:for-each select=\"//iam:SummaryMap/iam:entry[iam:key = 'AccountMFAEnabled']\">
        <xsl:text>AccountMFAEnabled : </xsl:text><xsl:value-of select=\"iam:value\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>AccountMFAEnabled : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "AccountMFAEnabled :"
  expect      : "AccountMFAEnabled : 1$"
</custom_item>

<report type:"WARNING">
  description : "1.15 Ensure security questions are registered in the AWS account"
  info        : "The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.

When creating a new AWS account, a default super user is automatically created. This account is referred to as the 'root' account. It is recommended that the use of this account be limited and highly controlled. During events in which the Root password is no longer accessible or the MFA token associated with root is lost/destroyed it is possible, through authentication using secret questions and associated answers, to recover root login access.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following in the AWS Management Console:

1. Login to the AWS Account as root
2. Click on the __ from the top right of the console
3. From the drop-down menu Click _My Account_
4. Scroll down to the 'Configure Security Questions' section
5. Click on 'Edit'
6. Click on each 'Question'
 - From the drop-down select an appropriate question
 - Click on the 'Answer' section
 - Enter an appropriate answer
 - Follow process for all 3 questions
7. Click 'Update' when complete
8. Place Questions and Answers and place in a secure physical location"
  reference   : "CSCv6|16,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/1977"
</report>

<custom_item>
  type        : IAM
  description : "1.16 Ensure IAM policies are attached only to groups or roles"
  info        : "By default, IAM users, groups, and roles have no access to AWS resources. IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended that IAM policies be applied directly to groups and roles but not users.

Assigning privileges at the group or role level reduces the complexity of access management as the number of users grow. Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges."
  solution    : "Perform the following to create an IAM group and assign a policy to it:

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. In the navigation pane, click 'Groups' and then click 'Create New Group' .
3. In the 'Group Name' box, type the name of the group and then click 'Next Step' .
4. In the list of policies, select the check box for each policy that you want to apply to all members of the group. Then click 'Next Step' .
5. Click 'Create Group'

Perform the following to add a user to a given group:

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. In the navigation pane, click 'Groups'
3. Select the group to add a user to
4. Click 'Add Users To Group'
5. Select the users to be added to the group
6. Click 'Add Users'

Perform the following to remove a direct association between a user and policy:

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. In the left navigation pane, click on Users
3. For each user:
 1. Select the user
 2. Click on the 'Permissions' tab
 3. Expand 'Managed Policies'
 4. Click 'Detach Policy' for each policy
 5. Expand 'Inline Policies'
 6. Click 'Remove Policy' for each policy"
  reference   : "800-171|3.1.1,800-53|AC-3,CCE|CCE-78912-3,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSCv6|16,CSF|PR.AC-4,CSF|PR.PT-3,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "ListUserPolicies"
  xsl_stmt    : "<xsl:template match=\"/iam:ListUserPoliciesResponse\">
  <xsl:for-each select=\"iam:ListUserPoliciesResult\">
    <xsl:choose>
      <xsl:when test=\"iam:PolicyNames/iam:member\">
        <xsl:value-of select=\"iam:UserName\"/><xsl:text> has inline policy </xsl:text><xsl:value-of select=\"iam:PolicyNames/iam:member\" /><xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select=\"iam:UserName\"/><xsl:text> has no inline policies&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>"
  not_expect  : ".* has inline policy"
</custom_item>

<report type:"WARNING">
  description : "1.17 Maintain current contact details"
  info        : "Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.

An AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organization; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.

If an AWS account is observed to be behaving in a prohibited or suspicious manner, AWS will attempt to contact the account owner by email and phone using the contact details listed. If this is unsuccessful and the account behavior needs urgent mitigation, proactive measures may be taken, including throttling of traffic between the account exhibiting suspicious behavior and the AWS API endpoints and the Internet. This will result in impaired service to and from the account in question, so it is in both the customers' and AWS' best interests that prompt contact can be established. This is best achieved by setting AWS account contact details to point to resources which have multiple individuals as recipients, such as email aliases and PABX hunt groups.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:\*Billing ).

- Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.
- On the navigation bar, choose your account name, and then choose My Account.
- On the Account Settings page, next to Account Settings, choose Edit.
- Next to the field that you need to update, choose Edit.
- After you have entered your changes, choose Save changes.
- After you have made your changes, choose Done.
- To edit your contact information, under Contact Information, choose Edit.
- For the fields that you want to change, type your updated information, and then choose Update."
  reference   : "CSCv6|6.3,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/1977"
</report>

<report type:"WARNING">
  description : "1.18 Ensure security contact information is registered"
  info        : "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.

Specifying security-specific contact information will help ensure that security advisories sent by AWS reach the team in your organization that is best equipped to respond to them.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following in the AWS Management Console to establish security contact information:

1. Click on your account name at the top right corner of the console.
2. From the drop-down menu Click 'My Account'
3. Scroll down to the 'Alternate Contacts' section
4. Enter contact information in the 'Security' section

Note: Consider specifying an internal email distribution list to ensure emails are regularly monitored by more than one individual."
  reference   : "CCE|CCE-79200-2,CSCv6|19,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/1977"
</report>

<custom_item>
  type        : IAM
  description : "1.20 Ensure a support role has been created to manage incidents with AWS Support"
  info        : "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.

By implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.

All AWS Support plans include an unlimited number of account and billing support cases, with no long-term contracts. Support billing calculations are performed on a per-account basis for all plans. Enterprise Support plan customers have the option to include multiple enabled accounts in an aggregated monthly billing calculation. Monthly charges for the Business and Enterprise support plans are based on each month's AWS usage charges, subject to a monthly minimum, billed in advance."
  solution    : "Using the Amazon unified command line interface:

- Create an IAM role for managing incidents with AWS:
 - Create a trust relationship policy document that allows  to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:

 {
 'Version': '2012-10-17',
 'Statement': [
 {
 'Effect': 'Allow',
 'Principal': {
 'AWS': ''
 },
 'Action': 'sts:AssumeRole'
 }
 ]
 }

- - Create the IAM role using the above trust policy:

 aws iam create-role --role-name  --assume-role-policy-document file:///tmp/TrustPolicy.json

- - Attach 'AWSSupportAccess' managed policy to the created IAM role:

 aws iam attach-role-policy --policy-arn  --role-name"
  reference   : "800-171|3.1.5,800-53|AC-6(1),CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),LEVEL|1S,NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,SWIFT-CSCv1|5.1"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "ListEntitiesForPolicy"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:ListEntitiesForPolicyResult/iam:PolicyRoles/iam:member\">
      <xsl:text>Pass - member is found under PolicyRoles</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>Fail - member is not found under PolicyRoles</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:choose>
    <xsl:when test=\"//iam:ListEntitiesForPolicyResult/iam:PolicyUsers/iam:member\">
      <xsl:text>Pass - member is found under PolicyUsers</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>Fail - member is not found under PolicyUsers</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:choose>
    <xsl:when test=\"//iam:ListEntitiesForPolicyResult/iam:PolicyGroups/iam:member\">
      <xsl:text>Pass - member is found under PolicyGroups</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>Fail - member is not found under PolicyGroups</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "(Pass|Fail)"
  expect      : "Pass - member is found under (PolicyRoles|PolicyUsers|PolicyGroups)"
  policy_arn  : "arn:aws:iam::aws:policy/AWSSupportAccess"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.21 Do not setup access keys during initial user setup for all IAM users that have a console password - access key 1"
  info        : "AWS console defaults the checkbox for creating access keys to enabled. This results in many access keys being generated unnecessarily. In addition to unnecessary credentials, it also generates unnecessary management work in auditing and rotating these keys.

Requiring that additional steps be taken by the user after their profile has been created will give a stronger indication of intent that access keys are [a] necessary for their work and [b] once the access key is established on an account that the keys may be in use somewhere in the organization.

**Note**: Even if it is known the user will need access keys, require them to create the keys themselves or put in a support ticket to have the created as a separate step from user creation."
  solution    : "Perform the following to delete access keys that do not pass the audit:

1. Login to the AWS Management Console:
2. Click 'Services'
3. Click 'IAM'
4. Click on 'Users'
5. Click on 'Security Credentials'
6. As an Administrator
 - Click on 'Delete' for keys that were created at the same time as the user profile but have not been used.
7. As an IAM User
 - Click on 'Delete' for keys that were created at the same time as the user profile but have not been used.

Via CLI

aws iam delete-access-key"
  reference   : "800-171|3.5.2,800-53|IA-5,CSCv6|16,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1NS,NESA|T5.2.1,NESA|T5.2.3,NESA|T5.3.1,NESA|T5.5.2,NIAv2|AM25a,NIAv2|AM25b"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//iam:Member[iam:access_key_1_active = 'true']\">
      <xsl:for-each select=\"//iam:Member[iam:access_key_1_active = 'true']\">
        <xsl:value-of select=\"iam:user\"/><xsl:text> : Access Key 1 Last Used Date = </xsl:text><xsl:value-of select=\"iam:access_key_1_last_used_date\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:value-of select=\"iam:user\"/><xsl:text> : Not Found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : ".+ : Access Key 1 Last Used Date ="
  not_expect  : ".+ : Access Key 1 Last Used Date = N/A"
</custom_item>

<custom_item>
  type        : IAM
  description : "1.21 Do not setup access keys during initial user setup for all IAM users that have a console password - access key 2"
  info        : "AWS console defaults the checkbox for creating access keys to enabled. This results in many access keys being generated unnecessarily. In addition to unnecessary credentials, it also generates unnecessary management work in auditing and rotating these keys.

Requiring that additional steps be taken by the user after their profile has been created will give a stronger indication of intent that access keys are [a] necessary for their work and [b] once the access key is established on an account that the keys may be in use somewhere in the organization.

**Note**: Even if it is known the user will need access keys, require them to create the keys themselves or put in a support ticket to have the created as a separate step from user creation."
  solution    : "Perform the following to delete access keys that do not pass the audit:

1. Login to the AWS Management Console:
2. Click 'Services'
3. Click 'IAM'
4. Click on 'Users'
5. Click on 'Security Credentials'
6. As an Administrator
 - Click on 'Delete' for keys that were created at the same time as the user profile but have not been used.
7. As an IAM User
 - Click on 'Delete' for keys that were created at the same time as the user profile but have not been used.

Via CLI

aws iam delete-access-key"
  reference   : "800-171|3.5.2,800-53|IA-5,CSCv6|16,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|1NS,NESA|T5.2.1,NESA|T5.2.3,NESA|T5.3.1,NESA|T5.5.2,NIAv2|AM25a,NIAv2|AM25b"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "GetCredentialReport"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//Member[access_key_2_active = 'true']\">
      <xsl:for-each select=\"//Member[access_key_2_active = 'true']\">
        <xsl:value-of select=\"user\"/><xsl:text> : Access Key 2 Last Used Date = </xsl:text><xsl:value-of select=\"access_key_2_last_used_date\"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No users found with access_key_2_active</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  expect      : "No users found with access_key_2_active"
</custom_item>

<custom_item>
  type           : IAM
  description    : "1.22 Ensure IAM policies that allow full '*:*' administrative privileges are not created"
  info           : "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant _least privilege_-that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform _only_ those tasks, instead of allowing full administrative privileges.

It's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.

Providing full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.

IAM policies that have a statement with 'Effect': 'Allow' with 'Action': '\*' over 'Resource': '\*' should be removed."
  solution       : "Using the GUI, perform the following to detach the policy that has full administrative privileges:

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
2. In the navigation pane, click Policies and then search for the policy name found in the audit step.
3. Select the policy that needs to be deleted.
4. In the policy action menu, select first 'Detach'
5. Select all Users, Groups, Roles that have this policy attached
6. Click 'Detach Policy'
7. In the policy action menu, select 'Detach'

Using the CLI, perform the following to detach the policy that has full administrative privileges as found in the audit step:

1. Lists all IAM users, groups, and roles that the specified managed policy is attached to.


 aws iam list-entities-for-policy --policy-arn


2. Detach the policy from all IAM Users:

 aws iam detach-user-policy --user-name  --policy-arn


3. Detach the policy from all IAM Groups:

 aws iam detach-group-policy --group-name  --policy-arn


4. Detach the policy from all IAM Roles:

 aws iam detach-role-policy --role-name  --policy-arn"
  reference      : "800-171|3.1.5,800-53|AC-6,CCE|CCE-78912-3,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|4,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "GetPolicyVersion"
  json_transform : '.[] | if ((.Document.Statement[].Effect? == "Allow") and (.Document.Statement[].Resource | .. == "*")  and (.Document.Statement[].Action | .. == "*")) then "full admin privileges allowed on " + .PolicyArn else "" end'
  not_expect     : "full admin privileges allowed on ."
</custom_item>

<custom_item>
  type           : CLOUDTRAIL
  description    : "2.1 Ensure CloudTrail is enabled in all regions - IsMultiRegionTrail"
  info           : "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).

The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,

- ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected

- ensuring that a multi-regions trail exists will ensure that 'Global Service Logging' is enabled for a trail by default to capture recording of events generated on
AWS global services

- for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account

S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:

1. http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html"
  solution       : "Perform the following to enable global (Multi-region) CloudTrail logging:

Via the management Console

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)
2. Click on _Trails_ on the left navigation pane
3. Click 'Get Started Now' , if presented
 - Click 'Add new trail'
 - Enter a trail name in the 'Trail name' box
 - Set the 'Apply trail to all regions' option to 'Yes'
 - Specify an S3 bucket name in the 'S3 bucket' box
 - Click 'Create'
4. If 1 or more trails already exist, select the target trail to enable for global logging
5. Click the edit icon (pencil) next to 'Apply trail to all regions' , Click 'Yes' and Click 'Save'.
6. Click the edit icon (pencil) next to 'Management Events' click 'All' for setting 'Read/Write Events' and Click 'Save'.

Via CLI

aws cloudtrail create-trail --name
 --bucket-name  --is-multi-region-trail
aws cloudtrail update-trail --name
 --is-multi-region-trail


Note: Creating CloudTrail via CLI without providing any overriding options configures 'Management Events' to set 'All' type of 'Read/Writes' by default."
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-78913-1,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeTrails"
  regex          : "IsMultiRegionTrail = "
  expect         : "IsMultiRegionTrail = true"
  json_transform : 'if .[0].trailList == [] then "No Trails defined" else (.[0].trailList[] |
                "\(.Name) - IsMultiRegionTrail = \(.IsMultiRegionTrail)") end'
</custom_item>

<report type:"WARNING">
  description : "2.1 Ensure CloudTrail is enabled in all regions - IsLogging"
  info        : "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).

The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,

- ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected

- ensuring that a multi-regions trail exists will ensure that 'Global Service Logging' is enabled for a trail by default to capture recording of events generated on
AWS global services

- for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account

S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:

1. http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to enable global (Multi-region) CloudTrail logging:

Via the management Console

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)
2. Click on _Trails_ on the left navigation pane
3. Click 'Get Started Now' , if presented
 - Click 'Add new trail'
 - Enter a trail name in the 'Trail name' box
 - Set the 'Apply trail to all regions' option to 'Yes'
 - Specify an S3 bucket name in the 'S3 bucket' box
 - Click 'Create'
4. If 1 or more trails already exist, select the target trail to enable for global logging
5. Click the edit icon (pencil) next to 'Apply trail to all regions' , Click 'Yes' and Click 'Save'.
6. Click the edit icon (pencil) next to 'Management Events' click 'All' for setting 'Read/Write Events' and Click 'Save'.

Via CLI

aws cloudtrail create-trail --name
 --bucket-name  --is-multi-region-trail
aws cloudtrail update-trail --name
 --is-multi-region-trail


Note: Creating CloudTrail via CLI without providing any overriding options configures 'Management Events' to set 'All' type of 'Read/Writes' by default."
  reference   : "CCE|CCE-78913-1,CSCv6|6.2,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/1977"
</report>

<report type:"WARNING">
  description : "2.1 Ensure CloudTrail is enabled in all regions - IncludeManagementEvents"
  info        : "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).

The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,

- ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected

- ensuring that a multi-regions trail exists will ensure that 'Global Service Logging' is enabled for a trail by default to capture recording of events generated on
AWS global services

- for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account

S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:

1. http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to enable global (Multi-region) CloudTrail logging:

Via the management Console

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)
2. Click on _Trails_ on the left navigation pane
3. Click 'Get Started Now' , if presented
 - Click 'Add new trail'
 - Enter a trail name in the 'Trail name' box
 - Set the 'Apply trail to all regions' option to 'Yes'
 - Specify an S3 bucket name in the 'S3 bucket' box
 - Click 'Create'
4. If 1 or more trails already exist, select the target trail to enable for global logging
5. Click the edit icon (pencil) next to 'Apply trail to all regions' , Click 'Yes' and Click 'Save'.
6. Click the edit icon (pencil) next to 'Management Events' click 'All' for setting 'Read/Write Events' and Click 'Save'.

Via CLI

aws cloudtrail create-trail --name
 --bucket-name  --is-multi-region-trail
aws cloudtrail update-trail --name
 --is-multi-region-trail


Note: Creating CloudTrail via CLI without providing any overriding options configures 'Management Events' to set 'All' type of 'Read/Writes' by default."
  reference   : "CCE|CCE-78913-1,CSCv6|6.2,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/1977"
</report>

<report type:"WARNING">
  description : "2.1 Ensure CloudTrail is enabled in all regions - ReadWriteType"
  info        : "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).

The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,

- ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected

- ensuring that a multi-regions trail exists will ensure that 'Global Service Logging' is enabled for a trail by default to capture recording of events generated on
AWS global services

- for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account

S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:

1. http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to enable global (Multi-region) CloudTrail logging:

Via the management Console

1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)
2. Click on _Trails_ on the left navigation pane
3. Click 'Get Started Now' , if presented
 - Click 'Add new trail'
 - Enter a trail name in the 'Trail name' box
 - Set the 'Apply trail to all regions' option to 'Yes'
 - Specify an S3 bucket name in the 'S3 bucket' box
 - Click 'Create'
4. If 1 or more trails already exist, select the target trail to enable for global logging
5. Click the edit icon (pencil) next to 'Apply trail to all regions' , Click 'Yes' and Click 'Save'.
6. Click the edit icon (pencil) next to 'Management Events' click 'All' for setting 'Read/Write Events' and Click 'Save'.

Via CLI

aws cloudtrail create-trail --name
 --bucket-name  --is-multi-region-trail
aws cloudtrail update-trail --name
 --is-multi-region-trail


Note: Creating CloudTrail via CLI without providing any overriding options configures 'Management Events' to set 'All' type of 'Read/Writes' by default."
  reference   : "CCE|CCE-78913-1,CSCv6|6.2,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/1977"
</report>

<custom_item>
  type           : CLOUDTRAIL
  description    : "2.3 Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible"
  info           : "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevents public access to the CloudTrail logs.

Allowing public access to CloudTrail log content may aid an adversary in identifying weaknesses in the affected account's use or configuration.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Perform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:

1. Go to Amazon S3 console at [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home)
2. Right-click on the bucket and click Properties
3. In the 'Properties' pane, click the 'Permissions' tab.
4. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.
5. Select the row that grants permission to 'Everyone' or 'Any Authenticated User'
6. Uncheck all the permissions granted to 'Everyone' or 'Any Authenticated User' (click 'x' to delete the row).
7. Click 'Save' to save the ACL.
8. If the 'Edit bucket policy' button is present, click it.
9. Remove any 'Statement' having an 'Effect' set to 'Allow' and a 'Principal' set to '\*' or {'AWS' : '\*'}."
  reference      : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CCE|CCE-78915-6,CN-L3|8.1.4.3(d),CSCv6|14.6,CSF|PR.PT-1,ITSG-33|AU-9(4),LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeTrails"
  not_expect     : ".+"
  json_transform : 'if .[0].trailList == [] then "No Trails defined" else (.[0].trailList[] |
                "\(.Name) - S3 Bucket = \(.S3BucketName)") end'
  severity       : MEDIUM
</custom_item>

<custom_item>
  type           : CLOUDTRAIL
  description    : "2.4 Ensure CloudTrail trails are integrated with CloudWatch Logs - 'log group is configured'"
  info           : "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.

Note: The intent of this recommendation is to ensure AWS account activity is being captured, monitored, and appropriately alarmed on. CloudWatch Logs is a native way to accomplish this using AWS services but does not preclude the use of an alternate solution.

Sending CloudTrail logs to CloudWatch Logs will facilitate real-time and historic activity logging based on user, API, resource, and IP address, and provides opportunity to establish alarms and notifications for anomalous or sensitivity account activity.

Note: By default, CloudWatch Logs will store Logs indefinitely unless a specific retention period is defined for the log group. When choosing the number of days to retain, keep in mind the average days it takes an organization to realize they have been breached is 210 days (at the time of this writing). Since additional time is required to research a breach, a minimum 365 day retention policy allows time for detection and research. You may also wish to archive the logs to a cheaper storage service rather than simply deleting them. See the following AWS resource to manage CloudWatch Logs retention periods:

1. http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/SettingLogRetention.html"
  solution       : "Perform the following to establish the prescribed state:

Via the AWS management Console

1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail/](https://console.aws.amazon.com/cloudtrail/)
2. Under All Buckets, click on the target bucket you wish to evaluate
3. Click Properties on the top right of the console
4. Click 'Trails' in the left menu
5. Click on each trail where no 'CloudWatch Logs' are defined
6. Go to the 'CloudWatch Logs' section and click on 'Configure'
7. Define a new or select an existing log group
8. Click on 'Continue'
9. Configure IAM Role which will deliver CloudTrail events to CloudWatch Logs
 - Create/Select an 'IAM Role' and 'Policy Name'
 - Click 'Allow' to continue

Via CLI

aws cloudtrail update-trail --name
 --cloudwatch-logs-log-group-arn  --cloudwatch-logs-role-arn"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-78916-4,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSCv6|6.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeTrails"
  regex          : "CloudWatchLogsLogGroupArn = "
  expect         : "CloudWatchLogsLogGroupArn = arn:"
  json_transform : 'if .[0].trailList == [] then "No Trails defined" else (.[0].trailList[] |
                "\(.Name) - CloudWatchLogsLogGroupArn = \(.CloudWatchLogsLogGroupArn // "No Log Group Defined")") end'
</custom_item>

<report type:"WARNING">
  description : "2.4 Ensure CloudTrail trails are integrated with CloudWatch Logs - 'LogWatch Log Delivery'"
  info        : "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.

Note: The intent of this recommendation is to ensure AWS account activity is being captured, monitored, and appropriately alarmed on. CloudWatch Logs is a native way to accomplish this using AWS services but does not preclude the use of an alternate solution.

Sending CloudTrail logs to CloudWatch Logs will facilitate real-time and historic activity logging based on user, API, resource, and IP address, and provides opportunity to establish alarms and notifications for anomalous or sensitivity account activity.

Note: By default, CloudWatch Logs will store Logs indefinitely unless a specific retention period is defined for the log group. When choosing the number of days to retain, keep in mind the average days it takes an organization to realize they have been breached is 210 days (at the time of this writing). Since additional time is required to research a breach, a minimum 365 day retention policy allows time for detection and research. You may also wish to archive the logs to a cheaper storage service rather than simply deleting them. See the following AWS resource to manage CloudWatch Logs retention periods:

1. http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/SettingLogRetention.html

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to establish the prescribed state:

Via the AWS management Console

1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail/](https://console.aws.amazon.com/cloudtrail/)
2. Under All Buckets, click on the target bucket you wish to evaluate
3. Click Properties on the top right of the console
4. Click 'Trails' in the left menu
5. Click on each trail where no 'CloudWatch Logs' are defined
6. Go to the 'CloudWatch Logs' section and click on 'Configure'
7. Define a new or select an existing log group
8. Click on 'Continue'
9. Configure IAM Role which will deliver CloudTrail events to CloudWatch Logs
 - Create/Select an 'IAM Role' and 'Policy Name'
 - Click 'Allow' to continue

Via CLI

aws cloudtrail update-trail --name
 --cloudwatch-logs-log-group-arn  --cloudwatch-logs-role-arn"
  reference   : "CCE|CCE-78916-4,CSCv6|6.2,CSCv6|6.5,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/1977"
</report>

<custom_item>
  type           : CONFIG
  description    : "2.5 Ensure AWS Config is enabled in all regions - 'Record all resources supported in this region'"
  info           : "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.

The AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing."
  solution       : "To implement AWS Config configuration:

Via AWS Management Console:

1. Select the region you want to focus on in the top right of the console
2. Click 'Services'
3. Click 'Config'
4. Define which resources you want to record in the selected region
5. Choose to include global resources (IAM resources)
6. Specify an S3 bucket in the same account or in another managed AWS account
7. Create an SNS Topic from the same AWS account or another managed AWS account

Via AWS Command Line Interface:
1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the [AWS Config Service prerequisites](http://docs.aws.amazon.com/config/latest/developerguide/gs-cli-prereq.html).
2. Run this command to set up the configuration recorder

aws configservice subscribe --s3-bucket my-config-bucket --sns-topic arn:aws:sns:us-east-1:012345678912:my-config-notice --iam-role arn:aws:iam::012345678912:role/myConfigRole

3. Run this command to start the configuration recorder:

start-configuration-recorder --configuration-recorder-name"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-78917-2,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|1.4,CSCv6|11.2,CSCv6|16.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeConfigurationRecorders"
  regex          : "Record all resources supported in this region ="
  expect         : "Record all resources supported in this region = true"
  json_transform : '.[] | .ConfigurationRecorders[] |
                "Name: " + .name + " - Record all resources supported in this region = " + (.recordingGroup.allSupported | tostring)'
</custom_item>

<custom_item>
  type           : CONFIG
  description    : "2.5 Ensure AWS Config is enabled in all regions - 'Include global resources'"
  info           : "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.

The AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing."
  solution       : "To implement AWS Config configuration:

Via AWS Management Console:

1. Select the region you want to focus on in the top right of the console
2. Click 'Services'
3. Click 'Config'
4. Define which resources you want to record in the selected region
5. Choose to include global resources (IAM resources)
6. Specify an S3 bucket in the same account or in another managed AWS account
7. Create an SNS Topic from the same AWS account or another managed AWS account

Via AWS Command Line Interface:
1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the [AWS Config Service prerequisites](http://docs.aws.amazon.com/config/latest/developerguide/gs-cli-prereq.html).
2. Run this command to set up the configuration recorder

aws configservice subscribe --s3-bucket my-config-bucket --sns-topic arn:aws:sns:us-east-1:012345678912:my-config-notice --iam-role arn:aws:iam::012345678912:role/myConfigRole

3. Run this command to start the configuration recorder:

start-configuration-recorder --configuration-recorder-name"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-78917-2,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|1.4,CSCv6|11.2,CSCv6|16.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeConfigurationRecorders"
  regex          : "Include global resources ="
  expect         : "Include global resources = true"
  json_transform : '.[] | .ConfigurationRecorders[] |
                "Name: " + .name + " - Include global resources = " + (.recordingGroup.includeGlobalResourceTypes | tostring)'
</custom_item>

<custom_item>
  type           : CONFIG
  description    : "2.5 Ensure AWS Config is enabled in all regions - 'Review defined S3 Bucket'"
  info           : "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.

The AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing."
  solution       : "To implement AWS Config configuration:

Via AWS Management Console:

1. Select the region you want to focus on in the top right of the console
2. Click 'Services'
3. Click 'Config'
4. Define which resources you want to record in the selected region
5. Choose to include global resources (IAM resources)
6. Specify an S3 bucket in the same account or in another managed AWS account
7. Create an SNS Topic from the same AWS account or another managed AWS account

Via AWS Command Line Interface:
1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the [AWS Config Service prerequisites](http://docs.aws.amazon.com/config/latest/developerguide/gs-cli-prereq.html).
2. Run this command to set up the configuration recorder

aws configservice subscribe --s3-bucket my-config-bucket --sns-topic arn:aws:sns:us-east-1:012345678912:my-config-notice --iam-role arn:aws:iam::012345678912:role/myConfigRole

3. Run this command to start the configuration recorder:

start-configuration-recorder --configuration-recorder-name"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-78917-2,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|1.4,CSCv6|11.2,CSCv6|16.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeDeliveryChannels"
  regex          : "S3 bucket ="
  expect         : "S3 bucket = [^\s]+"
  json_transform : '.[] | .DeliveryChannels[] |
                "\(.name) - S3 Bucket = \(.s3BucketName // "No S3 Bucket Defined")"'
</custom_item>

<custom_item>
  type           : CONFIG
  description    : "2.5 Ensure AWS Config is enabled in all regions - 'Review defined SNS Topic'"
  info           : "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.

The AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing."
  solution       : "To implement AWS Config configuration:

Via AWS Management Console:

1. Select the region you want to focus on in the top right of the console
2. Click 'Services'
3. Click 'Config'
4. Define which resources you want to record in the selected region
5. Choose to include global resources (IAM resources)
6. Specify an S3 bucket in the same account or in another managed AWS account
7. Create an SNS Topic from the same AWS account or another managed AWS account

Via AWS Command Line Interface:
1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the [AWS Config Service prerequisites](http://docs.aws.amazon.com/config/latest/developerguide/gs-cli-prereq.html).
2. Run this command to set up the configuration recorder

aws configservice subscribe --s3-bucket my-config-bucket --sns-topic arn:aws:sns:us-east-1:012345678912:my-config-notice --iam-role arn:aws:iam::012345678912:role/myConfigRole

3. Run this command to start the configuration recorder:

start-configuration-recorder --configuration-recorder-name"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-78917-2,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|1.4,CSCv6|11.2,CSCv6|16.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeDeliveryChannels"
  regex          : "SNS Topic ARN ="
  expect         : "SNS Topic ARN = arn:"
  json_transform : '.[] | .DeliveryChannels[] |
                "\(.name) - SNS Topic ARN = \(.snsTopicARN // "No SNS Topic Defined")"'
</custom_item>

<report type:"WARNING">
  description : "2.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket"
  info        : "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.

By enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within an target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Perform the following to enable S3 bucket logging:

Via the Management Console

1. Sign in to the AWS Management Console and open the S3 console at [https://console.aws.amazon.com/s3](https://console.aws.amazon.com/s3).
2. Under 'All Buckets' click on the target S3 bucket
3. Click on 'Properties' in the top right of the console
4. Under 'Bucket:'  click on 'Logging'
5. Configure bucket logging
 1. Click on 'Enabled' checkbox
 2. Select Target Bucket from list
 3. Enter a Target Prefix
6. Click 'Save'"
  reference   : "CCE|CCE-78918-0,CSCv6|14.9,CSCv6|6.2,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/1977"
</report>

<custom_item>
  type           : LOGS
  description    : "3.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.

Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.

This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.

If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.

In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') || ($.errorCode = 'AccessDenied*') }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79186-3,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|6.5,CSCv6|6.7,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\s*\$\.errorCode\s*=\s*\\\"*\*UnauthorizedOperation\\\"\s*\)\s*\|\|\s*\(\s*\$\.errorCode\s*=\s*\\\"*AccessDenied\*\\\"*\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.

Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.

This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.

If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.

In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') || ($.errorCode = 'AccessDenied*') }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

     --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @API_METRIC_NAME@ replaced with "UnauthorizedAPICalls" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='UnauthorizedAPICalls'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @API_METRIC_NAME@ replaced with "UnauthorizedAPICalls" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric UnauthorizedAPICalls has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "3.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'alarm exists'"
      aws_action  : "DescribeAlarms"
# Note: Variable @API_METRIC_NAME@ replaced with "UnauthorizedAPICalls" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='UnauthorizedAPICalls'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @API_METRIC_NAME@ replaced with "UnauthorizedAPICalls" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric UnauthorizedAPICalls has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "3.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'subscription exists'"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.

        Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.

        This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.

        If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.

        In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.1 Ensure a log metric filter and alarm exist for unauthorized API calls - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.

        Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.

        This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.

        If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.

        In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') || ($.errorCode = 'AccessDenied*') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

           --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "3.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).

Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79187-1,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventName\s*=\s*\\\"ConsoleLogin\\\"\)\s*\&\&\s*\(\$\.additionalEventData\.MFAUsed\s*\!\=\s*\\\"Yes\\\"\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).

Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79187-1,CSCv6|16,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @MFA_METRIC_NAME@ replaced with "ManagementConsoleLoginWithoutMFA" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='ManagementConsoleLoginWithoutMFA'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @MFA_METRIC_NAME@ replaced with "ManagementConsoleLoginWithoutMFA" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric ManagementConsoleLoginWithoutMFA has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @MFA_METRIC_NAME@ replaced with "ManagementConsoleLoginWithoutMFA" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='ManagementConsoleLoginWithoutMFA'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @MFA_METRIC_NAME@ replaced with "ManagementConsoleLoginWithoutMFA" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric ManagementConsoleLoginWithoutMFA has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).

Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).

Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

      	 --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "3.3 Ensure a log metric filter and alarm exist for usage of 'root' account - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.

Monitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for 'Root' account usage and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name '' --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ $.userIdentity.type = 'Root' && $.userIdentity.invokedBy NOT EXISTS && $.eventType != 'AwsServiceEvent' }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79188-9,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|4.9,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\$\.userIdentity\.type\s*=\s*\\\"Root\\\"\s*\&\&\s*\$\.userIdentity\.invokedBy\s*NOT\s*EXISTS\s*\&\&\s*\$\.eventType\s*\!=\s*\\\"AwsServiceEvent\\\"\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.3 Ensure a log metric filter and alarm exist for usage of 'root' account - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.

Monitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for 'Root' account usage and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name '' --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ $.userIdentity.type = 'Root' && $.userIdentity.invokedBy NOT EXISTS && $.eventType != 'AwsServiceEvent' }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79188-9,CSCv6|4.9,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @ROOT_METRIC_NAME@ replaced with "RootAccountUsage" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='RootAccountUsage'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ROOT_METRIC_NAME@ replaced with "RootAccountUsage" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric RootAccountUsage has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @ROOT_METRIC_NAME@ replaced with "RootAccountUsage" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='RootAccountUsage'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ROOT_METRIC_NAME@ replaced with "RootAccountUsage" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric RootAccountUsage has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.3 Ensure a log metric filter and alarm exist for usage of 'root' account - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.

Monitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.3 Ensure a log metric filter and alarm exist for usage of 'root' account - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.

Monitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

      	 --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "3.4 Ensure a log metric filter and alarm exist for IAM policy changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for IAM policy changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name '' --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79189-7,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\s*\$\.eventName\s*=\s*DeleteGroupPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DeleteRolePolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DeleteUserPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*PutGroupPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*PutRolePolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*PutUserPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*CreatePolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DeletePolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*CreatePolicyVersion\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DeletePolicyVersion\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*AttachRolePolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DetachRolePolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*AttachUserPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DetachUserPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*AttachGroupPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DetachGroupPolicy\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.4 Ensure a log metric filter and alarm exist for IAM policy changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for IAM policy changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name '' --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79189-7,CSCv6|16,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @IAM_METRIC_NAME@ replaced with "IAMPolicyChanges" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='IAMPolicyChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @IAM_METRIC_NAME@ replaced with "IAMPolicyChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric IAMPolicyChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @IAM_METRIC_NAME@ replaced with "IAMPolicyChanges" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='IAMPolicyChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @IAM_METRIC_NAME@ replaced with "IAMPolicyChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric IAMPolicyChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.4 Ensure a log metric filter and alarm exist for IAM policy changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.4 Ensure a log metric filter and alarm exist for IAM policy changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

      	 --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "3.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.

Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79190-5,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|6,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\s*\$\.eventName\s*=\s*CreateTrail\s*\)\s*\s*\|\|\s*\s*\(\s*\$\.eventName\s*=\s*UpdateTrail\s*\)\s*\s*\|\|\s*\s*\(\s*\$\.eventName\s*=\s*DeleteTrail\s*\)\s*\s*\|\|\s*\s*\(\s*\$\.eventName\s*=\s*StartLogging\s*\)\s*\s*\|\|\s*\s*\(\s*\$\.eventName\s*=\s*StopLogging\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.

Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79190-5,CSCv6|6,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @CLOUDTRAIL_METRIC_NAME@ replaced with "CloudTrailConfigChanges" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='CloudTrailConfigChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @CLOUDTRAIL_METRIC_NAME@ replaced with "CloudTrailConfigChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric CloudTrailConfigChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @CLOUDTRAIL_METRIC_NAME@ replaced with "CloudTrailConfigChanges" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='CloudTrailConfigChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @CLOUDTRAIL_METRIC_NAME@ replaced with "CloudTrailConfigChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric CloudTrailConfigChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.

Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.

Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

      	 --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "3.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.

Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79193-9,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|14,CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\s*\$\.eventSource\s*=\s*s3\.amazonaws\.com\s*\)\s*\&\&\s*\(\s*\s*\(\s*\$\.eventName\s*=\s*PutBucketAcl\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*PutBucketPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*PutBucketCors\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*PutBucketLifecycle\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*PutBucketReplication\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DeleteBucketPolicy\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DeleteBucketCors\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DeleteBucketLifecycle\s*\)\s*\|\|\s*\(\s*\$\.eventName\s*=\s*DeleteBucketReplication\s*\)\s*\s*\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.

Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79193-9,CSCv6|14,CSCv6|6.2,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @S3_METRIC_NAME@ replaced with "S3BucketPolicyChanges" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='S3BucketPolicyChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @S3_METRIC_NAME@ replaced with "S3BucketPolicyChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric S3BucketPolicyChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @S3_METRIC_NAME@ replaced with "S3BucketPolicyChanges" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='S3BucketPolicyChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @S3_METRIC_NAME@ replaced with "S3BucketPolicyChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric S3BucketPolicyChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.

Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.

Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

      	 --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "3.12 Ensure a log metric filter and alarm exist for changes to network gateways - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.

Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for network gateways changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79197-0,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|11.3,CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventName\s*=\s*CreateCustomerGateway\)\s*\|\|\s*\(\$\.eventName\s*=\s*DeleteCustomerGateway\)\s*\|\|\s*\(\$\.eventName\s*=\s*AttachInternetGateway\)\s*\|\|\s*\(\$\.eventName\s*=\s*CreateInternetGateway\)\s*\|\|\s*\(\$\.eventName\s*=\s*DeleteInternetGateway\)\s*\|\|\s*\(\$\.eventName\s*=\s*DetachInternetGateway\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.12 Ensure a log metric filter and alarm exist for changes to network gateways - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.

Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for network gateways changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79197-0,CSCv6|11.3,CSCv6|6.2,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @GATEWAY_METRIC_NAME@ replaced with "NetworkGatewayChanges" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='NetworkGatewayChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @GATEWAY_METRIC_NAME@ replaced with "NetworkGatewayChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric NetworkGatewayChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @GATEWAY_METRIC_NAME@ replaced with "NetworkGatewayChanges" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='NetworkGatewayChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @GATEWAY_METRIC_NAME@ replaced with "NetworkGatewayChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric NetworkGatewayChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.12 Ensure a log metric filter and alarm exist for changes to network gateways - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.

Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.12 Ensure a log metric filter and alarm exist for changes to network gateways - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.

Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

      	 --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "3.13 Ensure a log metric filter and alarm exist for route table changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.

Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for route table changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79198-8,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|11.3,CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventName\s*=\s*CreateRoute\)\s*\|\|\s*\(\$\.eventName\s*=\s*CreateRouteTable\)\s*\|\|\s*\(\$\.eventName\s*=\s*ReplaceRoute\)\s*\|\|\s*\(\$\.eventName\s*=\s*ReplaceRouteTableAssociation\)\s*\|\|\s*\(\$\.eventName\s*=\s*DeleteRouteTable\)\s*\|\|\s*\(\$\.eventName\s*=\s*DeleteRoute\)\s*\|\|\s*\(\$\.eventName\s*=\s*DisassociateRouteTable\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.13 Ensure a log metric filter and alarm exist for route table changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.

Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for route table changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79198-8,CSCv6|11.3,CSCv6|6.2,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @ROUTE_TABLE_METRIC_NAME@ replaced with "RouteTableChanges" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='RouteTableChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @ROUTE_TABLE_METRIC_NAME@ replaced with "RouteTableChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric RouteTableChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @ROUTE_TABLE_METRIC_NAME@ replaced with "RouteTableChanges" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='RouteTableChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @ROUTE_TABLE_METRIC_NAME@ replaced with "RouteTableChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric RouteTableChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.13 Ensure a log metric filter and alarm exist for route table changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.

Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.13 Ensure a log metric filter and alarm exist for route table changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.

Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

      	 --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type           : LOGS
  description    : "3.14 Ensure a log metric filter and alarm exist for VPC changes - 'metric filter exists'"
  info           : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
  solution       : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for VPC changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CCE|CCE-79199-6,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv6|5.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/1977"
  aws_action     : "DescribeMetricFilters"
  json_transform : '.[] | .metricFilters[] | .filterPattern'
  expect         : '\{\s*\(\$\.eventName\s*=\s*CreateVpc\)\s*\|\|\s*\(\$\.eventName\s*=\s*DeleteVpc\)\s*\|\|\s*\(\$\.eventName\s*=\s*ModifyVpcAttribute\)\s*\|\|\s*\(\$\.eventName\s*=\s*AcceptVpcPeeringConnection\)\s*\|\|\s*\(\$\.eventName\s*=\s*CreateVpcPeeringConnection\)\s*\|\|\s*\(\$\.eventName\s*=\s*DeleteVpcPeeringConnection\)\s*\|\|\s*\(\$\.eventName\s*=\s*RejectVpcPeeringConnection\)\s*\|\|\s*\(\$\.eventName\s*=\s*AttachClassicLinkVpc\)\s*\|\|\s*\(\$\.eventName\s*=\s*DetachClassicLinkVpc\)\s*\|\|\s*\(\$\.eventName\s*=\s*DisableVpcClassicLink\)\s*\|\|\s*\(\$\.eventName\s*=\s*EnableVpcClassicLink\)\s*\}'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "3.14 Ensure a log metric filter and alarm exist for VPC changes - 'alarm exists'"
  info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
  solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

1. Create a metric filter based on filter pattern provided which checks for VPC changes and the '' taken from audit step 1.

aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'


**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

2. Create an SNS topic that the alarm will notify

aws sns create-topic --name


**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

3. Create an SNS subscription to the topic created in step 2

aws sns subscribe --topic-arn  --protocol

	 --notification-endpoint


**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
  reference   : "800-53|AU-5,CCE|CCE-79199-6,CSCv6|5.5,CSF|PR.PT-1,ITSG-33|AU-5,LEVEL|1S,NIAv2|GS7f"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeAlarms"
# Note: Variable @VPC_METRIC_NAME@ replaced with "VPCChanges" in field "xsl_stmt".
  xsl_stmt    : "<xsl:template match=\"/\">
<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
<xsl:if test=\"cloudwatch:MetricName='VPCChanges'\">
Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
</xsl:if>
</xsl:for-each>
</xsl:template>"
# Note: Variable @VPC_METRIC_NAME@ replaced with "VPCChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
  expect      : "Metric VPCChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CLOUDWATCH
      description : "alarm exists"
      aws_action  : "DescribeAlarms"
# Note: Variable @VPC_METRIC_NAME@ replaced with "VPCChanges" in field "xsl_stmt".
      xsl_stmt    : "<xsl:template match=\"/\">
        <xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">
        <xsl:if test=\"cloudwatch:MetricName='VPCChanges'\">
        Metric <xsl:value-of select=\"cloudwatch:MetricName\"/> has alarm action <xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\" />
        </xsl:if>
        </xsl:for-each>
        </xsl:template>"
# Note: Variable @VPC_METRIC_NAME@ replaced with "VPCChanges" in field "expect".
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Metric VPCChanges has alarm action arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark"
    </custom_item>

    <custom_item>
      type        : SNS
      description : "subscription exists"
      aws_action  : "ListSubscriptions"
      xsl_stmt    : "<xsl:template match=\"/\"><xsl:for-each select=\"//sns:ListSubscriptionsResult/sns:Subscriptions/sns:member\">Subscription found: <xsl:value-of select=\"sns:TopicArn\" /> with endpoint of <xsl:value-of select=\"sns:Endpoint\"/></xsl:for-each></xsl:template>"
# Note: Variable @ALARM_ARN@ replaced with "arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark" in field "expect".
      expect      : "Subscription found: arn:aws:sns:us-east-1:757334363917:CIS-Foundations-Benchmark with endpoint of .*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.14 Ensure a log metric filter and alarm exist for VPC changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "3.14 Ensure a log metric filter and alarm exist for VPC changes - 'subscription exists'"
      info        : "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.

Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact."
      solution    : "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:

      1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the '' taken from audit step 1.

      aws logs put-metric-filter --log-group-name  --filter-name '' --metric-transformations metricName= '' ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') && ($.additionalEventData.MFAUsed != 'Yes') }'


      **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.

      2. Create an SNS topic that the alarm will notify

      aws sns create-topic --name


      **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.

      3. Create an SNS subscription to the topic created in step 2

      aws sns subscribe --topic-arn  --protocol

      	 --notification-endpoint


      **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.

      4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2

      aws cloudwatch put-metric-alarm --alarm-name '' --metric-name '' --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9,CCE|CCE-79186-3,CSCv6|6.5,CSCv6|6.7,CSF|PR.PT-1,ITSG-33|AU-9,LEVEL|1S,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/1977"
    </report>
  </else>
</if>

<custom_item>
  type        : EC2
  description : "4.1 Ensure no security groups allow ingress from 0.0.0.0/0 to port 22"
  info        : "Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port '22' .

Removing unfettered connectivity to remote console services, such as SSH, reduces a server's exposure to risk.

For updating an existing environment, care should be taken to ensure that administrators currently relying on an existing ingress from 0.0.0.0/0 have access to ports 22 and/or 3389 through another security group."
  solution    : "Perform the following to implement the prescribed state:

1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)
2. In the left pane, click 'Security Groups'
3. For each security group, perform the following:
1. Select the security group
2. Click the 'Inbound Rules' tab
3. Identify the rules to be removed
4. Click the 'x' in the 'Remove' column
5. Click 'Save'"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CN-L3|7.1.2.2(h),CN-L3|7.1.3.7(a),CSCv6|9.2,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NESA|T4.2.1,NESA|T4.5.1,NESA|T5.1.1,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.7.1,NESA|T5.7.2,NIAv2|GS7c,SWIFT-CSCv1|2.6,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//ec2:securityGroupInfo/ec2:item\">
      <xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item\">
        <xsl:variable name=\"groupname\" select=\"ec2:groupDescription\"/>
        <xsl:for-each select=\"ec2:ipPermissions/ec2:item\">
          <xsl:text>Security Group: </xsl:text><xsl:value-of select=\"$groupname\" /><xsl:text> - Source: </xsl:text><xsl:value-of select=\"ec2:ipRanges/ec2:item/ec2:cidrIp\"/><xsl:text> - Port: </xsl:text><xsl:value-of select=\"ec2:toPort\"/><xsl:text>&#10;</xsl:text>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No security groups found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "Security Group: .* - Source: .*"
  not_expect  : "Source: 0.0.0.0.* Port: (22|(([1-9]|1[0-9]|2[0-2])-(2[2-9]|[3-9][0-9]|[1-9][0-9][0-9]+)))$"
</custom_item>

<custom_item>
  type        : EC2
  description : "4.2 Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389"
  info        : "Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port '3389' .

Removing unfettered connectivity to remote console services, such as RDP, reduces a server's exposure to risk.

For updating an existing environment, care should be taken to ensure that administrators currently relying on an existing ingress from 0.0.0.0/0 have access to ports 22 and/or 3389 through another security group."
  solution    : "Perform the following to implement the prescribed state:

1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)
2. In the left pane, click 'Security Groups'
3. For each security group, perform the following:
1. Select the security group
2. Click the 'Inbound Rules' tab
3. Identify the rules to be removed
4. Click the 'x' in the 'Remove' column
5. Click 'Save'"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CN-L3|7.1.2.2(h),CN-L3|7.1.3.7(a),CSCv6|9.2,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NESA|T4.2.1,NESA|T4.5.1,NESA|T5.1.1,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.7.1,NESA|T5.7.2,NIAv2|GS7c,SWIFT-CSCv1|2.6,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/1977"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">
  <xsl:choose>
    <xsl:when test=\"//ec2:securityGroupInfo/ec2:item\">
      <xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item\">
        <xsl:variable name=\"groupname\" select=\"ec2:groupDescription\"/>
        <xsl:for-each select=\"ec2:ipPermissions/ec2:item\">
          <xsl:text>Security Group: </xsl:text><xsl:value-of select=\"$groupname\" /><xsl:text> - Source: </xsl:text><xsl:value-of select=\"ec2:ipRanges/ec2:item/ec2:cidrIp\"/><xsl:text> - Port: </xsl:text><xsl:value-of select=\"ec2:toPort\"/><xsl:text>&#10;</xsl:text>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>No security groups found</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>"
  regex       : "Security Group: .* - Source: .*"
  not_expect  : "Source: 0.0.0.0.* Port: (3389|(([1-9]|[1-9][0-9][0-9]?|[1-2][0-9][0-9][0-9]|3[1-2][0-9][0-9]|33[0-8][0-9])-(3389|339[0-9]|3[4-9][0-9][0-9]|[4-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9])))$"
</custom_item>

</check_type>
