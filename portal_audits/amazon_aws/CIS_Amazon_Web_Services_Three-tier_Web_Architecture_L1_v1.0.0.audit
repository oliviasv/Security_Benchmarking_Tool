#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.4 $
# $Date: 2020/04/14 $
#
# description : This .audit is designed against the CIS Amazon Web Services Three-tier Web Architecture Benchmark Version 1.0.0.
#
# Ref         : https://workbench.cisecurity.org/files/260
#
#<ui_metadata>
#<display_name>CIS Amazon Web Services Three-tier Web Architecture L1 1.0.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Amazon Web Services Three-teir Web Architecture L1</name>
#  <version>1.0.0</version>
#</spec>
#<labels>amazon_aws,amazon,aws,security,cis</labels>
#<benchmark_refs>LEVEL,CSCv6,CCE</benchmark_refs>
#<variables>
#  <variable>
#    <name>WEB_TIER_TAG</name>
#    <default>WEB_TIER_TAG</default>
#    <description>The tag name associated with the Web-tier environment.</description>
#    <info>Web-tier tag name</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_TAG_VALUE</name>
#    <default>WEB_TIER_TAG_VALUE</default>
#    <description>The tag value name associated with the Web-tier environment</description>
#    <info>Web-tier tag value name</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_TAG</name>
#    <default>APP_TIER_TAG</default>
#    <description>The tag name associated with the App-tier environment.</description>
#    <info>App-tier tag name</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_TAG_VALUE</name>
#    <default>APP_TIER_TAG_VALUE</default>
#    <description>The tag value name associated with the App-tier environment</description>
#    <info>App-tier tag value name</info>
#  </variable>
#  <variable>
#    <name>DATA_TIER_TAG</name>
#    <default>DATA_TIER_TAG</default>
#    <description>The tag name associated with the Data-tier environment.</description>
#    <info>Data-tier tag name</info>
#  </variable>
#  <variable>
#    <name>DATA_TIER_TAG_VALUE</name>
#    <default>DATA_TIER_TAG_VALUE</default>
#    <description>The tag value name associated with the Data-tier environment</description>
#    <info>Data-tier tag value name</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_ELB</name>
#    <default>WEB_TIER_ELB</default>
#    <description>Designated Load Balancer Name for your Web-tier environment.</description>
#    <info>Web-tier Load Balancer Name</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_ELB</name>
#    <default>APP_TIER_ELB</default>
#    <description>Designated Load Balancer Name for your App-tier environment.</description>
#    <info>APP-tier Load Balancer Name</info>
#  </variable>
#  <variable>
#    <name>S3_BUCKET_NAME</name>
#    <default>S3_BUCKET_NAME</default>
#    <description>Your S3 Amazon bucket name.</description>
#    <info>1.16 - S3 Bucket Name</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_ROLE</name>
#    <default>WEB_TIER_ROLE</default>
#    <description>The name of the role associated with the Web-tier policy.</description>
#    <info>2.1 - Web-tier Role Name</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_ROLE_POLICY</name>
#    <default>WEB_TIER_ROLE_POLICY</default>
#    <description>The name of the policy document associated with the Web-tier.</description>
#    <info>2.1 - Web-teir Role Policy</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_ROLE</name>
#    <default>APP_TIER_ROLE</default>
#    <description>The name of the role associated with the App-tier policy.</description>
#    <info>2.2 - App-tier Role Name</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_ROLE_POLICY</name>
#    <default>APP_TIER_ROLE_POLICY</default>
#    <description>The name of the policy document associated with the App-tier.</description>
#    <info>2.2 - App-teir Role Policy</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_LAUNCH_ROLE_NAME</name>
#    <default>WEB_TIER_LAUNCH_ROLE_NAME</default>
#    <description>The Launch Configuration Role name associated with the Web-tier.</description>
#    <info>2.5 - Web-teir Launch Configuration Role Name</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_LAUNCH_ROLE_NAME</name>
#    <default>APP_TIER_LAUNCH_ROLE_NAME</default>
#    <description>The Launch Configuration Role name associated with the App-tier.</description>
#    <info>2.6 - App-teir Launch Configuration Role Name</info>
#  </variable>
#  <variable>
#    <name>ADMIN_GROUP_NAME</name>
#    <default>ADMIN_GROUP_NAME</default>
#    <description>The Admin Group name associated with your environment.</description>
#    <info>Admin Group Name</info>
#  </variable>
#  <variable>
#    <name>ADMIN_POLICY_NAME</name>
#    <default>ADMIN_POLICY_NAME</default>
#    <description>The Admin Policy document name for Admin permissions.</description>
#    <info>Admin Policy Name</info>
#  </variable>
#  <variable>
#    <name>ADMIN_POLICY_ARN</name>
#    <default>ADMIN_POLICY_ARN</default>
#    <description>The Admin Policy ARN associated with your Admin Policy.</description>
#    <info>Admin Policy ARN</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_LAUNCH_CONFIG</name>
#    <default>WEB_TIER_LAUNCH_CONFIG</default>
#    <description>The Launch Configuration Name associated with your Web-tier environment.</description>
#    <info>3.3 - Web-tier Launch Configuration Name</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_LAUNCH_CONFIG</name>
#    <default>APP_TIER_LAUNCH_CONFIG</default>
#    <description>The Launch Configuration Name associated with your App-tier environment.</description>
#    <info>3.4 - App-tier Launch Configuration Name</info>
#  </variable>
#  <variable>
#    <name>DB_INSTANCE_ARN</name>
#    <default>DB_INSTANCE_ARN</default>
#    <description>The Database Instance Arn associated with your Database-tier environment.</description>
#    <info>Database Instance Arn</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_AUTOSCALING_ELB</name>
#    <default>WEB_TIER_AUTOSCALING_ELB</default>
#    <description>Designated Autoscaling Load Balancer Name for your Web-tier environment.</description>
#    <info>Web-tier Autoscaling Load Balancer Name</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_AUTOSCALING_ELB</name>
#    <default>APP_TIER_AUTOSCALING_ELB</default>
#    <description>Designated Autoscaling Load Balancer Name for your App-tier environment.</description>
#    <info>App-tier Autoscaling Load Balancer Name</info>
#  </variable>
#  <variable>
#    <name>VPC_FLOW_LOG_GROUP_NAME</name>
#    <default>VPC_FLOW_LOG_GROUP_NAME</default>
#    <description>The name of the VPC Flow log group.</description>
#    <info>4.6 - VPC Flow Log Group Name</info>
#  </variable>
#  <variable>
#    <name>VPC_FLOW_LOG_ALARM_NAME</name>
#    <default>VPC_FLOW_LOG_GROUP_NAME</default>
#    <description>The name of the VPC Flow alarm.</description>
#    <info>VPC Flow Alarm Name</info>
#  </variable>
#  <variable>
#    <name>SNS_TOPIC_ARN</name>
#    <default>SNS_TOPIC_ARN</default>
#    <description>The SNS Topic ARN associated with the VPC Flow Log Alarm.</description>
#    <info>SNS Topic ARN</info>
#  </variable>
#  <variable>
#    <name>APP_DISTRIBUTION_ID</name>
#    <default>APP_DISTRIBUTION_ID</default>
#    <description>The Cloudfront application distribution ID.</description>
#    <info>5.3 - Application Distribution ID</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_LOG_GROUP</name>
#    <default>WEB_TIER_LOG_GROUP</default>
#    <description>The Cloudwatch Log Group associated with the Web-tier.</description>
#    <info>Web-tier Log Group</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_LOG_GROUP</name>
#    <default>APP_TIER_LOG_GROUP</default>
#    <description>The Cloudwatch Log Group associated with the App-tier.</description>
#    <info>App-tier Log Group</info>
#  </variable>
#  <variable>
#    <name>SUBNET1</name>
#    <default>SUBNET1</default>
#    <description>The first Subnet for the NAT Gateways from the application VPC.</description>
#    <info>6.10 - Subnet 1</info>
#  </variable>
#  <variable>
#    <name>SUBNET2</name>
#    <default>SUBNET2</default>
#    <description>The second Subnet for the NAT Gateways from the application VPC.</description>
#    <info>6.10 - Subnet 2</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_SECURITY_GROUP</name>
#    <default>WEB_TIER_SECURITY_GROUP</default>
#    <description>The security group associated with the Web tier ELB.</description>
#    <info>Web-tier Security Group</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_SECURITY_GROUP</name>
#    <default>APP_TIER_SECURITY_GROUP</default>
#    <description>The security group associated with the App-tier ELB.</description>
#    <info>App-tier Security Group</info>
#  </variable>
#  <variable>
#    <name>DATA_TIER_SECURITY_GROUP</name>
#    <default>DATA_TIER_SECURITY_GROUP</default>
#    <description>The security group associated with the Data-tier.</description>
#    <info>Data-tier Security Group</info>
#  </variable>
#  <variable>
#    <name>WEB_TIER_APPLICATION_VPC</name>
#    <default>WEB_TIER_APPLICATION_VPC</default>
#    <description>The instance ID for the Web-tier application VPC.</description>
#    <info>Web-tier Application VPC ID</info>
#  </variable>
#  <variable>
#    <name>APP_TIER_APPLICATION_VPC</name>
#    <default>APP_TIER_APPLICATION_VPC</default>
#    <description>The instance ID for the App-tier application VPC.</description>
#    <info>App-tier Application VPC ID</info>
#  </variable>
#  <variable>
#    <name>DATA_TIER_APPLICATION_VPC</name>
#    <default>DATA_TIER_APPLICATION_VPC</default>
#    <description>The instance ID for the Data-tier application VPC.</description>
#    <info>Data-tier Application VPC ID</info>
#  </variable>
#  <variable>
#    <name>DB_INSTANCE_IDENTIFIER</name>
#    <default>DB_INSTANCE_IDENTIFIER</default>
#    <description>The DB Instance Identifier associated with you DB instance.</description>
#    <info>6.34 - DB Instance Identifier</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"amazon_aws">

<custom_item>
  type        : RDS
  description : "1.4 Ensure Databases running on RDS have encryption at rest enabled"
  info        : "Amazon RDS instances and snapshots can be encrypted at rest by enabling the encryption option on the Amazon RDS DB instance. Data that is encrypted at rest includes the underlying storage for a DB instance, its automated backups, read replicas, and snapshots. It is recommended that encryption at rest be enabled.
Enabling encryption at rest will help ensure that the confidentiality of data stored in RDS, snapshots, and backups, is maintained."
  solution    : "Using the Amazon unified CLI:

* Perform a snapshot of the DB instance:

  aws rds create-db-snapshot --db-snapshot-identifier _<db_snapshot>_ --db-instance-identifier _<your_db_instance>_

* Confirm created snapshot is available (once snapshot process has completed):

  aws rds describe-db-snapshots --query 'DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier, DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}'

* List all KMS Customer Managed Keys:

  aws kms list-aliases

* Copy to source RDS snapshot (from previous step) to a destination snapshot which will be encrypted:

  aws rds copy-db-snapshot --source-db-snapshot-identifier _<db_snapshot>_ --target-db-snapshot-identifier _<encrypted_db_snapshot>_ --kms-key-id _<data_tier_kms_key>_

* Restore a snapshot to the target DB instance(from previous step) with same values as original db instance with additional encrypted storage values:

  aws rds restore-db-instance-from-db-snapshot --db-instance-identifier _<your_db_instance>_ --db-snapshot-identifier _<encrypted_db_snapshot>_"
  reference   : "800-171|3.13.16,800-53|SC-28(1),CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeDBInstances"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//rds:DBInstance\">"
  xsl_stmt    : "<xsl:for-each select=\"//rds:DBInstance\">"
  xsl_stmt    : "<xsl:value-of select=\"rds:DBName\"/><xsl:text> : Storage Encrypted = </xsl:text><xsl:value-of select=\"rds:StorageEncrypted\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No Encryption Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".+ : Storage Encrypted ="
  not_expect  : ".+ : Storage Encrypted = false"
</custom_item>

<custom_item>
  type        : EC2
  description : "1.5 Ensure all EBS volumes for Web-Tier are encrypted"
  info        : "Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.
Enabling encryption on EBS volumes will help ensure the confidentiality of data stored on those volumes.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Note all the volume id's of unencrypted EBS volumes and create a snapshot for each of them:

  aws ec2 create-snapshot --volume-id _<unencrypted_ebs_volume>_ --description \"Snapshot for encryption operation\"

* Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:

  aws ec2 copy-snapshot --source-region _<application_region>_ --source-snapshot-id _<unencrypted_ebs_snapshot>_ --description \"Encrypted snapshot.\" --encrypted --kms-key-id <web_tier_kms_key>

*

  Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:

  aws ec2 create-volume --availability-zone _<application_az>_ --snapshot-id <encrypted_ebs_snapshot>

* Tag the newly created EBS volume using the Volume Id from the previous step_ <encrypted_ebs_volume>:_


  aws ec2 create-tags --resources <encrypted_ebs_volume> --tags Key=<web_tier_tag>,Value=<web_tier_tag_value>

* Delete unencrypted EBS volume:

  aws ec2 delete-volume --volume-id <unencrypted_ebs_volume>"
  reference   : "800-171|3.13.16,800-53|SC-28(1),CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeVolumes"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:volumeSet\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:volumeSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>Encrypted Volume ID = </xsl:text><xsl:value-of select=\"ec2:volumeId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Encrypted Volume ID Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Encrypted Volume ID ="
  parameters  : '["Filter.Name" , "encrypted" , "Filter.Value" , "true"]'
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "1.6 Ensure all EBS volumes for App-Tier are encrypted"
  info        : "Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the app tier be encrypted.
Enabling encryption on EBS volumes will help ensure the confidentiality of data stored on those volumes.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Note all the volume id's of unencrypted EBS volumes and create a snapshot for each of them:

  aws ec2 create-snapshot --volume-id _<unencrypted_ebs_volume>_ --description \"Snapshot for encryption operation\"

* Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:

  aws ec2 copy-snapshot --source-region _<application_region>_ --source-snapshot-id _<unencrypted_ebs_snapshot>_ --description \"Encrypted snapshot.\" --encrypted --kms-key-id <app_tier_kms_key>

*

  Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:

  aws ec2 create-volume --availability-zone _<application_az>_ --snapshot-id <encrypted_ebs_snapshot>

* Tag the newly created EBS volume using the Volume Id from the previous step_ <encrypted_ebs_volume>:_


  aws ec2 create-tags --resources <encrypted_ebs_volume> --tags Key=<app_tier_tag>,Value=<app_tier_tag_value>

* Delete unencrypted EBS volume:

  aws ec2 delete-volume --volume-id <unencrypted_ebs_volume>"
  reference   : "800-171|3.13.16,800-53|SC-28(1),CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeVolumes"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:volumeSet\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:volumeSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>Encrypted Volume ID = </xsl:text><xsl:value-of select=\"ec2:volumeId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Encrypted Volume ID Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Encrypted Volume ID ="
  parameters  : '["Filter.Name" , "encrypted" , "Filter.Value" , "true"]'
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "1.7 Ensure all Customer owned Amazon Machine Images for Web Tier are not shared publicly"
  info        : "Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.
Allowing public access to the Web Tier AMI may aid an adversary in identifying weaknesses in the application use or configuration."
  solution    : "Using the Amazon unified command line interface:

* For each AMI that is public remove group ALL from the launch permissions:

  aws ec2 modify-image-attribute --image-id _<public_image_id>_ --launch-permission \"{\\"Remove\\":[{\\"Group\\":\\"all\\"}]}\""
  reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeImages"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:imagesSet\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:imagesSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>Image ID = </xsl:text><xsl:value-of select=\"ec2:imageId\"/><xsl:text> - Public Access = </xsl:text><xsl:value-of select=\"ec2:isPublic\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Public Access = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Image ID = .* - Public Access ="
  expect      : "Image ID = .* - Public Access = false"
# Note: Variable @WEB_TIER_TAG@ replaced with "WEB_TIER_TAG" in field "parameters".
  parameters  : '["Filter.Name" , "tag-key", "Filter.Value" , "WEB_TIER_TAG"]'
# Note: Variable @WEB_TIER_TAG_VALUE@ replaced with "WEB_TIER_TAG_VALUE" in field "parameters".
  parameters  : '["Filter.Name" , "tag-value", "Filter.Value" , "WEB_TIER_TAG_VALUE"]'
</custom_item>

<custom_item>
  type        : EC2
  description : "1.8 Ensure all Customer owned Amazon Machine Images for Application Tier are not shared publicly"
  info        : "Amazon Machine Images are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.
Allowing public access to the Application Tier AMI may aid an adversary in identifying weaknesses in the application use or configuration."
  solution    : "Using the Amazon unified command line interface:

* For each AMI that is public remove group ALL from the launch permissions:

  aws ec2 modify-image-attribute --image-id _<public_image_id>_ --launch-permission \"{\\"Remove\\":[{\\"Group\\":\\"all\\"}]}\""
  reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeImages"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:imagesSet\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:imagesSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>Image ID = </xsl:text><xsl:value-of select=\"ec2:imageId\"/><xsl:text> - Public Access = </xsl:text><xsl:value-of select=\"ec2:isPublic\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Public Access = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Image ID = .* - Public Access ="
  expect      : "Image ID = .* - Public Access = false"
# Note: Variable @APP_TIER_TAG@ replaced with "APP_TIER_TAG" in field "parameters".
  parameters  : '["Filter.Name" , "tag-key", "Filter.Value" , "APP_TIER_TAG"]'
# Note: Variable @APP_TIER_TAG_VALUE@ replaced with "APP_TIER_TAG_VALUE" in field "parameters".
  parameters  : '["Filter.Name" , "tag-value", "Filter.Value" , "APP_TIER_TAG_VALUE"]'
</custom_item>

<if>
  <condition type:"OR">
    <custom_item>
      type        : ELB
      description : "1.9 Describe Load Balancers - SSL certificate"
      aws_action  : "DescribeLoadBalancers"
      xsl_stmt    : "<xsl:template match=\"/\">"
      xsl_stmt    : "<xsl:choose>"
      xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions\">"
      xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member\">"
      xsl_stmt    : "<xsl:value-of select=\"elb:LoadBalancerName\"/><xsl:text> : Certificate ARN = </xsl:text><xsl:value-of select=\"elb:ListenerDescriptions/elb:member/elb:Listener/elb:SSLCertificateId\"/><xsl:text>&#10;</xsl:text>"
      xsl_stmt    : "</xsl:for-each>"
      xsl_stmt    : "</xsl:when>"
      xsl_stmt    : "<xsl:otherwise>"
      xsl_stmt    : "<xsl:text>Certificate ARN = Not Found</xsl:text>"
      xsl_stmt    : "</xsl:otherwise>"
      xsl_stmt    : "</xsl:choose>"
      xsl_stmt    : "</xsl:template>"
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "regex".
      regex       : "WEB_TIER_ELB : Certificate ARN ="
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "expect".
      expect      : "WEB_TIER_ELB : Certificate ARN = .*"
    </custom_item>

    <custom_item>
      type        : ELB
      description : "1.9 Describe Load Balancers - TCP pass-through"
      aws_action  : "DescribeLoadBalancers"
      xsl_stmt    : "<xsl:template match=\"/\">"
      xsl_stmt    : "<xsl:choose>"
      xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions\">"
      xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member\">"
      xsl_stmt    : "<xsl:value-of select=\"elb:LoadBalancerName\"/><xsl:text> : Protocol = </xsl:text><xsl:value-of select=\"elb:ListenerDescriptions/elb:member/elb:Listener/elb:InstanceProtocol\"/><xsl:text>&#10;</xsl:text>"
      xsl_stmt    : "</xsl:for-each>"
      xsl_stmt    : "</xsl:when>"
      xsl_stmt    : "<xsl:otherwise>"
      xsl_stmt    : "<xsl:text>Protocol = Not Found</xsl:text>"
      xsl_stmt    : "</xsl:otherwise>"
      xsl_stmt    : "</xsl:choose>"
      xsl_stmt    : "</xsl:template>"
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "regex".
      regex       : "WEB_TIER_ELB : Protocol ="
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "expect".
      expect      : "WEB_TIER_ELB : Protocol = TCP"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "1.9 Ensure Web Tier ELB have SSL/TLS Certificate attached"
      info        : "When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances.

  The TLS protocol uses an X.509 certificate (SSL/TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer.

  You can create a certificate using a Third Party Certificate Authority or AWS Certificate Manager.

* Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
All the application traffic between the clients and the Web Tier ELB nodes should be encrypted using a SSL/TLS certificate."
      solution    : "Using the Amazon unified command line interface:

* Adding a HTTPS listener configured with a SSL/TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):

  aws elb create-load-balancer-listeners --load-balancer-name <web_tier_elb> --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=_<ssl_certificate_arn>_"
      reference   : "LEVEL|1S"
      see_also    : "https://workbench.cisecurity.org/files/260"
    </report>
  </then>

  <else>
    <report type:"FAILED">
      description : "1.9 Ensure Web Tier ELB have SSL/TLS Certificate attached"
      info        : "When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances.

  The TLS protocol uses an X.509 certificate (SSL/TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer.

  You can create a certificate using a Third Party Certificate Authority or AWS Certificate Manager.

* Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
All the application traffic between the clients and the Web Tier ELB nodes should be encrypted using a SSL/TLS certificate."
      solution    : "Using the Amazon unified command line interface:

* Adding a HTTPS listener configured with a SSL/TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):

  aws elb create-load-balancer-listeners --load-balancer-name <web_tier_elb> --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=_<ssl_certificate_arn>_"
      reference   : "LEVEL|1S"
      see_also    : "https://workbench.cisecurity.org/files/260"
    </report>
  </else>
</if>

<custom_item>
  type        : ELB
  description : "1.10 Ensure Web Tier ELB have the latest SSL Security Policies configured"
  info        : "Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option.

  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies.

  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol.

* Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through)
Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

  (Note that you should replace <web_tier_elb> with your Web-tier ELB name, and _<latest_ssl_policy>_ with the proper policy name)

  aws elb set-load-balancer-policies-of-listener --load-balancer-name <web_tier_elb> --load-balancer-port 443 --policy-names _<latest_ssl_policy>_"
  reference   : "800-53|SC-17,ITSG-33|SC-17,LEVEL|1S,NESA|T7.4.2,NIAv2|CY10,NIAv2|CY12,NIAv2|CY5a,NIAv2|SS25"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLoadBalancers"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions/elb:member[elb:LoadBalancerName = 'WEB_TIER_ELB']\">"
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member[elb:LoadBalancerName = 'WEB_TIER_ELB']/elb:ListenerDescriptions/elb:member/elb:PolicyNames\">"
  xsl_stmt    : "<xsl:text>Policy Name = </xsl:text><xsl:value-of select=\"elb:member\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Policy Name Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Policy Name ="
  expect      : "Policy Name = .*"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type           : S3
  description    : "1.16 Ensure all S3 buckets have policy to require server-side and in transit encryption for all objects stored in bucket."
  info           : "Data in transit is data being accessed over the network, and therefore could be intercepted by someone else on the network or with access to the physical media the network uses. On an ethernet network, that could be someone with the ability to tap a cable, configure a switch to mirror traffic, or fool your client or a router into directing traffic to them before it moves on to the final destination.

  Server-side encryption (SSE) is about data encryption at rest--that is, Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it.

  Amazon S3 offers 3 options of encrypting data at rest, depending on how you choose to manage the encryption keys:

* Use SSE with Amazon S3-Managed Keys
* Use SSE with AWS KMS-Managed Keys
* Use SSE with Customer-Provided Keys

  At the time of object creation--that is, when you are uploading a new object or making a copy of an existing object--you can specify if you want Amazon S3 to encrypt your data by adding the \"x-amz-server-side-encryptionheader\" to the request. Set the value of the header to the encryption algorithm AES256 that Amazon S3 supports. Amazon S3 confirms that your object is stored using server-side encryption by returning the response header \"x-amz-server-side-encryption\".

  No matter which of the three options you choose, you can create and attach a S3 bucket policy, that will deny any object creation S3 API (PUT Object, PUT Object - Copy, POST Object, Initiate Multipart Upload), if the request does not include the \"x-amz-server-side-encryption\" header requesting server-side encryption, and if the request was not done using SSL\TLS.
When it comes to data at rest, if kept unencrypted, there are a few threats that one can think of, especially when the data is stored in the cloud:

* the threat that attackers are able to compromise Amazon S3 and gain access to the data that is stored in the Amazon S3 buckets.
* the \"insider threat\" where a malicious or rogue administrator steals a physical disk drive or server that contains data a customer has in the Amazon S3 buckets.
* the threat that a government uses a subpoena or warrant to get access to a customer's data in Amazon S3 without their knowledge.

  If data in transit is kept unencrypted:

* Malicious users may intercept or monitor plaintext data transmitting across unencrypted network and gain unauthorized access to that jeopardize the confidentiality of the sensitive data.

  In all of these scenarios, encrypting data at rest and in transit, and properly managing the encryption keys can help mitigate the risk of unauthorized access to that data."
  solution       : "Perform the following to ensure all objects placed in S3 are encrypted in transit and at rest:

* Create a new file, add the following to it, and save it as policy.json:


   {
 \"Version\":\"2012-10-17\",
 \"Id\":\"PutObjPolicy\",
 \"Statement\":{
 \"Sid\":\"DenyUnEncryptedObjectUploads\",
 \"Effect\":\"Deny\",
 \"Principal\":\"*\",
 \"Action\":\"s3:PutObject\",
 \"Resource\":\"arn:aws:s3:::_<s3_bucket_name>_/*\",
 \"Condition\":{
 \"Null\":{ \"s3:x-amz-server-side-encryption\":\"true\" },
 \"Bool\": { \"aws:SecureTransport\": \"false\" }
 }
 }
}

* Attach the above bucket policy to each S3 bucket:

  aws s3api put-bucket-policy --bucket _<s3_bucket_name>_ --policy file://policy.json"
  reference      : "800-171|3.13.11,800-53|SC-13,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "GetBucketPolicy"
  regex          : "full encryption configured"
  expect         : "full encryption configured"
# Note: Variable @S3_BUCKET_NAME@ replaced with "S3_BUCKET_NAME" in field "bucket_name".
  bucket_name    : "S3_BUCKET_NAME"
  json_transform : 'if ((.Statement.Condition.Null[] == "true") and (.Statement.Condition.Bool[] == "false") and (.Statement.Action == "s3:PutObject") and (.Statement.Effect == "Deny")) then "full encryption configured" else "full encryption not configured" end'
</custom_item>

<custom_item>
  type           : IAM
  description    : "2.1 Ensure IAM Policy for EC2 IAM Roles for Web tier is configured"
  info           : "By default, IAM users, groups, and roles have no access to AWS resources.

  IAM policies are the means by which privileges are granted to users, groups, or roles defined with AWS Identity Access Management.

  An IAM policy is a document that formally states one or more permissions using the following structure:

* Actions: what actions are allowed (each AWS service has its own set of actions)
* Resources: which resources will be affected by the action
* Effect: what effect will be when the subject (user/group/roles) requests access

  Policies are documents that are created using JSON. A policy consists of one or more statements, each of which describes one set of permissions.
Ensure IAM policy defines a minimum level of access to AWS services : S3, Cloudwatch, KMS

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Using the Amazon unified command line interface:

* If doesn't exist, create an instance profile for Web tier instances:

  aws iam create-instance-profile --instance-profile-name _<web_tier_instance_profile>_

* If doesn't exist, create an IAM role for the instance profile:

* Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:

  {
 \"Version\": \"2012-10-17\",
 \"Statement\": [
 {
 \"Effect\": \"Allow\",
 \"Principal\": {
 \"Service\": \"ec2.amazonaws.com\"
 },
 \"Action\": \"sts:AssumeRole\"
 }
 ]
}

* Create the IAM role using the above trust policy:

  aws iam create-role --role-name <_web_tier_iam_role_> --assume-role-policy-document file:///tmp/TrustPolicy.json

* Add the IAM role created to the Instance profile:

  aws iam add-role-to-instance-profile --role-name <_web_tier_iam_role_> --instance-profile-name _<web_tier_instance_profile>_

* If doesn't exist, create an IAM managed policy for Web tier instances, and note the policy ARN:

  aws iam create-policy --policy-name _<iam_policy_name>_ --policy-document file://policy

* Attach the IAM policy created to the Web tier IAM role:

  aws iam attach-role-policy --policy-arn <iam_policy_arn> --role-name <_web_tier_iam_role_>"
  reference      : "800-171|3.1.1,800-171|3.1.2,800-53|AC-3(3),CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(3),LEVEL|1S,NESA|T5.5.4,NESA|T7.5.3"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "GetRolePolicy"
  json_transform : ".[]|.PolicyDocument"
# Note: Variable @WEB_TIER_ROLE_POLICY@ replaced with "WEB_TIER_ROLE_POLICY" in field "policy_name".
  policy_name    : "WEB_TIER_ROLE_POLICY"
# Note: Variable @WEB_TIER_ROLE@ replaced with "WEB_TIER_ROLE" in field "role_name".
  role_name      : "WEB_TIER_ROLE"
  severity       : MEDIUM
</custom_item>

<custom_item>
  type           : IAM
  description    : "2.2 Ensure IAM Policy for EC2 IAM Roles for App tier is configured"
  info           : "By default, IAM users, groups, and roles have no access to AWS resources.

  IAM policies are the means by which privileges are granted to users, groups, or roles defined with AWS Identity Access Management.

  An IAM policy is a document that formally states one or more permissions using the following structure:

* Actions: what actions are allowed (each AWS service has its own set of actions)
* Resources: which resources will be affected by the action
* Effect: what effect will be when the subject (user/group/roles) requests access

  Policies are documents that are created using JSON. A policy consists of one or more statements, each of which describes one set of permissions.
Ensure IAM policy defines a minimum level of access to AWS services : S3, Cloudwatch, KMS

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Using the Amazon unified command line interface:

* If doesn't exist, create an instance profile for App tier instances:

  aws iam create-instance-profile --instance-profile-name <_app_tier_instance_profile_>

* If doesn't exist, create an IAM role for the instance profile:

* Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:

  {
 \"Version\": \"2012-10-17\",
 \"Statement\": [
 {
 \"Effect\": \"Allow\",
 \"Principal\": {
 \"Service\": \"ec2.amazonaws.com\"
 },
 \"Action\": \"sts:AssumeRole\"
 }
 ]
}

* Create the IAM role using the above trust policy:

  aws iam create-role --role-name <_app_tier_iam_role_> --assume-role-policy-document file:///tmp/TrustPolicy.json



* Add the IAM role created to the Instance profile:

  aws iam add-role-to-instance-profile --role-name <_app_tier_iam_role_> --instance-profile-name <_app_tier_instance_profile_>

* If doesn't exist, create an IAM managed policy for Web tier instances, and note the policy ARN:

  aws iam create-policy --policy-name <_iam_policy_name_> --policy-document file://policy

* Attach the IAM policy created to the App tier IAM role:

  aws iam attach-role-policy --policy-arn <_iam_policy_arn_> --role-name <_app_tier_iam_role_>"
  reference      : "800-171|3.1.1,800-171|3.1.2,800-53|AC-3(3),CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(3),LEVEL|1S,NESA|T5.5.4,NESA|T7.5.3"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "GetRolePolicy"
  json_transform : ".[]|.PolicyDocument"
# Note: Variable @APP_TIER_ROLE_POLICY@ replaced with "APP_TIER_ROLE_POLICY" in field "policy_name".
  policy_name    : "APP_TIER_ROLE_POLICY"
# Note: Variable @APP_TIER_ROLE@ replaced with "APP_TIER_ROLE" in field "role_name".
  role_name      : "APP_TIER_ROLE"
  severity       : MEDIUM
</custom_item>

<custom_item>
  type        : IAM
  description : "2.3 Ensure an IAM Role for Amazon EC2 is created for Web Tier"
  info        : "An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.

  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.

You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances.

  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance.
Provides dynamic authentication credentials to which can be used with Web-Tier EC Instances once launched with the IAM Role for EC2"
  solution    : "Using the Amazon unified command line interface:

* If doesn't exist, create an instance profile for Web tier instances:

  aws iam create-instance-profile --instance-profile-name _<web_tier_instance_profile>_

* If doesn't exist, create an IAM role for the instance profile:

* Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:

  {
 \"Version\": \"2012-10-17\",
 \"Statement\": [
 {
 \"Effect\": \"Allow\",
 \"Principal\": {
 \"Service\": \"ec2.amazonaws.com\"
 },
 \"Action\": \"sts:AssumeRole\"
 }
 ]
}

* Create the IAM role using the above trust policy:

  aws iam create-role --role-name <_web_tier_iam_role_> --assume-role-policy-document file:///tmp/TrustPolicy.json



* Add the IAM role created to the Instance profile:

  aws iam add-role-to-instance-profile --role-name <_web_tier_iam_role_> --instance-profile-name _<web_tier_instance_profile>_"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListRoles"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//iam:Roles\">"
  xsl_stmt    : "<xsl:for-each select=\"//iam:Roles/iam:member\">"
  xsl_stmt    : "<xsl:text>Web Tier Role Name = </xsl:text><xsl:value-of select=\"iam:RoleName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Web Tier Role Name = No Role Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Web Tier Role Name ="
# Note: Variable @WEB_TIER_ROLE@ replaced with "WEB_TIER_ROLE" in field "expect".
  expect      : "Web Tier Role Name = WEB_TIER_ROLE"
</custom_item>

<custom_item>
  type        : IAM
  description : "2.4 Ensure an IAM Role for Amazon EC2 is created for App Tier"
  info        : "An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.

  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.

You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances.

  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance.
Provides dynamic authentication credentials to which can be used with Application Tier EC2-Instances once launched with the IAM Role for EC2"
  solution    : "Using the Amazon unified command line interface:

* If doesn't exist, create an instance profile for App tier instances:

  aws iam create-instance-profile --instance-profile-name <_app_tier_instance_profile_>

* If doesn't exist, create an IAM role for the instance profile:

* Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:

  {
 \"Version\": \"2012-10-17\",
 \"Statement\": [
 {
 \"Effect\": \"Allow\",
 \"Principal\": {
 \"Service\": \"ec2.amazonaws.com\"
 },
 \"Action\": \"sts:AssumeRole\"
 }
 ]
}

* Create the IAM role using the above trust policy:

  aws iam create-role --role-name <_app_tier_iam_role_> --assume-role-policy-document file:///tmp/TrustPolicy.json



* Add the IAM role created to the Instance profile:

  aws iam add-role-to-instance-profile --role-name <_app_tier_iam_role_> --instance-profile-name <_app_tier_instance_profile_>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListRoles"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//iam:Roles\">"
  xsl_stmt    : "<xsl:for-each select=\"//iam:Roles/iam:member\">"
  xsl_stmt    : "<xsl:text>App Tier Role Name = </xsl:text><xsl:value-of select=\"iam:RoleName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>App Tier Role Name = No Role Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "App Tier Role Name ="
# Note: Variable @APP_TIER_ROLE@ replaced with "APP_TIER_ROLE" in field "expect".
  expect      : "App Tier Role Name = APP_TIER_ROLE"
</custom_item>

<custom_item>
  type        : IAM
  description : "2.5 Ensure AutoScaling Group Launch Configuration for Web Tier is configured to use a customer created Web-Tier IAM Role"
  info        : "An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.

  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.

You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances.

  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance.
Ensures all EC2 instances within the Web-Tier auto scaling group have been launched with an IAM Role for EC2"
  solution    : "Using the Amazon unified command line interface:

* Create new launch configuration for the Web tier using the Web tier IAM instance profile :

  aws autoscaling create-launch-configuration --launch-configuration-name <_web_tier_launch_config_> --image-id <_web_tier_ami_> --key-name <_your_key_pair_> --security-groups <web_tier_security_group> --instance-type <desired_instance_type> --iam-instance-profile <_web_tier_instance_profile_>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListRoles"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//iam:Roles\">"
  xsl_stmt    : "<xsl:for-each select=\"//iam:Roles/iam:member\">"
  xsl_stmt    : "<xsl:text>Web Tier Launch Config Role Name = </xsl:text><xsl:value-of select=\"iam:RoleName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Web Tier Launch Config Role Name = No Role Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Web Tier Launch Config Role Name ="
# Note: Variable @WEB_TIER_LAUNCH_ROLE_NAME@ replaced with "WEB_TIER_LAUNCH_ROLE_NAME" in field "expect".
  expect      : "Web Tier Launch Config Role Name = WEB_TIER_LAUNCH_ROLE_NAME"
</custom_item>

<custom_item>
  type        : IAM
  description : "2.6 Ensure AutoScaling Group Launch Configuration for App Tier is configured to use an App-Tier IAM Role"
  info        : "An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.

  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.

You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances.

  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance.
Ensures all EC2 instances within the App-Tier auto scaling group have been launched with an IAM Role for EC2"
  solution    : "Using the Amazon unified command line interface:

* Create new launch configuration for the App tier using the App tier IAM instance profile :

  aws autoscaling create-launch-configuration --launch-configuration-name <_app_tier_launch_config_> --image-id <_app_tier_ami>_ --key-name <_your_key_pair>_ --security-groups <app_tier_security_group_>_ --instance-type <_desired_instance_type>_ --iam-instance-profile <_app_tier_instance_profile>_"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListRoles"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//iam:Roles\">"
  xsl_stmt    : "<xsl:for-each select=\"//iam:Roles/iam:member\">"
  xsl_stmt    : "<xsl:text>App Tier Launch Config Role Name = </xsl:text><xsl:value-of select=\"iam:RoleName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>App Tier Launch Config Role Name = No Role Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "App Tier Launch Config Role Name ="
# Note: Variable @APP_TIER_LAUNCH_ROLE_NAME@ replaced with "APP_TIER_LAUNCH_ROLE_NAME" in field "expect".
  expect      : "App Tier Launch Config Role Name = APP_TIER_LAUNCH_ROLE_NAME"
</custom_item>

<custom_item>
  type        : IAM
  description : "2.7 Ensure an IAM group for administration purposes is created"
  info        : "An IAM group is a collection of IAM users. You can use groups to specify permissions for a collection of users, which can make those permissions easier to manage for those users. For example, you could have a group called Admins and give that group the types of permissions that administrators typically need. Any user in that group automatically has the permissions that are assigned to the group. If a new user joins your organization and should have administrator privileges, you can assign the appropriate permissions by adding the user to that group. Similarly, if a person changes jobs in your organization, instead of editing that user's permissions, you can remove him or her from the old groups and add him or her to the appropriate new groups.
The IAM group will allow you to add or remove IAM users that require administrative privileges to the resources."
  solution    : "Using the Amazon unified command line interface:

* Create a new IAM group for administration purposes:

  aws iam create-group --group-name <_iam_admin_group_name>_

* Attach the Admin policy to the administration IAM group:

  aws iam attach-group-policy --policy-arn <_admin_policy_arn>_ --group-name <_iam_admin_group_name>_"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//iam:Groups\">"
  xsl_stmt    : "<xsl:for-each select=\"//iam:Groups/iam:member\">"
  xsl_stmt    : "<xsl:text>Admin Group Name = </xsl:text><xsl:value-of select=\"iam:GroupName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Admin Group Name = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Admin Group Name ="
# Note: Variable @ADMIN_GROUP_NAME@ replaced with "ADMIN_GROUP_NAME" in field "expect".
  expect      : "Admin Group Name = ADMIN_GROUP_NAME"
</custom_item>

<custom_item>
  type        : IAM
  description : "2.8 Ensure an IAM policy that allows admin privileges for all services used is created - Policy Exist"
  info        : "A policy is a document that formally states one or more permissions.

  Managed policies are standalone policies that you can attach to multiple users, groups, and roles in your AWS account. Managed policies apply only to identities (users, groups, and roles) - not resources. You must ensure that you have an IAM managed policy created with admin permissions for all the AWS services used by the application.
An IAM admin policy with permissions for all the AWS services used by the application must exist for administration purposes."
  solution    : "Using the Amazon unified command line interface:

* Create an IAM managed admin policy for all AWS services used:

  aws iam create-policy --policy-name <_admin_policy_name>_ --policy-document file://policy"
  reference   : "800-171|3.1.5,800-53|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,SWIFT-CSCv1|1.2"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListPolicies"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//iam:Policies\">"
  xsl_stmt    : "<xsl:for-each select=\"//iam:Policies/iam:member\">"
  xsl_stmt    : "<xsl:text>Admin Policy Name = </xsl:text><xsl:value-of select=\"iam:PolicyName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Admin Policy Name = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Admin Policy Name ="
# Note: Variable @ADMIN_POLICY_NAME@ replaced with "ADMIN_POLICY_NAME" in field "expect".
  expect      : "Admin Policy Name = ADMIN_POLICY_NAME"
</custom_item>

<custom_item>
  type           : IAM
  description    : "2.8 Ensure an IAM policy that allows admin privileges for all services used is created - Review Policy Document"
  info           : "A policy is a document that formally states one or more permissions.

  Managed policies are standalone policies that you can attach to multiple users, groups, and roles in your AWS account. Managed policies apply only to identities (users, groups, and roles) - not resources. You must ensure that you have an IAM managed policy created with admin permissions for all the AWS services used by the application.
An IAM admin policy with permissions for all the AWS services used by the application must exist for administration purposes.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Using the Amazon unified command line interface:

* Create an IAM managed admin policy for all AWS services used:

  aws iam create-policy --policy-name <_admin_policy_name>_ --policy-document file://policy"
  reference      : "800-171|3.1.5,800-53|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,SWIFT-CSCv1|1.2"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "GetPolicyVersion"
  json_transform : '.[].Document'
# Note: Variable @ADMIN_POLICY_ARN@ replaced with "ADMIN_POLICY_ARN" in field "policy_arn".
  policy_arn     : "ADMIN_POLICY_ARN"
  severity       : MEDIUM
</custom_item>

<custom_item>
  type           : IAM
  description    : "2.9 Ensure SNS Topics do not Allow Everyone To Publish"
  info           : "Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. In Amazon SNS, there are two types of clients--publishers and subscribers--also referred to as producers and consumers. Publishers communicate asynchronously with subscribers by producing and sending a message to a topic, which is a logical access point and communication channel. Subscribers (i.e., web servers, email addresses, Amazon SQS queues, AWS Lambda functions) consume or receive the message or notification over one of the supported protocols (i.e., Amazon SQS, HTTP/S, email, SMS, Lambda) when they are subscribed to the topic.

  The entities who can publish messages to a SNS topic can be controlled by modifying the topic policy, and they can be:

* The topic owner
* Everyone
* Specific AWS users or resources

  From the above message publisher options you should make sure that \"Everyone\" is not used with any SNS topic in the AWS account.
If a SNS topic policy allows \"Everyone\" to publish messages to a specific topic, this could pose a security risk as any unauthenticated entity could send malicious messages to all the topic subscribers."
  solution       : "Edit your existing policy by deleting the above snippet or replacing \"Principal\":{\"AWS\" : \"*\"} with \"Principal\":{\"AWS\" : \"_<iam_user>_\"}, and save it locally as a .json file named policy.json.

  Using the Amazon unified command line interface:

* Set the new policy to the SNS topic

  aws sns set-topic-attributes --topic-arn <_sns_topic_arn>_ --attribute-name Policy --attribute-value file://policy.json"
  reference      : "800-53|AC-6(7),CSF|PR.AC-4,ISO/IEC-27001|A.9.2.5,LEVEL|1S,NESA|M1.1.3,NESA|T5.1.1"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "GetPolicyVersion"
  not_expect     : "SNS Topics Allow Everyone To Publish"
  json_transform : '.[].Document.Statement[] | if ((.Effect == "Allow") and (.Action | .. == "sns:Publish")) then "SNS Topics Allow Everyone To Publish" else "SNS Topics Deny Everyone To Publish" end'
</custom_item>

<custom_item>
  type           : IAM
  description    : "2.10 Ensure SNS Topics do not Allow Everyone To Subscribe"
  info           : "Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. In Amazon SNS, there are two types of clients--publishers and subscribers--also referred to as producers and consumers. Publishers communicate asynchronously with subscribers by producing and sending a message to a topic, which is a logical access point and communication channel. Subscribers (i.e., web servers, email addresses, Amazon SQS queues, AWS Lambda functions) consume or receive the message or notification over one of the supported protocols (i.e., Amazon SQS, HTTP/S, email, SMS, Lambda) when they are subscribed to the topic.

  The entities who can subscribe to a SNS topic can be controlled by modifying the topic policy, and they can be:

* The topic owner
* Everyone
* Specific AWS users or resources
* Users whose endpoint URL,protocol, email address, or ARN from a Subscriberequest match a specified value

  From the above topic subscribers, you should make sure that \"Everyone\" is not used with any SNS topic in the AWS account.
If a SNS topic policy allows \"Everyone\" to subscribe to a specific topic, this could pose a security risk as any unauthenticated entity could subscribe and receive messages from the topic publishers, messages that should be destined only to specific, known subscribers."
  solution       : "Edit your existing policy by deleting the above snippet or replacing \"Principal\":{\"AWS\" : \"*\"} with \"Principal\":{\"AWS\" : \"_<iam_user>_\"}, and save it locally as a .json file named policy.json.

  Using the Amazon unified command line interface:

* Set the new policy to the SNS topic

  aws sns set-topic-attributes --topic-arn <_sns_topic_arn>_ --attribute-name Policy --attribute-value file://policy.json"
  reference      : "800-53|AC-6(7),CSF|PR.AC-4,ISO/IEC-27001|A.9.2.5,LEVEL|1S,NESA|M1.1.3,NESA|T5.1.1"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "GetPolicyVersion"
  not_expect     : "SNS Topics Allow Everyone To Subscribe"
  json_transform : '.[].Document.Statement[] | if ((.Effect == "Allow") and (.Action | .. == "sns:Subscribe")) then "SNS Topics Allow Everyone To Subscribe" else "SNS Topics Deny Everyone To Subscribe" end'
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "3.1 Ensure each Auto-Scaling Group has an associated Elastic Load Balancer"
  info        : "Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.

  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.

  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.

  Through Auto-Scaling Group configuration you can define:

* minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
* Availability Zones / subnets used"
  solution    : "Using the Amazon unified command line interface:

* List existing load balancers:

  aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'

  or

* Create new load balancer:

  aws elb create-load-balancer --load-balancer-name _<elb_name>_ --listeners _<listener_config>_ --subnets <application_subnet> --security-groups _<application_security_groups>_

* Attached load balancer from previous steps to autoscaling group:

  aws autoscaling attach-load-balancers --load-balancer-names <elb_name> --auto-scaling-group-name <autoscaling_group_name>"
  reference   : "800-171|3.4.1,800-53|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,ITSG-33|CM-8,LEVEL|1S,NESA|T1.2.1,NESA|T1.2.2"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeAutoScalingGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:AutoScalingGroups\">"
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:AutoScalingGroups/autoscaling:member\">"
  xsl_stmt    : "<xsl:text>Load Balancer Name = </xsl:text><xsl:value-of select=\"autoscaling:LoadBalancerNames/autoscaling:member\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Load Balancer Name = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Load Balancer Name ="
  not_expect  : "Load Balancer Name =$"
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "3.2 Ensure each Auto-Scaling Group is configured for multiple Availability Zones"
  info        : "Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.

  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.

  These properties can be defined within the Auto-Scaling Group configuration.
Ensures high availability of the application and web tiers in the event of a host or Availability Zone failure."
  solution    : "Using the Amazon Unified CLI:

* List all the subnets and the associated Availability Zones from the application VPC:

  aws ec2 describe-subnets --query \"Subnets[?VpcId == '_<application_vpc>_'].{VPC:VpcId, Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}\"

* Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:

  aws autoscaling update-auto-scaling-group --auto-scaling-group-name _<autoscaling_group_name>_ --availability-zones _<application_az>_"
  reference   : "800-53|SI-13(5),LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeAutoScalingGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:AutoScalingGroups\">"
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:AutoScalingGroups/autoscaling:member\">"
  xsl_stmt    : "<xsl:value-of select=\"autoscaling:AutoScalingGroupName\"/><xsl:text> - Availability Zone 1 = </xsl:text><xsl:value-of select=\"autoscaling:AvailabilityZones/autoscaling:member\"/><xsl:text> Availability Zone 2 = </xsl:text><xsl:value-of select=\"autoscaling:AvailabilityZones/autoscaling:member[2]\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Autoscaling Availability Zone = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".* - Availability Zone 1 ="
  not_expect  : ".* - Availability Zone 1 =.* Availability Zone 2 =$"
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "3.3 Ensure Auto-Scaling Launch Configuration for Web-Tier is configured to use an approved Amazon Machine Image"
  info        : "Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.

  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.

  These properties can be defined within the Auto-Scaling Group configuration.

  Additional properties can be defined through the launch configuration such as:

* Instance Type
* Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)
* IAM Role
* Security Groups

  Your Organization must maintain a list of approved AMIs. Use these when creating Auto-Scaling Groups.
Instances within an Auto-Scaling Group are launched from an Amazon Machine Image (AMI) which itself is defined within the Launch Configuration. AMIs should be configured to follow security best practices as is defined within the CIS Benchmark for Amazon Linux or your other desired operating system."
  solution    : "Using the Amazon unified command line interface:

* Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:

  aws autoscaling create-launch-configuration --launch-configuration-name <_new_web_tier_launch_config_> --image-id <_web_tier_ami_> --key-name <_your_key_pair_> --security-groups <web_tier_security_group> --instance-type <desired_instance_type> --iam-instance-profile <_web_tier_instance_profile_>"
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS15a,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLaunchConfigurations"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:LaunchConfigurations/autoscaling:member\">"
# Note: Variable @WEB_TIER_LAUNCH_CONFIG@ replaced with "WEB_TIER_LAUNCH_CONFIG" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:LaunchConfigurations/autoscaling:member[autoscaling:LaunchConfigurationName = 'WEB_TIER_LAUNCH_CONFIG']\">"
  xsl_stmt    : "<xsl:value-of select=\"autoscaling:LaunchConfigurationName\"/><xsl:text> - Image ID = </xsl:text><xsl:value-of select=\"autoscaling:ImageId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Image ID = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".* - Image ID ="
  expect      : ".* - Image ID = .*"
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "3.4 Ensure Auto-Scaling Launch Configuration for App-Tier is configured to use an approved Amazon Machine Image"
  info        : "Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.

  You should use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.

  These properties can be defined within the Auto-Scaling Group configuration.

  Additional properties can be defined through the launch configuration such as:

* Instance Type
* Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)
* IAM Role
* Security Groups

  Your organization must maintain a list of approved AMIs. Use these when creating Auto-Scaling Groups.
Instances within an Auto-Scaling Group are launched from an Amazon Machine Image (AMI) which itself is defined within the Launch Configuration. The AMI should be configured to follow security best practices as is defined within the CIS Benchmark for Amazon Linux or your other desired operating system."
  solution    : "Using the Amazon unified command line interface:

* Create new launch configuration for the App tier using the approved App tier AMI from your organization's list:

  aws autoscaling create-launch-configuration --launch-configuration-name <_new_app_tier_launch_config_> --image-id <_app_tier_ami>_ --key-name <_your_key_pair>_ --security-groups <app_tier_security_group_>_ --instance-type <_desired_instance_type>_ --iam-instance-profile <_app_tier_instance_profile>_"
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS15a,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLaunchConfigurations"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:LaunchConfigurations/autoscaling:member\">"
# Note: Variable @APP_TIER_LAUNCH_CONFIG@ replaced with "APP_TIER_LAUNCH_CONFIG" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:LaunchConfigurations/autoscaling:member[autoscaling:LaunchConfigurationName = 'APP_TIER_LAUNCH_CONFIG']\">"
  xsl_stmt    : "<xsl:value-of select=\"autoscaling:LaunchConfigurationName\"/><xsl:text> - Image ID = </xsl:text><xsl:value-of select=\"autoscaling:ImageId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Image ID = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".* - Image ID ="
  expect      : ".* - Image ID = .*"
</custom_item>

<custom_item>
  type        : RDS
  description : "3.5 Ensure Relational Database Service is Multi-AZ Enabled"
  info        : "Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.

  There are 6 database engines available for customer to run their database workloads on:

* Amazon Aurora (MySQL Compatible)
* MySQL
* MariaDB
* Oracle
* Microsoft SQL Server
* PostgreSQL
Provides AWS managed high availability of the Database Tier across 2 availability zones within a region through asynchronous replication at the data layer."
  solution    : "Using the Amazon unified command line interface:

* Modify each no-multi-az DB instance, and make it Multi-AZ enabled:

  aws rds modify-db-instance --db-instance-identifier <your_db_instance> --multi-az"
  reference   : "800-53|SI-13(5),LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeDBInstances"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//rds:DBInstances\">"
# Note: Variable @DB_INSTANCE_ARN@ replaced with "DB_INSTANCE_ARN" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//rds:DBInstance[rds:DBInstanceArn = 'DB_INSTANCE_ARN']\">"
  xsl_stmt    : "<xsl:value-of select=\"rds:DBInstanceArn\"/><xsl:text> : MultiAZ = </xsl:text><xsl:value-of select=\"rds:MultiAZ\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No MultiAZ Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".* : MultiAZ ="
  expect      : ".* : MultiAZ = true"
</custom_item>

<custom_item>
  type        : RDS
  description : "3.6 Ensure Relational Database Service Instances have Auto Minor Version Upgrade Enabled"
  info        : "Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.

  There are 6 database engines available for customer to run their database workloads on:

* Amazon Aurora (MySQL Compatible)
* MySQL
* MariaDB
* Oracle
* Microsoft SQL Server
* PostgreSQL

  If the database engine used by your application supports it, ensure that the RDS Instances have Auto Minor Version Upgrade Enabled.
Ensures automated patch management is in place on the RDS instance to ensure the database engine has all the latest patches applied."
  solution    : "Using the Amazon unified command line interface:

* Modify each DB instance with auto-minor-version-upgrade set to False, and enable auto-minor-version-upgrade:

  aws rds modify-db-instance --db-instance-identifier <your_db_instance> --auto-minor-version-upgrade"
  reference   : "800-171|3.14.1,800-53|SI-2(5),CSF|ID.RA-1,CSF|PR.IP-12,LEVEL|1S,NIAv2|NS26b,SWIFT-CSCv1|2.2"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeDBInstances"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//rds:DBInstances\">"
# Note: Variable @DB_INSTANCE_ARN@ replaced with "DB_INSTANCE_ARN" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//rds:DBInstance[rds:DBInstanceArn = 'DB_INSTANCE_ARN']\">"
  xsl_stmt    : "<xsl:value-of select=\"rds:DBInstanceArn\"/><xsl:text> : Auto Minor Version Upgrade = </xsl:text><xsl:value-of select=\"rds:AutoMinorVersionUpgrade\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No Auto Minor Version Upgrade Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".* : Auto Minor Version Upgrade ="
  expect      : ".* : Auto Minor Version Upgrade = true"
</custom_item>

<custom_item>
  type        : RDS
  description : "3.8 Ensure Relational Database Service backup retention policy is set"
  info        : "Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.

  There are 6 database engines available for customer to run their database workloads on:

* Amazon Aurora (MySQL Compatible)
* MySQL
* MariaDB
* Oracle
* Microsoft SQL Server
* PostgreSQL
Provides a managed backup function of the RDS Database, it is possible to define the backup window and retention period of the backup. Each customer should have a retention policy set for the type of data being stored. Recommend setting this to at least 7.

  Possible values are from 0 to 35 days."
  solution    : "Using the Amazon unified command line interface:

* Modify each DB instance with Backup Retention Period of 0, and set a desired Backup Retention Period in days (recommended value = 7):

  aws rds modify-db-instance --db-instance-identifier <your_db_instance> --backup-retention-period _<backup_retention_period>_"
  reference   : "800-171|3.8.9,800-53|CP-9,CSF|PR.IP-4,ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,LEVEL|1S,NESA|M5.2.3,NESA|T2.2.4"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeDBInstances"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//rds:DBInstances\">"
# Note: Variable @DB_INSTANCE_ARN@ replaced with "DB_INSTANCE_ARN" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//rds:DBInstance[rds:DBInstanceArn = 'DB_INSTANCE_ARN']\">"
  xsl_stmt    : "<xsl:value-of select=\"rds:DBInstanceArn\"/><xsl:text> : Backup Retention Period = </xsl:text><xsl:value-of select=\"rds:BackupRetentionPeriod\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Backup Retention Period Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".* : Backup Retention Period ="
  not_expect  : ".* : Backup Retention Period = ([8-9]|[1-3][0-9]|0)"
</custom_item>

<custom_item>
  type        : ELB
  description : "3.9 Ensure Web Tier Elastic Load Balancer has application layer Health Check Configured"
  info        : "By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance.

  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance.

  Amazon ELB will periodically sends pings, attempts connections, or sends requests to test the EC2 instances, these tests are called health checks.

  The status of the instances that are healthy at the time of the health check is InService.

  The status of any instances that are unhealthy at the time of the health check is OutOfService.

  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state.

The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state
Ensures availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks."
  solution    : "Using the Amazon unified CLI:

* Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:

  {
 \"Target\": \"_<string>_\",
 \"Interval\": _<integer>_,
 \"Timeout\": _<integer>_,
 \"UnhealthyThreshold\": _<integer>,_
 \"HealthyThreshold\": _<integer>_
}

* Modify Web tier ELB to include appropriate health check:

  aws elb configure-health-check --load-balancer-name _<web_tier_elb>_ --health-check file:///tmp/ELBhealthcheck.json"
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-6,CN-L3|7.1.3.3(d),CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.DP-4,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-2,ITSG-33|AU-6,LEVEL|1S,NESA|M5.2.5,SWIFT-CSCv1|6.4"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLoadBalancers"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions\">"
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member[elb:LoadBalancerName = 'WEB_TIER_ELB']\">"
  xsl_stmt    : "<xsl:text>Health Check = </xsl:text><xsl:value-of select=\"elb:HealthCheck/elb:Target\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Health Check Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Health Check ="
  expect      : "Health Check = .*"
</custom_item>

<custom_item>
  type        : ELB
  description : "3.10 Ensure App Tier Elastic Load Balancer has application layer Health Check Configured"
  info        : "By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance.

  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance.

  Amazon ELB will periodically sends pings, attempts connections, or sends requests to test the EC2 instances, these tests are called health checks.

  The status of the instances that are healthy at the time of the health check is InService.

  The status of any instances that are unhealthy at the time of the health check is OutOfService.

  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state.

The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state
Ensures availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks."
  solution    : "Using the Amazon unified CLI:

* Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:

  {
 \"Target\": \"_<string>_\",
 \"Interval\": _<integer>_,
 \"Timeout\": _<integer>_,
 \"UnhealthyThreshold\": _<integer>,_
 \"HealthyThreshold\": _<integer>_
}

* Modify App tier ELB to include appropriate health check:

  aws elb configure-health-check --load-balancer-name _<app_tier_elb>_ --health-check file:///tmp/ELBhealthcheck.json"
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-6,CN-L3|7.1.3.3(d),CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.DP-4,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-2,ITSG-33|AU-6,LEVEL|1S,NESA|M5.2.5,SWIFT-CSCv1|6.4"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLoadBalancers"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions\">"
# Note: Variable @APP_TIER_ELB@ replaced with "APP_TIER_ELB" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member[elb:LoadBalancerName = 'APP_TIER_ELB']\">"
  xsl_stmt    : "<xsl:text>Health Check = </xsl:text><xsl:value-of select=\"elb:HealthCheck/elb:Target\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Health Check Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Health Check ="
  expect      : "Health Check = .*"
</custom_item>

<custom_item>
  type        : S3
  description : "3.11 Ensure S3 buckets have versioning enabled"
  info        : "Amazon S3 can further protect your data using versioning. Be sure to enable this feature.

  Versioning is a means of keeping multiple variants of an object in the same bucket. You can use versioning to preserve, retrieve, and restore every version of every object stored in your Amazon S3 bucket. With versioning, you can easily recover from both unintended user actions and application failures. By default, requests retrieve the most recently written version. You can retrieve older versions of an object by specifying a version of the object in a request.
Versioning-enabled buckets enable you to recover objects from accidental deletion or overwrite. For example:<div class=\"itemizedlist\">

*

  If you delete an object, instead of removing it permanently, Amazon S3 inserts a delete marker, which becomes the current object version. You can always restore the previous version.
*

  If you overwrite an object, it results in a new object version in the bucket. You can always restore the previous version.

</div>"
  solution    : "Using the Amazon unified command line interface:

* Enable versioning for all the S3 buckets that does not have this feature enabled

  aws s3api put-bucket-versioning --bucket <s3_bucket_name_>_ --versioning-configuration Status=Enabled"
  reference   : "800-53|CP-10,CSF|RC.RP-1,CSF|RS.RP-1,ITSG-33|CP-10,LEVEL|1S,NESA|T2.2.4"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "GetBucketVersioning"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:for-each select=\"//s3:VersioningConfiguration\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"s3:Status\">"
  xsl_stmt    : "<xsl:text>Versioning Status = </xsl:text><xsl:value-of select=\"s3:Status\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Versioning Status = Not Found</xsl:text><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Versioning Status ="
  expect      : "Versioning Status = Enabled"
# Note: Variable @S3_BUCKET_NAME@ replaced with "S3_BUCKET_NAME" in field "bucket_name".
  bucket_name : "S3_BUCKET_NAME"
</custom_item>

<custom_item>
  type        : ELB
  description : "3.14 Ensure Web Tier Auto-Scaling Group has an associated Elastic Load Balancer"
  info        : "Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.

  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.

  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.

  Through Auto-Scaling Group configuration you can define:

* minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
* Availability Zones / subnets used"
  solution    : "Using the Amazon unified command line interface:

* List existing load balancers:

  aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'

  or

* Create new load balancer:

  aws elb create-load-balancer --load-balancer-name <web_tier_elb> --listeners _<listener_config>_ --subnets <web_tier_elb_subnet1> <web_tier_elb_subnet2> --security-groups <web_tier_elb_security_group>

* Attached load balancer from previous steps to autoscaling group:

  aws autoscaling attach-load-balancers --load-balancer-names <web_tier_elb> --auto-scaling-group-name <web_tier_autoscaling_group_name>"
  reference   : "800-171|3.4.1,800-53|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,ITSG-33|CM-8,LEVEL|1S,NESA|T1.2.1,NESA|T1.2.2"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLoadBalancers"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions\">"
  xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member\">"
  xsl_stmt    : "<xsl:text>Load Balancer Name = </xsl:text><xsl:value-of select=\"elb:LoadBalancerName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Load Balancer Name Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Load Balancer Name ="
# Note: Variable @WEB_TIER_AUTOSCALING_ELB@ replaced with "WEB_TIER_AUTOSCALING_ELB" in field "expect".
  expect      : "Load Balancer Name = WEB_TIER_AUTOSCALING_ELB"
</custom_item>

<custom_item>
  type        : ELB
  description : "3.15 Ensure App Tier Auto-Scaling Group has an associated Elastic Load Balancer"
  info        : "Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC.

  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC.

  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure.
Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling.

  Through Auto-Scaling Group configuration you can define:

* minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group
* Availability Zones / subnets used"
  solution    : "Using the Amazon unified command line interface:

* List existing load balancers:

  aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}'

  or

* Create new load balancer:

  aws elb create-load-balancer --load-balancer-name <app_tier_elb> --scheme internal --listeners <_listener_config_> --subnets _<app_tier_subnet1> <app_tier_subnet2>_ --security-groups <app_tier_elb_security_group>

* Attached load balancer from previous steps to autoscaling group:

  aws autoscaling attach-load-balancers --load-balancer-names <app_tier_elb> --auto-scaling-group-name <app_tier_autoscaling_group_name>"
  reference   : "800-171|3.4.1,800-53|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,ITSG-33|CM-8,LEVEL|1S,NESA|T1.2.1,NESA|T1.2.2"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLoadBalancers"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions\">"
  xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member\">"
  xsl_stmt    : "<xsl:text>Load Balancer Name = </xsl:text><xsl:value-of select=\"elb:LoadBalancerName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Load Balancer Name Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Load Balancer Name ="
# Note: Variable @APP_TIER_AUTOSCALING_ELB@ replaced with "APP_TIER_AUTOSCALING_ELB" in field "expect".
  expect      : "Load Balancer Name = APP_TIER_AUTOSCALING_ELB"
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.1 Ensure a SNS topic is created for sending out notifications from Cloudtwatch Alarms and Auto-Scaling Groups - CloudwatchAlarms"
  info        : "For the Cloudwatch alarms and Auto-Scaling Groups to be able to send out notifications, a SNS topic should be created.

  Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients.

  When using Amazon SNS, you (as the owner) create a topic and control access to it by defining policies that determine which publishers and subscribers can communicate with the topic.
Cloudwatch alarms and certain actions inside Auto-Scaling Groups needs to be sent out to administrators, in order to be acted upon.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified CLI:

* Create a new topic, and note the topic-arn value:

  aws sns create-topic --name _<sns_topic_name>_

* Create a subscription to the new topic:

  aws sns subscribe --topic-arn <sns_topic_arn> --protocol _<protocol_for_sns>_ --notification-endpoint _<sns_subscription_endpoints>_"
  reference   : "800-53|SI-4(5),CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeAlarms"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//MetricAlarms\">"
  xsl_stmt    : "<xsl:for-each select=\"//MetricAlarms/member\">"
  xsl_stmt    : "<xsl:text>Alarm Name = </xsl:text><xsl:value-of select=\"AlarmName\"/><xsl:text> - Alarm Actions = </xsl:text><xsl:value-of select=\"AlarmActions/member\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No Cloudwatch Alarms Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Alarm Name ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SNS
  description : "4.1 Ensure a SNS topic is created for sending out notifications from Cloudtwatch Alarms and Auto-Scaling Groups - List SNS Subscriptions"
  info        : "For the Cloudwatch alarms and Auto-Scaling Groups to be able to send out notifications, a SNS topic should be created.

  Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients.

  When using Amazon SNS, you (as the owner) create a topic and control access to it by defining policies that determine which publishers and subscribers can communicate with the topic.
Cloudwatch alarms and certain actions inside Auto-Scaling Groups needs to be sent out to administrators, in order to be acted upon.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified CLI:

* Create a new topic, and note the topic-arn value:

  aws sns create-topic --name _<sns_topic_name>_

* Create a subscription to the new topic:

  aws sns subscribe --topic-arn <sns_topic_arn> --protocol _<protocol_for_sns>_ --notification-endpoint _<sns_subscription_endpoints>_"
  reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListSubscriptionsByTopic"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//sns:Subscriptions/sns:member\">"
  xsl_stmt    : "<xsl:for-each select=\"//sns:Subscriptions/sns:member\">"
  xsl_stmt    : "<xsl:text>SNS Subscription: </xsl:text><xsl:value-of select=\"sns:TopicArn\"/><xsl:text> - Endpoint: </xsl:text><xsl:value-of select=\"sns:Endpoint\"/><xsl:text> (Protocol: </xsl:text><xsl:value-of select=\"sns:Protocol\"/><xsl:text>) &#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>SNS Subscription: No subscriptions found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "SNS Subscription:"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : RDS
  description : "4.2 Ensure a SNS topic is created for sending out notifications from RDS events - RDS Event Subscriptions"
  info        : "For the RDS event subscriptions to be able to send out notifications, a SNS topic should be created.

  Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients.

  When using Amazon SNS, you (as the owner) create a topic and control access to it by defining policies that determine which publishers and subscribers can communicate with the topic.
RDS events generaged through defined RDS event subscriptions needs to be sent out to administrators, in order to be acted upon.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified CLI:

* Create a new topic, and note the topic-arn value:

  aws sns create-topic --name _<sns_topic_name>_

* Create a subscription to the new topic:

  aws sns subscribe --topic-arn <sns_topic_arn> --protocol _<protocol_for_sns>_ --notification-endpoint _<sns_subscription_endpoints>_"
  reference   : "800-53|SI-4(5),CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeEventSubscriptions"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//rds:DescribeEventSubscriptionsResult/rds:EventSubscriptionsList\">"
  xsl_stmt    : "<xsl:for-each select=\"//rds:DescribeEventSubscriptionsResult/rds:EventSubscriptionsList/rds:EventSubscription\">"
  xsl_stmt    : "<xsl:text>RDS Subscription: </xsl:text><xsl:value-of select=\"rds:CustSubscriptionId\"/><xsl:text> - SNS Topic ARN: </xsl:text><xsl:value-of select=\"rds:SnsTopicArn\"/><xsl:text> &#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>RDS Subscription: No subscriptions found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "RDS Subscription:"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SNS
  description : "4.2 Ensure a SNS topic is created for sending out notifications from RDS events - List SNS Subscriptions"
  info        : "For the RDS event subscriptions to be able to send out notifications, a SNS topic should be created.

  Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients.

  When using Amazon SNS, you (as the owner) create a topic and control access to it by defining policies that determine which publishers and subscribers can communicate with the topic.
RDS events generaged through defined RDS event subscriptions needs to be sent out to administrators, in order to be acted upon.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified CLI:

* Create a new topic, and note the topic-arn value:

  aws sns create-topic --name _<sns_topic_name>_

* Create a subscription to the new topic:

  aws sns subscribe --topic-arn <sns_topic_arn> --protocol _<protocol_for_sns>_ --notification-endpoint _<sns_subscription_endpoints>_"
  reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListSubscriptionsByTopic"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//sns:Subscriptions/sns:member\">"
  xsl_stmt    : "<xsl:for-each select=\"//sns:Subscriptions/sns:member\">"
  xsl_stmt    : "<xsl:text>SNS Subscription: </xsl:text><xsl:value-of select=\"sns:TopicArn\"/><xsl:text> - Endpoint: </xsl:text><xsl:value-of select=\"sns:Endpoint\"/><xsl:text> (Protocol: </xsl:text><xsl:value-of select=\"sns:Protocol\"/><xsl:text>) &#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>SNS Subscription: No subscriptions found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "SNS Subscription:"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : RDS
  description : "4.3 Ensure RDS event subscriptions are enabled for Instance level events"
  info        : "AWS Relational Database Services offers customers a managed database engine solution for hosting customer created databases which can allow for a reduction in operational burden on customers.

  RDS event subscriptions provide notification of selected event changes at Data Base engine level such as:

* Deletion
* Failure
* Failover
* Low Storage
* Maintentance
Event subscriptions are designed to provide incident notification of events which may affect the availability of a RDS database instance.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified CLI:

* Create a new event subscription for DB instance level events:

  aws rds create-event-subscription --subscription-name <rds_event_subscription> --sns-topic-arn <sns_topic_arn> --source-type db-instance --event-categories _<rds_events>_ --source-ids _<events_source_ids>_ --enabled"
  reference   : "800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeEventSubscriptions"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//rds:DescribeEventSubscriptionsResult/rds:EventSubscriptionsList\">"
  xsl_stmt    : "<xsl:for-each select=\"//rds:DescribeEventSubscriptionsResult/rds:EventSubscriptionsList/rds:EventSubscription\">"
  xsl_stmt    : "<xsl:text>RDS Source Type: </xsl:text><xsl:value-of select=\"rds:SourceType\"/><xsl:text> - Event Categories: </xsl:text><xsl:value-of select=\"rds:EventCategoriesList/rds:EventCategory\"/><xsl:text> - Sources: </xsl:text><xsl:value-of select=\"rds:SourceIdsList/rds:SourceId\"/><xsl:text> &#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>RDS Source Type: No RDS Source Type found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "RDS Source Type:"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : RDS
  description : "4.4 Ensure RDS event subscriptions are enabled for DB security groups"
  info        : "AWS Relational Database Services offers customers a managed database engine solution for hosting customer created databases which can allow for a reduction in operational burden on customers.

  RDS event subscriptions provide notification of selected event changes at a DB security group level.
Event subscriptions are designed to provide incident notification of events which may affect the network availability of the RDS instance.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified CLI:

* Create a new event subscription for DB Security Group events:

  aws rds create-event-subscription --subscription-name <rds_event_subscription> --sns-topic-arn <sns_topic_arn> --source-type db-security-group --event-categories _<rds_events>_ --source-ids _<events_source_ids>_ --enabled"
  reference   : "800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeEventSubscriptions"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//rds:DescribeEventSubscriptionsResult/rds:EventSubscriptionsList\">"
  xsl_stmt    : "<xsl:for-each select=\"//rds:DescribeEventSubscriptionsResult/rds:EventSubscriptionsList/rds:EventSubscription\">"
  xsl_stmt    : "<xsl:text>RDS Source Type: </xsl:text><xsl:value-of select=\"rds:SourceType\"/><xsl:text> - Event Categories: </xsl:text><xsl:value-of select=\"rds:EventCategoriesList/rds:EventCategory\"/><xsl:text> - Sources: </xsl:text><xsl:value-of select=\"rds:SourceIdsList/rds:SourceId\"/><xsl:text> &#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>RDS Source Type: No RDS Source Type found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "RDS Source Type:"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type           : LOGS
  description    : "4.6 Ensure that a log metric filter for the Cloudwatch group assigned to the \"VPC Flow Logs\" is created"
  info           : "This recommendation builds upon the Foundation benchmark recommendation: \"Ensure VPC Flow Logging is Enabled in all Applicable Regions\"

  VPC FLOW LOGS is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. Flow log data is stored using Amazon CloudWatch Logs. VPC flow logs can capture accepted traffic, rejected traffic, or all traffic.

  METRIC FILTERS can be used to express how the service would extract metric observations from ingested events and transform them to data points in a CloudWatch metric. Metric filters are assigned to log groups, and all of the filters assigned to a log group are applied to their log streams.

  A metric filter should be created for counting how many IP packets are rejected in the VPC flow logs.
For being able to quantify and have an accurate image of the rejected IP packets in the VPC, a metric filter must be assigned to the Cloudwatch log group created by the \"VPC Flow Logs\"."
  solution       : "Using the Amazon unified command line interface:

* Create a metric filter for the Cloudwatch Log group assigned to the \"VPC Flow Logs\":

  aws logs put-metric-filter --log-group-name <_vpc_flow_log_group_name_> --filter-name <_vpc_flow_log___filter_name>_ --filter-pattern \"{ $.errorCode = \\"AccessDenied\\" }\" --metric-transformations metricName=<_vpc_flow_log___metric_name>_,metricNamespace=LogMetrics,metricValue=1"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeMetricFilters"
  expect         : "Metric Filter Established"
# Note: Variable @VPC_FLOW_LOG_GROUP_NAME@ replaced with "VPC_FLOW_LOG_GROUP_NAME" in field "json_transform".
  json_transform : '.[] | .metricFilters[] | if ((.logGroupName == "VPC_FLOW_LOG_GROUP_NAME") and (.filterPattern == "{ $.errorCode = \"AccessDenied\" }")) then "Metric Filter Established" else "No Metric Filter Found" end'
</custom_item>

<custom_item>
  type        : CLOUDWATCH
  description : "4.7 Ensure that a Cloudwatch Alarm is created for the \"VPC Flow Logs\" metric filter, and an Alarm Action is configured"
  info        : "A Cloudwatch alarm watches a single metric over a time period you specify, and performs one or more actions based on the value of the metric relative to a given threshold over a number of time periods. The action is a notification sent to an Amazon SNS topic.

  The Cloudwatch Alarm will trigger a notification being sent to the administrators every time the \"REJECT packets\" specified threshold is reached. The alarm should be created for the \"VPC Flow Logs\" metric, and the action should have a SNS topic configured.
For the administrators subscribed to a SNS topic to be able to receive notifications when IP packets are rejected inside the VPC, a Cloudwatch alarm must be configured for the \"VPC Flow Logs\" metric."
  solution    : "Using the Amazon unified command line interface:

* Create a Cloudwatch alarm for the VPC Flow Logs metric, and configure an Alarm Action:

  aws cloudwatch put-metric-alarm --alarm-name <_vpc_flow_log_alarm_name>_ --alarm-actions _<__<em>sns_topic__arn</em>> --metric-name <vpc_flow_log_metric_name> --namespace LogMetrics --statistic _<desired_statistic>_ --period _<desired_period_> --evaluation-periods _<desired_evaluation_periods_> --threshold _<desired_threshold>_ --comparison-operator _<desired_operator>_"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeAlarms"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//cloudwatch:MetricAlarms\">"
  xsl_stmt    : "<xsl:for-each select=\"//cloudwatch:MetricAlarms/cloudwatch:member\">"
  xsl_stmt    : "<xsl:text>Alarm Name = </xsl:text><xsl:value-of select=\"cloudwatch:AlarmName\"/><xsl:text> - Alarm Actions = </xsl:text><xsl:value-of select=\"cloudwatch:AlarmActions/cloudwatch:member\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No Cloudwatch Alarms Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Alarm Name ="
# Note: Variable @VPC_FLOW_LOG_ALARM_NAME@ replaced with "VPC_FLOW_LOG_GROUP_NAME" in field "expect".
# Note: Variable @SNS_TOPIC_ARN@ replaced with "SNS_TOPIC_ARN" in field "expect".
  expect      : "Alarm Name = VPC_FLOW_LOG_GROUP_NAME - Alarm Actions = SNS_TOPIC_ARN"
</custom_item>

<report type:"WARNING">
  description : "4.8 Ensure Billing Alerts are enabled for increments of X spend"
  info        : "AWS Billing and Cost Management is the service that you use to pay your AWS bill, monitor your usage, and budget your costs.

The Billing and Cost Management service provides features that you can use to estimate and plan your AWS costs, receive alerts if your costs exceed a threshold that you set, assess your biggest investments in AWS resources.

Once all resources are tagged, it becomes possible to perform detailed billing analysis on a per tag basis.
Provides billing notifications based on per-determined dollar value intervals. Billing alerts help prevent unexpected spend increases which may be due to:

* Higher than normal traffic load - resulting in a larger number of instances per auto-scaling group
* Shadow I.I. - resources which have been created but are no longer in use
* Unauthorized account or instance usage

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Before you create a billing alarm, you must enable billing alerts. You need to do this only once.

*

  Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/ [https://console.aws.amazon.com/billing/home].
*

  On the navigation pane, choose Preferences.
*

  Select the Receive Billing Alerts check box.
*

  Choose Save preferences.

  The second step is using the Amazon unified command line interface to create the billing alarm based on the EstimatedCharges metric:

  1. Using the Amazon unified command line interface,  list all available Amazon CloudWatch metrics for the AWS services that you're using.:

  aws cloudwatch list-metrics

  2. In the list of metrics, review the billing metrics that have the AWS/Billing namespace. These are the billing metrics that you can use to create a billing alarm.

  3. Using the Amazon unified command line interface:

  aws cloudwatch put-metric-alarm --alarm-name <_billing_alarm_name_> --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --metric-name <_e__stimated_charges>_ --namespace AWS/Billing --dimensions Name=Currency,Value=USD --period 21600 --statistic Maximum --threshold _<integer>_ --actions-enabled --alarm-actions <sns_topic_arn>"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
</report>

<report type:"WARNING">
  description : "5.1 Ensure all resources are correctly tagged"
  info        : "Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.

  Each tag consists of a key and an optional value, both of which customer's define.

  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.

* Amazon EC2 instances
* ELB
* EBS Volumes

* S3 Buckets


  A resource may have up to 10 tags associated with key \">Key=tier, Value=app
* Key=environment, Value=production

* Key=costcenter, Value=sales

Tagging creates a unique set of identifiers which can be applied to AWS resources such as EC2.

  Tagging enables the following:

* detailed billing analysis
* access management through AWS IAM policies
* asset management through AWS Config Rules
* AWS Inspector assessment groups

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements."
  reference   : "LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/260"
</report>

<report type:"WARNING">
  description : "5.2 Ensure AWS Elastic Load Balancer logging is enabled"
  info        : "Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances in the a VPC. It enables you to achieve greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic.
AWS Elastic Load Balancers (ELBs) can record all incoming request sent to the load balancer and store within logs stored on S3. This allows for diagnosing application failures and analyzing web traffic and security analysis of incoming traffic.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified CLI:

* Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ElbLogs.json:

  {
\"AccessLog\": {
 \"Enabled\": true,
 \"S3BucketName\": \"string\",
 \"EmitInterval\": integer,
 \"S3BucketPrefix\": \"string\"
 }
}

* Update the Load Balancer attributes:

  aws elb modify-load-balancer-attributes --load-balancer-name _<elb_name>_ --load-balancer-attributes file:///tmp/ElbLogs.json"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
</report>

<custom_item>
  type            : CLOUDFRONT
  description     : "5.3 Ensure AWS Cloudfront Logging is enabled"
  info            : "Amazon CloudFront is a web service that speeds up distribution of your static and dynamic web content, for example, .html, .css, .php, image, and media files, to end users. CloudFront delivers your content through a worldwide network of edge locations. When an end user requests content that you're serving with CloudFront, the user is routed to the edge location that provides the lowest latency, so content is delivered with the best possible performance. If the content is already in that edge location, CloudFront delivers it immediately. If the content is not currently in that edge location, CloudFront retrieves it from a customer defined Origin, such as AWS S3, AWS ELB or EC2.
Access logs are activity records that show you detailed information about each request made for your content. These logs can be used for security analysis regarding vulnerability and availability threats"
  solution        : "Using the Amazon unified command line interface:

* For enabling logging first save locally the current distribution config:

  aws cloudfront get-distribution-config --id <application_cfn_distribution_id> --query \"DistributionConfig\" > /tmp/cf-distribution.json

* Edit and replace \"Logging\" element in /tmp/cf-distribution.json with the below section:

  \"Logging\": {
 \"Bucket\": \"<s3_bucket_name>\",
 \"Prefix\": \"cloudfrontlogs\",
 \"Enabled\": true,
 \"IncludeCookies\": false
 },

* Retrieve the current ETag of your CloudFront distribution:

  aws cloudfront get-distribution-config --id <application_cfn_distribution_id> --query \"ETag\"

* Update the CloudFront distribution using the edited config and the above Etag:

  aws cloudfront update-distribution --id <application_cfn_distribution_id> --distribution-config file:///tmp/cf-distribution.json --if-match <application_cfn_distribution_etag>"
  reference       : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also        : "https://workbench.cisecurity.org/files/260"
  aws_action      : "GetDistributionConfig"
  xsl_stmt        : "<xsl:template match=\"/\">"
  xsl_stmt        : "<xsl:choose>"
  xsl_stmt        : "<xsl:when test=\"//cloudfront:Logging\">"
  xsl_stmt        : "<xsl:for-each select=\"//cloudfront:Logging\">"
  xsl_stmt        : "<xsl:text>Logging = </xsl:text><xsl:value-of select=\"cloudfront:Enabled\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt        : "</xsl:for-each>"
  xsl_stmt        : "</xsl:when>"
  xsl_stmt        : "<xsl:otherwise>"
  xsl_stmt        : "<xsl:text>Logging = Not Found</xsl:text>"
  xsl_stmt        : "</xsl:otherwise>"
  xsl_stmt        : "</xsl:choose>"
  xsl_stmt        : "</xsl:template>"
  regex           : "Logging ="
  expect          : "Logging = true"
# Note: Variable @APP_DISTRIBUTION_ID@ replaced with "APP_DISTRIBUTION_ID" in field "distribution_id".
  distribution_id : "APP_DISTRIBUTION_ID"
</custom_item>

<custom_item>
  type           : LOGS
  description    : "5.4 Ensure Cloudwatch Log Group is created for Web Tier"
  info           : "AWS CloudWatch Log groups define groups of log streams that share the same retention, monitoring, and access control settings. Each log stream has to belong to one log group.

  Note:

* You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.
* The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch
Separating log group destinations on a per tier basis allows unique settings to be applied on a per group basis for:

* Retention of logs
* Access Controls

* Export/Stream of data to other AWS Services for analysis/processing

* AWS S3
* AWS Lambda
* AWS Elastic Search"
  solution       : "Using the Amazon unified command line interface:

* Create a Cloudwatch log group for the Web tier:

  aws logs create-log-group --log-group-name _<web_tier_log_group>_"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeLogGroups"
# Note: Variable @WEB_TIER_LOG_GROUP@ replaced with "WEB_TIER_LOG_GROUP" in field "expect".
  expect         : "WEB_TIER_LOG_GROUP"
  json_transform : ".[] | .logGroups[].logGroupName"
</custom_item>

<custom_item>
  type           : LOGS
  description    : "5.5 Ensure Cloudwatch Log Group is created for App Tier"
  info           : "AWS CloudWatch Log groups define groups of log streams that share the same retention, monitoring, and access control settings. Each log stream has to belong to one log group.

  Note:

* You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.
* The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch
Separating log group destinations on a per tier basis allows unique settings to be applied on a per group basis for:

* Retention of logs
* Access Controls

* Export/Stream of data to other AWS Services for analysis/processing

* AWS S3
* AWS Lambda
* AWS Elastic Search"
  solution       : "Using the Amazon unified command line interface:

* Create a Cloudwatch log group for the App tier:

  aws logs create-log-group --log-group-name <_app_tier_log_group>_"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeLogGroups"
# Note: Variable @APP_TIER_LOG_GROUP@ replaced with "APP_TIER_LOG_GROUP" in field "expect".
  expect         : "APP_TIER_LOG_GROUP"
  json_transform : ".[] | .logGroups[].logGroupName"
</custom_item>

<custom_item>
  type           : LOGS
  description    : "5.6 Ensure Cloudwatch Log Group for Web Tier has a retention period"
  info           : "Retention period should be used to specify how long log events are kept in CloudWatch Logs. Expired log events get deleted automatically. Just like metric filters, retention settings are also assigned to log groups, and the retention assigned to a log group is applied to their log streams.

  Note:

* You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.
* The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch
Different log groups may require different retention periods, depending on operational and regulatory constraints."
  solution       : "Using the Amazon unified command line interface:

* Put a retention policy for your Web tier Cloudwatch log group:

  aws logs put-retention-policy --log-group-name <_web_tier_log_group>_ --retention-in-days _<log_retention_period>_"
  reference      : "LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeLogGroups"
  regex          : "^Retention Period Exist"
  expect         : "^Retention Period Exist"
# Note: Variable @WEB_TIER_LOG_GROUP@ replaced with "WEB_TIER_LOG_GROUP" in field "json_transform".
  json_transform : '.[] | .logGroups[] | if ((.logGroupName == "WEB_TIER_LOG_GROUP") and (.retentionInDays) ) then "Retention Period Exist" else "No Retention Period Exist" end'
</custom_item>

<custom_item>
  type           : LOGS
  description    : "5.7 Ensure Cloudwatch Log Group for App Tier has a retention period"
  info           : "Retention period should be used to specify how long log events are kept in CloudWatch Logs. Expired log events get deleted automatically. Just like metric filters, retention settings are also assigned to log groups, and the retention assigned to a log group is applied to their log streams.

  Note:

* You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.
* The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch
Different log groups may require different retention periods, depending on operational and regulatory constraints."
  solution       : "Using the Amazon unified command line interface:

* Put a retention policy for your App tier Cloudwatch log group:

  aws logs put-retention-policy --log-group-name <_app_tier_log_group>_ --retention-in-days _<log_retention_period>_"
  reference      : "LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeLogGroups"
  regex          : "^Retention Period Exist"
  expect         : "^Retention Period Exist"
# Note: Variable @APP_TIER_LOG_GROUP@ replaced with "APP_TIER_LOG_GROUP" in field "json_transform".
  json_transform : '.[] | .logGroups[] | if ((.logGroupName == "APP_TIER_LOG_GROUP") and (.retentionInDays) ) then "Retention Period Exist" else "No Retention Period Exist" end'
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "5.8 Ensure an agent for AWS Cloudwatch Logs is installed within Auto-Scaling Group for Web-Tier"
  info        : "You can use CloudWatch Logs to monitor, store and access log files from an Amazon EC2 instance (application or system data).

  With CloudWatch Logs, you can monitor your logs, in near real-time, for specific phrases, values or patterns (metrics). For example, you could set an alarm on the number of errors that occur in your system logs or view graphs of web request latency from your application logs. Log data can be stored and accessed for as long as you need using highly durable, low-cost storage so you don't have to worry about filling up hard drives.

  A Cloudwatch agent needs to run within the Guest Operating System of each EC2 instance you wish to ship logs from.

  Note:

* You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.
* The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch
Allows for centralized logging, monitoring and incident reporting of both System level events and Application level events within EC2 instances.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create a sample agent configuration file for Amazon Linux and save it as a text file (for example, awslogs.cfg) either on the AMI's filesystem, in a publicly accessible http/https location, or an Amazon S3 location (for example, s3://<s3_bucket_name>/_<cloudwatch_agent_config_file>_):

  [general]
state_file = /var/awslogs/state/agent-state

[/var/log/messages]
file = /var/log/messages
log_group_name = /var/log/messages
log_stream_name = {instance_id}
datetime_format = %b %d %H:%M:%S

* Create a new Web tier Autoscaling Launch Configuration with UserData populated for installing Cloudwatch Logs agent:

* Create and save locally a file containing the UserData, for example /tmp/UserData.txt:

  #!/bin/bashcurl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -Ochmod +x ./awslogs-agent-setup.py./awslogs-agent-setup.py -n -r us-east-1 -c s3://<s3_bucket_name>/_<cloudwatch_agent_config_file>_

* <div class=\"aws-note\">

  NOTE:

  You can install the CloudWatch Logs agent by specifying the us-east-1, us-west-1, us-west-2, eu-west-1, eu-central-1, ap-southeast-1, ap-southeast-2, ap-northeast-1, or sa-east-1 regions.</div>

  aws autoscaling create-launch-configuration --launch-configuration-name <_web_tier_launch_config>_ --image-id <_web_tier_ami>_ --key-name <_your_key_pair>_ --security-groups <web_tier_security_group> --instance-type <_desired_instance_type>_ --iam-instance-profile <_web_tier_instance_profile>_ --user-data file:///tmp/UserData.txt"
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-2,CN-L3|8.1.4.3(a),CSF|PR.PT-1,ITSG-33|AU-2,LEVEL|1NS,NESA|M1.2.2,NESA|M5.5.1,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM7,NIAv2|GS7e,NIAv2|SM4,NIAv2|SS30,NIAv2|VL8,SWIFT-CSCv1|6.4"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLaunchConfigurations"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:LaunchConfigurations\">"
# Note: Variable @WEB_TIER_LAUNCH_CONFIG@ replaced with "WEB_TIER_LAUNCH_CONFIG" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:member[autoscaling:LaunchConfigurationName = 'WEB_TIER_LAUNCH_CONFIG']\">"
  xsl_stmt    : "<xsl:text>User Data = </xsl:text><xsl:value-of select=\"autoscaling:UserData\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>User Data Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "User Data ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "5.9 Ensure an agent for AWS Cloudwatch Logs is installed within Auto-Scaling Group for App-Tier"
  info        : "You can use CloudWatch Logs to monitor, store and access log files from an Amazon EC2 instance (application or system data).

  With CloudWatch Logs, you can monitor your logs, in near real-time, for specific phrases, values or patterns (metrics). For example, you could set an alarm on the number of errors that occur in your system logs or view graphs of web request latency from your application logs. Log data can be stored and accessed for as long as you need using highly durable, low-cost storage so you don't have to worry about filling up hard drives.

  A Cloudwatch agent needs to run within the Guest Operating System of each EC2 instance you wish to ship logs from.

  Note:

* You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.
* The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch
Allows for centralized logging, monitoring and incident reporting of both System level events and Application level events within EC2 instances.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create a sample agent configuration file for Amazon Linux and save it as a text file (for example, awslogs.cfg) either on the AMI's filesystem, in a publicly accessible http/https location, or an Amazon S3 location (for example, s3://<s3_bucket_name>/_<cloudwatch_agent_config_file>_):

  [general]
state_file = /var/awslogs/state/agent-state

[/var/log/messages]
file = /var/log/messages
log_group_name = /var/log/messages
log_stream_name = {instance_id}
datetime_format = %b %d %H:%M:%S

* Create a new App tier Autoscaling Launch Configuration with UserData populated for installing Cloudwatch Logs agent:

* Create and save locally a file containing the UserData, for example /tmp/UserData.txt:

  #!/bin/bash
curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
chmod +x ./awslogs-agent-setup.py
./awslogs-agent-setup.py -n -r us-east-1 -c s3://<s3_bucket_name>/_<cloudwatch_agent_config_file>_

* <div class=\"aws-note\">

  NOTE:

  You can install the CloudWatch Logs agent by specifying the us-east-1, us-west-1, us-west-2, eu-west-1, eu-central-1, ap-southeast-1, ap-southeast-2, ap-northeast-1, or sa-east-1 regions.</div>



  aws autoscaling create-launch-configuration --launch-configuration-name <_app_tier_launch_config>_ --image-id <_app_tier_ami>_ --key-name <_your_key_pair>_ --security-groups <app_tier_security_group_>_ --instance-type <_desired_instance_type>_ --iam-instance-profile _<<em>app_tier__instance_profile></em> --user-data file:///tmp/UserData.txt"
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-2,CN-L3|8.1.4.3(a),CSF|PR.PT-1,ITSG-33|AU-2,LEVEL|1NS,NESA|M1.2.2,NESA|M5.5.1,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM7,NIAv2|GS7e,NIAv2|SM4,NIAv2|SS30,NIAv2|VL8,SWIFT-CSCv1|6.4"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLaunchConfigurations"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:LaunchConfigurations\">"
# Note: Variable @APP_TIER_LAUNCH_CONFIG@ replaced with "APP_TIER_LAUNCH_CONFIG" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:member[autoscaling:LaunchConfigurationName = 'APP_TIER_LAUNCH_CONFIG']\">"
  xsl_stmt    : "<xsl:text>User Data = </xsl:text><xsl:value-of select=\"autoscaling:UserData\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>User Data Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "User Data ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type           : CONFIG
  description    : "5.10 Ensure an AWS Managed Config Rule for encrypted volumes is applied to Web Tier - Encryption"
  info           : "AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records configuration changes to these resources.

  You can evaluate these configurations and changes for compliance with ideal configurations as defined by AWS Config Rules.
Evaluation of Elastic Block Storage volume configuration to ensure encryption at rest is enabled which have been tagged as Web-Tier"
  solution       : "Using the Amazon unified command line interface:

* Create locally a json file (similar with the below sample) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:

  {
 \"Description\": \"Checks whether Web Tier EBS volumes that are in an attached state are encrypted.\",
 \"ConfigRuleName\": \"encrypted-volumes-web-tier\",
 \"Source\": {
 \"Owner\": \"AWS\",
 \"SourceIdentifier\": \"ENCRYPTED_VOLUMES\"
 },
 \"InputParameters\": \"{\\"kmsId\\":\\"<_web_tier_kms_key>_\\"}\",
 \"Scope\": {
 \"TagKey\": \"_<web_tier_tag_>\",
 \"TagValue\": \"_<web_tier_tag_value>_\"
 }
}

* Create a Config Rule using the configuration saved earlier:

  aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json"
  reference      : "800-171|3.13.16,800-53|SC-28,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeConfigRules"
  regex          : "Encrypted Volumes"
  expect         : "Encrypted Volumes Found"
# Note: Variable @WEB_TIER_TAG@ replaced with "WEB_TIER_TAG" in field "json_transform".
# Note: Variable @WEB_TIER_TAG_VALUE@ replaced with "WEB_TIER_TAG_VALUE" in field "json_transform".
  json_transform : '.[] | .ConfigRules[] | if ((.Scope.TagKey == "WEB_TIER_TAG") and (.Scope.TagValue == "WEB_TIER_TAG_VALUE") and (.Source.SourceIdentifier == "ENCRYPTED_VOLUMES")) then "Encrypted Volumes Found" else "Encrypted Volumes Not Found" end'
</custom_item>

<custom_item>
  type           : CONFIG
  description    : "5.10 Ensure an AWS Managed Config Rule for encrypted volumes is applied to Web Tier - KMS ID"
  info           : "AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records configuration changes to these resources.

  You can evaluate these configurations and changes for compliance with ideal configurations as defined by AWS Config Rules.
Evaluation of Elastic Block Storage volume configuration to ensure encryption at rest is enabled which have been tagged as Web-Tier"
  solution       : "Using the Amazon unified command line interface:

* Create locally a json file (similar with the below sample) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:

  {
 \"Description\": \"Checks whether Web Tier EBS volumes that are in an attached state are encrypted.\",
 \"ConfigRuleName\": \"encrypted-volumes-web-tier\",
 \"Source\": {
 \"Owner\": \"AWS\",
 \"SourceIdentifier\": \"ENCRYPTED_VOLUMES\"
 },
 \"InputParameters\": \"{\\"kmsId\\":\\"<_web_tier_kms_key>_\\"}\",
 \"Scope\": {
 \"TagKey\": \"_<web_tier_tag_>\",
 \"TagValue\": \"_<web_tier_tag_value>_\"
 }
}

* Create a Config Rule using the configuration saved earlier:

  aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json"
  reference      : "800-171|3.13.16,800-53|SC-28,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeConfigRules"
  regex          : "KMS ID ="
  not_expect     : "KMS ID = Not Found"
# Note: Variable @WEB_TIER_TAG@ replaced with "WEB_TIER_TAG" in field "json_transform".
# Note: Variable @WEB_TIER_TAG_VALUE@ replaced with "WEB_TIER_TAG_VALUE" in field "json_transform".
  json_transform : '"KMS ID = \(.[] | .ConfigRules[]| select ((.Scope.TagKey == "WEB_TIER_TAG") and (.Scope.TagValue == "WEB_TIER_TAG_VALUE")) | .InputParameters)"'
</custom_item>

<custom_item>
  type           : CONFIG
  description    : "5.11 Ensure an AWS Managed Config Rule for encrypted volumes is applied to App Tier - Encryption"
  info           : "AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records configuration changes to these resources.

  You can evaluate these configurations and changes for compliance with ideal configurations as defined by AWS Config Rules.
Evaluation of Elastic Block Storage volume configuration to ensure encryption at rest is enabled which have been tagged as App-Tier"
  solution       : "Using the Amazon unified command line interface:

* Create locally a json file (similar with the below sample) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:

  {
 \"Description\": \"Checks whether App Tier EBS volumes that are in an attached state are encrypted.\",
 \"ConfigRuleName\": \"encrypted-volumes-app-tier\",
 \"Source\": {
 \"Owner\": \"AWS\",
 \"SourceIdentifier\": \"ENCRYPTED_VOLUMES\"
 },
 \"InputParameters\": \"{\\"kmsId\\":\\"<_app_tier_kms_key>_\\"}\",
 \"Scope\": {
 \"TagKey\": \"_<app_tier_tag_>\",
 \"TagValue\": \"_<app_tier_tag_value>_\"
 }
}

* Create a Config Rule using the configuration saved earlier:

  aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json"
  reference      : "800-171|3.13.16,800-53|SC-28,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeConfigRules"
  regex          : "Encrypted Volumes"
  expect         : "Encrypted Volumes Found"
# Note: Variable @APP_TIER_TAG@ replaced with "APP_TIER_TAG" in field "json_transform".
# Note: Variable @APP_TIER_TAG_VALUE@ replaced with "APP_TIER_TAG_VALUE" in field "json_transform".
  json_transform : '.[] | .ConfigRules[] | if ((.Scope.TagKey == "APP_TIER_TAG") and (.Scope.TagValue == "APP_TIER_TAG_VALUE") and (.Source.SourceIdentifier == "ENCRYPTED_VOLUMES")) then "Encrypted Volumes Found" else "Encrypted Volumes Not Found" end'
</custom_item>

<custom_item>
  type           : CONFIG
  description    : "5.11 Ensure an AWS Managed Config Rule for encrypted volumes is applied to App Tier - KMS ID"
  info           : "AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records configuration changes to these resources.

  You can evaluate these configurations and changes for compliance with ideal configurations as defined by AWS Config Rules.
Evaluation of Elastic Block Storage volume configuration to ensure encryption at rest is enabled which have been tagged as App-Tier"
  solution       : "Using the Amazon unified command line interface:

* Create locally a json file (similar with the below sample) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:

  {
 \"Description\": \"Checks whether App Tier EBS volumes that are in an attached state are encrypted.\",
 \"ConfigRuleName\": \"encrypted-volumes-app-tier\",
 \"Source\": {
 \"Owner\": \"AWS\",
 \"SourceIdentifier\": \"ENCRYPTED_VOLUMES\"
 },
 \"InputParameters\": \"{\\"kmsId\\":\\"<_app_tier_kms_key>_\\"}\",
 \"Scope\": {
 \"TagKey\": \"_<app_tier_tag_>\",
 \"TagValue\": \"_<app_tier_tag_value>_\"
 }
}

* Create a Config Rule using the configuration saved earlier:

  aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json"
  reference      : "800-171|3.13.16,800-53|SC-28,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeConfigRules"
  regex          : "KMS ID ="
  not_expect     : "KMS ID = Not Found"
# Note: Variable @APP_TIER_TAG@ replaced with "APP_TIER_TAG" in field "json_transform".
# Note: Variable @APP_TIER_TAG_VALUE@ replaced with "APP_TIER_TAG_VALUE" in field "json_transform".
  json_transform : '"KMS ID = \(.[] | .ConfigRules[]| select ((.Scope.TagKey == "APP_TIER_TAG") and (.Scope.TagValue == "APP_TIER_TAG_VALUE")) | .InputParameters)"'
</custom_item>

<custom_item>
  type           : CONFIG
  description    : "5.12 Ensure an AWS Managed Config Rule for EIPs attached to EC2 instances within VPC"
  info           : "AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records configuration changes to these resources.

  You can evaluate these configurations and changes for compliance with ideal configurations as defined by AWS Config Rules.
Evaluation of EC2 instance configuration to ensure there are no publicly addressable IP's attached which would violate the defence in depth model"
  solution       : "Using the Amazon unified command line interface:

* Create locally a json file (similar with the below sample) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:

  \"Description\": \"Checks whether all EIP addresses allocated to a VPC are attached to EC2 instances or in-use ENIs.\",
\"ConfigRuleName\": \"eip-attached\",
\"Source\": {
 \"Owner\": \"AWS\",
 \"SourceIdentifier\": \"EIP_ATTACHED\"
},
\"Scope\": {
 \"ComplianceResourceTypes\": [
 \"AWS::EC2::EIP\"
 ]
 }
}

* Create a Config Rule using the configuration saved earlier:

  aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json"
  reference      : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also       : "https://workbench.cisecurity.org/files/260"
  aws_action     : "DescribeConfigRules"
  regex          : "EIP_ATTACHED"
  expect         : "EIP_ATTACHED"
  json_transform : '.[] | .ConfigRules[].Source.SourceIdentifier'
</custom_item>

<custom_item>
  type        : CLOUDFRONT
  description : "6.3 Use CloudFront Content Distribution Network"
  info        : "Amazon CloudFront can be used to deliver either the entire website, including dynamic, static, streaming, and interactive content using a global network of edge locations. Requests for your content are automatically routed to the nearest edge location, so content is delivered with the best possible performance. Amazon CloudFront is optimized to work with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and Amazon Route 53.

  Amazon CloudFront gives you three options for accelerating your entire website while delivering your content securely over HTTPS from all of CloudFront's edge locations. In addition to delivering securely from the edge, you can also configure CloudFront to use HTTPS connections for origin fetches so that your data is encrypted end-to-end from your origin to your end users.
Using the Amazon CloudFront content delivery network will provide improved performance with the application as the content is delivered from the closest edge location in terms of DNS resolution latency.

  It improves the ability of the application to absorb and mitigate potential distributed denial of service (DDOS) attacks and keep the application available for legitimate users.

  The content can be delivered securely over HTTPS from all edge location between the customer and between the edge locations and the origin.

  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):

  aws cloudfront create-distribution --origin-domain-name <_your_original_domain_name>_ --default-root-object index.html

* Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:

  aws cloudfront create-distribution --distribution-config file://distconfig.json"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "ListDistributions"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//cloudfront:Items\">"
  xsl_stmt    : "<xsl:for-each select=\"//cloudfront:Items/cloudfront:DistributionSummary\">"
  xsl_stmt    : "<xsl:value-of select=\"cloudfront:Id\"/><xsl:text> : Domain Name = </xsl:text><xsl:value-of select=\"cloudfront:DomainName\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Domain Name Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : ".* : Domain Name ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : ELB
  description : "6.5 Ensure subnets for the Web tier ELB are created"
  info        : "You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add one or more subnets in each Availability Zone. Each subnet must reside entirely within one Availability Zone and cannot span zones. Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones. By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location. AWS assigns a unique ID to each subnet.

  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). The allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet in a VPC, the CIDR blocks of the subnets must not overlap.

  Some AWS regions have more than 2 availability zones and it is recommended to use more than 2 where possible.
At least 2 subnets in 2 different availability zones (AZ) should be created in order to have fault tolerance and high availability from the perspective of resource deployment."
  solution    : "Using the Amazon unified command line interface:

* Create subnets for Web tier ELB, and note the subnet id:

  aws ec2 create-subnet --vpc-id <application_vpc> --cidr-block <desired_cidr>

* Tag the above subnets with the Web tier ELB tags:

  aws ec2 create-tags --resources <web_tier_elb_subnet1> <web_tier_elb_subnet2> --tags Key=<public_tier_tag>,Value=<public_tier_tag_value>"
  reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(22),CSF|PR.AC-5,CSF|PR.PT-4,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLoadBalancers"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions\">"
  xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member\">"
  xsl_stmt    : "<xsl:value-of select=\"elb:LoadBalancerName\"/><xsl:text> : Subnet 1 = </xsl:text><xsl:value-of select=\"elb:Subnets/elb:member\"/><xsl:text> : Subnet 2 = </xsl:text><xsl:value-of select=\"elb:Subnets/elb:member[2]\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Health Check Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "regex".
  regex       : "WEB_TIER_ELB : Subnet 1 ="
# Note: Variable @WEB_TIER_ELB@ replaced with "WEB_TIER_ELB" in field "expect".
  expect      : "WEB_TIER_ELB : Subnet 1 = .* : Subnet 2 = .*"
</custom_item>

<custom_item>
  type        : EC2
  description : "6.6 Ensure subnets for the Web tier are created"
  info        : "You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add one or more subnets in each Availability Zone. Each subnet must reside entirely within one Availability Zone and cannot span zones. Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones. By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location. AWS assigns a unique ID to each subnet.

  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). The allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet in a VPC, the CIDR blocks of the subnets must not overlap.

  Some AWS regions have more than 2 availability zones and it is recommended to use more than 2 where possible.
At least 2 subnets in 2 different availability zones (AZ) should be created in order to have fault tolerance and high availability from the perspective of resource deployment.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create subnets for Web tier, and note the subnet id:

  aws ec2 create-subnet --vpc-id <application_vpc> --cidr-block <desired_cidr>

* Tag the above subnets with the Web tier tags:

  aws ec2 create-tags --resources <web_tier_subnet1> <web_tier_subnet2> --tags Key=<web_tier_tag>,Value=<web_tier_tag_value>"
  reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(22),CSF|PR.AC-5,CSF|PR.PT-4,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSubnets"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @WEB_TIER_TAG@ replaced with "WEB_TIER_TAG" in field "xsl_stmt".
# Note: Variable @WEB_TIER_TAG_VALUE@ replaced with "WEB_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//ec2:subnetSet/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'WEB_TIER_TAG' and ec2:value = 'WEB_TIER_TAG_VALUE']\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:subnetSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>Subnet ID = </xsl:text><xsl:value-of select=\"ec2:subnetId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Subnet ID = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Subnet ID ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.7 Ensure subnets for the App tier are created"
  info        : "You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add one or more subnets in each Availability Zone. Each subnet must reside entirely within one Availability Zone and cannot span zones. Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones. By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location. AWS assigns a unique ID to each subnet.

  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). The allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet in a VPC, the CIDR blocks of the subnets must not overlap.

  Some AWS regions have more than 2 availability zones and it is recommended to use more than 2 where possible.
At least 2 subnets in 2 different availability zones (AZ) should be created in order to have fault tolerance and high availability from the perspective of resource deployment.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create subnets for App tier, and note the subnet id:

  aws ec2 create-subnet --vpc-id <application_vpc> --cidr-block <desired_cidr>

* Tag the above subnets with the App tier tags:

  aws ec2 create-tags --resources <app_tier_subnet1> <app_tier_subnet2> --tags Key=<app_tier_tag>,Value=<app_tier_tag_value>"
  reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(22),CSF|PR.AC-5,CSF|PR.PT-4,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSubnets"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @APP_TIER_TAG@ replaced with "APP_TIER_TAG" in field "xsl_stmt".
# Note: Variable @APP_TIER_TAG_VALUE@ replaced with "APP_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//ec2:subnetSet/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'APP_TIER_TAG' and ec2:value = 'APP_TIER_TAG_VALUE']\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:subnetSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>Subnet ID = </xsl:text><xsl:value-of select=\"ec2:subnetId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Image ID = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Subnet ID ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.8 Ensure subnets for the Data tier are created"
  info        : "You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add one or more subnets in each Availability Zone. Each subnet must reside entirely within one Availability Zone and cannot span zones. Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones. By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location. AWS assigns a unique ID to each subnet.

  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). The allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet in a VPC, the CIDR blocks of the subnets must not overlap.

  Some AWS regions have more than 2 availability zones and it is recommended to use more than 2 where possible.
At least 2 subnets in 2 different availability zones (AZ) should be created in order to have fault tolerance and high availability from the perspective of resource deployment.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create subnets for Data tier, and note the subnet id:

  aws ec2 create-subnet --vpc-id <application_vpc> --cidr-block <desired_cidr>

* Tag the above subnets with the Data tier tags:

  aws ec2 create-tags --resources SubnetId1 SubnetId2 --tags Key=<data_tier_tag>,Value=<data_tier_tag_value>"
  reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(22),CSF|PR.AC-5,CSF|PR.PT-4,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSubnets"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @DATA_TIER_TAG@ replaced with "DATA_TIER_TAG" in field "xsl_stmt".
# Note: Variable @DATA_TIER_TAG_VALUE@ replaced with "DATA_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//ec2:subnetSet/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'DATA_TIER_TAG' and ec2:value = 'DATA_TIER_TAG_VALUE']\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:subnetSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>Subnet ID = </xsl:text><xsl:value-of select=\"ec2:subnetId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Image ID = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Subnet ID ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.9 Ensure Elastic IPs for the NAT Gateways are allocated"
  info        : "An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
In order to be able to create NAT Gateways that allow Internet access from the private subnet of the VPC, Elastic IPs should be allocated for each NAT Gateway.

  Some AWS Regions have more than 2 Availability Zones, in this case it is recommended to allocate an Elastic IP to each NAT Gateway in each of the public subnets used.

  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Allocate Elastic IP addreses for the number of NAT Gateways that you want to deploy:

  aws ec2 allocate-address --domain vpc"
  reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(21),CSF|PR.AC-5,CSF|PR.DS-5,LEVEL|1S,NESA|T4.5.3,NIAv2|VL6"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeAddresses"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:addressesSet/ec2:item[not(ec2:associationId)]\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:addressesSet/ec2:item[not(ec2:associationId)]\">"
  xsl_stmt    : "<xsl:text>Public IP = </xsl:text><xsl:value-of select=\"ec2:publicIp\"/><xsl:text> | Domain Name = </xsl:text><xsl:value-of select=\"ec2:domain\"/><xsl:text> | Allocation ID = </xsl:text><xsl:value-of select=\"ec2:allocationId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Public IP = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Public IP ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.10 Ensure NAT Gateways are created in at least 2 Availability Zones - Subnet1"
  info        : "You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances.

  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet.

  Each NAT gateway is created in a specific Availability Zone and implemented with redundancy in that zone
In order to enable instances in a private subnets to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances, NAT Gateways should be created in at least 2 Availability Zones.

  Some AWS Regions have more than 2 Availability Zones, in this case it is recommended to create a NAT Gateway in each of the public subnets used.

  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create a NAT Gateway in a public subnet from a different Availability Zone:

  aws ec2 create-nat-gateway --subnet-id _<public_subnet1>_ --allocation-id _<elastic_ip_allocation>_

  and/or

  aws ec2 create-nat-gateway --subnet-id _<public_subnet2>_ --allocation-id _<elastic_ip_allocation>_"
  reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(22),CSF|PR.AC-5,CSF|PR.PT-4,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSubnets"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:subnetSet/ec2:item\">"
# Note: Variable @SUBNET1@ replaced with "SUBNET1" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:subnetSet/ec2:item[ec2:subnetId = 'SUBNET1']\">"
  xsl_stmt    : "<xsl:text>Availability Zone = </xsl:text><xsl:value-of select=\"ec2:availabilityZone\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Availability Zone = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Availability Zone ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.10 Ensure NAT Gateways are created in at least 2 Availability Zones - Subnet2"
  info        : "You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances.

  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet.

  Each NAT gateway is created in a specific Availability Zone and implemented with redundancy in that zone
In order to enable instances in a private subnets to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances, NAT Gateways should be created in at least 2 Availability Zones.

  Some AWS Regions have more than 2 Availability Zones, in this case it is recommended to create a NAT Gateway in each of the public subnets used.

  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create a NAT Gateway in a public subnet from a different Availability Zone:

  aws ec2 create-nat-gateway --subnet-id _<public_subnet1>_ --allocation-id _<elastic_ip_allocation>_

  and/or

  aws ec2 create-nat-gateway --subnet-id _<public_subnet2>_ --allocation-id _<elastic_ip_allocation>_"
  reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(22),CSF|PR.AC-5,CSF|PR.PT-4,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSubnets"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:subnetSet/ec2:item\">"
# Note: Variable @SUBNET2@ replaced with "SUBNET2" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:subnetSet/ec2:item[ec2:subnetId = 'SUBNET2']\">"
  xsl_stmt    : "<xsl:text>Availability Zone = </xsl:text><xsl:value-of select=\"ec2:availabilityZone\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Availability Zone = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Availability Zone ="
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.11 Ensure a route table for the public subnets is created"
  info        : "A _route table_ contains a set of rules, called _routes_, that are used to determine where network traffic is directed.

  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.
Once a route table for the public subnet is created, all the subnets which should be public in the Web ELB tier can be associated with the public subnet.

  The private subnet should only contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW).

  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create a route table for your public subnets, and note the RouteTableId in the output:

  aws ec2 create-route-table --vpc-id <application_vpc>

* Associate the new route table with the public subnets:

  aws ec2 associate-route-table --route-table-id <route_table_id> --subnet-id <public_subnet1>
aws ec2 associate-route-table --route-table-id <route_table_id> --subnet-id <public_subnet2>"
  reference   : "800-171|3.13.1,800-53|SC-7(15),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(15),LEVEL|1S,NESA|T4.5.3,NIAv2|NS5c,NIAv2|NS6a"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeRouteTables"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:routeTableSet\">"
  xsl_stmt    : "<xsl:for-each select=\"ec2:item\">"
  xsl_stmt    : "<xsl:value-of select=\"ec2:associationSet/ec2:item/ec2:subnetId\"/>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "<xsl:for-each select=\"ec2:routeSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>  CIDR Block: </xsl:text><xsl:value-of select=\"ec2:destinationCidrBlock\"/><xsl:text> - Gateway: </xsl:text><xsl:value-of select=\"ec2:gatewayId\"/><xsl:text> (</xsl:text><xsl:value-of select=\"ec2:state\"/><xsl:text>)</xsl:text><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.12 Ensure a route table for the private subnets is created"
  info        : "A _route table_ contains a set of rules, called _routes_, that are used to determine where network traffic is directed.

  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.
Once a route table for the private subnet is created, all the subnets which should be private in the Web, App and Data tiers can be associated with the route table.

  The route table should only contain the default route (0.0.0.0/0) pointing to the NAT Gateway.

  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Create a route table for your private subnets, and note the RouteTableId in the output:

* aws ec2 create-route-table --vpc-id <application_vpc>



* Associate the new route table with the private subnets:

  aws ec2 associate-route-table --route-table-id <route_table_id> --subnet-id <private_subnet1>
aws ec2 associate-route-table --route-table-id <route_table_id> --subnet-id <private_subnet2>"
  reference   : "800-171|3.13.1,800-53|SC-7(15),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(15),LEVEL|1S,NESA|T4.5.3,NIAv2|NS5c,NIAv2|NS6a"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeRouteTables"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:routeTableSet\">"
  xsl_stmt    : "<xsl:for-each select=\"ec2:item\">"
  xsl_stmt    : "<xsl:value-of select=\"ec2:associationSet/ec2:item/ec2:subnetId\"/>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "<xsl:for-each select=\"ec2:routeSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>  CIDR Block: </xsl:text><xsl:value-of select=\"ec2:destinationCidrBlock\"/><xsl:text> - Gateway: </xsl:text><xsl:value-of select=\"ec2:gatewayId\"/><xsl:text> (</xsl:text><xsl:value-of select=\"ec2:state\"/><xsl:text>)</xsl:text><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.13 Ensure Routing Table associated with Web tier ELB subnet have the default route (0.0.0.0/0) defined to allow connectivity"
  info        : "A _route table_ contains a set of rules, called _routes_, that are used to determine where network traffic is directed.

  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.
The default route (0.0.0.0/0) should be pointing to the Internet Gateway in order to provide internet connectivity for the Web tier ELB.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have an IGW configured as gateway:

  aws ec2 replace-route --route-table-id _<route_table_id>_ --destination-cidr-block 0.0.0.0/0 --gateway-id _<vpc_igw>_

* For the above route tables, if the default route (0.0.0.0/0) doesn't exist:

  aws ec2 create-route --route-table-id _<route_table_id>_ --destination-cidr-block 0.0.0.0/0 --gateway-id _<vpc_igw>_"
  reference   : "800-171|3.13.1,800-53|SC-7(15),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(15),LEVEL|1S,NESA|T4.5.3,NIAv2|NS5c,NIAv2|NS6a"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeRouteTables"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:routeTableSet\">"
  xsl_stmt    : "<xsl:for-each select=\"ec2:item\">"
  xsl_stmt    : "<xsl:value-of select=\"ec2:associationSet/ec2:item/ec2:subnetId\"/>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "<xsl:for-each select=\"ec2:routeSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>  CIDR Block: </xsl:text><xsl:value-of select=\"ec2:destinationCidrBlock\"/><xsl:text> - Gateway: </xsl:text><xsl:value-of select=\"ec2:gatewayId\"/><xsl:text> (</xsl:text><xsl:value-of select=\"ec2:state\"/><xsl:text>)</xsl:text><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.14 Ensure Routing Table associated with Web tier subnet have the default route (0.0.0.0/0) defined to allow connectivity"
  info        : "A _route table_ contains a set of rules, called _routes_, that are used to determine where network traffic is directed.

  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.
The default route (0.0.0.0/0) should be pointing to the NAT Gateway in order to provide internet connectivity for the Web tier instances.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:

  aws ec2 replace-route --route-table-id _<route_table_id>_ --destination-cidr-block 0.0.0.0/0 --gateway-id _<vpc_nat_gw>_

* For the above route tables, if the default route (0.0.0.0/0) doesn't exist:

  aws ec2 create-route --route-table-id _<route_table_id>_ --destination-cidr-block 0.0.0.0/0 --gateway-id _<vpc_nat_gw>_"
  reference   : "800-171|3.13.1,800-53|SC-7(15),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(15),LEVEL|1S,NESA|T4.5.3,NIAv2|NS5c,NIAv2|NS6a"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeRouteTables"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:routeTableSet\">"
  xsl_stmt    : "<xsl:for-each select=\"ec2:item\">"
  xsl_stmt    : "<xsl:value-of select=\"ec2:associationSet/ec2:item/ec2:subnetId\"/>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "<xsl:for-each select=\"ec2:routeSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>  CIDR Block: </xsl:text><xsl:value-of select=\"ec2:destinationCidrBlock\"/><xsl:text> - Gateway: </xsl:text><xsl:value-of select=\"ec2:gatewayId\"/><xsl:text> (</xsl:text><xsl:value-of select=\"ec2:state\"/><xsl:text>)</xsl:text><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.15 Ensure Routing Table associated with App tier subnet have the default route (0.0.0.0/0) defined to allow connectivity"
  info        : "A _route table_ contains a set of rules, called _routes_, that are used to determine where network traffic is directed.

  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.
The default route (0.0.0.0/0) should be pointing to the NAT Gateway in order to provide internet connectivity for the App tier instances.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:

* aws ec2 replace-route --route-table-id _<route_table_id>_ --destination-cidr-block 0.0.0.0/0 --gateway-id _<vpc_nat_gw>_



* For the above route tables, if the default route (0.0.0.0/0) doesn't exist:

* aws ec2 create-route --route-table-id _<route_table_id>_ --destination-cidr-block 0.0.0.0/0 --gateway-id _<vpc_nat_gw>_"
  reference   : "800-171|3.13.1,800-53|SC-7(15),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(15),LEVEL|1S,NESA|T4.5.3,NIAv2|NS5c,NIAv2|NS6a"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeRouteTables"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:routeTableSet\">"
  xsl_stmt    : "<xsl:for-each select=\"ec2:item\">"
  xsl_stmt    : "<xsl:value-of select=\"ec2:associationSet/ec2:item/ec2:subnetId\"/>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "<xsl:for-each select=\"ec2:routeSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>  CIDR Block: </xsl:text><xsl:value-of select=\"ec2:destinationCidrBlock\"/><xsl:text> - Gateway: </xsl:text><xsl:value-of select=\"ec2:gatewayId\"/><xsl:text> (</xsl:text><xsl:value-of select=\"ec2:state\"/><xsl:text>)</xsl:text><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.16 Ensure Routing Table associated with Data tier subnet have NO default route (0.0.0.0/0) defined to allow connectivity"
  info        : "A _route table_ contains a set of rules, called _routes_, that are used to determine where network traffic is directed.

  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table.
The default route (0.0.0.0/0) should not exist pointing to the NAT Gateway in order to restrict internet connectivity for the Data tier instances.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:

* aws ec2 delete-route --route-table-id _<route_table_id>_ --destination-cidr-block 0.0.0.0/0"
  reference   : "800-171|3.13.1,800-53|SC-7(15),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(15),LEVEL|1S,NESA|T4.5.3,NIAv2|NS5c,NIAv2|NS6a"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeRouteTables"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:routeTableSet\">"
  xsl_stmt    : "<xsl:for-each select=\"ec2:item\">"
  xsl_stmt    : "<xsl:value-of select=\"ec2:associationSet/ec2:item/ec2:subnetId\"/>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "<xsl:for-each select=\"ec2:routeSet/ec2:item\">"
  xsl_stmt    : "<xsl:text>  CIDR Block: </xsl:text><xsl:value-of select=\"ec2:destinationCidrBlock\"/><xsl:text> - Gateway: </xsl:text><xsl:value-of select=\"ec2:gatewayId\"/><xsl:text> (</xsl:text><xsl:value-of select=\"ec2:state\"/><xsl:text>)</xsl:text><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "<xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.17 Use a Web-Tier ELB Security Group to accept only HTTP/HTTPS"
  info        : "A _security group_ acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.

  For each security group, you add _rules_ that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
The SG associated with the Web tier ELB should allow connectivity from any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports."
  solution    : "Using the Amazon unified command line interface:

* First remove all the ingress rules for the security group associated with the Web tier ELB:

  aws ec2 describe-security-groups --group-id <_security_group_id>_ --query \"SecurityGroups[0].IpPermissions\" > /tmp/IpPermissions.json
aws ec2 revoke-security-group-ingress --group-id <_security_group_id>_ --ip-permissions file:///tmp/IpPermissions.json

* create locally the below json file containing ingress rules for any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports and name it IpPermissions.json:

  [
 {
 \"PrefixListIds\": [],
 \"FromPort\": 80,
 \"IpRanges\": [
 {
 \"CidrIp\": \"0.0.0.0/0\"
 }
 ],
 \"ToPort\": 80,
 \"IpProtocol\": \"tcp\",
 \"UserIdGroupPairs\": []
 },
 {
 \"PrefixListIds\": [],
 \"FromPort\": 443,
 \"IpRanges\": [
 {
 \"CidrIp\": \"0.0.0.0/0\"
 }
 ],
 \"ToPort\": 443,
 \"IpProtocol\": \"tcp\",
 \"UserIdGroupPairs\": []
 }
]

* Add to the security group associated with the Web tier ELB the above ingress rules:

  aws ec2 authorize-security-group-ingress --group-id <_security_group_id>_ --ip-permissions file:///PathTo/IpPermissions.json"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item\">"
  xsl_stmt    : "<xsl:text>Security Group: </xsl:text><xsl:value-of select=\"ec2:groupId\"/><xsl:text> | Source: </xsl:text><xsl:value-of select=\"ec2:ipPermissions/ec2:item/ec2:ipRanges/ec2:item/ec2:cidrIp\"/><xsl:text> | Port: </xsl:text><xsl:value-of select=\"ec2:ipPermissions/ec2:item/ec2:toPort\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Source: No security groups found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
# Note: Variable @WEB_TIER_SECURITY_GROUP@ replaced with "WEB_TIER_SECURITY_GROUP" in field "regex".
  regex       : "Security Group: WEB_TIER_SECURITY_GROUP \| Source: .*"
# Note: Variable @WEB_TIER_SECURITY_GROUP@ replaced with "WEB_TIER_SECURITY_GROUP" in field "expect".
  expect      : "Security Group: WEB_TIER_SECURITY_GROUP \| Source: 0\.0\.0\.0.* \| Port: (80|443)$"
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "6.18 Ensure Web tier ELB Security Group is not used in the Auto Scaling launch configuration of any other tier (Web, App)"
  info        : "When you use the AWS Management Console to create a load balancer in a VPC, you can choose an existing security group for the VPC or create a new security group for the VPC. If you choose an existing security group, it must allow traffic in both directions to the listener and health check ports for the load balancer. If you choose to create a security group, the console automatically adds rules to allow all traffic on these ports.

  Be sure to review the security group rules to ensure that they allow traffic on the listener and health check ports for the new load balancer. When you delete your load balancer, this security group is not deleted automatically.

  If you add a listener to an existing load balancer, you must review your security groups to ensure they allow traffic on the new listener port in both directions.
The web-tier ELB is the only one public facing and should have rules to allow inbound traffic the application ports (ex: HTTP and HTTPS) from any IP source (0.0.0.0/0).

  The outbound security group rules for the web-tier ELB should be restricted to only the backend web-server instances for the appropriate application ports.

  Associating the web-tier ELB security group to any other instances that shouldn't be publicly accessible exposes them to unauthorized access."
  solution    : "Using the Amazon unified command line interface:

* Create new launch configuration using the correct security groups for Web and/or App tier:

  aws autoscaling create-launch-configuration --launch-configuration-name _<web_tier_launch_config>_ --image-id _<web_tier_ami>_ --key-name _<your_key_pair>_ --security-groups _<web_tier_security_group>/<app_tier_security_group>_ --instance-type _<desired_instance_type>_ --iam-instance-profile <we_b_tier_instance_profile>/_<_app_tier_instance_profile>_"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLaunchConfigurations"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:LaunchConfigurations\">"
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:LaunchConfigurations/autoscaling:member\">"
  xsl_stmt    : "<xsl:text>Web Tier ELB Security Group = </xsl:text><xsl:value-of select=\"autoscaling:SecurityGroups/autoscaling:member\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Image ID = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Web Tier ELB Security Group ="
# Note: Variable @WEB_TIER_SECURITY_GROUP@ replaced with "WEB_TIER_SECURITY_GROUP" in field "not_expect".
  not_expect  : "Web Tier ELB Security Group = WEB_TIER_SECURITY_GROUP"
</custom_item>

<custom_item>
  type        : EC2
  description : "6.19 Create the Web tier Security Group and ensure it allows inbound connections from Web tier ELB Security Group for explicit ports"
  info        : "A _security group_ acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.

  For each security group, you add _rules_ that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.

  This is required for both the configured port and protocol for the listener on the back-end instance and the port and protocol used for the health check.
This protects the Web-server tier from unauthorized access, it is recommended to add inbound security group rules that allow traffic for the specific application protocol and ports by referencing as source the security group associated with the Web tier ELB.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* First remove all the ingress rules for the Web tier security group (use the \"WebTierSecurityGroup\" element from Audit procedure):

  aws ec2 describe-security-groups --group-id _<__web_tier_security_group_> --query \"SecurityGroups[0].IpPermissions\" > /tmp/IpPermissions.json
aws ec2 revoke-security-group-ingress --group-id _<__web_tier_security_group_> --ip-permissions file:///tmp/IpPermissions.json

* Add an ingress rule for a specific port, using --source-group option to specify the Web tier ELB security group as the source of the connections:

  aws ec2 authorize-security-group-ingress --group-id _<__web_tier_security_group_> --protocol tcp --port _<specific_port>_ --source-group _<web_tier_elb_security_group>_"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @WEB_TIER_TAG@ replaced with "WEB_TIER_TAG" in field "xsl_stmt".
# Note: Variable @WEB_TIER_TAG_VALUE@ replaced with "WEB_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'WEB_TIER_TAG' and ec2:value = 'WEB_TIER_TAG_VALUE']\">"
# Note: Variable @WEB_TIER_TAG@ replaced with "WEB_TIER_TAG" in field "xsl_stmt".
# Note: Variable @WEB_TIER_TAG_VALUE@ replaced with "WEB_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'WEB_TIER_TAG' and ec2:value = 'WEB_TIER_TAG_VALUE']\">"
  xsl_stmt    : "<xsl:text>IP Protocol: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:ipProtocol\"/><xsl:text> | From Port: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:fromPort\"/><xsl:text> | To Port: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:toPort\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No ELB Connections Found.</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.20 Ensure Web tier Security Group has no inbound rules for CIDR of 0 (Global Allow)"
  info        : "A _security group_ acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.

  For each security group, you add _rules_ that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
Considering any of the non-public tiers receive requests only either from the upper tier or from resources inside the same VPC, any inbound rules that allow traffic from any source (0.0.0.0/0) are not necessary and should be removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Remove the ingress rules for CIDR 0.0.0.0/0 (use the \"WebTierSecurityGroup\" element from Audit procedure):

  aws ec2 revoke-security-group-ingress --group-id _<__web_tier_security_group_> --protocol tcp/udp --port _<specific_port>_ --cidr 0.0.0.0/0"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @WEB_TIER_TAG@ replaced with "WEB_TIER_TAG" in field "xsl_stmt".
# Note: Variable @WEB_TIER_TAG_VALUE@ replaced with "WEB_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'WEB_TIER_TAG' and ec2:value = 'WEB_TIER_TAG_VALUE']\">"
# Note: Variable @WEB_TIER_TAG@ replaced with "WEB_TIER_TAG" in field "xsl_stmt".
# Note: Variable @WEB_TIER_TAG_VALUE@ replaced with "WEB_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'WEB_TIER_TAG' and ec2:value = 'WEB_TIER_TAG_VALUE']\">"
  xsl_stmt    : "<xsl:text>IP Protocol: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:ipProtocol\"/><xsl:text> | From Port: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:fromPort\"/><xsl:text> | To Port: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:toPort\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No ELB Connections Found.</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.21 Create the App tier ELB Security Group and ensure only accepts HTTP/HTTPS"
  info        : "A _security group_ acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.

  For each security group, you add _rules_ that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
The SG associated with the App tier ELB should allow connectivity from the security group associated with Web tier instances only for the HTTP (TCP 80) and HTTPS (TCP 443) ports.

  The defaults for HTTP and HTTPS are used as an example, any other ports would apply depending on the application design."
  solution    : "Using the Amazon unified command line interface:

* First remove all the ingress rules for the security group associated with the App tier ELB:

  aws ec2 describe-security-groups --group-id <_app_tier_elb_security_group_> --query \"SecurityGroups[0].IpPermissions\" > /tmp/IpPermissions.json
aws ec2 revoke-security-group-ingress --group-id <_app_tier_elb_security_group_> --ip-permissions file:///tmp/IpPermissions.json

* create locally the below json file containing ingress rules for HTTP (TCP 80) and HTTPS (TCP 443) ports only from <web_tier_security_group> and name it IpPermissions.json:

  [
 {
 \"PrefixListIds\": [],
 \"FromPort\": 80,
 \"IpRanges\": [],
 \"ToPort\": 80,
 \"IpProtocol\": \"tcp\",
 \"UserIdGroupPairs\": [
 {
 \"UserId\": \"<_aws_account_number>_\",
 \"GroupId\": \"<web_tier_security_group>\"
 }
 ]
 },
 {
 \"PrefixListIds\": [],
 \"FromPort\": 443,
 \"IpRanges\": [],
 \"ToPort\": 443,
 \"IpProtocol\": \"tcp\",
 \"UserIdGroupPairs\": [
 {
 \"UserId\": \"<_aws_account_number>_\",
 \"GroupId\": \"<web_tier_security_group>\"
 }
 ]
 }
]

* Add to the security group associated with the App tier ELB the above ingress rules:

  aws ec2 authorize-security-group-ingress --group-id <_app_tier_elb_security_group_> --ip-permissions file:///PathTo/IpPermissions.json"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item\">"
  xsl_stmt    : "<xsl:text>Security Group: </xsl:text><xsl:value-of select=\"ec2:groupId\"/><xsl:text> | Source: </xsl:text><xsl:value-of select=\"ec2:ipPermissions/ec2:item/ec2:ipRanges/ec2:item/ec2:cidrIp\"/><xsl:text> | Port: </xsl:text><xsl:value-of select=\"ec2:ipPermissions/ec2:item/ec2:toPort\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Source: No security groups found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
# Note: Variable @APP_TIER_SECURITY_GROUP@ replaced with "APP_TIER_SECURITY_GROUP" in field "regex".
  regex       : "Security Group: APP_TIER_SECURITY_GROUP \| Source: .*"
# Note: Variable @APP_TIER_SECURITY_GROUP@ replaced with "APP_TIER_SECURITY_GROUP" in field "expect".
  expect      : "Security Group: APP_TIER_SECURITY_GROUP \| Source: 0\.0\.0\.0.* \| Port: (80|443)$"
</custom_item>

<custom_item>
  type        : EC2
  description : "6.22 Create the App tier Security Group and ensure it allows inbound connections from App tier ELB Security Group for explicit ports"
  info        : "A _security group_ acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.

  For each security group, you add _rules_ that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.

  This is required for both the configured port and protocol for the listener on the back-end instance and the port and protocol used for the health check.
This protects the App-server tier from unauthorized access, it is recommended to add inbound security group rules that allow traffic for the specific application protocol and ports by referencing as source the security group associated with the App tier ELB.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* First remove all the ingress rules for the App tier security group (use the \"AppTierSecurityGroup\" element from Audit procedure):

  aws ec2 describe-security-groups --group-id _<__app_tier_security_group_> --query \"SecurityGroups[0].IpPermissions\" > /tmp/IpPermissions.json
aws ec2 revoke-security-group-ingress --group-id _<__app_tier_security_group_> --ip-permissions file:///tmp/IpPermissions.json

* Add an ingress rule for a specific port, using --source-group option to specify the App tier ELB security group as the source of the connections:

  aws ec2 authorize-security-group-ingress --group-id _<__app_tier_security_group_> --protocol tcp --port _<specific_port>_ --source-group _<__app_tier_elb_security_group_>"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @APP_TIER_TAG@ replaced with "APP_TIER_TAG" in field "xsl_stmt".
# Note: Variable @APP_TIER_TAG_VALUE@ replaced with "APP_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'APP_TIER_TAG' and ec2:value = 'APP_TIER_TAG_VALUE']\">"
# Note: Variable @APP_TIER_TAG@ replaced with "APP_TIER_TAG" in field "xsl_stmt".
# Note: Variable @APP_TIER_TAG_VALUE@ replaced with "APP_TIER_TAG_VALUE" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'APP_TIER_TAG' and ec2:value = 'APP_TIER_TAG_VALUE']\">"
  xsl_stmt    : "<xsl:text>IP Protocol: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:ipProtocol\"/><xsl:text> | From Port: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:fromPort\"/><xsl:text> | To Port: </xsl:text><xsl:value-of select=\"../../ec2:ipPermissions/ec2:item/ec2:toPort\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No ELB Connections Found.</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.23 Ensure App tier Security Group has no inbound rules for CIDR of 0 (Global Allow)"
  info        : "A _security group_ acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.

  For each security group, you add _rules_ that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
Considering any of the non-public tiers receive requests only either from the upper tier or from resources inside the same VPC, any inbound rules that allow traffic from any source (0.0.0.0/0) are not necessary and should be removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Remove the ingress rules for CIDR 0.0.0.0/0 (use the \"AppTierSecurityGroup\" element from Audit procedure) :

  aws ec2 revoke-security-group-ingress --group-id _<__app_tier_security_group_> --protocol tcp/udp --port _<specific_port>_ --cidr 0.0.0.0/0"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item/ec2:tagSet/ec2:item[ec2:key = 'aws:cloudformation:stack-name' and ec2:value = 'default-mediator']\">"
  xsl_stmt    : "<xsl:for-each select=\"//ec2:item/ec2:ipPermissions/ec2:item[ec2:ipRanges/ec2:item/ec2:cidrIp = '0.0.0.0/0']\">"
  xsl_stmt    : "<xsl:text>Protocol = </xsl:text><xsl:value-of select=\"././ec2:ipProtocol\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Protocol = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.24 Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports"
  info        : "A _security group_ acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.

  For each security group, you add _rules_ that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.

  The port for these inbound rules would depend on the Database engine used and the configured port.

  The default values are:

  MySQL - TCP 3306

  MSSQL - TCP 1433

  Oracle SQL - TCP 1521

  PostgreSQL - TCP 5432

  MariaDB - TCP 3306

  Amazon Aurora DB - TCP 3306
This protects the Data tier from unauthorized access, it is recommended to add inbound security group rules that allow traffic for the specific database protocol and ports by referencing as source the security group associated with the App tier instances.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* First remove all the ingress rules for the security group configured for your RDS DB instance:

  aws ec2 describe-security-groups --group-id _<data_tier_security_group>_ --query \"SecurityGroups[0].IpPermissions\" > /tmp/IpPermissions.json
aws ec2 revoke-security-group-ingress --group-id _<data_tier_security_group>_ --ip-permissions file:///tmp/IpPermissions.json

* Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:

  aws ec2 authorize-security-group-ingress --group-id _<data_tier_security_group>_ --protocol tcp --port _<specific_port>_ --source-group _<app_tier_security_group>_"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @DATA_TIER_SECURITY_GROUP@ replaced with "DATA_TIER_SECURITY_GROUP" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item[ec2:groupId = 'DATA_TIER_SECURITY_GROUP']\">"
# Note: Variable @DATA_TIER_SECURITY_GROUP@ replaced with "DATA_TIER_SECURITY_GROUP" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item[ec2:groupId = 'DATA_TIER_SECURITY_GROUP']\">"
  xsl_stmt    : "<xsl:text>Ingress Rules = </xsl:text><xsl:value-of select=\"//ec2:ipPermissions/ec2:item\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Ingress Rules = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.25 Ensure Data tier Security Group has no inbound rules for CIDR of 0 (Global Allow)"
  info        : "A _security group_ acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC.

  For each security group, you add _rules_ that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.
Considering any of the non-public tiers receive requests only either from the upper tier or from resources inside the same VPC, any inbound rules that allow traffic from any source (0.0.0.0/0) are not necessary and should be removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* Remove the ingress rules for CIDR 0.0.0.0/0:

  aws ec2 revoke-security-group-ingress --group-id _<data_tier_security_group>_ --protocol tcp/udp --port _<specific_port>_ --cidr 0.0.0.0/0"
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|1S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeSecurityGroups"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
# Note: Variable @DATA_TIER_SECURITY_GROUP@ replaced with "DATA_TIER_SECURITY_GROUP" in field "xsl_stmt".
  xsl_stmt    : "<xsl:when test=\"//ec2:securityGroupInfo/ec2:item[ec2:groupId = 'DATA_TIER_SECURITY_GROUP' and ec2:ipPermissions/ec2:item/ec2:ipRanges/ec2:item/ec2:cidrIp = '0.0.0.0/0']\">"
# Note: Variable @DATA_TIER_SECURITY_GROUP@ replaced with "DATA_TIER_SECURITY_GROUP" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:securityGroupInfo/ec2:item[ec2:groupId = 'DATA_TIER_SECURITY_GROUP' and ec2:ipPermissions/ec2:item/ec2:ipRanges/ec2:item/ec2:cidrIp = '0.0.0.0/0']\">"
  xsl_stmt    : "<xsl:text>Ingress Rules = </xsl:text><xsl:value-of select=\"//ec2:ipPermissions/ec2:item\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Ingress Rules = Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : ELB
  description : "6.26 Ensure the App tier ELB is created as Internal"
  info        : "An internal load balancer routes traffic to your EC2 instances in private subnets using private IP addresses.

  Create an internal load balancer and register the database servers with it. The web servers receive requests from the Internet-facing load balancer and send requests for the database servers to the internal load balancer. The database servers receive requests from the internal load balancer.

  When an internal load balancer is created, it receives a public DNS name with the following form:

  internal-_name_-_123456789_._region_.elb.amazonaws.com

  The DNS servers resolve the DNS name of your load balancer to the private IP addresses of the load balancer nodes for your internal load balancer. Each load balancer node is connected to the private IP addresses of the back-end instances that are in its Availability Zone using elastic network interfaces.
Creating the App tier ELB as internal will prevent access to the app tier from the Internet and will allow access from the Web tier instances."
  solution    : "Using the Amazon unified command line interface:

* Create new internal ELB for your App tier:

  aws elb create-load-balancer --load-balancer-name <app_tier_elb> --scheme internal --listeners <_listener_config_> --subnets _<app_tier_subnet1>_ _<app_tier_subnet2>_ --security-groups <app_tier_elb_security_group>

* Register App tier instances with the new App tier ELB:

  aws elb register-instances-with-load-balancer --load-balancer-name <app_tier_elb> --instances _<app_tier_instance1> <app_tier_instance2> <app_tier_instance3>_"
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLoadBalancers"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//elb:LoadBalancerDescriptions\">"
  xsl_stmt    : "<xsl:for-each select=\"//elb:LoadBalancerDescriptions/elb:member\">"
  xsl_stmt    : "<xsl:value-of select=\"elb:LoadBalancerName\"/><xsl:text> : Scheme = </xsl:text><xsl:value-of select=\"elb:Scheme\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>No Scheme Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
# Note: Variable @APP_TIER_ELB@ replaced with "APP_TIER_ELB" in field "regex".
  regex       : "APP_TIER_ELB : Scheme ="
# Note: Variable @APP_TIER_ELB@ replaced with "APP_TIER_ELB" in field "expect".
  expect      : "APP_TIER_ELB : Scheme = internal"
</custom_item>

<custom_item>
  type        : EC2
  description : "6.27 Ensure EC2 instances within Web Tier have no Elastic / Public IP addresses associated"
  info        : "All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT).

  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
Without any Public or Elastic IP associated on the EC2 instance in the Web tier, no inbound traffic can reach the instance from the Internet.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* If in the above output the \"IpOwnerId\" is \"amazon\" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:

* Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)

  aws ec2 modify-subnet-attribute --subnet-id <web_tier_subnet1> --no-map-public-ip-on-launch

* Create an AMI from the instance and launch a replacement instance in the same subnet



* If in the above output the \"IpOwnerId\" is an AWS account number, this is an Elastic IP and it can be disassociated:

  aws ec2 disassociate-address --public-ip _<elastic_ip_address>_"
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeInstances"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:reservationSet/ec2:item\">"
# Note: Variable @WEB_TIER_APPLICATION_VPC@ replaced with "WEB_TIER_APPLICATION_VPC" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:reservationSet/ec2:item/ec2:instancesSet/ec2:item[ec2:vpcId = 'WEB_TIER_APPLICATION_VPC']\">"
  xsl_stmt    : "<xsl:text>Public IP: </xsl:text><xsl:value-of select=\"ec2:networkInterfaceSet/ec2:item/ec2:association/ec2:publicIp\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Public IP: Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Public IP:"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.28 Ensure EC2 instances within App Tier have no Elastic / Public IP addresses associated"
  info        : "All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT).

  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
Without any Public or Elastic IP associated on the EC2 instance in the App tier, no inbound traffic can reach the instance from the Internet.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* If in the above output the \"IpOwnerId\" is \"amazon\" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:

* Make sure that the App tier subnet doesn't assign public Ip's at launch (run the command for all App tier subnets)

  aws ec2 modify-subnet-attribute --subnet-id _<app_tier_subnet1>_ --no-map-public-ip-on-launch

* Create an AMI from the instance and launch a replacement instance in the same subnet



* If in the above output the \"IpOwnerId\" is an AWS account number, this is an Elastic IP and it can be disassociated:

  aws ec2 disassociate-address --public-ip _<elastic_ip_address>_"
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeInstances"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:reservationSet/ec2:item\">"
# Note: Variable @APP_TIER_APPLICATION_VPC@ replaced with "APP_TIER_APPLICATION_VPC" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:reservationSet/ec2:item/ec2:instancesSet/ec2:item[ec2:vpcId = 'APP_TIER_APPLICATION_VPC']\">"
  xsl_stmt    : "<xsl:text>Public IP: </xsl:text><xsl:value-of select=\"ec2:networkInterfaceSet/ec2:item/ec2:association/ec2:publicIp\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Public IP: Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Public IP:"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : EC2
  description : "6.29 Ensure EC2 instances within Data Tier have no Elastic / Public IP addresses associated"
  info        : "All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT).

  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC.
Without any Public or Elastic IP associated on the EC2 instance in the Data tier, no inbound traffic can reach the instance from the Internet.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Using the Amazon unified command line interface:

* If in the above output the \"IpOwnerId\" is \"amazon\" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:

* Make sure that the Data tier subnets doesn't assign public Ip's at launch (run the command for all Data tier subnets)

  aws ec2 modify-subnet-attribute --subnet-id _<data_tier_subnet1>_ --no-map-public-ip-on-launch

* Create an AMI from the instance and launch a replacement instance in the same subnet



* If in the above output the \"IpOwnerId\" is an AWS account number, this is an Elastic IP and it can be disassociated:

  aws ec2 disassociate-address --public-ip _<elastic_ip_address>_"
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeInstances"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//ec2:reservationSet/ec2:item\">"
# Note: Variable @DATA_TIER_APPLICATION_VPC@ replaced with "DATA_TIER_APPLICATION_VPC" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//ec2:reservationSet/ec2:item/ec2:instancesSet/ec2:item[ec2:vpcId = 'DATA_TIER_APPLICATION_VPC']\">"
  xsl_stmt    : "<xsl:text>Public IP: </xsl:text><xsl:value-of select=\"ec2:networkInterfaceSet/ec2:item/ec2:association/ec2:publicIp\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Public IP: Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  not_expect  : "Public IP:"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "6.32 Ensure Auto-Scaling Launch Configuration for Web Tier is configured to use the Web Tier Security Group"
  info        : "Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.

  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.

  These properties can be defined within the Auto-Scaling Group configuration.

  Additional properties can be defined through the launch configuration such as:

* Instance Type
* Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)
* IAM Role
* Security Groups
Instances within the Web Tier Auto-Scaling Group, are launched using the Security Group configured in the Auto-Scaling Launch Configuration. This Security Group allows only traffic specific to the Web Tier, and you must ensure that only this Web Tier Security Group is configured in the Launch Configuration."
  solution    : "Using the Amazon unified command line interface:

* Create new launch configuration for the Web tier using the Web Tier Security Group:

  aws autoscaling create-launch-configuration --launch-configuration-name <_new_web_tier_launch_config_> --image-id <_web_tier_ami_> --key-name <_your_key_pair_> --security-groups <web_tier_security_group> --instance-type <desired_instance_type> --iam-instance-profile <_web_tier_instance_profile_>"
  reference   : "800-171|3.1.5,800-53|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,SWIFT-CSCv1|1.2"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLaunchConfigurations"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:LaunchConfigurations/autoscaling:member\">"
# Note: Variable @WEB_TIER_LAUNCH_CONFIG@ replaced with "WEB_TIER_LAUNCH_CONFIG" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:LaunchConfigurations/autoscaling:member[autoscaling:LaunchConfigurationName = 'WEB_TIER_LAUNCH_CONFIG']\">"
  xsl_stmt    : "<xsl:value-of select=\"autoscaling:LaunchConfigurationName\"/><xsl:text> - Security Group = </xsl:text><xsl:value-of select=\"autoscaling:SecurityGroups/autoscaling:member\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Security Group Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".* - Security Group ="
  expect      : ".* - Security Group = .*"
</custom_item>

<custom_item>
  type        : AUTOSCALING
  description : "6.33 Ensure Auto-Scaling Launch Configuration for App Tier is configured to use the App Tier Security Group"
  info        : "Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.

  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.

  These properties can be defined within the Auto-Scaling Group configuration.

  Additional properties can be defined through the launch configuration such as:

* Instance Type
* Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)
* IAM Role
* Security Groups
Instances within the App Tier Auto-Scaling Group, are launched using the Security Group configured in the Auto-Scaling Launch Configuration. This Security Group allows only traffic specific to the App Tier, and you must ensure that only this App Tier Security Group is configured in the Launch Configuration."
  solution    : "Using the Amazon unified command line interface:

* Create new launch configuration for the App tier using the App Tier Security Group :

  aws autoscaling create-launch-configuration --launch-configuration-name <_new_app_tier_launch_config_> --image-id <_app_tier_ami>_ --key-name <_your_key_pair>_ --security-groups <app_tier_security_group_>_ --instance-type <_desired_instance_type>_ --iam-instance-profile <_app_tier_instance_profile>_"
  reference   : "800-171|3.1.5,800-53|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,SWIFT-CSCv1|1.2"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeLaunchConfigurations"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//autoscaling:LaunchConfigurations/autoscaling:member\">"
# Note: Variable @APP_TIER_LAUNCH_CONFIG@ replaced with "APP_TIER_LAUNCH_CONFIG" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//autoscaling:LaunchConfigurations/autoscaling:member[autoscaling:LaunchConfigurationName = 'APP_TIER_LAUNCH_CONFIG']\">"
  xsl_stmt    : "<xsl:value-of select=\"autoscaling:LaunchConfigurationName\"/><xsl:text> - Security Group = </xsl:text><xsl:value-of select=\"autoscaling:SecurityGroups/autoscaling:member\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Security Group Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : ".* - Security Group ="
  expect      : ".* - Security Group = .*"
</custom_item>

<custom_item>
  type        : RDS
  description : "6.34 Ensure RDS Database is configured to use the Data Tier Security Group"
  info        : "Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.

  There are 6 database engines available for customer to run their database workloads on:

* Amazon Aurora (MySQL Compatible)
* MySQL
* MariaDB
* Oracle
* Microsoft SQL Server
* PostgreSQL

  Customers can deploy RDS databases within a VPC through the configuration of:

* Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.
* Network access through configuration of Security Groups for RDS
* Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address
Network access to the managed Data-Tier must be tightly controlled using Security Groups for RDS and non local accessibility of the DB instance."
  solution    : "Using the Amazon unified command line interface:

* Modify each non-compliant DB instance, and configure it to use the Data Tier Security Group:


  aws rds modify-db-instance --db-instance-identifier <_your_db_instance_> --vpc-security-group-ids <_data_tier_security_group_>"
  reference   : "800-171|3.1.5,800-53|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,SWIFT-CSCv1|1.2"
  see_also    : "https://workbench.cisecurity.org/files/260"
  aws_action  : "DescribeDBInstances"
  xsl_stmt    : "<xsl:template match=\"/\">"
  xsl_stmt    : "<xsl:choose>"
  xsl_stmt    : "<xsl:when test=\"//rds:DBInstances\">"
# Note: Variable @DB_INSTANCE_IDENTIFIER@ replaced with "DB_INSTANCE_IDENTIFIER" in field "xsl_stmt".
  xsl_stmt    : "<xsl:for-each select=\"//rds:DBInstances/rds:DBInstance[rds:DBInstanceIdentifier = 'DB_INSTANCE_IDENTIFIER']\">"
  xsl_stmt    : "<xsl:text>Security Group = </xsl:text><xsl:value-of select=\"rds:VpcSecurityGroups/rds:VpcSecurityGroupMembership/rds:VpcSecurityGroupId\"/><xsl:text>&#10;</xsl:text>"
  xsl_stmt    : "</xsl:for-each>"
  xsl_stmt    : "</xsl:when>"
  xsl_stmt    : "<xsl:otherwise>"
  xsl_stmt    : "<xsl:text>Security Group Not Found</xsl:text>"
  xsl_stmt    : "</xsl:otherwise>"
  xsl_stmt    : "</xsl:choose>"
  xsl_stmt    : "</xsl:template>"
  regex       : "Security Group ="
  expect      : "Security Group = .*"
</custom_item>

</check_type>
