#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2020/04/22 $
#
# Description : This document implements the security configuration as recommended by the
#               DISA Microsoft DotNet Framework 4.0 STIG v1r9 STIG.
#
#<ui_metadata>
#<display_name>DISA STIG for Microsoft Dot Net Framework 4.0 v1r9</display_name>
#<spec>
#  <type>DISA STIG</type>
#  <name>Microsoft Dot Net Framework 4.0 v1r8</name>
#  <version>1.9.0</version>
#  <link>https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip</link>
#</spec>
#<labels>windows,dotnet,dotnet_4,dotnet_4.0</labels>
#<variables>
#  <variable>
#    <name>CUSTOM_APP_PATH</name>
#    <default>c:\temp</default>
#    <description>Full path to custom application</description>
#    <info>This location will be crawled multiple times for content in configuration files.  There may be a performance impact if there are many sub directories below the locaqtion.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Windows" version:"2">
<group_policy:"DISA_STIG_Microsoft_Dot_Net_Framework_4.0">

<if>
  <condition type:"AND">
    <custom_item>
      type        : REGISTRY_SETTING
      description : "Verify that NET Framework 4 is installed."
      value_type  : POLICY_DWORD
      value_data  : 1
      reg_key     : "HKLM\Software\Microsoft\Net Framework Setup\Ndp\V4"
      reg_item    : "Install"
      reg_enum    : ENUM_SUBKEYS
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "DISA_STIG_Microsoft_Dot_Net_Framework_4.0_v1r9.audit from DISA Microsoft DotNet Framework 4.0 STIG v1r9 STIG"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
    </report>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REG_CHECK
          description : "Registry key StrongName Verification exists"
          value_type  : POLICY_TEXT
          value_data  : "HKLM\Software\Microsoft\Strongname\Verification"
          reg_option  : MUST_EXIST
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : REG_CHECK_SUBKEYS
          description : "APPNET0031 - Digital signatures assigned to strongly named assemblies must be verified."
          info        : "A strong name consists of the assembly's identity, simple text name, version number, and culture information (if provided)-plus a public key and a digital signature.  Strong names serve to identify the author of the code.  If digital signatures used to sign strong name assemblies are not verified, any self signed code can be impersonated.  This can lead to a loss of system integrity."
          solution    : "Use regedit to remove the values stored in Windows registry key HKLM\Software\Microsoft\StrongName\Verification. There should be no assemblies or hash values listed under this registry key.

All assemblies must require strong name verification in a production environment.

Strong name assemblies that do not require verification in a development or test environment must have documented approvals from the IAO."
          reference   : "800-53|IA-3,8500.2|DCSL-1,CAT|II,CSF|PR.AC-1,HIPAA|164.312(a)(2)(iv),ITSG-33|IA-3,NESA|T5.4.3,PCI-DSS|4.1,Rule-ID|SV-7438r3_rule,STIG-ID|APPNET0031,TBA-FIISB|27.1,Vuln-ID|V-7055"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type  : POLICY_TEXT
          value_data  : "HKLM\Software\Microsoft\Strongname\Verification"
          reg_option  : MUST_NOT_EXIST
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "APPNET0031 - Digital signatures assigned to strongly named assemblies must be verified."
          info        : "A strong name consists of the assembly's identity, simple text name, version number, and culture information (if provided)-plus a public key and a digital signature.  Strong names serve to identify the author of the code.  If digital signatures used to sign strong name assemblies are not verified, any self signed code can be impersonated.  This can lead to a loss of system integrity."
          solution    : "Use regedit to remove the values stored in Windows registry key HKLM\Software\Microsoft\StrongName\Verification. There should be no assemblies or hash values listed under this registry key.

All assemblies must require strong name verification in a production environment.

Strong name assemblies that do not require verification in a development or test environment must have documented approvals from the IAO."
          reference   : "800-53|IA-3,8500.2|DCSL-1,CAT|II,CSF|PR.AC-1,HIPAA|164.312(a)(2)(iv),ITSG-33|IA-3,NESA|T5.4.3,PCI-DSS|4.1,Rule-ID|SV-7438r3_rule,STIG-ID|APPNET0031,TBA-FIISB|27.1,Vuln-ID|V-7055"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>
      </else>
    </if>

    <custom_item>
      type                 : REGISTRY_SETTING
      description          : "APPNET0046 - The Trust Providers Software Publishing State must be set to 0x23C00."
      info                 : "Microsoft Windows operating systems provide a feature called Authenticode.  Authenticode technology and its underlying code signing mechanisms serve to provide a structure to identify software publishers and ensure that software applications have not been tampered with.  Authenticode technology relies on digital certificates and is based on Public Key Cryptography Standards (PKCS) #7 (encrypted key specification), PKCS #10 (certificate request formats), X.509 (certificate specification), and Secure Hash Algorithm (SHA) and MD5 hash algorithms.

The manner in which the Authenticode technology validates a certificate and determines what is considered a valid certificate can be modified to meet the mission of the Microsoft Windows system.  Each facade of certificate validation is controlled through the bits that makeup the hexadecimal value for the Authenticode setting.  An improper setting will allow non-valid certificates to be accepted and can put the integrity of the system into jeopardy.

The hexadecimal value of 0x23C00 will implement the following certificate enforcement policy:
- Trust the Test Root = FALSE
- Use expiration date on certificates = TRUE
- Check the revocation list = TRUE
- Offline revocation server OK (Individual) = TRUE
- Offline revocation server OK (Commercial) = TRUE
- Java offline revocation server OK (Individual) = TRUE
- Java offline revocation server OK (Commercial) = TRUE
- Invalidate version 1 signed objects = FALSE
- Check the revocation list on Time Stamp Signer = FALSE
- Only trust items found in the Trust DB = FALSE"
      solution             : "This fix must be performed for each user on the system.

Using regedit, change the hexadecimal value of the 'HKEY_USER\[UNIQUE USER SID VALUE]\Software\Microsoft\Windows\CurrentVersion\WinTrust\Trust Providers\Software Publishing\State' registry key to 0x23C00."
      reference            : "800-53|IA-5(2),8500.2|DCSL-1,CAT|II,CSF|PR.AC-1,HIPAA|164.312(a)(2)(iv),ITSG-33|IA-5(2),PCI-DSS|4.1,Rule-ID|SV-7444r3_rule,SANS-CSC|17-10,STIG-ID|APPNET0046,Vuln-ID|V-7061"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_HEXADECIMAL
      value_data           : "023C00"
      reg_key              : "HKU\Software\Microsoft\Windows\Currentversion\Wintrust\Trust Providers\Software Publishing"
      reg_item             : "State"
      reg_ignore_hku_users : "S-1-5-18,S-1-5-19,S-1-5-20"
      reg_option           : CAN_NOT_BE_NULL
    </custom_item>

    <custom_item>
      type                 : AUDIT_POWERSHELL
      description          : "APPNET0048 - Developer certificates used with the .NET Publisher Membership Condition must be approved by the IAO."
      info                 : "A .Net assembly will satisfy the Publisher Membership Condition if it is signed with a software publisher's Authenticode X.509v3 digital certificate that can be verified by the Windows operating system as having a chain of trust that leads to a trusted root certificate stored in the user's certificate store. The  Publisher Membership Condition can be used to identify an organization, developer, vendor, or other entity as the ultimate source of the assembly, even if the code itself was obtained from a third party, such as a mirror site.  Access to system resources, such as file systems or printers, may then be granted to the assembly based on the trust relationship with the identified entity.

Certificates used to sign assemblies so the Publisher Member Condition may be applied must originate from a trusted source.  Using a certificate that is not from a trusted source could potentially violate  system integrity and confidentiality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution             : "Trust must be established when utilizing Publishers Membership Condition.  All publishers' certificates must have documented approvals from the IAO."
      reference            : "800-53|CA-6,8500.2|DCSL-1,CAT|II,CSF|PR.AC-1,HIPAA|164.312(a)(2)(iv),ITSG-33|CA-6,NESA|M1.3.1,PCI-DSS|3.5,Rule-ID|SV-7446r3_rule,SANS-CSC|17-10,STIG-ID|APPNET0048,Vuln-ID|V-7063"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_TEXT
      value_data           : "Publisher .* FullTrust"
      powershell_args      : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*\caspol.exe) | Select-Object -Last 1 Directory | ForEach-Object { $cmd = $($_.Directory.ToString() + '\caspol.exe'); & $cmd -m -lg}| Select-String -Pattern 'Publisher.*FullTrust'"
      only_show_cmd_output : YES
      powershell_option    : CAN_BE_NULL
      severity             : MEDIUM
    </custom_item>

    <custom_item>
      type                 : AUDIT_POWERSHELL
      description          : "APPNET0052 - Encryption keys used for the .NET Strong Name Membership Condition must be protected."
      info                 : "The Strong Name Membership condition requires that member assemblies be defined with Strong Names.  A strong name consists of the assembly's identity, simple text name, version number, and culture information (if provided) - plus a public key and a digital signature.  If assemblies do not have a strong name assigned, the assembly cannot be unique and the author of the code cannot be uniquely identified.  In order to create the strong name, the developer must use a cryptographic key pair to sign the assembly.  If the developer does not protect the key, the key can be stolen and used to sign any application, including malware applications.  This could adversely affect application integrity and confidentiality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution             : "Ask the Systems Programmer how the private keys used to sign the assembly are protected.

Private keys are simply values stored as strings of data.  Keys can be stored in files on the file system or in a centralized data repository.

Adequate protection methods include, but are not limited to:

 - utilizing centralized key management;
 - using strict file permissions to limit access; and
 - tying strong pass phrases to the key.

The private key(s) used to sign the assembly must be protected.  Utilize centralized key management or strict file permissions along with strong pass phrases and/or other well established industry practices for managing and controlling access to private keys."
      reference            : "800-171|3.5.5,800-171|3.5.6,800-53|IA-4,8500.2|DCSL-1,CAT|II,CN-L3|7.1.2.7(b),CSF|PR.AC-1,HIPAA|164.312(a)(2)(iv),ITSG-33|IA-4,PCI-DSS|3.5,Rule-ID|SV-7450r3_rule,SANS-CSC|17-10,STIG-ID|APPNET0052,SWIFT-CSCv1|5,Vuln-ID|V-7067"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_TEXT
      value_data           : "StrongName .* FullTrust"
      powershell_args      : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*\caspol.exe) | Select-Object -Last 1 Directory | ForEach-Object { $cmd = $($_.Directory.ToString() + '\caspol.exe'); & $cmd -m -lg}| Select-String -Pattern 'StrongName.*FullTrust'"
      only_show_cmd_output : YES
      powershell_option    : CAN_BE_NULL
      severity             : MEDIUM
    </custom_item>

    <report type:"WARNING">
      description : "APPNET0055 - CAS and policy configuration files must be backed up."
      info        : "A successful disaster recovery plan requires that CAS policy and CAS policy configuration files are identified and included in systems disaster backup and recovery events.  Documentation regarding the location of system and application specific CAS policy configuration files and the frequency in which backups occur is required.  If these files are not identified and the information is not documented, there is the potential that critical application configuration files may not be included in disaster recovery events which could lead to an availability risk.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "All CAS policy and policy configuration files must be included in the system backup.

All CAS policy and policy configuration files must be backed up prior to migration, deployment, and reconfiguration.

CAS policy configuration files must be included in disaster recovery plan documentation."
      reference   : "800-53|CP-9,8500.2|CODB-2,CAT|II,CSF|PR.IP-4,HIPAA|164.308(a)(7)(II),PCI-DSS|3.5,Rule-ID|SV-7452r2_rule,SANS-CSC|8-1,STIG-ID|APPNET0055,Vuln-ID|V-7069"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
    </report>

    <custom_item>
      type                 : AUDIT_POWERSHELL
      description          : "APPNET0061 - .Net Framework versions installed on the system must be supported."
      info                 : "Unsupported software introduces risks and violates DoD policy.  Applications utilizing unsupported versions of .NET introduce substantial risk to the host, network, and the enclave by virtue of the fact they leverage an architecture that is no longer updated by the vendor.  This introduces potential application integrity, availability, or confidentiality issues.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution             : "Remove unsupported versions of the .NET Framework and upgrade legacy applications that utilize unsupported versions of the .NET framework."
      reference            : "800-171|3.4.8,800-53|CM-7(4),8500.2|COMS-1,CAT|II,CSF|PR.IP-1,CSF|PR.PT-3,HIPAA|164.312(a)(2)(iv),ISO/IEC-27001|A.12.6.2,ITSG-33|CM-8,NIAv2|SS13a,PCI-DSS|2.4,Rule-ID|SV-55642r1_rule,SANS-CSC|6-1,STIG-ID|APPNET0061,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3,Vuln-ID|V-18395"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_TEXT
      value_data           : ""
      powershell_args      : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*) | Where-Object { $_.Name -like 'Mscorlib.dll'} | Select-Object -ExpandProperty VersionInfo"
      only_show_cmd_output : YES
      severity             : MEDIUM
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "APPNET0063 - .NET must be configured to validate strong names on full-trust assemblies."
      info        : "The 'bypassTrustedAppStrongNames' setting specifies whether the bypass feature that avoids validating strong names for full-trust assemblies is enabled. By default the bypass feature is enabled in .Net 4, therefore strong names are not validated for correctness when the assembly/program is loaded. Not validating strong names provides a faster application load time but at the expense of performing certificate validation.

Full trust assemblies are .Net applications launched from the local host. Strong names are digital signatures tied to .Net applications/assemblies.  .Net 4 considers applications installed locally to be fully trusted by default and grants these applications full permissions to access host resources.

The bypass feature applies to any assembly signed with a strong name and having the following characteristics:

    Fully trusted without the StrongName evidence (for example, has MyComputer zone evidence).

    Loaded into a fully trusted AppDomain.

    Loaded from a location under the ApplicationBase property of that AppDomain.

    Not delay-signed.

Not validating the certificates used to sign strong name assemblies will provide a faster application load time, but falsely assumes that signatures used to sign the application are to be implicitly trusted.  Not validating strong name certificates introduces an integrity risk to the system."
      solution    : "For 32 bit production systems:
Set 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\AllowStrongNameBypass' to a 'DWORD' value of '0'.
On 64-bit production systems:
Set 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\ AllowStrongNameBypass' and 'HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\ AllowStrongNameBypass' to a 'DWORD' value of '0'.
Or, obtain documented ISSO risk acceptance for each .Net application installed on the system.

Approval documentation will include complete list of all installed .Net applications, application versions, and acknowledgement of ISSO trust of each installed application."
      reference   : "800-53|SA-10(1),8500.2|DCSL-1,CAT|II,CSF|PR.IP-1,CSF|PR.IP-3,HIPAA|164.312(a)(2)(iv),ITSG-33|SA-10(1),PCI-DSS|4.1,Rule-ID|SV-40977r3_rule,SANS-CSC|8-1,STIG-ID|APPNET0063,Vuln-ID|V-30935"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\Software\Microsoft\.Netframework"
      reg_item    : "AllowStrongNameBypass"
      reg_option  : CAN_NOT_BE_NULL
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REG_CHECK
          description : "Check for 32 bit on 64 bit."
          value_type  : POLICY_TEXT
          value_data  : "HKLM\Software\Wow6432Node"
          reg_option  : MUST_EXIST
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : REGISTRY_SETTING
          description : "APPNET0063 - .NET must be configured to validate strong names on full-trust assemblies - Wow6432Node"
          info        : "The 'bypassTrustedAppStrongNames' setting specifies whether the bypass feature that avoids validating strong names for full-trust assemblies is enabled. By default the bypass feature is enabled in .Net 4, therefore strong names are not validated for correctness when the assembly/program is loaded. Not validating strong names provides a faster application load time but at the expense of performing certificate validation.

Full trust assemblies are .Net applications launched from the local host. Strong names are digital signatures tied to .Net applications/assemblies.  .Net 4 considers applications installed locally to be fully trusted by default and grants these applications full permissions to access host resources.

The bypass feature applies to any assembly signed with a strong name and having the following characteristics:

    Fully trusted without the StrongName evidence (for example, has MyComputer zone evidence).

    Loaded into a fully trusted AppDomain.

    Loaded from a location under the ApplicationBase property of that AppDomain.

    Not delay-signed.

Not validating the certificates used to sign strong name assemblies will provide a faster application load time, but falsely assumes that signatures used to sign the application are to be implicitly trusted.  Not validating strong name certificates introduces an integrity risk to the system."
          solution    : "For 32 bit production systems:
Set 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\AllowStrongNameBypass' to a 'DWORD' value of '0'.
On 64-bit production systems:
Set 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\ AllowStrongNameBypass' and 'HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\ AllowStrongNameBypass' to a 'DWORD' value of '0'.
Or, obtain documented ISSO risk acceptance for each .Net application installed on the system.

Approval documentation will include complete list of all installed .Net applications, application versions, and acknowledgement of ISSO trust of each installed application."
          reference   : "800-53|SA-10(1),8500.2|DCSL-1,CAT|II,CSF|PR.IP-1,CSF|PR.IP-3,HIPAA|164.312(a)(2)(iv),ITSG-33|SA-10(1),PCI-DSS|4.1,Rule-ID|SV-40977r3_rule,SANS-CSC|8-1,STIG-ID|APPNET0063,Vuln-ID|V-30935"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type  : POLICY_DWORD
          value_data  : 0
          reg_key     : "HKLM\Software\Wow6432Node\Microsoft\.Netframework"
          reg_item    : "AllowStrongNameBypass"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "APPNET0063 - .NET must be configured to validate strong names on full-trust assemblies - Wow6432Node"
          info        : "The 'bypassTrustedAppStrongNames' setting specifies whether the bypass feature that avoids validating strong names for full-trust assemblies is enabled. By default the bypass feature is enabled in .Net 4, therefore strong names are not validated for correctness when the assembly/program is loaded. Not validating strong names provides a faster application load time but at the expense of performing certificate validation.

Full trust assemblies are .Net applications launched from the local host. Strong names are digital signatures tied to .Net applications/assemblies.  .Net 4 considers applications installed locally to be fully trusted by default and grants these applications full permissions to access host resources.

The bypass feature applies to any assembly signed with a strong name and having the following characteristics:

    Fully trusted without the StrongName evidence (for example, has MyComputer zone evidence).

    Loaded into a fully trusted AppDomain.

    Loaded from a location under the ApplicationBase property of that AppDomain.

    Not delay-signed.

Not validating the certificates used to sign strong name assemblies will provide a faster application load time, but falsely assumes that signatures used to sign the application are to be implicitly trusted.  Not validating strong name certificates introduces an integrity risk to the system."
          solution    : "For 32 bit production systems:
Set 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\AllowStrongNameBypass' to a 'DWORD' value of '0'.
On 64-bit production systems:
Set 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\ AllowStrongNameBypass' and 'HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\ AllowStrongNameBypass' to a 'DWORD' value of '0'.
Or, obtain documented ISSO risk acceptance for each .Net application installed on the system.

Approval documentation will include complete list of all installed .Net applications, application versions, and acknowledgement of ISSO trust of each installed application."
          reference   : "800-53|SA-10(1),8500.2|DCSL-1,CAT|II,CSF|PR.IP-1,CSF|PR.IP-3,HIPAA|164.312(a)(2)(iv),ITSG-33|SA-10(1),PCI-DSS|4.1,Rule-ID|SV-40977r3_rule,SANS-CSC|8-1,STIG-ID|APPNET0063,Vuln-ID|V-30935"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>
      </else>
    </if>

    <report type:"WARNING">
      description : "APPNET0070 - Software utilizing .Net 4.0 must be identified and relevant access controls configured."
      info        : "With the advent of .Net 4.0, the .Net framework no longer directly configures or enforces security policy for .Net applications.  This task is now relegated to the operating system layer and the security protections built-in to .Net application 'runtime hosts' that run on the O.S.

Examples of these .Net 'runtime hosts' include; Internet Explorer, Windows Shell, ASP.NET, Database Engines or any other 'runtime hosts' that utilize .Net and load the .Net CLR.

Security protections include utilizing runtime host security controls such as sandboxing to restrict or control application behavior as designed or required.

To compensate for these design changes, Windows provides native solutions such as Software Security Policies (SSP) and Application Locker (AL) which are technologies that can be implemented via Group Policy (GPO).  SSP, AL and similar third party solutions serve to restrict execution of applications, scripts and libraries based upon cryptographic hash, security zones, path and certificate values that are associated with the application files.  Additionally, application developers will utilize 'sandboxing' techniques within their code in order to isolate 3rd party code libraries from critical system resources.

In order to assign protections to .Net 4.0 applications, the applications must first be identified and the appropriate hosting security mechanisms configured to accomplish that task.

.Net STIG guidance cannot be applied if .Net applications are not identified and documented.  The lack of an application inventory introduces confidentiality, availability and integrity vulnerabilities to the system.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Document the existence of all .Net 4.0 applications that are not provided by the host Windows OS or the Windows Secure Host Baseline (SHB).

Document the corresponding runtime hosts that are used to invoke the applications.

Document the applications security control requirements (restricting application access to resources or user access to the application)."
      reference   : "800-53|CM-8,8500.2|DCSP-1,CAT|II,CSF|ID.AM-2,HIPAA|164.312(a)(2)(iv),PCI-DSS|2.4,Rule-ID|SV-41030r2_rule,SANS-CSC|2-2,STIG-ID|APPNET0070,Vuln-ID|V-30986"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
    </report>

    <custom_item>
      type                 : AUDIT_POWERSHELL
      description          : "APPNET0060 - Remoting Services HTTP channels must utilize authentication and encryption - machine"
      info                 : "Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than using .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.

.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.

Normally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server.

Due to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data.

Microsoft provides 3 different 'channels' that are used for remoting.  They are HTTP, TCP and IPC.

Any unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution             : "Ensure encryption and message integrity are used for HTTP remoting channels.

The HTTP Channel only supports encryption and message integrity when the remote object is hosted in Internet Information Services (IIS) using TLS.

HTTP channels are protected via TLS (HTTPS).
<channels>
   <channel ref='http server' port='443'/>
</channels>

Change the channel ref parameter to utilize a TLS port and leverage TLS on the remote IIS server."
      reference            : "800-171|3.13.11,800-53|SC-13,8500.2|DCSL-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|2.2.3,Rule-ID|SV-7453r3_rule,SANS-CSC|17-7,STIG-ID|APPNET0060,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-7070"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_TEXT
      value_data           : "channel ref='http*' port='443'"
      powershell_args      : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*) | Where-Object { $_.Name -like 'machine.config' -or $_.Name -like '*.exe.config' } | Select-Xml -XPath '//formatter[@typeFilterLevel]' | Select-Object Path -Unique | Select-Xml -XPath '//channels/channel[@ref]' | Where-Object { $_.Node.ref -like 'http*' -and $_.Node.port -ne '443' } | Select-Object Path"
      only_show_cmd_output : YES
      powershell_option    : CAN_BE_NULL
      severity             : MEDIUM
    </custom_item>

    <custom_item>
      type              : AUDIT_POWERSHELL
      description       : "APPNET0062 - The .NET CLR must be configured to use FIPS approved encryption modules - machine"
      info              : "FIPS encryption is configured via .NET configuration files.  There are numerous configuration files that affect different aspects of .Net behavior.  The .NET config files are described below.

Machine Configuration Files:
The machine configuration file, Machine.config, contains settings that apply to an entire computer. This file is located in the %SYSTEMROOT%\Microsoft.NET\Framework\v4.0.30319\Config directory for 32 bit .NET 4 installations and %SYSTEMROOT%\Microsoft.NET\Framework64\v4.0.30319\Config for 64 bit systems.   Machine.config contains configuration settings for machine-wide assembly binding, built-in remoting channels, and ASP.NET.

Application Configuration Files:
Application configuration files contain settings specific to an application. If checking these files, a .NET review of a specific .NET application is most likely being conducted. These files contain configuration settings that the Common Language Runtime reads (such as assembly binding policy, remoting objects, and so on), and settings that the application can read.

The name and location of the application configuration file depends on the application's host, which can be one of the following:

Executable-hosted application configuration files.

The configuration file for an application hosted by the executable host is in the same directory as the application. The name of the configuration file is the name of the application with a .config extension. For example, an application called myApp.exe can be associated with a configuration file called myApp.exe.config.

Internet Explorer-hosted application configuration files.

If an application hosted in Internet Explorer has a configuration file, the location of this file is specified in a <link> tag with the following syntax.

<link rel='ConfigurationFileName' href='location'>

In this tag, 'location' represents a URL that point to the configuration file. This sets the application base. The configuration file must be located on the same web site as the application.

.NET 4.0 allows the CLR runtime to be configured to ignore FIPS encryption requirements.  If the CLR is not configured to use FIPS encryption modules, insecure encryption modules might be employed which could introduce an application confidentiality or integrity issue."
      solution          : "Examine the .NET CLR configuration files to find the runtime element and then the 'enforceFIPSPolicy' element.

Example:
<configuration>
  <runtime>
                <enforceFIPSPolicy enabled='true|false' />
  </runtime>
</configuration>

Delete the 'enforceFIPSPolicy' runtime element, change the setting to 'true' or there must be documented IAO approvals for the FIPS setting."
      reference         : "800-171|3.13.11,800-53|SC-13,8500.2|DCNR-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(a)(2)(iv),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|4.1,Rule-ID|SV-40966r1_rule,SANS-CSC|17-2,STIG-ID|APPNET0062,Vuln-ID|V-30926"
      see_also          : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type        : POLICY_TEXT
      value_data        : "enforceFIPSPolicy enabled='true'"
      powershell_args   : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*) | Where-Object { $_.Name -like 'machine.config' -or $_.Name -like '*.exe.config'} | Select-Xml -XPath '/configuration/runtime/enforceFIPSPolicy' | Where-Object { $_.Node.enabled -ne 'true' } | Select-Object Path"
      powershell_option : CAN_BE_NULL
    </custom_item>

    <custom_item>
      type                 : AUDIT_POWERSHELL
      description          : "APPNET0064 - .Net applications that invoke NetFx40_LegacySecurityPolicy must apply previous versions of .NET STIG guidance - machine"
      info                 : "CAS policy is .NET runtime version-specific.  In .NET Framework version 4, CAS policy is disabled by default however; it can be re-enabled by using the NetFx40_LegacySecurityPolicy setting on a per application basis. Caspol.exe is provided by Microsoft to set security policy on .Net applications prior to version 4.0. This requirement does not apply to the caspol.exe assembly or other assemblies provided with the Windows OS or the Windows Secure Host Baseline (SHB).

When invoking the NetFx40_LegacySecurityPolicy setting in .NET 4, earlier versions of the .NET Framework CAS policy will become active therefore previous .NET STIG guidance that applies to the reactivated versions must also be applied.

Failure to apply applicable versions of STIG guidance can result in the loss of system confidentiality, integrity or availability.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution             : "Apply the .NET Framework Security Checklist for .Net versions 1 through 3.5 when utilizing the NetFx40_LegacySecurityPolicy setting."
      reference            : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,8500.2|DCSL-1,CAT|III,CSF|PR.IP-2,HIPAA|164.312(a)(2)(iv),ITSG-33|SA-8,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,PCI-DSS|4.1,Rule-ID|SV-40979r3_rule,SANS-CSC|17-2,STIG-ID|APPNET0064,Vuln-ID|V-30937"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_TEXT
      value_data           : "NetFx40_LegacySecurityPolicy enabled='false'"
      powershell_args      : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*) | Where-Object { $_.Name -like '*.exe.config'} | Select-Xml -XPath '/configuration/runtime/NetFx40_LegacySecurityPolicy' | Where-Object { $_.Node.enabled -ne 'false' } | Select-Object Path"
      only_show_cmd_output : YES
      powershell_option    : CAN_BE_NULL
      severity             : MEDIUM
    </custom_item>

    <custom_item>
      type                 : AUDIT_POWERSHELL
      description          : "APPNET0065 - Trust must be established prior to enabling the loading of remote code in .Net 4 - machine"
      info                 : "In the .NET Framework version 3.5 and earlier versions, if an application assembly loaded code/objects from a remote location, that assembly would run partially trusted with a permissions grant set that depended on the zone in which it was loaded. For example, if an assembly was loaded from a web site, it was loaded into the Internet zone and granted the Internet permission set. In other words, it was executed in an Internet sandbox.

If the same program is run in the .NET Framework version 4, an exception is thrown which effectively states; either explicitly create a sandbox for the assembly or run it in full trust.

The <loadFromRemoteSources> element specifies the assemblies that run partially trusted in earlier versions of the .NET Framework will be run fully trusted in the .NET Framework 4.

If loadFromRemoteSources is set to true, the remotely loaded application code is granted full trust.  This could create an integrity vulnerability on the system.  The required method to address this is to explicitly create a sandboxed environment for the remotely loaded code to run in rather than allowing remotely loaded code to run with full trust.

The appropriate level of trust must be established prior to enabling the loading of remote code in .Net 4 applications and that code must be run in a controlled environment.  The following is an example of the use of loadFromRemoteSources.

<configuration>
<runtime>
    <loadFromRemoteSources enabled='true' 'https://my.dodorg.gov' />
    <loadFromRemoteSources enabled='true' 'https://192.168.0.*' />
    <loadFromRemoteSources enabled='false' '*' />
</runtime>
</configuration>

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution             : ".Net application code loaded from a remote source must be run in a controlled environment.

A controlled environment consists of a sandbox, such as running in an Internet Explorer host environment or employing OS based software access controls, such as AppLocker or Software Security Policies, when application design permits.

Obtain documented IAO approvals for all remotely loaded code."
      reference            : "800-171|3.1.3,800-53|AC-4,8500.2|DCSL-1,CAT|II,CN-L3|8.1.10.2(c),CSF|DE.AE-1,CSF|ID.AM-3,CSF|PR.AC-4,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,HIPAA|164.312(a)(2)(iv),ITSG-33|AC-4,NESA|T4.2.1,NESA|T4.5.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T5.4.6,NESA|T5.7.2,NESA|T7.5.2,NESA|T7.6.4,NIAv2|GS11a,NIAv2|GS12a,NIAv2|GS14a,NIAv2|GS15a,NIAv2|GS16a,NIAv2|NS13a,NIAv2|NS13b,NIAv2|NS13c,NIAv2|NS14,NIAv2|SS23,NIAv2|SS27a,NIAv2|SS27b,NIAv2|SS32,PCI-DSS|2.2.3,Rule-ID|SV-41010r1_rule,SANS-CSC|17-7,STIG-ID|APPNET0065,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-30968"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_TEXT
      value_data           : "loadFromRemoteSources enabled='false'"
      powershell_args      : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*) | Where-Object { $_.Name -like '*.exe.config'} | Select-Xml -XPath '/configuration/runtime/loadFromRemoteSources' | Where-Object { $_.Node.enabled -ne 'false' } | Select-Object Path"
      only_show_cmd_output : YES
      powershell_option    : CAN_BE_NULL
      severity             : MEDIUM
    </custom_item>

    <custom_item>
      type                 : AUDIT_POWERSHELL
      description          : "APPNET0066 - .NET default proxy settings must be reviewed and approved - machine"
      info                 : "The .Net framework can be configured to utilize a different proxy or altogether bypass the default proxy settings in the client's browser.  This may lead to the framework using a proxy that is not approved for use.  If the proxy is malicious, this could lead to a loss of application integrity and confidentiality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution             : "Open Windows explorer and search for all '*.exe.config' and 'machine.config' files.

Search each file for the 'defaultProxy' element.

Clear the values contained in the 'defaultProxy' element, and the 'bypasslist', 'module', and 'proxy' child elements.

The IAO must provide documented approvals of any non-default proxy servers."
      reference            : "800-171|3.1.3,800-53|AC-4,8500.2|DCSL-1,CAT|III,CN-L3|8.1.10.2(c),CSF|DE.AE-1,CSF|ID.AM-3,CSF|PR.AC-4,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,HIPAA|164.312(e)(2)(i),ITSG-33|AC-4,NESA|T4.2.1,NESA|T4.5.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T5.4.6,NESA|T5.7.2,NESA|T7.5.2,NESA|T7.6.4,NIAv2|GS11a,NIAv2|GS12a,NIAv2|GS14a,NIAv2|GS15a,NIAv2|GS16a,NIAv2|NS13a,NIAv2|NS13b,NIAv2|NS13c,NIAv2|NS14,NIAv2|SS23,NIAv2|SS27a,NIAv2|SS27b,NIAv2|SS32,PCI-DSS|2.2.3,Rule-ID|SV-41014r1_rule,SANS-CSC|17-7,STIG-ID|APPNET0066,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-30972"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_TEXT
      value_data           : "defaultProxy enabled='true'"
      powershell_args      : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*) | Where-Object { $_.Name -like 'machine.config' -or $_.Name -like '*.exe.config'} | Select-Xml -XPath '//defaultProxy' | Where-Object { ($_.Node.enabled -and $_.Node.enabled -ne 'true') -or $_.Node.proxy -or $_.Node.bypasslist -or $_.Node.module } | Select-Object Path"
      only_show_cmd_output : YES
      powershell_option    : CAN_BE_NULL
      severity             : MEDIUM
    </custom_item>

    <custom_item>
      type              : AUDIT_POWERSHELL
      description       : "APPNET0067 - Event tracing for Windows (ETW) for Common Language Runtime events must be enabled - machine"
      info              : "Event tracing captures information about applications utilizing the .NET CLR and the .NET CLR itself. This includes security oriented information, such as Strong Name and Authenticode verification.

Beginning with Windows Vista, ETW is enabled by default however, the .Net CLR and .Net applications can be configured to not utilize Event Tracing. If ETW event tracing is disabled, critical events that occurred within the runtime will not be captured in event logs."
      solution          : "Open Windows explorer and search for all .NET config files including application config files (*.exe.config).

Examine the configuration settings for
<etwEnable enabled='false' />.

Enable ETW Tracing by setting the etwEnable flag to 'true' or obtain documented IAO approvals."
      reference         : "800-171|3.3.1,800-171|3.3.2,800-53|AU-2,8500.2|DCSL-1,CAT|II,CN-L3|8.1.4.3(a),CSF|PR.PT-1,HIPAA|164.312(b),ITSG-33|AU-2,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM7,NIAv2|SS30,NIAv2|VL8,PCI-DSS|10.1,Rule-ID|SV-41075r1_rule,SANS-CSC|14-2,STIG-ID|APPNET0067,SWIFT-CSCv1|6.4,Vuln-ID|V-31026"
      see_also          : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type        : POLICY_TEXT
      value_data        : "etwEnable enabled='true'"
      powershell_args   : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*) | Where-Object { $_.Name -like '*.config'} | Select-Xml -XPath '/configuration/runtime/etwEnable' | Where-Object { $_.Node.enabled -and $_.Node.enabled -ne 'true' } | Select-Object Path"
      powershell_option : CAN_BE_NULL
    </custom_item>

    <custom_item>
      type                 : AUDIT_POWERSHELL
      description          : "APPNET0071 - Remoting Services TCP channels must utilize authentication and encryption - machine"
      info                 : "Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.

.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.

Normally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server.

Due to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data.

Microsoft provides 3 different 'channels' that are used for remoting.  They are HTTP, TCP and IPC.

Any unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution             : "Ensure encryption and message integrity are used for TCP remoting channels.

TCP remoting connections are protected via the secure=true configuration parameter.
<channels>
   <channel ref='tcp' secure='true' />
</channels>

Include the secure='true' flag in the channel ref parameter of the machine.config and [application name].exe.config file if the [application name].exe.config file exists on the system."
      reference            : "800-171|3.13.11,800-53|SC-13,8500.2|DCSL-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|2.2.3,Rule-ID|SV-42341r2_rule,SANS-CSC|17-7,STIG-ID|APPNET0071,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-32025"
      see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type           : POLICY_TEXT
      value_data           : "channel ref='tcp*' secure='true'"
      powershell_args      : "Get-ChildItem -Recurse (Join-Path -Path (Get-ChildItem Env:SystemRoot).Value -ChildPath Microsoft.NET\Framework*\v4.0*) | Where-Object { $_.Name -like 'machine.config' -or $_.Name -like '*.exe.config' } | Select-Xml -XPath '//formatter[@typeFilterLevel]' | Select-Object Path -Unique | Select-Xml -XPath '//channels/channel[@ref]' | Where-Object { $_.Node.ref -like 'tcp*' -and $_.Node.secure -ne 'true' } | Select-Object Path"
      only_show_cmd_output : YES
      powershell_option    : CAN_BE_NULL
      severity             : MEDIUM
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check for custom application path from UI variable."
          value_type  : POLICY_TEXT
# Note: Variable @CUSTOM_APP_PATH@ replaced with "c:\\temp" in field "value_data".
          value_data  : "c:\\temp"
          file_option : MUST_EXIST
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type                 : AUDIT_POWERSHELL
          description          : "APPNET0060 - Remoting Services HTTP channels must utilize authentication and encryption - applications"
          info                 : "Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than using .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.

.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.

Normally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server.

Due to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data.

Microsoft provides 3 different 'channels' that are used for remoting.  They are HTTP, TCP and IPC.

Any unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution             : "Ensure encryption and message integrity are used for HTTP remoting channels.

The HTTP Channel only supports encryption and message integrity when the remote object is hosted in Internet Information Services (IIS) using TLS.

HTTP channels are protected via TLS (HTTPS).
<channels>
   <channel ref='http server' port='443'/>
</channels>

Change the channel ref parameter to utilize a TLS port and leverage TLS on the remote IIS server."
          reference            : "800-171|3.13.11,800-53|SC-13,8500.2|DCSL-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|2.2.3,Rule-ID|SV-7453r3_rule,SANS-CSC|17-7,STIG-ID|APPNET0060,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-7070"
          see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type           : POLICY_TEXT
          value_data           : "channel ref='http*' port='443'"
# Note: Variable @CUSTOM_APP_PATH@ replaced with "c:\\temp" in field "powershell_args".
          powershell_args      : "Get-ChildItem -Recurse c:\\temp | Where-Object { $_.Name -like 'machine.config' -or $_.Name -like '*.exe.config' } | Select-Xml -XPath '//formatter[@typeFilterLevel]' | Select-Object Path -Unique | Select-Xml -XPath '//channels/channel[@ref]' | Where-Object { $_.Node.ref -like 'http*' -and $_.Node.port -ne '443' } | Select-Object Path"
          only_show_cmd_output : YES
          powershell_option    : CAN_BE_NULL
          severity             : MEDIUM
        </custom_item>

        <custom_item>
          type              : AUDIT_POWERSHELL
          description       : "APPNET0062 - The .NET CLR must be configured to use FIPS approved encryption modules - applications"
          info              : "FIPS encryption is configured via .NET configuration files.  There are numerous configuration files that affect different aspects of .Net behavior.  The .NET config files are described below.

Machine Configuration Files:
The machine configuration file, Machine.config, contains settings that apply to an entire computer. This file is located in the %SYSTEMROOT%\Microsoft.NET\Framework\v4.0.30319\Config directory for 32 bit .NET 4 installations and %SYSTEMROOT%\Microsoft.NET\Framework64\v4.0.30319\Config for 64 bit systems.   Machine.config contains configuration settings for machine-wide assembly binding, built-in remoting channels, and ASP.NET.

Application Configuration Files:
Application configuration files contain settings specific to an application. If checking these files, a .NET review of a specific .NET application is most likely being conducted. These files contain configuration settings that the Common Language Runtime reads (such as assembly binding policy, remoting objects, and so on), and settings that the application can read.

The name and location of the application configuration file depends on the application's host, which can be one of the following:

Executable-hosted application configuration files.

The configuration file for an application hosted by the executable host is in the same directory as the application. The name of the configuration file is the name of the application with a .config extension. For example, an application called myApp.exe can be associated with a configuration file called myApp.exe.config.

Internet Explorer-hosted application configuration files.

If an application hosted in Internet Explorer has a configuration file, the location of this file is specified in a <link> tag with the following syntax.

<link rel='ConfigurationFileName' href='location'>

In this tag, 'location' represents a URL that point to the configuration file. This sets the application base. The configuration file must be located on the same web site as the application.

.NET 4.0 allows the CLR runtime to be configured to ignore FIPS encryption requirements.  If the CLR is not configured to use FIPS encryption modules, insecure encryption modules might be employed which could introduce an application confidentiality or integrity issue."
          solution          : "Examine the .NET CLR configuration files to find the runtime element and then the 'enforceFIPSPolicy' element.

Example:
<configuration>
  <runtime>
                <enforceFIPSPolicy enabled='true|false' />
  </runtime>
</configuration>

Delete the 'enforceFIPSPolicy' runtime element, change the setting to 'true' or there must be documented IAO approvals for the FIPS setting."
          reference         : "800-171|3.13.11,800-53|SC-13,8500.2|DCNR-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(a)(2)(iv),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|4.1,Rule-ID|SV-40966r1_rule,SANS-CSC|17-2,STIG-ID|APPNET0062,Vuln-ID|V-30926"
          see_also          : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type        : POLICY_TEXT
          value_data        : "enforceFIPSPolicy enabled='true'"
# Note: Variable @CUSTOM_APP_PATH@ replaced with "c:\\temp" in field "powershell_args".
          powershell_args   : "Get-ChildItem -Recurse c:\\temp | Where-Object { $_.Name -like 'machine.config' -or $_.Name -like '*.exe.config'} | Select-Xml -XPath '/configuration/runtime/enforceFIPSPolicy' | Where-Object { $_.Node.enabled -ne 'true' } | Select-Object Path"
          powershell_option : CAN_BE_NULL
        </custom_item>

        <custom_item>
          type                 : AUDIT_POWERSHELL
          description          : "APPNET0064 - .Net applications that invoke NetFx40_LegacySecurityPolicy must apply previous versions of .NET STIG guidance - applications"
          info                 : "CAS policy is .NET runtime version-specific.  In .NET Framework version 4, CAS policy is disabled by default however; it can be re-enabled by using the NetFx40_LegacySecurityPolicy setting on a per application basis. Caspol.exe is provided by Microsoft to set security policy on .Net applications prior to version 4.0. This requirement does not apply to the caspol.exe assembly or other assemblies provided with the Windows OS or the Windows Secure Host Baseline (SHB).

When invoking the NetFx40_LegacySecurityPolicy setting in .NET 4, earlier versions of the .NET Framework CAS policy will become active therefore previous .NET STIG guidance that applies to the reactivated versions must also be applied.

Failure to apply applicable versions of STIG guidance can result in the loss of system confidentiality, integrity or availability.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution             : "Apply the .NET Framework Security Checklist for .Net versions 1 through 3.5 when utilizing the NetFx40_LegacySecurityPolicy setting."
          reference            : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,8500.2|DCSL-1,CAT|III,CSF|PR.IP-2,HIPAA|164.312(a)(2)(iv),ITSG-33|SA-8,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,PCI-DSS|4.1,Rule-ID|SV-40979r3_rule,SANS-CSC|17-2,STIG-ID|APPNET0064,Vuln-ID|V-30937"
          see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type           : POLICY_TEXT
          value_data           : "NetFx40_LegacySecurityPolicy enabled='false'"
# Note: Variable @CUSTOM_APP_PATH@ replaced with "c:\\temp" in field "powershell_args".
          powershell_args      : "Get-ChildItem -Recurse c:\\temp | Where-Object { $_.Name -like '*.exe.config'} | Select-Xml -XPath '/configuration/runtime/NetFx40_LegacySecurityPolicy' | Where-Object { $_.Node.enabled -ne 'false' } | Select-Object Path"
          only_show_cmd_output : YES
          powershell_option    : CAN_BE_NULL
          severity             : MEDIUM
        </custom_item>

        <custom_item>
          type                 : AUDIT_POWERSHELL
          description          : "APPNET0065 - Trust must be established prior to enabling the loading of remote code in .Net 4 - applications"
          info                 : "In the .NET Framework version 3.5 and earlier versions, if an application assembly loaded code/objects from a remote location, that assembly would run partially trusted with a permissions grant set that depended on the zone in which it was loaded. For example, if an assembly was loaded from a web site, it was loaded into the Internet zone and granted the Internet permission set. In other words, it was executed in an Internet sandbox.

If the same program is run in the .NET Framework version 4, an exception is thrown which effectively states; either explicitly create a sandbox for the assembly or run it in full trust.

The <loadFromRemoteSources> element specifies the assemblies that run partially trusted in earlier versions of the .NET Framework will be run fully trusted in the .NET Framework 4.

If loadFromRemoteSources is set to true, the remotely loaded application code is granted full trust.  This could create an integrity vulnerability on the system.  The required method to address this is to explicitly create a sandboxed environment for the remotely loaded code to run in rather than allowing remotely loaded code to run with full trust.

The appropriate level of trust must be established prior to enabling the loading of remote code in .Net 4 applications and that code must be run in a controlled environment.  The following is an example of the use of loadFromRemoteSources.

<configuration>
<runtime>
    <loadFromRemoteSources enabled='true' 'https://my.dodorg.gov' />
    <loadFromRemoteSources enabled='true' 'https://192.168.0.*' />
    <loadFromRemoteSources enabled='false' '*' />
</runtime>
</configuration>

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution             : ".Net application code loaded from a remote source must be run in a controlled environment.

A controlled environment consists of a sandbox, such as running in an Internet Explorer host environment or employing OS based software access controls, such as AppLocker or Software Security Policies, when application design permits.

Obtain documented IAO approvals for all remotely loaded code."
          reference            : "800-171|3.1.3,800-53|AC-4,8500.2|DCSL-1,CAT|II,CN-L3|8.1.10.2(c),CSF|DE.AE-1,CSF|ID.AM-3,CSF|PR.AC-4,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,HIPAA|164.312(a)(2)(iv),ITSG-33|AC-4,NESA|T4.2.1,NESA|T4.5.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T5.4.6,NESA|T5.7.2,NESA|T7.5.2,NESA|T7.6.4,NIAv2|GS11a,NIAv2|GS12a,NIAv2|GS14a,NIAv2|GS15a,NIAv2|GS16a,NIAv2|NS13a,NIAv2|NS13b,NIAv2|NS13c,NIAv2|NS14,NIAv2|SS23,NIAv2|SS27a,NIAv2|SS27b,NIAv2|SS32,PCI-DSS|2.2.3,Rule-ID|SV-41010r1_rule,SANS-CSC|17-7,STIG-ID|APPNET0065,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-30968"
          see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type           : POLICY_TEXT
          value_data           : "loadFromRemoteSources enabled='false'"
# Note: Variable @CUSTOM_APP_PATH@ replaced with "c:\\temp" in field "powershell_args".
          powershell_args      : "Get-ChildItem -Recurse c:\\temp | Where-Object { $_.Name -like '*.exe.config'} | Select-Xml -XPath '/configuration/runtime/loadFromRemoteSources' | Where-Object { $_.Node.enabled -ne 'false' } | Select-Object Path"
          only_show_cmd_output : YES
          powershell_option    : CAN_BE_NULL
          severity             : MEDIUM
        </custom_item>

        <custom_item>
          type                 : AUDIT_POWERSHELL
          description          : "APPNET0066 - .NET default proxy settings must be reviewed and approved - applications"
          info                 : "The .Net framework can be configured to utilize a different proxy or altogether bypass the default proxy settings in the client's browser.  This may lead to the framework using a proxy that is not approved for use.  If the proxy is malicious, this could lead to a loss of application integrity and confidentiality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution             : "Open Windows explorer and search for all '*.exe.config' and 'machine.config' files.

Search each file for the 'defaultProxy' element.

Clear the values contained in the 'defaultProxy' element, and the 'bypasslist', 'module', and 'proxy' child elements.

The IAO must provide documented approvals of any non-default proxy servers."
          reference            : "800-171|3.1.3,800-53|AC-4,8500.2|DCSL-1,CAT|III,CN-L3|8.1.10.2(c),CSF|DE.AE-1,CSF|ID.AM-3,CSF|PR.AC-4,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,HIPAA|164.312(e)(2)(i),ITSG-33|AC-4,NESA|T4.2.1,NESA|T4.5.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T5.4.6,NESA|T5.7.2,NESA|T7.5.2,NESA|T7.6.4,NIAv2|GS11a,NIAv2|GS12a,NIAv2|GS14a,NIAv2|GS15a,NIAv2|GS16a,NIAv2|NS13a,NIAv2|NS13b,NIAv2|NS13c,NIAv2|NS14,NIAv2|SS23,NIAv2|SS27a,NIAv2|SS27b,NIAv2|SS32,PCI-DSS|2.2.3,Rule-ID|SV-41014r1_rule,SANS-CSC|17-7,STIG-ID|APPNET0066,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-30972"
          see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type           : POLICY_TEXT
          value_data           : "defaultProxy enabled='true'"
# Note: Variable @CUSTOM_APP_PATH@ replaced with "c:\\temp" in field "powershell_args".
          powershell_args      : "Get-ChildItem -Recurse c:\\temp | Where-Object { $_.Name -like 'machine.config' -or $_.Name -like '*.exe.config'} | Select-Xml -XPath '//defaultProxy' | Where-Object { ($_.Node.enabled -and $_.Node.enabled -ne 'true') -or $_.Node.proxy -or $_.Node.bypasslist -or $_.Node.module } | Select-Object Path"
          only_show_cmd_output : YES
          powershell_option    : CAN_BE_NULL
          severity             : MEDIUM
        </custom_item>

        <custom_item>
          type              : AUDIT_POWERSHELL
          description       : "APPNET0067 - Event tracing for Windows (ETW) for Common Language Runtime events must be enabled - applications"
          info              : "Event tracing captures information about applications utilizing the .NET CLR and the .NET CLR itself. This includes security oriented information, such as Strong Name and Authenticode verification.

Beginning with Windows Vista, ETW is enabled by default however, the .Net CLR and .Net applications can be configured to not utilize Event Tracing. If ETW event tracing is disabled, critical events that occurred within the runtime will not be captured in event logs."
          solution          : "Open Windows explorer and search for all .NET config files including application config files (*.exe.config).

Examine the configuration settings for
<etwEnable enabled='false' />.

Enable ETW Tracing by setting the etwEnable flag to 'true' or obtain documented IAO approvals."
          reference         : "800-171|3.3.1,800-171|3.3.2,800-53|AU-2,8500.2|DCSL-1,CAT|II,CN-L3|8.1.4.3(a),CSF|PR.PT-1,HIPAA|164.312(b),ITSG-33|AU-2,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM7,NIAv2|SS30,NIAv2|VL8,PCI-DSS|10.1,Rule-ID|SV-41075r1_rule,SANS-CSC|14-2,STIG-ID|APPNET0067,SWIFT-CSCv1|6.4,Vuln-ID|V-31026"
          see_also          : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type        : POLICY_TEXT
          value_data        : "etwEnable enabled='true'"
# Note: Variable @CUSTOM_APP_PATH@ replaced with "c:\\temp" in field "powershell_args".
          powershell_args   : "Get-ChildItem -Recurse c:\\temp | Where-Object { $_.Name -like '*.config'} | Select-Xml -XPath '/configuration/runtime/etwEnable' | Where-Object { $_.Node.enabled -and $_.Node.enabled -ne 'true' } | Select-Object Path"
          powershell_option : CAN_BE_NULL
        </custom_item>

        <custom_item>
          type                 : AUDIT_POWERSHELL
          description          : "APPNET0071 - Remoting Services TCP channels must utilize authentication and encryption - applications"
          info                 : "Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.

.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.

Normally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server.

Due to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data.

Microsoft provides 3 different 'channels' that are used for remoting.  They are HTTP, TCP and IPC.

Any unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution             : "Ensure encryption and message integrity are used for TCP remoting channels.

TCP remoting connections are protected via the secure=true configuration parameter.
<channels>
   <channel ref='tcp' secure='true' />
</channels>

Include the secure='true' flag in the channel ref parameter of the machine.config and [application name].exe.config file if the [application name].exe.config file exists on the system."
          reference            : "800-171|3.13.11,800-53|SC-13,8500.2|DCSL-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|2.2.3,Rule-ID|SV-42341r2_rule,SANS-CSC|17-7,STIG-ID|APPNET0071,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-32025"
          see_also             : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type           : POLICY_TEXT
          value_data           : "channel ref='tcp*' secure='true'"
# Note: Variable @CUSTOM_APP_PATH@ replaced with "c:\\temp" in field "powershell_args".
          powershell_args      : "Get-ChildItem -Recurse c:\\temp | Where-Object { $_.Name -like 'machine.config' -or $_.Name -like '*.exe.config' } | Select-Xml -XPath '//formatter[@typeFilterLevel]' | Select-Object Path -Unique | Select-Xml -XPath '//channels/channel[@ref]' | Where-Object { $_.Node.ref -like 'tcp*' -and $_.Node.secure -ne 'true' } | Select-Object Path"
          only_show_cmd_output : YES
          powershell_option    : CAN_BE_NULL
          severity             : MEDIUM
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "APPNET0060 - Remoting Services HTTP channels must utilize authentication and encryption - applications"
          info        : "Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than using .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.

.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.

Normally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server.

Due to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data.

Microsoft provides 3 different 'channels' that are used for remoting.  They are HTTP, TCP and IPC.

Any unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality."
          solution    : "Ensure encryption and message integrity are used for HTTP remoting channels.

The HTTP Channel only supports encryption and message integrity when the remote object is hosted in Internet Information Services (IIS) using TLS.

HTTP channels are protected via TLS (HTTPS).
<channels>
   <channel ref='http server' port='443'/>
</channels>

Change the channel ref parameter to utilize a TLS port and leverage TLS on the remote IIS server."
          reference   : "800-171|3.13.11,800-53|SC-13,8500.2|DCSL-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|2.2.3,Rule-ID|SV-7453r3_rule,SANS-CSC|17-7,STIG-ID|APPNET0060,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-7070"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>

        <report type:"PASSED">
          description : "APPNET0062 - The .NET CLR must be configured to use FIPS approved encryption modules - applications"
          info        : "FIPS encryption is configured via .NET configuration files.  There are numerous configuration files that affect different aspects of .Net behavior.  The .NET config files are described below.

Machine Configuration Files:
The machine configuration file, Machine.config, contains settings that apply to an entire computer. This file is located in the %SYSTEMROOT%\Microsoft.NET\Framework\v4.0.30319\Config directory for 32 bit .NET 4 installations and %SYSTEMROOT%\Microsoft.NET\Framework64\v4.0.30319\Config for 64 bit systems.   Machine.config contains configuration settings for machine-wide assembly binding, built-in remoting channels, and ASP.NET.

Application Configuration Files:
Application configuration files contain settings specific to an application. If checking these files, a .NET review of a specific .NET application is most likely being conducted. These files contain configuration settings that the Common Language Runtime reads (such as assembly binding policy, remoting objects, and so on), and settings that the application can read.

The name and location of the application configuration file depends on the application's host, which can be one of the following:

Executable-hosted application configuration files.

The configuration file for an application hosted by the executable host is in the same directory as the application. The name of the configuration file is the name of the application with a .config extension. For example, an application called myApp.exe can be associated with a configuration file called myApp.exe.config.

Internet Explorer-hosted application configuration files.

If an application hosted in Internet Explorer has a configuration file, the location of this file is specified in a <link> tag with the following syntax.

<link rel='ConfigurationFileName' href='location'>

In this tag, 'location' represents a URL that point to the configuration file. This sets the application base. The configuration file must be located on the same web site as the application.

.NET 4.0 allows the CLR runtime to be configured to ignore FIPS encryption requirements.  If the CLR is not configured to use FIPS encryption modules, insecure encryption modules might be employed which could introduce an application confidentiality or integrity issue."
          solution    : "Examine the .NET CLR configuration files to find the runtime element and then the 'enforceFIPSPolicy' element.

Example:
<configuration>
  <runtime>
                <enforceFIPSPolicy enabled='true|false' />
  </runtime>
</configuration>

Delete the 'enforceFIPSPolicy' runtime element, change the setting to 'true' or there must be documented IAO approvals for the FIPS setting."
          reference   : "800-171|3.13.11,800-53|SC-13,8500.2|DCNR-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(a)(2)(iv),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|4.1,Rule-ID|SV-40966r1_rule,SANS-CSC|17-2,STIG-ID|APPNET0062,Vuln-ID|V-30926"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>

        <report type:"PASSED">
          description : "APPNET0064 - .Net applications that invoke NetFx40_LegacySecurityPolicy must apply previous versions of .NET STIG guidance - applications"
          info        : "CAS policy is .NET runtime version-specific.  In .NET Framework version 4, CAS policy is disabled by default however; it can be re-enabled by using the NetFx40_LegacySecurityPolicy setting on a per application basis. Caspol.exe is provided by Microsoft to set security policy on .Net applications prior to version 4.0. This requirement does not apply to the caspol.exe assembly or other assemblies provided with the Windows OS or the Windows Secure Host Baseline (SHB).

When invoking the NetFx40_LegacySecurityPolicy setting in .NET 4, earlier versions of the .NET Framework CAS policy will become active therefore previous .NET STIG guidance that applies to the reactivated versions must also be applied.

Failure to apply applicable versions of STIG guidance can result in the loss of system confidentiality, integrity or availability."
          solution    : "Apply the .NET Framework Security Checklist for .Net versions 1 through 3.5 when utilizing the NetFx40_LegacySecurityPolicy setting."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,8500.2|DCSL-1,CAT|III,CSF|PR.IP-2,HIPAA|164.312(a)(2)(iv),ITSG-33|SA-8,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,PCI-DSS|4.1,Rule-ID|SV-40979r3_rule,SANS-CSC|17-2,STIG-ID|APPNET0064,Vuln-ID|V-30937"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>

        <report type:"PASSED">
          description : "APPNET0065 - Trust must be established prior to enabling the loading of remote code in .Net 4 - applications"
          info        : "In the .NET Framework version 3.5 and earlier versions, if an application assembly loaded code/objects from a remote location, that assembly would run partially trusted with a permissions grant set that depended on the zone in which it was loaded. For example, if an assembly was loaded from a web site, it was loaded into the Internet zone and granted the Internet permission set. In other words, it was executed in an Internet sandbox.

If the same program is run in the .NET Framework version 4, an exception is thrown which effectively states; either explicitly create a sandbox for the assembly or run it in full trust.

The <loadFromRemoteSources> element specifies the assemblies that run partially trusted in earlier versions of the .NET Framework will be run fully trusted in the .NET Framework 4.

If loadFromRemoteSources is set to true, the remotely loaded application code is granted full trust.  This could create an integrity vulnerability on the system.  The required method to address this is to explicitly create a sandboxed environment for the remotely loaded code to run in rather than allowing remotely loaded code to run with full trust.

The appropriate level of trust must be established prior to enabling the loading of remote code in .Net 4 applications and that code must be run in a controlled environment.  The following is an example of the use of loadFromRemoteSources.

<configuration>
<runtime>
    <loadFromRemoteSources enabled='true' 'https://my.dodorg.gov' />
    <loadFromRemoteSources enabled='true' 'https://192.168.0.*' />
    <loadFromRemoteSources enabled='false' '*' />
</runtime>
</configuration>"
          solution    : ".Net application code loaded from a remote source must be run in a controlled environment.

A controlled environment consists of a sandbox, such as running in an Internet Explorer host environment or employing OS based software access controls, such as AppLocker or Software Security Policies, when application design permits.

Obtain documented IAO approvals for all remotely loaded code."
          reference   : "800-171|3.1.3,800-53|AC-4,8500.2|DCSL-1,CAT|II,CN-L3|8.1.10.2(c),CSF|DE.AE-1,CSF|ID.AM-3,CSF|PR.AC-4,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,HIPAA|164.312(a)(2)(iv),ITSG-33|AC-4,NESA|T4.2.1,NESA|T4.5.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T5.4.6,NESA|T5.7.2,NESA|T7.5.2,NESA|T7.6.4,NIAv2|GS11a,NIAv2|GS12a,NIAv2|GS14a,NIAv2|GS15a,NIAv2|GS16a,NIAv2|NS13a,NIAv2|NS13b,NIAv2|NS13c,NIAv2|NS14,NIAv2|SS23,NIAv2|SS27a,NIAv2|SS27b,NIAv2|SS32,PCI-DSS|2.2.3,Rule-ID|SV-41010r1_rule,SANS-CSC|17-7,STIG-ID|APPNET0065,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-30968"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>

        <report type:"PASSED">
          description : "APPNET0066 - .NET default proxy settings must be reviewed and approved - applications"
          info        : "The .Net framework can be configured to utilize a different proxy or altogether bypass the default proxy settings in the client's browser.  This may lead to the framework using a proxy that is not approved for use.  If the proxy is malicious, this could lead to a loss of application integrity and confidentiality."
          solution    : "Open Windows explorer and search for all '*.exe.config' and 'machine.config' files.

Search each file for the 'defaultProxy' element.

Clear the values contained in the 'defaultProxy' element, and the 'bypasslist', 'module', and 'proxy' child elements.

The IAO must provide documented approvals of any non-default proxy servers."
          reference   : "800-171|3.1.3,800-53|AC-4,8500.2|DCSL-1,CAT|III,CN-L3|8.1.10.2(c),CSF|DE.AE-1,CSF|ID.AM-3,CSF|PR.AC-4,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,HIPAA|164.312(e)(2)(i),ITSG-33|AC-4,NESA|T4.2.1,NESA|T4.5.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T5.4.6,NESA|T5.7.2,NESA|T7.5.2,NESA|T7.6.4,NIAv2|GS11a,NIAv2|GS12a,NIAv2|GS14a,NIAv2|GS15a,NIAv2|GS16a,NIAv2|NS13a,NIAv2|NS13b,NIAv2|NS13c,NIAv2|NS14,NIAv2|SS23,NIAv2|SS27a,NIAv2|SS27b,NIAv2|SS32,PCI-DSS|2.2.3,Rule-ID|SV-41014r1_rule,SANS-CSC|17-7,STIG-ID|APPNET0066,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-30972"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>

        <report type:"PASSED">
          description : "APPNET0067 - Event tracing for Windows (ETW) for Common Language Runtime events must be enabled - applications"
          info        : "Event tracing captures information about applications utilizing the .NET CLR and the .NET CLR itself. This includes security oriented information, such as Strong Name and Authenticode verification.

Beginning with Windows Vista, ETW is enabled by default however, the .Net CLR and .Net applications can be configured to not utilize Event Tracing. If ETW event tracing is disabled, critical events that occurred within the runtime will not be captured in event logs."
          solution    : "Open Windows explorer and search for all .NET config files including application config files (*.exe.config).

Examine the configuration settings for
<etwEnable enabled='false' />.

Enable ETW Tracing by setting the etwEnable flag to 'true' or obtain documented IAO approvals."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-2,8500.2|DCSL-1,CAT|II,CN-L3|8.1.4.3(a),CSF|PR.PT-1,HIPAA|164.312(b),ITSG-33|AU-2,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM7,NIAv2|SS30,NIAv2|VL8,PCI-DSS|10.1,Rule-ID|SV-41075r1_rule,SANS-CSC|14-2,STIG-ID|APPNET0067,SWIFT-CSCv1|6.4,Vuln-ID|V-31026"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>

        <report type:"PASSED">
          description : "APPNET0071 - Remoting Services TCP channels must utilize authentication and encryption - applications"
          info        : "Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.

.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.

Normally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server.

Due to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data.

Microsoft provides 3 different 'channels' that are used for remoting.  They are HTTP, TCP and IPC.

Any unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality."
          solution    : "Ensure encryption and message integrity are used for TCP remoting channels.

TCP remoting connections are protected via the secure=true configuration parameter.
<channels>
   <channel ref='tcp' secure='true' />
</channels>

Include the secure='true' flag in the channel ref parameter of the machine.config and [application name].exe.config file if the [application name].exe.config file exists on the system."
          reference   : "800-171|3.13.11,800-53|SC-13,8500.2|DCSL-1,CAT|II,CSF|PR.DS-5,HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,PCI-DSS|2.2.3,Rule-ID|SV-42341r2_rule,SANS-CSC|17-7,STIG-ID|APPNET0071,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.4,Vuln-ID|V-32025"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>
      </else>
    </if>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "APPNET0075 - Disable TLS RC4 cipher in .Net"
      info        : "Use of the RC4 cipher in TLS could allow an attacker to perform man-in-the-middle attacks and recover plaintext from encrypted sessions. Applications that target .Net version 4.x running on multiple Windows versions could be vulnerable to these types of attacks. The registry settings in this requirement will prevent .Net applications that target the 4.x framework from selecting and utilizing the Schannel.dll RC4 cipher for TLS connections. Applications that use TLS when connecting to remote systems will perform a handshake and negotiate the TLS version and cipher that is to be used between the client and the server. This is standard protocol for all TLS connections. If the server and client are not configured to use the same TLS version and cipher, the TLS connection may fail. Applications should be tested with these registry settings prior to production implementation of the fix in order to avoid application outages."
      solution    : "Use regedit to access the following registry key.

For 32-bit systems:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\

For 64-bit systems: HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319\

Modify or create the following Windows registry value: SchUseStrongCrypto

Set SchUseStrongCrypto to a REG_DWORD value of '1'."
      reference   : "800-171|3.13.11,800-53|SC-13,CAT|II,CCI|CCI-001762,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-96209r2_rule,STIG-ID|APPNET0075,Vuln-ID|V-81495"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
      value_type  : POLICY_DWORD
      value_data  : 1
      reg_key     : "HKLM\SOFTWARE\Microsoft\.NETFramework\v4.0.30319"
      reg_item    : "SchUseStrongCrypto"
      reg_option  : CAN_NOT_BE_NULL
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REG_CHECK
          description : "Check for 32 bit on 64 bit."
          value_type  : POLICY_TEXT
          value_data  : "HKLM\Software\Wow6432Node"
          reg_option  : MUST_EXIST
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : REGISTRY_SETTING
          description : "APPNET0075 - Disable TLS RC4 cipher in .Net - Wow6432Node"
          info        : "Use of the RC4 cipher in TLS could allow an attacker to perform man-in-the-middle attacks and recover plaintext from encrypted sessions. Applications that target .Net version 4.x running on multiple Windows versions could be vulnerable to these types of attacks. The registry settings in this requirement will prevent .Net applications that target the 4.x framework from selecting and utilizing the Schannel.dll RC4 cipher for TLS connections. Applications that use TLS when connecting to remote systems will perform a handshake and negotiate the TLS version and cipher that is to be used between the client and the server. This is standard protocol for all TLS connections. If the server and client are not configured to use the same TLS version and cipher, the TLS connection may fail. Applications should be tested with these registry settings prior to production implementation of the fix in order to avoid application outages."
          solution    : "Use regedit to access the following registry key.

For 32-bit systems:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\

For 64-bit systems: HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319\

Modify or create the following Windows registry value: SchUseStrongCrypto

Set SchUseStrongCrypto to a REG_DWORD value of '1'."
          reference   : "800-171|3.13.11,800-53|SC-13,CAT|II,CCI|CCI-001762,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-96209r2_rule,STIG-ID|APPNET0075,Vuln-ID|V-81495"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319"
          reg_item    : "SchUseStrongCrypto"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "APPNET0075 - Disable TLS RC4 cipher in .Net - Wow6432Node"
          info        : "Use of the RC4 cipher in TLS could allow an attacker to perform man-in-the-middle attacks and recover plaintext from encrypted sessions. Applications that target .Net version 4.x running on multiple Windows versions could be vulnerable to these types of attacks. The registry settings in this requirement will prevent .Net applications that target the 4.x framework from selecting and utilizing the Schannel.dll RC4 cipher for TLS connections. Applications that use TLS when connecting to remote systems will perform a handshake and negotiate the TLS version and cipher that is to be used between the client and the server. This is standard protocol for all TLS connections. If the server and client are not configured to use the same TLS version and cipher, the TLS connection may fail. Applications should be tested with these registry settings prior to production implementation of the fix in order to avoid application outages."
          solution    : "Use regedit to access the following registry key.

For 32-bit systems:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\

For 64-bit systems: HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319\

Modify or create the following Windows registry value: SchUseStrongCrypto

Set SchUseStrongCrypto to a REG_DWORD value of '1'."
          reference   : "800-171|3.13.11,800-53|SC-13,CAT|II,CCI|CCI-001762,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-96209r2_rule,STIG-ID|APPNET0075,Vuln-ID|V-81495"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
        </report>
      </else>
    </if>
  </then>

  <else>
    <report type:"WARNING">
      description : "DISA_STIG_Microsoft_Dot_Net_Framework_4.0_v1r9.audit from DISA Microsoft DotNet Framework 4.0 STIG v1r9 STIG"
      info        : "Microsoft Dot Net Framework 4.0 is not installed on this system or Remote Registry service is disabled on the target.

      NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_DotNet_Framework_4-0_V1R9_STIG.zip"
    </report>
  </else>
</if>

</group_policy>
</check_type>
