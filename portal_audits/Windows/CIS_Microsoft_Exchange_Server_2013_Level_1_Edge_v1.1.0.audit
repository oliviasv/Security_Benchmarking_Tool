#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.3 $
# $Date: 2020/07/14 $
#
# description : This document implements the security configuration as recommended by the
#               CIS Microsoft Exchange Server 2013 v1.1.0 Benchmark
#
#<ui_metadata>
#<display_name>CIS Microsoft Exchange Server 2013 Edge v1.1.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Microsoft Exchange Server 2013 Edge</name>
#  <version>1.1.0</version>
#  <link>https://workbench.cisecurity.org/files/1512</link>
#</spec>
#<labels>microsoft,exchange,exchange_2013,edge,windows</labels>
#<benchmark_refs>LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>SECURE_STRING</name>
#    <default>none</default>
#    <description>Secure String for Authentication</description>
#    <info>Comma separated secure string(s) which will be used to authenticate against the target servers.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Windows" version:"2">
<group_policy:"Microsoft Exchange Server 2013">

<if>
  <condition type:"AND">
    <custom_item>
      type            : AUDIT_EXCHANGE
      description     : "Test secure string"
      value_type      : POLICY_TEXT
      value_data      : ".*"
      powershell_args : "hostname"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
      secure_string   : "none"
      check_type      : CHECK_REGEX
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type            : AUDIT_EXCHANGE
      description     : "CIS_Microsoft_Exchange_Server_2013_Level_1_Edge_v1.1.0.audit from CIS Microsoft Exchange Server 2013 v1.1.0 Benchmark"
      info            : "NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      reference       : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      value_type      : POLICY_TEXT
      value_data      : "[\s]+15\.0[\s]+.*[\s]+True"
      powershell_args : "If (Get-ExchangeServer) { Get-ExchangeServer | Format-Table Name, AdminDisplayVersion, IsEdgeServer } Else { 'No Exchange servers found' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
      secure_string   : "none"
      check_type      : CHECK_REGEX
      severity        : MEDIUM
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "Platform check"
          value_type      : POLICY_TEXT
          value_data      : "[\s]+15\.0[\s]+.*[\s]+True"
          powershell_args : "If (Get-ExchangeServer) { Get-ExchangeServer | Format-Table Name, AdminDisplayVersion, IsEdgeServer } Else { 'No Exchange servers found' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.1 Set 'Maximum send size - connector level' to '10240'"
          info            : "This setting limits the total size of messages at the connector level. This includes the message header, the message body, and any attachments. For internal message flow, Exchange Server uses the custom X-MS-Exchange-Organization-OriginalSize message header to record the original message size of the message as it enters the Exchange Server organization. Whenever the message is checked against the specified message size limits, the lower value of the current message size or the original message size header is used. The size of the message can change because of content conversion, encoding, and agent processing.

Rationale:

This setting somewhat limits the impact a malicious user or a computer with malware can have on the Exchange infrastructure by restricting the size of incoming messages."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	Set-SendConnector 'Connection to Contoso.com' -MaxMessageSize 10240KB"
          reference       : "800-53|SC-5(1),ITSG-33|SC-5(1),LEVEL|1S"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "All policies compliant"
          powershell_args : "Get-SendConnector | Format-List Identity, MaxMessageSize; if ( [int64]( (Get-SendConnector).MaxMessageSize -Replace '.*\(' -Replace ' .*' )/1KB -gt 10240) { 'Non compliant policies found' } Else { 'All policies compliant' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.3 Set 'Enable Sender ID agent' to 'True'"
          info            : "The Sender ID agent is an antispam agent enabled on Exchange servers that perform the Edge Transport server role. Sender ID tries to verify that every e-mail message originates from the Internet domain from which it claims to have been sent. Sender ID checks the address of the server that sends the message against a registered list of servers that the domain owner has authorized to send e-mail.

Rationale:

Spam consumes a large amount of network bandwidth and server capacity. In addition, it is often the source of malicious software."
          solution        : "To remediate this settings, execute the following cmdlet:

	Set-SenderIDConfig -Enabled $true"
          reference       : "800-53|SI-8,ITSG-33|SI-8,LEVEL|1S"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "Enabled[\s]+:[\s]+True"
          powershell_args : "Get-SenderIDConfig | Format-List -property Enabled"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.4 Set 'External send connector authentication: DNS Routing' to 'True'"
          info            : "Select this option to use DNS to route outbound mail. If enabled the connector will use DNS to resolve the IP address of the remote SMTP server.

Rationale:

Basic authentication sends credentials across the network in plaintext. DNS routing helps protect connections from tampering or interception by unauthorized users."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	Set-SendConnector 'Connection to Contoso.com' -DNSRoutingEnabled $true"
          reference       : "800-53|SC-11,ITSG-33|SC-11,LEVEL|1S,NIAv2|NS8"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "All policies compliant"
          powershell_args : "$settings = Get-SendConnector ; $settings | Format-List Identity, DNSRoutingEnabled; If ($settings | Where {$_.DNSRoutingEnabled -ne $true}) { 'Non compliant policies found' } Else { 'All policies compliant' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.6 Set 'Enable Sender reputation' to 'True' - SenderBlockingEnabled"
          info            : "When sender reputation is enabled on a computer, sender reputation filters all messages from all Receive connectors on that computer. Only messages from external sources are filtered. External sources are defined as non-authenticated sources, which are considered anonymous Internet sources.

Rationale:

Spam consumes a large amount of network bandwidth and server capacity. In addition, it is often the source of malicious software."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	Set-SenderReputationConfig -SenderBlockingEnabled $true -OpenProxyDetectionEnabled $true"
          reference       : "800-53|SI-8,ITSG-33|SI-8,LEVEL|1S"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "SenderBlockingEnabled[\s]+:[\s]+True"
          powershell_args : "Get-SenderReputationConfig | Format-List -property SenderBlockingEnabled"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.6 Set 'Enable Sender reputation' to 'True' - OpenProxyDetectionEnabled"
          info            : "When sender reputation is enabled on a computer, sender reputation filters all messages from all Receive connectors on that computer. Only messages from external sources are filtered. External sources are defined as non-authenticated sources, which are considered anonymous Internet sources.

Rationale:

Spam consumes a large amount of network bandwidth and server capacity. In addition, it is often the source of malicious software."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	Set-SenderReputationConfig -SenderBlockingEnabled $true -OpenProxyDetectionEnabled $true"
          reference       : "800-53|SI-8,ITSG-33|SI-8,LEVEL|1S"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "OpenProxyDetectionEnabled[\s]+:[\s]+True"
          powershell_args : "Get-SenderReputationConfig | Format-List -property OpenProxyDetectionEnabled"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.8 Set 'External send connector authentication: Ignore Start TLS' to 'False'"
          info            : "If this setting is enabled then you will not be able to configure mutual authentication TLS, referred to as 'External send connector authentication: Domain Security' in this baseline.

Rationale:

Basic authentication sends credentials across the network in plaintext. TLS helps protect credentials from interception by unauthorized users."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	set-SendConnector -identity  -IgnoreSTARTTLS: $false"
          reference       : "800-171|3.13.11,800-53|SC-13,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "All policies compliant"
          powershell_args : "$settings = Get-SendConnector ; $settings | Format-List Identity, IgnoreSTARTTLS; If ($settings | Where {$_.IgnoreSTARTTLS -ne $false}) { 'Non compliant policies found' } Else { 'All policies compliant' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.10 Set receive connector 'Configure Protocol logging' to 'Verbose'"
          info            : "A protocol log is a record of the SMTP activity between messaging servers as part of message delivery. This SMTP activity occurs on Send connectors and Receive connectors that are configured on Hub Transport servers and Edge Transport servers. By default, protocol logging is disabled.

Rationale:

If events are not recorded it may be difficult or impossible to determine the root cause of system problems or the unauthorized activities of malicious users."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	Set-ReceiveConnector '' -ProtocolLoggingLevel Verbose"
          reference       : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "All policies compliant"
          powershell_args : "$settings = Get-ReceiveConnector ; $settings | Format-List Identity, ProtocolLoggingLevel; If ($settings | Where {$_.ProtocolLoggingLevel -ne 'Verbose'}) { 'Non compliant policies found' } Else { 'All policies compliant' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.11 Set send connector 'Configure Protocol logging' to 'Verbose'"
          info            : "A protocol log is a record of the SMTP activity between messaging servers as part of message delivery. This SMTP activity occurs on Send connectors and Receive connectors that are configured on Hub Transport servers and Edge Transport servers. By default, protocol logging is disabled.

Rationale:

If events are not recorded it may be difficult or impossible to determine the root cause of system problems or the unauthorized activities of malicious users."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	Set-SendConnector 'IDENTITY' -ProtocolLoggingLevel Verbose"
          reference       : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "All policies compliant"
          powershell_args : "$settings = Get-SendConnector ; $settings | Format-List Identity, ProtocolLoggingLevel; If ($settings | Where {$_.ProtocolLoggingLevel -ne 'Verbose'}) { 'Non compliant policies found' } Else { 'All policies compliant' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.12 Set 'External send connector authentication: Domain Security' to 'True'"
          info            : "It is preferable to use Exchange Authentication or IPsec for external send connectors. However, if you must use Basic authentication to enable Domain Security, using (Mutual Auth TLS) for external send connectors helps to protect credentials and e-mail sent to other organizations.

	If enabled, the Send connector will attempt to establish a mutual Transport Layer Security (TLS) connection with remote servers when sending mail. There are additional configuration steps required before you can start using TLS. For more information about how to configure mutual TLS, see Using Domain Security: Configuring Mutual TLS [http://technet.microsoft.com/en-us/library/bb123543(EXCHG.140).aspx].

Rationale:

Basic authentication sends credentials across the network in plaintext. Domain Security (Mutual Auth TLS) helps protect credentials from interception by unauthorized users."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	set-sendconnector -Identity  -DomainSecureEnabled $true"
          reference       : "800-171|3.13.11,800-53|SC-13,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "All policies compliant"
          powershell_args : "$settings = Get-SendConnector ; $settings | Format-List Identity, DomainSecureEnabled; If ($settings | Where {$_.DomainSecureEnabled -ne $true}) { 'Non compliant policies found' } Else { 'All policies compliant' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_EXCHANGE
          description     : "1.16 Set 'Turn on Connectivity logging' to 'True'"
          info            : "A connectivity log is a record of the SMTP connection activity of the outbound message delivery queues to the destination Mailbox server, smart host, or domain. Connectivity logging is available on Hub Transport servers and Edge Transport servers. By default, connectivity logging is disabled.

Rationale:

If events are not recorded it may be difficult or impossible to determine the root cause of system problems or the unauthorized activities of malicious users."
          solution        : "To implement the recommended state, execute the following PowerShell cmdlet:

	Set-TransportService EXCHANGE1 -ConnectivityLogEnabled $true"
          reference       : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
          see_also        : "https://workbench.cisecurity.org/files/1512"
          value_type      : POLICY_TEXT
          value_data      : "All policies compliant"
          powershell_args : "$settings = Get-TransportService ; $settings | Format-List Identity, ConnectivityLogEnabled; If ($settings | Where {$_.ConnectivityLogEnabled -ne $true}) { 'Non compliant policies found' } Else { 'All policies compliant' }"
# Note: Variable @SECURE_STRING@ replaced with "none" in field "secure_string".
          secure_string   : "none"
          check_type      : CHECK_REGEX
        </custom_item>
      </then>
    </if>
  </then>

  <else>
    <report type:"FAILED">
      description : "Authentication Failure"
      info        : "Secure string passed to powershell was invalid or empty."
    </report>
  </else>
</if>

</group_policy>
</check_type>
