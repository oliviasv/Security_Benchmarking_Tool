#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.4 $
# $Date: 2020/08/10 $
#
# Description	: This .audit is designed to query targets against the CIS Microsoft IIS 10 Benchmark.
#
# 	https://workbench.cisecurity.org/files/2297
#
#<ui_metadata>
#<display_name>CIS IIS 10 v1.1.1 Level 1</display_name>
#<spec>
#  <type>CIS</type>
#  <name>IIS 10 L1</name>
#  <version>1.1.1</version>
#  <link>https://workbench.cisecurity.org/files/2297</link>
#</spec>
#<labels>windows,cis,microsoft,internet,information,server,iis,iis_10</labels>
#<benchmark_refs>CSCv6,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>MAX_CONCURRENT_REQUESTS</name>
#    <default>5</default>
#    <description>Max Concurrent Requests</description>
#    <info>Deny IP Address based on the number of requests over a period of time</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Windows" version:"2">
<group_policy:"CIS Microsoft IIS 10 Benchmark">

<if>
  <condition type:"AND">
    <custom_item>
      type        : REG_CHECK
      description : "Verify IIS is installed."
      value_type  : POLICY_TEXT
      value_data  : "HKLM\Software\Microsoft\Inetstp"
      reg_option  : MUST_EXIST
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "Verify IIS 10 installed."
      value_type  : POLICY_TEXT
      value_data  : "^Version 10\.0[\s]*$"
      reg_key     : "HKLM\Software\Microsoft\Inetstp"
      reg_item    : "VersionString"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "Windows Server 2016"
      value_type  : POLICY_TEXT
      value_data  : "^[a-zA-Z0-9\(\)\s]*2016[a-zA-Z0-9\(\)\s]*$"
      reg_key     : "HKLM\Software\Microsoft\Windows Nt\Currentversion"
      reg_item    : "ProductName"
      check_type  : CHECK_REGEX
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_v1.1.1_MS_IIS_10_Level_1.audit Level 1"
    </report>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "1.1 Ensure web content is on non-system partition"
      info        : "Web resources published through IIS are mapped, via Virtual Directories, to physical locations on disk. It is recommended to map all Virtual Directories to a non-system disk volume.
Rationale:
Isolating web content from system files may reduce the probability of:
* Web sites/applications exhausting system disk space
* File IO vulnerability in the web site/application from affecting the confidentiality and/or integrity of system files"
      solution    : "1. Browse to web content in C:\\inetpub\\wwwroot\\
2. Copy or cut content onto a dedicated and restricted web folder on a non-system drive such as D:\\webroot\\
3. Change mappings for any applications or Virtual Directories to reflect the new location
To change the mapping for the application named app1 which resides under the Default Web Site, open IIS Manager:
1. Expand the server node
2. Expand Sites
3. Expand Default Web Site
4. Click on app1
5. In the Actions pane, select Basic Settings
6. In the Physical path text box, put the new location of the application, D:\\wwwroot\\app1 in the example above
Default Value:
The default location for web content is: %systemdrive%\\inetpub\\wwwroot."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "physicalPath:(\%SystemDrive\%|C:)"
      appcmd_args : "list vdir"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "1.2 Ensure 'host headers' are on all sites"
      info        : "Host headers provide the ability to host multiple websites on the same IP address and port. It is recommended that host headers be configured for all sites. Wildcard host headers are now supported.
Rationale:
Requiring a Host header for all sites may reduce the probability of:
* DNS rebinding attacks successfully compromising or abusing site data or functionality
* IP-based scans successfully identifying or interacting with a target application hosted on IIS
Note: If a wildcard DNS entry exists and a wildcard host header is used, you may be serving data to more domains than intended."
      solution    : "Obtain a listing of all sites by using the following appcmd.exe command:
Enter the following command in AppCmd.exe to configure the host header:
%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.applicationHost/sites /'[name='<website name'].bindings.[protocol='http',bindingInformation='*:80:<host header>'].bindingInformation:'*:80:<host header>''  /commit:apphost
OR
Enter the following command in PowerShell to configure the host header:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.applicationHost/sites/site[@name='<website name>']/bindings/binding[@protocol='http' and @bindingInformation='*:80:']' -name 'bindingInformation' -value '*:80:<host header value>'
OR
Perform the following in IIS Manager to configure host headers for the Default Web Site:
1. Open IIS Manager
2. In the Connections pane expand the Sites node and select Default Web Site
3. In the Actions pane click Bindings
4. In the Site Bindings dialog box, select the binding for which host headers are going to be configured, Port 80 in this example
5. Click Edit
6. Under host name, enter the sites FQDN, such as <www.examplesite.com>
7. Click OK, then Close
Note: Requiring a host header may impair site functionality for HTTP/1.0 clients.
Default Value:
By default, host headers are not required or set up automatically."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "\(id:[0-9]*,bindings:.*https*/[0-9\.\*]+:[0-9]*:,.*state:[A-Za-z]*\)"
      appcmd_args : "list sites"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "1.3 Ensure 'directory browsing' is set to disabled"
      info        : "Directory browsing allows the contents of a directory to be displayed upon request from a web client. If directory browsing is enabled for a directory in Internet Information Services, users receive a page that lists the contents of the directory when the following two conditions are met:
1. No specific file is requested in the URL
2. The Default Documents feature is disabled in IIS, or if it is enabled, IIS is unable to locate a file in the directory that matches a name specified in the IIS default document list
It is recommended that directory browsing be disabled.
Rationale:
Ensuring that directory browsing is disabled may reduce the probability of disclosing sensitive content that is inadvertently accessible via IIS."
      solution    : "Directory Browsing can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To disable directory browsing at the server level using an appcmd.exe command:
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:directoryBrowse /enabled:false
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -Filter system.webserver/directorybrowse -PSPath iis:\ -Name Enabled  -Value False
Default Value:
In IIS, directory browsing is disabled by default."
      reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|18,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config /section:directoryBrowse /text:enabled"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "1.4 Ensure 'application pool identity' is configured for all application pools"
      info        : "Application Pool Identities are the actual users/authorities that will run the worker process - w3wp.exe. Assigning the correct user authority will help ensure that applications can function properly, while not giving overly permissive permissions on the system. These identities can further be used in ACLs to protect system content. It is recommended that each Application Pool run under a unique identity.
IIS has additional built-in least privilege identities intended for use by Application Pools. It is recommended that the default Application Pool Identity be changed to a least privilege principle other than Network Service. Furthermore, it is recommended that all application pool identities be assigned a unique least privilege principal.
To achieve isolation in IIS, application pools can be run as separate identities. IIS can be configured to automatically use the application pool identity if no anonymous user account is configured for a Web site. This can greatly reduce the number of accounts needed for Web sites and make management of the accounts easier. It is recommended the Application Pool Identity be set as the Anonymous User Identity.
The name of the Application Pool account corresponds to the name of the Application Pool. Application Pool Identities were introduced in Windows Server 2008 SP2. It is recommended that Application Pools be set to run as ApplicationPoolIdentity unless there is an underlying reason that the application pool needs to run as a specified end user account. One example where this is needed is for web farms using Kerberos authentication.
Rationale:
Setting Application Pools to use unique least privilege identities such as ApplicationPoolIdentity reduces the potential harm the identity could cause should the application ever become compromised.
Additionally, it will simplify application pools configuration and account management."
      solution    : "The default Application Pool identity may be set for an application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to change the default identity to the built-in ApplicationPoolIdentity in the IIS Manager GUI:
1. Open the IIS Manager GUI
2. In the connections pane, expand the server node and click Application Pools
3. On the Application Pools page, select the DefaultAppPool, and then click Advanced Settings in the Actions pane
4. For the Identity property, click the '...' button to open the Application Pool Identity dialog box
5. Select the Built-in account option choose ApplicationPoolIdentity from the list, or input a unique application user created for this purpose
6. Restart IIS
To change the ApplicationPool identity to the built-in ApplicationPoolIdentity using AppCmd.exe, run the following from a command prompt:
Enter the following command in AppCmd.exe to configure
%systemroot%\system32\inetsrv\appcmd set config /section:applicationPools /[name='<apppool name>'].processModel.identityType:ApplicationPoolIdentity
OR
To change the ApplicationPool identity to the built-in ApplicationPoolIdentity using PowerShell:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.applicationHost/applicationPools/add[@name='<apppool name>']/processModel' -name 'identityType' -value 'ApplicationPoolIdentity'
The example code above will set just the DefaultAppPool. Run this command for each configured Application Pool. Additionally, ApplicationPoolIdentity can be made the default for all Application Pools by using the Set Application Pool Defaults action on the Application Pools node.
If using a custom defined Windows user such as a dedicated service account, that user will need to be a member of the IIS_IUSRS group. The IIS_IUSRS group has access to all the necessary file and system resources so that an account, when added to this group, can seamlessly act as an application pool identity.
Default Value:
By Default, the DefaultAppPool in IIS is configured to use the ApplicationPoolIdentity account."
      reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|18,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "^(ApplicationPoolIdentity|SpecificUser)[\s]*$"
      appcmd_args : "list config /section:applicationpools /text:[name='{}'].processModel.identityType"
      appcmd_list : "list AppPools"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type            : AUDIT_POWERSHELL
      description     : "1.5 Ensure 'unique application pools' is set for sites"
      info            : "IIS introduced a new security feature called Application Pool Identities that allows Application Pools to be run under unique accounts without the need to create and manage local or domain accounts. It is recommended that all Sites run under unique, dedicated Application Pools.
Rationale:
By setting sites to run under unique Application Pools, resource-intensive applications can be assigned to their own application pools which could improve server and application performance.In addition, it can help maintain application availability: if an application in one pool fails, applications in other pools are not affected.Last, isolating applications helps mitigate the potential risk of one application being allowed access to the resources of another application. It is also recommended to stop any application pool that is not in use or was created by an installation such as .Net 4.0."
      solution        : "The following appcmd.exe command will set the application pool for a given application:
%systemroot%\system32\inetsrv\appcmd set app '<website name>/' /applicationpool:<apppool name>
The output of this command will be similar to the following: APP object 'Default Web Site/' changed (applicationPool:DefaultAppPool)
Run the above command to ensure a unique application pool is assigned for each site listed
OR
Enter the following command in PowerShell to configure:
Set-ItemProperty -Path 'IIS:\Sites\<website name>' -Name applicationPool -Value <apppool name>
OR
1. Open IIS Manager
2. Open the Sites node underneath the machine node
3. Select the Site to be changed
4. In the Actions pane, select Basic Settings
5. Click the Select? box next to the Application Pool text box
6. Select the desired Application Pool
7. Once selected, click OK
Default Value:
By default, all Sites created will use the Default Application Pool (DefaultAppPool)."
      reference       : "800-53|SC-39,CSCv7|14.6,LEVEL|1S"
      see_also        : "https://workbench.cisecurity.org/files/2297"
      value_type      : POLICY_TEXT
      value_data      : "^[\s]*([2-9]|[1-9][0-9]+)[\s]"
      powershell_args : "& $Env:SystemRoot/System32/InetSrv/appcmd.exe list apps | Select-String -Pattern '/. \(applicationPool' | % { $_.ToString().Split(':')[1].Trim(')') } | Group-Object | Format-Table Count,Name"
      check_type      : CHECK_NOT_REGEX
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Confirm applicationHost.config is available in standard location."
          value_type  : POLICY_TEXT
          value_data  : "%systemroot%\system32\inetsrv\config\applicationHost.config"
          file_option : MUST_EXIST
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "1.6 Ensure 'application pool identity' is configured for anonymous user identity"
          info        : "To achieve isolation in IIS, application pools can be run as separate identities. IIS can be configured to automatically use the application pool identity if no anonymous user account is configured for a Web site. This can greatly reduce the number of accounts needed for Web sites and make management of the accounts easier. It is recommended the Application Pool Identity be set as the Anonymous User Identity.
Rationale:
Configuring the anonymous user identity to use the application pool identity will help ensure site isolation - provided sites are set to use the application pool identity. Since a unique principal will run each application pool, it will ensure the identity is least privilege. Additionally, it will simplify Site management."
          solution    : "The Anonymous User Identity can be set to Application Pool Identity by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the username attribute of the anonymousAuthentication node in the IIS Manager GUI:
1. Open the IIS Manager GUI and navigate to the desired server, site, or application
2. In Features View, find and double-click the Authentication icon
3. Select the Anonymous Authentication option and in the Actions pane select Edit...
4. Choose Application pool identity in the modal window and then press the OK button
OR
To use AppCmd.exe to configure anonymousAuthentication at the server level, the command would look like this:
%systemroot%\system32\inetsrv\appcmd set config -section:anonymousAuthentication /username:'' --password
OR
Enter the following command in PowerShell to configure:
Set-ItemProperty -Path IIS:\AppPools\<apppool name> -Name passAnonymousToken -Value True
Default Value:
The default identity for the anonymous user is the IUSR virtual account."
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|14.6,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "%systemroot%\system32\inetsrv\config\applicationHost.config"
          regex       : "^[\s]*<anonymousAuthentication.*userName"
          expect      : "[\s]userName[\s]*=[\s]*..[\s]*"
          file_option : CAN_NOT_BE_NULL
        </custom_item>
      </then>

      <else>
        <report type:"FAILED">
          description : "1.6 Ensure 'application pool identity' is configured for anonymous user identity"
          info        : "To achieve isolation in IIS, application pools can be run as separate identities. IIS can be configured to automatically use the application pool identity if no anonymous user account is configured for a Web site. This can greatly reduce the number of accounts needed for Web sites and make management of the accounts easier. It is recommended the Application Pool Identity be set as the Anonymous User Identity.
Rationale:
Configuring the anonymous user identity to use the application pool identity will help ensure site isolation - provided sites are set to use the application pool identity. Since a unique principal will run each application pool, it will ensure the identity is least privilege. Additionally, it will simplify Site management."
          solution    : "The Anonymous User Identity can be set to Application Pool Identity by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the username attribute of the anonymousAuthentication node in the IIS Manager GUI:
1. Open the IIS Manager GUI and navigate to the desired server, site, or application
2. In Features View, find and double-click the Authentication icon
3. Select the Anonymous Authentication option and in the Actions pane select Edit...
4. Choose Application pool identity in the modal window and then press the OK button
OR
To use AppCmd.exe to configure anonymousAuthentication at the server level, the command would look like this:
%systemroot%\system32\inetsrv\appcmd set config -section:anonymousAuthentication /username:'' --password
OR
Enter the following command in PowerShell to configure:
Set-ItemProperty -Path IIS:\AppPools\<apppool name> -Name passAnonymousToken -Value True
Default Value:
The default identity for the anonymous user is the IUSR virtual account."
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|14.6,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <custom_item>
      type            : AUDIT_POWERSHELL
      description     : "1.7 Ensure WebDav feature is disabled"
      info            : "WebDAV is an extension to the HTTP protocol which allows clients to create, move, and delete files and resources on the web server. This functionality is available in IIS when the WebDAV feature is enabled.
Rationale:
WebDAV is not widely used, and it has serious security concerns because it may allow clients to modify unauthorized files on the web server. Therefore, the WebDav feature should be disabled."
      solution        : "To disable this feature using PowerShell, enter the following command:
Remove-WindowsFeature Web-DAV-Publishing
Verify that Success is True
Default Value:
The default state of WebDAV Publishing is disabled"
      reference       : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
      see_also        : "https://workbench.cisecurity.org/files/2297"
      value_type      : POLICY_TEXT
      value_data      : "Available"
      powershell_args : "Get-WindowsFeature Web-DAV-Publishing | Select 'InstallState' | Format-Table -HideTableHeaders"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "2.1 Ensure 'global authorization rule' is set to restrict access"
      info        : "IIS introduced URL Authorization, which allows the addition of Authorization rules to the actual URL, instead of the underlying file system resource, as a way to protect it. Authorization rules can be configured at the server, web site, folder (including Virtual Directories), or file level. The native URL Authorization module applies to all requests, whether they are .NET managed or other types of files (e.g. static files or ASP files). It is recommended that URL Authorization be configured to only grant access to the necessary security principals.
Rationale:
Configuring a global Authorization rule that restricts access will ensure inheritance of the settings down through the hierarchy of web directories; if that content is copied elsewhere, the authorization rules flow with it. This will ensure access to current and future content is only granted to the appropriate principals, mitigating risk of accidental or unauthorized access."
      solution    : "To configure URL Authorization at the server level using command line utilities:
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config  -section:system.webServer/security/authorization /-'[users='*',roles='',verbs='']'
%systemroot%\system32\inetsrv\appcmd set config  -section:system.webServer/security/authorization /+'[accessType='Allow',roles='Administrators']'
OR
Enter the following command in PowerShell to configure:
Remove-WebConfigurationProperty  -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/authorization' -name '.' -AtElement @{users='*';roles='';verbs=''}
Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/authorization' -name '.' -value @{accessType='Allow';roles='Administrators'}
OR
To configure URL Authorization at the server level using IIS Manager:
1. Connect to Internet Information Services (IIS Manager)
2. Select the server
3. Select Authorization Rules
4. Remove the 'Allow All Users' rule
5. Click Add Allow Rule...
6. Allow access to the user(s), user groups, or roles that are authorized across all of the web sites and applications (e.g. the Administrators group)
Default Value:
The default server-level setting is to allow all users access."
      reference   : "800-171|3.1.1,800-53|AC-3,CSCv7|18,CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ITSG-33|AC-3,LEVEL|1NS,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "<allow[\s]+users=.\*.[\s]*/>"
      appcmd_args : "list config /section:system.webserver/security/authorization"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <if>
      <condition type:"OR">
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "Check IIS for Anonymous authentication"
          value_type  : POLICY_TEXT
          value_data  : "false"
          appcmd_args : "list config /section:system.webserver/security/authentication/anonymousAuthentication /text:enabled"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "Check IIS for Forms authentication"
          value_type  : POLICY_TEXT
          value_data  : "Forms"
          appcmd_args : "list config /section:system.web/authentication /text:mode"
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "2.2 Ensure access to sensitive site features is restricted to authenticated principals only - Default"
          info        : "IIS supports both challenge-based and login redirection-based authentication methods. Challenge-based authentication methods, such as Integrated Windows Authentication, require a client to respond correctly to a server-initiated challenge. A login redirection-based authentication method such as Forms Authentication relies on redirection to a login page to determine the identity of the principal. Challenge-based authentication and login redirection-based authentication methods cannot be used in conjunction with one another.
Public servers/sites are typically configured to use Anonymous Authentication. This method typically works, provided the content or services is intended for use by the public. When sites, applications, or specific content containers are not intended for anonymous public use, an appropriate authentication mechanism should be utilized. Authentication will help confirm the identity of clients who request access to sites, application, and content. IIS provides the following authentication modules by default:
* Anonymous Authentication - allows anonymous users to access sites, applications, and/or content
* Integrated Windows Authentication - authenticates users using the NTLM or Kerberos protocols; Kerberos v5 requires a connection to Active Directory
* ASP.NET Impersonation - allows ASP.NET applications to run under a security context different from the default security context for an application
* Forms Authentication - enables a user to login to the configured space with a valid user name and password which is then validated against a database or other credentials store
* Basic authentication - requires a valid user name and password to access content
* Client Certificate Mapping Authentication - allows automatic authentication of users who log on with client certificates that have been configured; requires SSL
* Digest Authentication - uses Windows domain controller to authenticate users who request access
Note that none of the challenge-based authentication modules can be used at the same time Forms Authentication is enabled for certain applications/content. Forms Authentication does not rely on IIS authentication, so anonymous access for the ASP.NET application can be configured if Forms Authentication will be used.
It is recommended that sites containing sensitive information, confidential data, or non-public web services be configured with a credentials-based authentication mechanism.
Rationale:
Configuring authentication will help mitigate the risk of unauthorized users accessing data and/or services, and in some cases reduce the potential harm that can be done to a system."
          solution    : "When configuring an authentication module for the first time, each mechanism must be completely configured before use.
Enabling authentication can be performed by using the user interface (UI), running AppCmd.exe commands in a command-line window, editing configuration files directly, or by writing WMI scripts. To verify an authentication mechanism is in place for sensitive content using the IIS Manager GUI:
1. Open IIS Manager and navigate to level with sensitive content
2. In Features View, double-click Authentication
3. On the Authentication page, make sure an authentication module is enabled, while anonymous authentication is enabled (Forms Authentication can have anonymous as well)
4. If necessary, select the desired authentication module, then in the Actions pane, click Enable
OR
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /mode:<Windows|Passport|Forms>
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter 'system.webServer/security/authentication/anonymousAuthentication' -name 'enabled' -value 'False'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter 'system.webServer/security/authentication/windowsAuthentication' -name 'enabled' -value 'True'
Default Value:
The default installation of IIS supports Anonymous Authentication without further electing additional methods."
          reference   : "CSCv6|14.4,LEVEL|1NS"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </then>

      <else>
        <report type:"FAILED">
          description : "2.2 Ensure access to sensitive site features is restricted to authenticated principals only - Default"
          info        : "IIS supports both challenge-based and login redirection-based authentication methods. Challenge-based authentication methods, such as Integrated Windows Authentication, require a client to respond correctly to a server-initiated challenge. A login redirection-based authentication method such as Forms Authentication relies on redirection to a login page to determine the identity of the principal. Challenge-based authentication and login redirection-based authentication methods cannot be used in conjunction with one another.
Public servers/sites are typically configured to use Anonymous Authentication. This method typically works, provided the content or services is intended for use by the public. When sites, applications, or specific content containers are not intended for anonymous public use, an appropriate authentication mechanism should be utilized. Authentication will help confirm the identity of clients who request access to sites, application, and content. IIS provides the following authentication modules by default:
* Anonymous Authentication - allows anonymous users to access sites, applications, and/or content
* Integrated Windows Authentication - authenticates users using the NTLM or Kerberos protocols; Kerberos v5 requires a connection to Active Directory
* ASP.NET Impersonation - allows ASP.NET applications to run under a security context different from the default security context for an application
* Forms Authentication - enables a user to login to the configured space with a valid user name and password which is then validated against a database or other credentials store
* Basic authentication - requires a valid user name and password to access content
* Client Certificate Mapping Authentication - allows automatic authentication of users who log on with client certificates that have been configured; requires SSL
* Digest Authentication - uses Windows domain controller to authenticate users who request access
Note that none of the challenge-based authentication modules can be used at the same time Forms Authentication is enabled for certain applications/content. Forms Authentication does not rely on IIS authentication, so anonymous access for the ASP.NET application can be configured if Forms Authentication will be used.
It is recommended that sites containing sensitive information, confidential data, or non-public web services be configured with a credentials-based authentication mechanism.
Rationale:
Configuring authentication will help mitigate the risk of unauthorized users accessing data and/or services, and in some cases reduce the potential harm that can be done to a system."
          solution    : "When configuring an authentication module for the first time, each mechanism must be completely configured before use.
Enabling authentication can be performed by using the user interface (UI), running AppCmd.exe commands in a command-line window, editing configuration files directly, or by writing WMI scripts. To verify an authentication mechanism is in place for sensitive content using the IIS Manager GUI:
1. Open IIS Manager and navigate to level with sensitive content
2. In Features View, double-click Authentication
3. On the Authentication page, make sure an authentication module is enabled, while anonymous authentication is enabled (Forms Authentication can have anonymous as well)
4. If necessary, select the desired authentication module, then in the Actions pane, click Enable
OR
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /mode:<Windows|Passport|Forms>
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter 'system.webServer/security/authentication/anonymousAuthentication' -name 'enabled' -value 'False'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter 'system.webServer/security/authentication/windowsAuthentication' -name 'enabled' -value 'True'
Default Value:
The default installation of IIS supports Anonymous Authentication without further electing additional methods."
          reference   : "CSCv6|14.4,LEVEL|1NS"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <custom_item>
      type            : AUDIT_POWERSHELL
      description     : "2.2 Ensure access to sensitive site features is restricted to authenticated principals only - Applications"
      info            : "IIS supports both challenge-based and login redirection-based authentication methods. Challenge-based authentication methods, such as Integrated Windows Authentication, require a client to respond correctly to a server-initiated challenge. A login redirection-based authentication method such as Forms Authentication relies on redirection to a login page to determine the identity of the principal. Challenge-based authentication and login redirection-based authentication methods cannot be used in conjunction with one another.
Public servers/sites are typically configured to use Anonymous Authentication. This method typically works, provided the content or services is intended for use by the public. When sites, applications, or specific content containers are not intended for anonymous public use, an appropriate authentication mechanism should be utilized. Authentication will help confirm the identity of clients who request access to sites, application, and content. IIS provides the following authentication modules by default:
* Anonymous Authentication - allows anonymous users to access sites, applications, and/or content
* Integrated Windows Authentication - authenticates users using the NTLM or Kerberos protocols; Kerberos v5 requires a connection to Active Directory
* ASP.NET Impersonation - allows ASP.NET applications to run under a security context different from the default security context for an application
* Forms Authentication - enables a user to login to the configured space with a valid user name and password which is then validated against a database or other credentials store
* Basic authentication - requires a valid user name and password to access content
* Client Certificate Mapping Authentication - allows automatic authentication of users who log on with client certificates that have been configured; requires SSL
* Digest Authentication - uses Windows domain controller to authenticate users who request access
Note that none of the challenge-based authentication modules can be used at the same time Forms Authentication is enabled for certain applications/content. Forms Authentication does not rely on IIS authentication, so anonymous access for the ASP.NET application can be configured if Forms Authentication will be used.
It is recommended that sites containing sensitive information, confidential data, or non-public web services be configured with a credentials-based authentication mechanism.
Rationale:
Configuring authentication will help mitigate the risk of unauthorized users accessing data and/or services, and in some cases reduce the potential harm that can be done to a system."
      solution        : "When configuring an authentication module for the first time, each mechanism must be completely configured before use.
Enabling authentication can be performed by using the user interface (UI), running AppCmd.exe commands in a command-line window, editing configuration files directly, or by writing WMI scripts. To verify an authentication mechanism is in place for sensitive content using the IIS Manager GUI:
1. Open IIS Manager and navigate to level with sensitive content
2. In Features View, double-click Authentication
3. On the Authentication page, make sure an authentication module is enabled, while anonymous authentication is enabled (Forms Authentication can have anonymous as well)
4. If necessary, select the desired authentication module, then in the Actions pane, click Enable
OR
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /mode:<Windows|Passport|Forms>
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter 'system.webServer/security/authentication/anonymousAuthentication' -name 'enabled' -value 'False'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter 'system.webServer/security/authentication/windowsAuthentication' -name 'enabled' -value 'True'
Default Value:
The default installation of IIS supports Anonymous Authentication without further electing additional methods."
      reference       : "800-53|AC-6(3),CSCv7|14.6,CSF|PR.AC-4,ISO/IEC-27001|A.9.1.2,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(3),LEVEL|1NS,NESA|T5.1.1,NESA|T5.5.4,SWIFT-CSCv1|5.1"
      see_also        : "https://workbench.cisecurity.org/files/2297"
      value_type      : POLICY_TEXT
      value_data      : ".*failed.*"
      powershell_args : "function testAuth { param($p) $path='IIS:Sites\'+$p; If (((Get-WebConfigurationProperty -PSPath $path -filter /system.webServer/security/authentication/anonymousAuthentication -name enabled | Where {$_.Value -eq 'True'} | measure).Count -gt 0) -and ((Get-WebConfiguration -PSPath $path -filter /system.web/authentication).mode -ne 'Forms')) { $p + ': failed' } else { $p + ': success' } } ; Get-Website | foreach { $site = $_.Name ; testAuth($site) ; Get-WebApplication -Site $site | foreach { $app = $_.Path ; testAuth($site+$app) } }"
      check_type      : CHECK_NOT_REGEX
    </custom_item>

    <if>
      <condition type:"OR">
        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify .net extensibility is installed - NetFxExtensibility45"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "NetFxExtensibility45"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>

        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify .net extensibility is installed - ASPNET45"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "ASPNET45"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "2.3 Ensure 'forms authentication' require SSL - Default"
          info        : "Forms-based authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic between client and server be encrypted using SSL, especially in cases where the site is publicly accessible. It is recommended that communications with any portion of a site using Forms Authentication be encrypted using SSL.
NOTE Due to identified security vulnerabilities, SSL is no longer considered to provides adequate protection for a sensitive information.
Rationale:
Requiring SSL for Forms Authentication will protect the confidentiality of credentials during the login process, helping mitigate the risk of stolen user information."
          solution    : "1. Open IIS Manager and navigate to the appropriate tier
2. In Features View, double-click Authentication
3. On the Authentication page, select Forms Authentication
4. In the Actions pane, click Edit
5. Check the Requires SSL checkbox in the cookie settings section, click OK
OR
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /mode:Forms
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'requireSSL' -value 'True'
Default Value:
SSL is not required when Forms Authentication is enabled."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "true"
          appcmd_args : "list config /section:system.web/authentication /text:forms.requireSSL"
        </custom_item>

        <custom_item>
          type            : AUDIT_POWERSHELL
          description     : "2.3 Ensure 'forms authentication' require SSL - Applications"
          info            : "Forms-based authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic between client and server be encrypted using SSL, especially in cases where the site is publicly accessible. It is recommended that communications with any portion of a site using Forms Authentication be encrypted using SSL.
NOTE Due to identified security vulnerabilities, SSL is no longer considered to provides adequate protection for a sensitive information.
Rationale:
Requiring SSL for Forms Authentication will protect the confidentiality of credentials during the login process, helping mitigate the risk of stolen user information."
          solution        : "1. Open IIS Manager and navigate to the appropriate tier
2. In Features View, double-click Authentication
3. On the Authentication page, select Forms Authentication
4. In the Actions pane, click Edit
5. Check the Requires SSL checkbox in the cookie settings section, click OK
OR
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /mode:Forms
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'requireSSL' -value 'True'
Default Value:
SSL is not required when Forms Authentication is enabled."
          reference       : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also        : "https://workbench.cisecurity.org/files/2297"
          value_type      : POLICY_TEXT
          value_data      : ".*failed.*"
          powershell_args : "function testAuth { param($p) $path='IIS:Sites\'+$p; If (((Get-WebConfigurationProperty -PSPath $path -filter /system.web/authentication/forms -name requireSSL).Value -eq $False) -and (((Get-WebConfiguration -PSPath $path -filter /system.web/authentication).mode) -eq 'Forms')) { $p + ': failed' } else { $p + ': success' } } ; Get-Website | foreach { $site = $_.Name ; testAuth($site) ; Get-WebApplication -Site $site | foreach { $app = $_.Path ; testAuth($site+$app) } }"
          check_type      : CHECK_NOT_REGEX
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "2.5 Ensure 'cookie protection mode' is configured for forms authentication - Default"
          info        : "The cookie protection mode defines the protection Forms Authentication cookies will be given within a configured application. The four cookie protection modes that can be defined are:
* Encryption and validation - Specifies that the application use both data validation and encryption to help protect the cookie; this option uses the configured data validation algorithm (based on the machine key) and triple-DES (3DES) for encryption, if available and if the key is long enough (48 bytes or more)
* None - Specifies that both encryption and validation are disabled for sites that are using cookies only for personalization and have weaker security requirements
* Encryption - Specifies that the cookie is encrypted by using Triple-DES or DES, but data validation is not performed on the cookie; cookies used in this manner might be subject to plain text attacks
* Validation - Specifies that a validation scheme verifies that the contents of an encrypted cookie have not been changed in transit
It is recommended that cookie protection mode always encrypt and validate Forms Authentication cookies.
Rationale:
By encrypting and validating the cookie, the confidentiality and integrity of data within the cookie is assured. This helps mitigate the risk of attacks such as session hijacking and impersonation."
          solution    : "Cookie protection mode can be configured by using the user interface (UI), by running Appcmd.exe commands in a command-line window, by editing configuration files directly, or by writing WMI scripts. Using IIS Manager:
1. Open IIS Manager and navigate to the level where Forms Authentication is enabled
2. In Features View, double-click Authentication
3. On the Authentication page, select Forms Authentication
4. In the Actions pane, click Edit
5. In the Cookie settings section, verify the drop-down for Protection mode is set for Encryption and validation
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/authentication/forms' -name 'protection' -value 'All'
Default Value:
When cookies are used for Forms Authentication, the default cookie protection mode is All, meaning the application encrypts and validates the cookie."
          reference   : "800-171|3.13.16,800-53|SC-28(1),CSCv7|18,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "All"
          appcmd_args : "list config /section:system.web/authentication /text:forms.protection"
        </custom_item>

        <custom_item>
          type                : AUDIT_IIS_APPCMD
          description         : "2.5 Ensure 'cookie protection mode' is configured for forms authentication - Applications"
          info                : "The cookie protection mode defines the protection Forms Authentication cookies will be given within a configured application. The four cookie protection modes that can be defined are:
* Encryption and validation - Specifies that the application use both data validation and encryption to help protect the cookie; this option uses the configured data validation algorithm (based on the machine key) and triple-DES (3DES) for encryption, if available and if the key is long enough (48 bytes or more)
* None - Specifies that both encryption and validation are disabled for sites that are using cookies only for personalization and have weaker security requirements
* Encryption - Specifies that the cookie is encrypted by using Triple-DES or DES, but data validation is not performed on the cookie; cookies used in this manner might be subject to plain text attacks
* Validation - Specifies that a validation scheme verifies that the contents of an encrypted cookie have not been changed in transit
It is recommended that cookie protection mode always encrypt and validate Forms Authentication cookies.
Rationale:
By encrypting and validating the cookie, the confidentiality and integrity of data within the cookie is assured. This helps mitigate the risk of attacks such as session hijacking and impersonation."
          solution            : "Cookie protection mode can be configured by using the user interface (UI), by running Appcmd.exe commands in a command-line window, by editing configuration files directly, or by writing WMI scripts. Using IIS Manager:
1. Open IIS Manager and navigate to the level where Forms Authentication is enabled
2. In Features View, double-click Authentication
3. On the Authentication page, select Forms Authentication
4. In the Actions pane, click Edit
5. In the Cookie settings section, verify the drop-down for Protection mode is set for Encryption and validation
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/authentication/forms' -name 'protection' -value 'All'
Default Value:
When cookies are used for Forms Authentication, the default cookie protection mode is All, meaning the application encrypts and validates the cookie."
          reference           : "800-171|3.13.16,800-53|SC-28(1),CSCv7|18,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
          see_also            : "https://workbench.cisecurity.org/files/2297"
          value_type          : POLICY_TEXT
          value_data          : "All"
          appcmd_args         : "list config {} /section:system.web/authentication /text:forms.protection"
          appcmd_filter       : "list config {} /section:system.web/authentication /text:mode"
          appcmd_filter_value : "Forms"
          appcmd_list         : "list apps"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "2.3 Ensure 'forms authentication' require SSL - Default"
          info        : "Forms-based authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic between client and server be encrypted using SSL, especially in cases where the site is publicly accessible. It is recommended that communications with any portion of a site using Forms Authentication be encrypted using SSL.
NOTE Due to identified security vulnerabilities, SSL is no longer considered to provides adequate protection for a sensitive information.
Rationale:
Requiring SSL for Forms Authentication will protect the confidentiality of credentials during the login process, helping mitigate the risk of stolen user information.

NOTE: This requires .Net Extensibility or ASPNET45 component, but neither component was found."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "2.3 Ensure 'forms authentication' require SSL - Applications"
          info        : "Forms-based authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic between client and server be encrypted using SSL, especially in cases where the site is publicly accessible. It is recommended that communications with any portion of a site using Forms Authentication be encrypted using SSL.
NOTE Due to identified security vulnerabilities, SSL is no longer considered to provides adequate protection for a sensitive information.
Rationale:
Requiring SSL for Forms Authentication will protect the confidentiality of credentials during the login process, helping mitigate the risk of stolen user information.

NOTE: This requires .Net Extensibility or ASPNET45 component, but neither component was found."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "2.5 Ensure 'cookie protection mode' is configured for forms authentication - Default"
          info        : "The cookie protection mode defines the protection Forms Authentication cookies will be given within a configured application. The four cookie protection modes that can be defined are:
* Encryption and validation - Specifies that the application use both data validation and encryption to help protect the cookie; this option uses the configured data validation algorithm (based on the machine key) and triple-DES (3DES) for encryption, if available and if the key is long enough (48 bytes or more)
* None - Specifies that both encryption and validation are disabled for sites that are using cookies only for personalization and have weaker security requirements
* Encryption - Specifies that the cookie is encrypted by using Triple-DES or DES, but data validation is not performed on the cookie; cookies used in this manner might be subject to plain text attacks
* Validation - Specifies that a validation scheme verifies that the contents of an encrypted cookie have not been changed in transit
It is recommended that cookie protection mode always encrypt and validate Forms Authentication cookies.
Rationale:
By encrypting and validating the cookie, the confidentiality and integrity of data within the cookie is assured. This helps mitigate the risk of attacks such as session hijacking and impersonation.

NOTE: This requires .Net Extensibility or ASPNET45 component, but neither component was found."
          reference   : "800-171|3.13.16,800-53|SC-28(1),CSCv7|18,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "2.5 Ensure 'cookie protection mode' is configured for forms authentication - Applications"
          info        : "The cookie protection mode defines the protection Forms Authentication cookies will be given within a configured application. The four cookie protection modes that can be defined are:
* Encryption and validation - Specifies that the application use both data validation and encryption to help protect the cookie; this option uses the configured data validation algorithm (based on the machine key) and triple-DES (3DES) for encryption, if available and if the key is long enough (48 bytes or more)
* None - Specifies that both encryption and validation are disabled for sites that are using cookies only for personalization and have weaker security requirements
* Encryption - Specifies that the cookie is encrypted by using Triple-DES or DES, but data validation is not performed on the cookie; cookies used in this manner might be subject to plain text attacks
* Validation - Specifies that a validation scheme verifies that the contents of an encrypted cookie have not been changed in transit
It is recommended that cookie protection mode always encrypt and validate Forms Authentication cookies.
Rationale:
By encrypting and validating the cookie, the confidentiality and integrity of data within the cookie is assured. This helps mitigate the risk of attacks such as session hijacking and impersonation.

NOTE: This requires .Net Extensibility or ASPNET45 component, but neither component was found."
          reference   : "800-171|3.13.16,800-53|SC-28(1),CSCv7|18,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify basic authentication is installed"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "BasicAuthentication"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type                : AUDIT_IIS_APPCMD
          description         : "2.6 Ensure transport layer security for 'basic authentication' is configured"
          info                : "Basic Authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic between client and server be encrypted, especially in cases where the site is publicly accessible and is recommended that TLS be configured and required for any Site or Application using Basic Authentication.
Rationale:
Credentials sent in clear text can be easily intercepted by malicious code or persons. Enforcing the use of Transport Layer Security will help mitigate the chances of hijacked credentials."
          solution            : "To protect Basic Authentication with transport layer security:
1. Open IIS Manager
2. In the Connections pane on the left, select the server to be configured
3. In the Connections pane, expand the server, then expand Sites and select the site to be configured
4. In the Actions pane, click Bindings; the Site Bindings dialog appears
5. If an HTTPS binding is available, click Close and see below 'To require SSL'
6. If no HTTPS binding is visible, perform the following steps
To add an HTTPS binding:
1. In the Site Bindings dialog, click Add; the Add Site Binding dialog appears
2. Under Type, select https
3. Under SSL certificate, select an X.509 certificate
4. Click OK, then close
To require SSL:
1. In Features View, double-click SSL Settings
2. On the SSL Settings page, select Require SSL.
3. In the Actions pane, click Apply
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website name>' -filter 'system.webServer/security/access' -name 'sslFlags' -value 'Ssl'
Default Value:
Transport Layer Security is not enabled by default when Basic Authentication is configured."
          reference           : "800-171|3.5.10,800-53|IA-5(1),CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,PCI-DSSv3.1|8.2.1,PCI-DSSv3.2|8.2.1,SWIFT-CSCv1|4.1,TBA-FIISB|26.1"
          see_also            : "https://workbench.cisecurity.org/files/2297"
          value_type          : POLICY_TEXT
          value_data          : "^Ssl(,.*|)[\s]*$"
          appcmd_args         : "list config {} /section:system.webServer/security/access /text:sslFlags"
          appcmd_filter       : "list config {} /section:system.webServer/security/authentication/basicAuthentication /text:enabled"
          appcmd_filter_value : "true"
          appcmd_list         : "list apps"
          check_type          : CHECK_REGEX
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "2.6 Ensure transport layer security for 'basic authentication' is configured"
          info        : "Basic Authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic between client and server be encrypted, especially in cases where the site is publicly accessible and is recommended that TLS be configured and required for any Site or Application using Basic Authentication.
Rationale:
Credentials sent in clear text can be easily intercepted by malicious code or persons. Enforcing the use of Transport Layer Security will help mitigate the chances of hijacked credentials.

NOTE: Basic Authentication has not been identified as installed on the target."
          reference   : "800-171|3.5.10,800-53|IA-5(1),CSCv7|14.4,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,PCI-DSSv3.1|8.2.1,PCI-DSSv3.2|8.2.1,SWIFT-CSCv1|4.1,TBA-FIISB|26.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "2.7 Ensure 'passwordFormat' is not set to clear - Default"
      info        : "The <credentials> element of the <authentication> element allows optional definitions of name and password for IIS Manager User accounts within the configuration file. Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration interface to connect to sites and applications in which they've been granted authorization. Note that the <credentials> element only applies when the default provider, ConfigurationAuthenticationProvider, is configured as the authentication provider. It is recommended that passwordFormat be set to a value other than Clear, such as SHA1.
Rationale:
Authentication credentials should always be protected to reduce the risk of stolen authentication credentials."
      solution    : "Authentication mode is configurable at the machine.config, root-level web.config, or application-level web.config:
1. Locate and open the configuration file where the credentials are stored
2. Find the <credentials> element
3. If present, ensure passwordFormat is not set to Clear
4. Change passwordFormatto SHA1
The clear text passwords will need to be replaced with the appropriate hashed version.
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/authentication/forms/credentials' -name 'passwordFormat' -value 'SHA1'
Default Value:
The default passwordFormat method is SHA1."
      reference   : "800-171|3.5.10,800-53|IA-5(1),CSCv7|16.14,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,PCI-DSSv3.1|8.2.1,PCI-DSSv3.2|8.2.1,SWIFT-CSCv1|4.1,TBA-FIISB|26.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "Clear"
      appcmd_args : "list config /section:system.web/authentication /text:forms.credentials.passwordFormat"
      check_type  : CHECK_NOT_EQUAL
    </custom_item>

    <custom_item>
      type                : AUDIT_IIS_APPCMD
      description         : "2.7 Ensure 'passwordFormat' is not set to clear - Applications"
      info                : "The <credentials> element of the <authentication> element allows optional definitions of name and password for IIS Manager User accounts within the configuration file. Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration interface to connect to sites and applications in which they've been granted authorization. Note that the <credentials> element only applies when the default provider, ConfigurationAuthenticationProvider, is configured as the authentication provider. It is recommended that passwordFormat be set to a value other than Clear, such as SHA1.
Rationale:
Authentication credentials should always be protected to reduce the risk of stolen authentication credentials."
      solution            : "Authentication mode is configurable at the machine.config, root-level web.config, or application-level web.config:
1. Locate and open the configuration file where the credentials are stored
2. Find the <credentials> element
3. If present, ensure passwordFormat is not set to Clear
4. Change passwordFormatto SHA1
The clear text passwords will need to be replaced with the appropriate hashed version.
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/authentication/forms/credentials' -name 'passwordFormat' -value 'SHA1'
Default Value:
The default passwordFormat method is SHA1."
      reference           : "800-171|3.5.10,800-53|IA-5(1),CSCv7|16.14,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,PCI-DSSv3.1|8.2.1,PCI-DSSv3.2|8.2.1,SWIFT-CSCv1|4.1,TBA-FIISB|26.1"
      see_also            : "https://workbench.cisecurity.org/files/2297"
      value_type          : POLICY_TEXT
      value_data          : "Clear"
      appcmd_args         : "list config {} /section:system.web/authentication /text:forms.credentials.passwordFormat"
      appcmd_filter       : "list config {} /section:system.web/authentication /text:mode"
      appcmd_filter_value : "Forms"
      appcmd_list         : "list apps"
      check_type          : CHECK_NOT_EQUAL
    </custom_item>

    <if>
      <condition type:"OR">
        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify .net extensibility is installed - ASPNET45"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "ASPNET45"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>

        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify .net extensibility is installed - NetFxExtensibility45"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "NetFxExtensibility45"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.1 Ensure 'deployment method retail' is set"
          info        : "The <deployment retail> switch is intended for use by production IIS servers. This switch is used to help applications run with the best possible performance and least possible security information leakages by disabling the application's ability to generate trace output on a page, disabling the ability to display detailed error messages to end users, and disabling the debug switch. Often times, switches and options that are developer-focused, such as failed request tracing and debugging, are enabled during active development. It is recommended that the deployment method on any production server be set to retail.
Rationale:
Utilizing the switch specifically intended for production IIS servers will eliminate the risk of vital application and system information leakages that would otherwise occur if tracing or debug were to be left enabled, or customErrors were to be left off."
          solution    : "1. Open the machine.config file located in: %systemroot%\\Microsoft.NET\\Framework<bitness (if not the 32 bit)>\\<framework version>\\CONFIG
2. Add the line <deployment retail='true' /> within the <system.web> section
3. If systems are 64-bit, do the same for the machine.config located in: %systemroot%\\Microsoft.NET\\Framework<bitness (if not the 32 bit)>\\<framework version>\\CONFIG
Default Value:
The <deployment retail> tag is not included in the machine.config by default."
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "true"
          appcmd_args : "list config /section:system.web/deployment /text:retail"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.4 Ensure IIS HTTP detailed errors are hidden from displaying remotely - Default"
          info        : "A Web site's error pages are often set to show detailed error information for troubleshooting purposes during testing or initial deployment. To prevent unauthorized users from viewing this privileged information, detailed error pages must not be seen by remote users. This setting can be modified in the errorMode attribute setting for a Web site's error pages. By default, the errorMode attribute is set in the Web.config file for the Web site or application and is located in the <httpErrors> element of the <system.webServer> section. It is recommended that custom errors be prevented from displaying remotely.
Rationale:
The information contained in custom error messages can provide clues as to how applications function, opening up unnecessary attack vectors. Ensuring custom errors are never displayed remotely can help mitigate the risk of malicious persons obtaining information as to how the application works."
          solution    : "The following describes how to change the errorMode attribute to DetailedLocalOnly or Custom for a Web site by using IIS Manager:
1. Open IIS Manager with Administrative privileges
2. In the Connections pane on the left, expand the server, then expand the Sites folder
3. Select the Web site or application to be configured
4. In Features View, select Error Pages, in the Actions pane, select Open Feature
5. In the Actions pane, select Edit Feature Settings
6. In the Edit Error Pages Settings dialog, under Error Responses, select either Custom error pages or Detailed errors for local requests and custom error pages for remote requests
7. Click OK and exit the Edit Error Pages Settings dialog
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.webServer/httpErrors' -name 'errorMode' -value 'DetailedLocalOnly'
Default Value:
The default errorMode is DetailedLocalOnly."
          reference   : "800-53|SI-11,CSCv7|18,ITSG-33|SI-11,LEVEL|1S"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "DetailedLocalOnly" || "Custom"
          appcmd_args : "list config /section:system.webServer/httpErrors /text:errorMode"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.4 Ensure IIS HTTP detailed errors are hidden from displaying remotely - Applications"
          info        : "A Web site's error pages are often set to show detailed error information for troubleshooting purposes during testing or initial deployment. To prevent unauthorized users from viewing this privileged information, detailed error pages must not be seen by remote users. This setting can be modified in the errorMode attribute setting for a Web site's error pages. By default, the errorMode attribute is set in the Web.config file for the Web site or application and is located in the <httpErrors> element of the <system.webServer> section. It is recommended that custom errors be prevented from displaying remotely.
Rationale:
The information contained in custom error messages can provide clues as to how applications function, opening up unnecessary attack vectors. Ensuring custom errors are never displayed remotely can help mitigate the risk of malicious persons obtaining information as to how the application works."
          solution    : "The following describes how to change the errorMode attribute to DetailedLocalOnly or Custom for a Web site by using IIS Manager:
1. Open IIS Manager with Administrative privileges
2. In the Connections pane on the left, expand the server, then expand the Sites folder
3. Select the Web site or application to be configured
4. In Features View, select Error Pages, in the Actions pane, select Open Feature
5. In the Actions pane, select Edit Feature Settings
6. In the Edit Error Pages Settings dialog, under Error Responses, select either Custom error pages or Detailed errors for local requests and custom error pages for remote requests
7. Click OK and exit the Edit Error Pages Settings dialog
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.webServer/httpErrors' -name 'errorMode' -value 'DetailedLocalOnly'
Default Value:
The default errorMode is DetailedLocalOnly."
          reference   : "800-53|SI-11,CSCv7|18,ITSG-33|SI-11,LEVEL|1S"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "DetailedLocalOnly" || "Custom"
          appcmd_args : "list config {} /section:system.webServer/httpErrors /text:errorMode"
          appcmd_list : "list apps"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.7 Ensure 'cookies' are set with HttpOnly attribute - Default"
          info        : "The httpOnlyCookies attribute of the httpCookies node determines if IIS will set the HttpOnly flag on HTTP cookies it sets. The HttpOnly flag indicates to the user agent that the cookie must not be accessible by client-side script (i.e document.cookie). It is recommended that the httpOnlyCookies attribute be set to true.
Rationale:
When cookies are set with the HttpOnly flag, they cannot be accessed by client side scripting running in the user's browser. Preventing client-side scripting from accessing cookie content may reduce the probability of a cross site scripting attack materializing into a successful session hijack."
          solution    : "1. Locate and open the application's web.config file
2. Add the <httpCookies httpOnlyCookies='true' /> tag within <system.web>:
<configuration>
  <system.web>
	  <httpCookies httpOnlyCookies='true' />
	</system.web>
</configuration>
Setting the value of the httpOnlyCookies attribute of the httpCookies element to true will add the HttpOnly flag to all the cookies set by the application. All modern versions of browsers recognize HttpOnly attribute; older versions will either treat them as normal cookies or simply ignore them altogether.
Default Value:
By default, ASP.NET 2.0 does not force cookies to httpOnly."
          reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|18,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "true"
          appcmd_args : "list config /section:system.web/httpCookies /text:httpOnlyCookies"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.7 Ensure 'cookies' are set with HttpOnly attribute - Applications"
          info        : "The httpOnlyCookies attribute of the httpCookies node determines if IIS will set the HttpOnly flag on HTTP cookies it sets. The HttpOnly flag indicates to the user agent that the cookie must not be accessible by client-side script (i.e document.cookie). It is recommended that the httpOnlyCookies attribute be set to true.
Rationale:
When cookies are set with the HttpOnly flag, they cannot be accessed by client side scripting running in the user's browser. Preventing client-side scripting from accessing cookie content may reduce the probability of a cross site scripting attack materializing into a successful session hijack."
          solution    : "1. Locate and open the application's web.config file
2. Add the <httpCookies httpOnlyCookies='true' /> tag within <system.web>:
<configuration>
  <system.web>
	  <httpCookies httpOnlyCookies='true' />
	</system.web>
</configuration>
Setting the value of the httpOnlyCookies attribute of the httpCookies element to true will add the HttpOnly flag to all the cookies set by the application. All modern versions of browsers recognize HttpOnly attribute; older versions will either treat them as normal cookies or simply ignore them altogether.
Default Value:
By default, ASP.NET 2.0 does not force cookies to httpOnly."
          reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|18,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "true"
          appcmd_args : "list config {} /section:system.web/httpCookies /text:httpOnlyCookies"
          appcmd_list : "list apps"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.9 Ensure 'MachineKey validation method - .Net 4.5' is configured - Default"
          info        : "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.
The following validation methods are available:
* Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys
* Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data
* Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest
* Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES
* Secure Hash Algorithm (SHA-2) is a family of two similar hash functions, with different block sizes known as SHA-256 and SHA-512. They differ in the word size; SHAS-256 used 32-bit words and SHA-512 uses 64-bit words.
It is recommended that SHA-2 methods be configured for use at the global level.
Rationale:
SHA-2 is the strongest hashing algorithm supported by the validation property so it should be used as the validation method for the MachineKey in .Net 4.5."
          solution    : "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command:
%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:machineKey /validation:HMACSHA256
Note: When Appcmd.exe is used to configure the <machineKey> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT'  -filter 'system.web/machineKey' -name 'validation' -value 'AES'
Default Value:
The default Machine Key validation method is SHA256."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "^(HMACSHA256|HMACSHA512)[\s]*$"
          appcmd_args : "list config /section:machineKey /text:validation"
          check_type  : CHECK_REGEX
        </custom_item>

        <custom_item>
          type            : AUDIT_POWERSHELL
          description     : "3.9 Ensure 'MachineKey validation method - .Net 4.5' is configured - Applications"
          info            : "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.
The following validation methods are available:
* Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys
* Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data
* Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest
* Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES
* Secure Hash Algorithm (SHA-2) is a family of two similar hash functions, with different block sizes known as SHA-256 and SHA-512. They differ in the word size; SHAS-256 used 32-bit words and SHA-512 uses 64-bit words.
It is recommended that SHA-2 methods be configured for use at the global level.
Rationale:
SHA-2 is the strongest hashing algorithm supported by the validation property so it should be used as the validation method for the MachineKey in .Net 4.5."
          solution        : "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command:
%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:machineKey /validation:HMACSHA256
Note: When Appcmd.exe is used to configure the <machineKey> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT'  -filter 'system.web/machineKey' -name 'validation' -value 'AES'
Default Value:
The default Machine Key validation method is SHA256."
          reference       : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also        : "https://workbench.cisecurity.org/files/2297"
          value_type      : POLICY_TEXT
          value_data      : ".*failed.*"
          powershell_args : "function testMK { param($p) $path='IIS:Sites\'+$p; $v=(Get-WebConfigurationProperty -PSPath $path -filter /system.web/machinekey -name validation); If (($v -eq 'HMACSHA256') -or ($v -eq 'HMACSHA512')) { $p+' ('+$v+'): passed' } else { $p+' ('+$v+'): failed' } }; Get-Website | foreach { $site=$_.Name; testMK($site); Get-WebApplication -Site $site | foreach { $app=$_.Path; testMK($site+$app) } }"
          check_type      : CHECK_NOT_REGEX
        </custom_item>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : REG_CHECK
              description : "Verify .Net 2.0 is installed"
              value_type  : POLICY_TEXT
              value_data  : "HKLM\Software\Microsoft\Net Framework Setup\Ndp\V2.0.50727"
              reg_option  : MUST_EXIST
            </custom_item>

            <custom_item>
              type        : REGISTRY_SETTING
              description : "Verify asp.net is installed"
              value_type  : POLICY_DWORD
              value_data  : 1
              reg_key     : "HKLM\Software\Microsoft\Net Framework Setup\Ndp\V2.0.50727"
              reg_item    : "Install"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              type        : AUDIT_IIS_APPCMD
              description : "3.10 Ensure global .NET trust level is configured - Default"
              info        : "This only applies to .Net 2.0. Future versions have stopped supporting this feature.
An application's trust level determines the permissions that are granted by the ASP.NET code access security (CAS) policy. CAS defines two trust categories: full trust and partial trust. An application that has full trust permissions may access all resource types on a server and perform privileged operations, while applications that run with partial trust have varying levels of operating permissions and access to resources.
The possible values for the Level property of the TrustSection class are:
* Full: Specifies unrestricted permissions and grants the ASP.NET application permissions to access any resource that is subject to operating system security; all privileged operations are supported
* High: specifies a high level of code access security which limits the application from doing the following:
o Call unmanaged code
o Call serviced components
o Write to the event log
o Access Microsoft Windows Message Queuing queues
o Access ODBC, OLD DB, or Oracle data sources
* Medium: specifies a medium level of code access security, which means that in addition to the restrictions for High, the ASP.NET application cannot do any of the following things:
o Access files outside the application directory
o Access the registry
* Low: specifies a low level of code access security, which means that in addition to the restrictions for Medium, the application is prevented from performing any of the following actions:
o Write to the file system
o Call the System.Security.CodeAccessPermission.Assert method to expand permissions to resources
o Minimal: specifies a minimal level of code access security, which means that the application has only execute permission
It is recommended that the global .NET Trust Level be set to Medium or lower.
Rationale:
The CAS determines the permissions that are granted to the application on the server. Setting a minimal level of trust that is compatible with the applications will limit the potential harm that a compromised application could cause to a system."
              solution    : "Trust level can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the .Net Trust Level to Medium at the server level using an appcmd.exe command:
%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:trust /level:Medium
When Appcmd.exe is used to configure the element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT'  -filter 'system.web/trust' -name 'level' -value 'Medium'
Default Value:
By default, ASP.NET web applications run under the full trust setting."
              reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also    : "https://workbench.cisecurity.org/files/2297"
              value_type  : POLICY_TEXT
              value_data  : "^(Medium|Low|Minimal)[\s]*$"
              appcmd_args : "list config /section:trust /text:level"
              check_type  : CHECK_REGEX
            </custom_item>

            <custom_item>
              type        : AUDIT_IIS_APPCMD
              description : "3.10 Ensure global .NET trust level is configured - Applications"
              info        : "This only applies to .Net 2.0. Future versions have stopped supporting this feature.
An application's trust level determines the permissions that are granted by the ASP.NET code access security (CAS) policy. CAS defines two trust categories: full trust and partial trust. An application that has full trust permissions may access all resource types on a server and perform privileged operations, while applications that run with partial trust have varying levels of operating permissions and access to resources.
The possible values for the Level property of the TrustSection class are:
* Full: Specifies unrestricted permissions and grants the ASP.NET application permissions to access any resource that is subject to operating system security; all privileged operations are supported
* High: specifies a high level of code access security which limits the application from doing the following:
o Call unmanaged code
o Call serviced components
o Write to the event log
o Access Microsoft Windows Message Queuing queues
o Access ODBC, OLD DB, or Oracle data sources
* Medium: specifies a medium level of code access security, which means that in addition to the restrictions for High, the ASP.NET application cannot do any of the following things:
o Access files outside the application directory
o Access the registry
* Low: specifies a low level of code access security, which means that in addition to the restrictions for Medium, the application is prevented from performing any of the following actions:
o Write to the file system
o Call the System.Security.CodeAccessPermission.Assert method to expand permissions to resources
o Minimal: specifies a minimal level of code access security, which means that the application has only execute permission
It is recommended that the global .NET Trust Level be set to Medium or lower.
Rationale:
The CAS determines the permissions that are granted to the application on the server. Setting a minimal level of trust that is compatible with the applications will limit the potential harm that a compromised application could cause to a system."
              solution    : "Trust level can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the .Net Trust Level to Medium at the server level using an appcmd.exe command:
%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:trust /level:Medium
When Appcmd.exe is used to configure the element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT'  -filter 'system.web/trust' -name 'level' -value 'Medium'
Default Value:
By default, ASP.NET web applications run under the full trust setting."
              reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also    : "https://workbench.cisecurity.org/files/2297"
              value_type  : POLICY_TEXT
              value_data  : "^(Medium|Low|Minimal)[\s]*$"
              appcmd_args : "list config {} /section:trust /text:level"
              appcmd_list : "list apps"
              check_type  : CHECK_REGEX
            </custom_item>
          </then>

          <else>
            <report type:"PASSED">
              description : "3.10 Ensure global .NET trust level is configured - Default"
              info        : "This only applies to .Net 2.0. Future versions have stopped supporting this feature.
An application's trust level determines the permissions that are granted by the ASP.NET code access security (CAS) policy. CAS defines two trust categories: full trust and partial trust. An application that has full trust permissions may access all resource types on a server and perform privileged operations, while applications that run with partial trust have varying levels of operating permissions and access to resources.
The possible values for the Level property of the TrustSection class are:
* Full: Specifies unrestricted permissions and grants the ASP.NET application permissions to access any resource that is subject to operating system security; all privileged operations are supported
* High: specifies a high level of code access security which limits the application from doing the following:
o Call unmanaged code
o Call serviced components
o Write to the event log
o Access Microsoft Windows Message Queuing queues
o Access ODBC, OLD DB, or Oracle data sources
* Medium: specifies a medium level of code access security, which means that in addition to the restrictions for High, the ASP.NET application cannot do any of the following things:
o Access files outside the application directory
o Access the registry
* Low: specifies a low level of code access security, which means that in addition to the restrictions for Medium, the application is prevented from performing any of the following actions:
o Write to the file system
o Call the System.Security.CodeAccessPermission.Assert method to expand permissions to resources
o Minimal: specifies a minimal level of code access security, which means that the application has only execute permission
It is recommended that the global .NET Trust Level be set to Medium or lower.
Rationale:
The CAS determines the permissions that are granted to the application on the server. Setting a minimal level of trust that is compatible with the applications will limit the potential harm that a compromised application could cause to a system."
              reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also    : "https://workbench.cisecurity.org/files/2297"
            </report>

            <report type:"PASSED">
              description : "3.10 Ensure global .NET trust level is configured - Applications"
              info        : "This only applies to .Net 2.0. Future versions have stopped supporting this feature.
An application's trust level determines the permissions that are granted by the ASP.NET code access security (CAS) policy. CAS defines two trust categories: full trust and partial trust. An application that has full trust permissions may access all resource types on a server and perform privileged operations, while applications that run with partial trust have varying levels of operating permissions and access to resources.
The possible values for the Level property of the TrustSection class are:
* Full: Specifies unrestricted permissions and grants the ASP.NET application permissions to access any resource that is subject to operating system security; all privileged operations are supported
* High: specifies a high level of code access security which limits the application from doing the following:
o Call unmanaged code
o Call serviced components
o Write to the event log
o Access Microsoft Windows Message Queuing queues
o Access ODBC, OLD DB, or Oracle data sources
* Medium: specifies a medium level of code access security, which means that in addition to the restrictions for High, the ASP.NET application cannot do any of the following things:
o Access files outside the application directory
o Access the registry
* Low: specifies a low level of code access security, which means that in addition to the restrictions for Medium, the application is prevented from performing any of the following actions:
o Write to the file system
o Call the System.Security.CodeAccessPermission.Assert method to expand permissions to resources
o Minimal: specifies a minimal level of code access security, which means that the application has only execute permission
It is recommended that the global .NET Trust Level be set to Medium or lower.
Rationale:
The CAS determines the permissions that are granted to the application on the server. Setting a minimal level of trust that is compatible with the applications will limit the potential harm that a compromised application could cause to a system."
              reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also    : "https://workbench.cisecurity.org/files/2297"
            </report>
          </else>
        </if>
      </then>

      <else>
        <report type:"PASSED">
          description : "3.1 Ensure 'deployment method retail' is set"
          info        : "The <deployment retail> switch is intended for use by production IIS servers. This switch is used to help applications run with the best possible performance and least possible security information leakages by disabling the application's ability to generate trace output on a page, disabling the ability to display detailed error messages to end users, and disabling the debug switch. Often times, switches and options that are developer-focused, such as failed request tracing and debugging, are enabled during active development. It is recommended that the deployment method on any production server be set to retail.
Rationale:
Utilizing the switch specifically intended for production IIS servers will eliminate the risk of vital application and system information leakages that would otherwise occur if tracing or debug were to be left enabled, or customErrors were to be left off.

NOTE: This section requires ASP.NET, but ASPNET45 and .Net Extensibility have not been found."
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "3.4 Ensure IIS HTTP detailed errors are hidden from displaying remotely - Default"
          info        : "A Web site's error pages are often set to show detailed error information for troubleshooting purposes during testing or initial deployment. To prevent unauthorized users from viewing this privileged information, detailed error pages must not be seen by remote users. This setting can be modified in the errorMode attribute setting for a Web site's error pages. By default, the errorMode attribute is set in the Web.config file for the Web site or application and is located in the <httpErrors> element of the <system.webServer> section. It is recommended that custom errors be prevented from displaying remotely.
Rationale:
The information contained in custom error messages can provide clues as to how applications function, opening up unnecessary attack vectors. Ensuring custom errors are never displayed remotely can help mitigate the risk of malicious persons obtaining information as to how the application works.

NOTE: This section requires ASP.NET, but ASPNET45 and .Net Extensibility have not been found."
          reference   : "800-53|SI-11,CSCv7|18,ITSG-33|SI-11,LEVEL|1S"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "3.4 Ensure IIS HTTP detailed errors are hidden from displaying remotely - Applications"
          info        : "A Web site's error pages are often set to show detailed error information for troubleshooting purposes during testing or initial deployment. To prevent unauthorized users from viewing this privileged information, detailed error pages must not be seen by remote users. This setting can be modified in the errorMode attribute setting for a Web site's error pages. By default, the errorMode attribute is set in the Web.config file for the Web site or application and is located in the <httpErrors> element of the <system.webServer> section. It is recommended that custom errors be prevented from displaying remotely.
Rationale:
The information contained in custom error messages can provide clues as to how applications function, opening up unnecessary attack vectors. Ensuring custom errors are never displayed remotely can help mitigate the risk of malicious persons obtaining information as to how the application works.

NOTE: This section requires ASP.NET, but ASPNET45 and .Net Extensibility have not been found."
          reference   : "800-53|SI-11,CSCv7|18,ITSG-33|SI-11,LEVEL|1S"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "3.7 Ensure 'cookies' are set with HttpOnly attribute - Default"
          info        : "The httpOnlyCookies attribute of the httpCookies node determines if IIS will set the HttpOnly flag on HTTP cookies it sets. The HttpOnly flag indicates to the user agent that the cookie must not be accessible by client-side script (i.e document.cookie). It is recommended that the httpOnlyCookies attribute be set to true.
Rationale:
When cookies are set with the HttpOnly flag, they cannot be accessed by client side scripting running in the user's browser. Preventing client-side scripting from accessing cookie content may reduce the probability of a cross site scripting attack materializing into a successful session hijack.

NOTE: This section requires ASP.NET, but ASPNET45 and .Net Extensibility have not been found."
          reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|18,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "3.7 Ensure 'cookies' are set with HttpOnly attribute - Applications"
          info        : "The httpOnlyCookies attribute of the httpCookies node determines if IIS will set the HttpOnly flag on HTTP cookies it sets. The HttpOnly flag indicates to the user agent that the cookie must not be accessible by client-side script (i.e document.cookie). It is recommended that the httpOnlyCookies attribute be set to true.
Rationale:
When cookies are set with the HttpOnly flag, they cannot be accessed by client side scripting running in the user's browser. Preventing client-side scripting from accessing cookie content may reduce the probability of a cross site scripting attack materializing into a successful session hijack.

NOTE: This section requires ASP.NET, but ASPNET45 and .Net Extensibility have not been found."
          reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|18,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "3.9 Ensure 'MachineKey validation method - .Net 4.5' is configured - Default"
          info        : "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.
The following validation methods are available:
* Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys
* Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data
* Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest
* Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES
* Secure Hash Algorithm (SHA-2) is a family of two similar hash functions, with different block sizes known as SHA-256 and SHA-512. They differ in the word size; SHAS-256 used 32-bit words and SHA-512 uses 64-bit words.
It is recommended that SHA-2 methods be configured for use at the global level.
Rationale:
SHA-2 is the strongest hashing algorithm supported by the validation property so it should be used as the validation method for the MachineKey in .Net 4.5.

NOTE: This section requires ASP.NET, but ASPNET45 and .Net Extensibility have not been found."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "3.9 Ensure 'MachineKey validation method - .Net 4.5' is configured - Applications"
          info        : "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.
The following validation methods are available:
* Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys
* Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data
* Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest
* Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES
* Secure Hash Algorithm (SHA-2) is a family of two similar hash functions, with different block sizes known as SHA-256 and SHA-512. They differ in the word size; SHAS-256 used 32-bit words and SHA-512 uses 64-bit words.
It is recommended that SHA-2 methods be configured for use at the global level.
Rationale:
SHA-2 is the strongest hashing algorithm supported by the validation property so it should be used as the validation method for the MachineKey in .Net 4.5.

NOTE: This section requires ASP.NET, but ASPNET45 and .Net Extensibility have not been found."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.5 Ensure Double-Encoded requests will be rejected - Default"
      info        : "This Request Filter feature prevents attacks that rely on double-encoded requests and applies if an attacker submits a double-encoded request to IIS. When the double-encoded requests filter is enabled, IIS will go through a two iteration process of normalizing the request. If the first normalization differs from the second, the request is rejected and the error code is logged as a 404.11. The double-encoded requests filter was the VerifyNormalization option in UrlScan. It is recommended that double-encoded requests be rejected.
Rationale:
This feature will help prevent attacks that rely on URLs that have been crafted to contain double-encoded request(s)."
      solution    : "The allowDoubleEscaping Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:
1. Open Internet Information Services (IIS) Manager
2. In the Connections pane, select the site, application, or directory to be configured
3. In the Home pane, double-click Request Filtering
4. Click Edit Feature Settings... in the Actions pane
5. Under the General section, uncheck Allow double escaping
If a file name in a URL includes '+' then allowDoubleEscaping must be set to true to allow functionality.
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /allowDoubleEscaping:false
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering' -name 'allowDoubleEscaping' -value 'True'
Default Value:
When Request Filtering is installed on a system, the default behavior is to not allow double-encoded requests."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config /section:system.webServer/security/requestFiltering /text:allowDoubleEscaping"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.5 Ensure Double-Encoded requests will be rejected - Applications"
      info        : "This Request Filter feature prevents attacks that rely on double-encoded requests and applies if an attacker submits a double-encoded request to IIS. When the double-encoded requests filter is enabled, IIS will go through a two iteration process of normalizing the request. If the first normalization differs from the second, the request is rejected and the error code is logged as a 404.11. The double-encoded requests filter was the VerifyNormalization option in UrlScan. It is recommended that double-encoded requests be rejected.
Rationale:
This feature will help prevent attacks that rely on URLs that have been crafted to contain double-encoded request(s)."
      solution    : "The allowDoubleEscaping Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:
1. Open Internet Information Services (IIS) Manager
2. In the Connections pane, select the site, application, or directory to be configured
3. In the Home pane, double-click Request Filtering
4. Click Edit Feature Settings... in the Actions pane
5. Under the General section, uncheck Allow double escaping
If a file name in a URL includes '+' then allowDoubleEscaping must be set to true to allow functionality.
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /allowDoubleEscaping:false
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering' -name 'allowDoubleEscaping' -value 'True'
Default Value:
When Request Filtering is installed on a system, the default behavior is to not allow double-encoded requests."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config {} /section:system.webServer/security/requestFiltering /text:allowDoubleEscaping"
      appcmd_list : "list apps"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.6 Ensure 'HTTP Trace Method' is disabled - Default"
      info        : "The HTTP TRACE method returns the contents of client HTTP requests in the entity-body of the TRACE response. Attackers could leverage this behavior to access sensitive information, such as authentication data or cookies, contained in the HTTP headers of the request. One such way to mitigate this is by using the <verbs> element of the <requestFiltering> collection. The <verbs> element replaces the [AllowVerbs] and [DenyVerbs] features in UrlScan. It is recommended the HTTP TRACE method be denied.
Rationale:
Attackers may abuse HTTP TRACE functionality to gain access to information in HTTP headers such as cookies and authentication data. This risk can be mitigated by not allowing the TRACE verb."
      solution    : "1. Open Internet Information Services (IIS) Manager
2. In the Connections pane, select the site, application, or directory to be configured
3. In the Home pane, double-click Request Filtering
4. In the Request Filtering pane, click the HTTP verbs tab, and then click Deny Verb... in the Actions pane
5. In the Deny Verb dialog box, enter the TRACE, and then click OK
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /+verbs.[verb='TRACE',allowed='false']
OR
Enter the following command in PowerShell to configure:
Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/verbs' -name '.' -value @{verb='TRACE';allowed='False'}
Default Value:
The TRACE verb is not filtered by default."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "<add verb=.TRACE.[\s]+allowed=.false.[\s]*/>"
      appcmd_args : "list config /section:system.webServer/security/requestFiltering /xml:*"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.6 Ensure 'HTTP Trace Method' is disabled - Applications"
      info        : "The HTTP TRACE method returns the contents of client HTTP requests in the entity-body of the TRACE response. Attackers could leverage this behavior to access sensitive information, such as authentication data or cookies, contained in the HTTP headers of the request. One such way to mitigate this is by using the <verbs> element of the <requestFiltering> collection. The <verbs> element replaces the [AllowVerbs] and [DenyVerbs] features in UrlScan. It is recommended the HTTP TRACE method be denied.
Rationale:
Attackers may abuse HTTP TRACE functionality to gain access to information in HTTP headers such as cookies and authentication data. This risk can be mitigated by not allowing the TRACE verb."
      solution    : "1. Open Internet Information Services (IIS) Manager
2. In the Connections pane, select the site, application, or directory to be configured
3. In the Home pane, double-click Request Filtering
4. In the Request Filtering pane, click the HTTP verbs tab, and then click Deny Verb... in the Actions pane
5. In the Deny Verb dialog box, enter the TRACE, and then click OK
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /+verbs.[verb='TRACE',allowed='false']
OR
Enter the following command in PowerShell to configure:
Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/verbs' -name '.' -value @{verb='TRACE';allowed='False'}
Default Value:
The TRACE verb is not filtered by default."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "<add verb=.TRACE.[\s]+allowed=.false.[\s]*/>"
      appcmd_args : "list config /section:system.webServer/security/requestFiltering /xml:*"
      appcmd_list : "list apps"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.7 Ensure Unlisted File Extensions are not allowed - Default"
      info        : "The FileExtensions Request Filter allows administrators to define specific extensions their web server(s) will allow and disallow. The property allowUnlisted will cover all other file extensions not explicitly allowed or denied. Often times, extensions such as .config, .bat, .exe, to name a few, should never be served. The AllowExtensions and DenyExtensions options are the UrlScan equivalents. It is recommended that all extensions be unallowed at the most global level possible, with only those necessary being allowed.
Rationale:
Disallowing all but the necessary file extensions can greatly reduce the attack surface of applications and servers."
      solution    : "The allowUnlisted Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure at the server level using the IIS Manager GUI:
1. Open Internet Information Services (IIS) Manager
2. In the Connections pane, select the server
3. In the Home pane, double-click Request Filtering
4. Click Edit Feature Settings... in the Actions pane
5. Under the General section, uncheck Allow unlisted file name extensions
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /fileExtensions.allowunlisted:false
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/fileExtensions' -name 'allowUnlisted' -value 'False'
Default Value:
The default Request Filtering configuration allows all unlisted file extensions to be requested."
      reference   : "800-171|3.4.8,800-53|CM-7(4),CSCv7|18,CSF|PR.IP-1,CSF|PR.PT-3,ISO/IEC-27001|A.12.6.2,LEVEL|1S,NIAv2|SS13a,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config /section:system.webServer/security/requestFiltering /text:fileExtensions.allowUnlisted"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.7 Ensure Unlisted File Extensions are not allowed - Applications"
      info        : "The FileExtensions Request Filter allows administrators to define specific extensions their web server(s) will allow and disallow. The property allowUnlisted will cover all other file extensions not explicitly allowed or denied. Often times, extensions such as .config, .bat, .exe, to name a few, should never be served. The AllowExtensions and DenyExtensions options are the UrlScan equivalents. It is recommended that all extensions be unallowed at the most global level possible, with only those necessary being allowed.
Rationale:
Disallowing all but the necessary file extensions can greatly reduce the attack surface of applications and servers."
      solution    : "The allowUnlisted Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure at the server level using the IIS Manager GUI:
1. Open Internet Information Services (IIS) Manager
2. In the Connections pane, select the server
3. In the Home pane, double-click Request Filtering
4. Click Edit Feature Settings... in the Actions pane
5. Under the General section, uncheck Allow unlisted file name extensions
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /fileExtensions.allowunlisted:false
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/fileExtensions' -name 'allowUnlisted' -value 'False'
Default Value:
The default Request Filtering configuration allows all unlisted file extensions to be requested."
      reference   : "800-171|3.4.8,800-53|CM-7(4),CSCv7|18,CSF|PR.IP-1,CSF|PR.PT-3,ISO/IEC-27001|A.12.6.2,LEVEL|1S,NIAv2|SS13a,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config {} /section:system.webServer/security/requestFiltering /text:fileExtensions.allowUnlisted"
      appcmd_list : "list apps"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.8 Ensure Handler is not granted Write and Script/Execute - Default"
      info        : "Handler mappings can be configured to give permissions to Read, Write, Script, or Execute depending on what the use is for - reading static content, uploading files, executing scripts, etc. It is recommended to grant a handler either Execute/Script or Write permissions, but not both.
Rationale:
By allowing both Execute/Script and Write permissions, a handler can run malicious code on the target server. Ensuring these two permissions are never together will help lower the risk of malicious code being executed on the server."
      solution    : "The accessPolicy attribute in the <handlers> section of either the ApplicationHost.config (server-wide) or web.config (site or application) must not have Write present when Script or Execute are present. To resolve this issue for a Web server, the attribute in the <handlers> section of the ApplicationHost.config file for the server must manually be edited. To edit the ApplicationHost.config file by using Notepad, perform the following steps:
1. Open Notepad as Administrator
2. Open the ApplicationHost.config file in %systemroot%\system32\inetsrv\config
3. Edit the <handlers> section accessPolicy attribute so that Write is not present when Script or Execute are present
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:handlers /accessPolicy:Read,Script
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/handlers' -name 'accessPolicy' -value 'Read,Script'
Note: This configuration change cannot be made by using IIS Manager.
Default Value:
The default handlers accessPolicyis Read, Script."
      reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|18,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "Write.*[\s](Execute|Script).*[\s]*$"
      appcmd_args : "list config /section:system.webServer/handlers /text:accessPolicy"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.8 Ensure Handler is not granted Write and Script/Execute - Applications"
      info        : "Handler mappings can be configured to give permissions to Read, Write, Script, or Execute depending on what the use is for - reading static content, uploading files, executing scripts, etc. It is recommended to grant a handler either Execute/Script or Write permissions, but not both.
Rationale:
By allowing both Execute/Script and Write permissions, a handler can run malicious code on the target server. Ensuring these two permissions are never together will help lower the risk of malicious code being executed on the server."
      solution    : "The accessPolicy attribute in the <handlers> section of either the ApplicationHost.config (server-wide) or web.config (site or application) must not have Write present when Script or Execute are present. To resolve this issue for a Web server, the attribute in the <handlers> section of the ApplicationHost.config file for the server must manually be edited. To edit the ApplicationHost.config file by using Notepad, perform the following steps:
1. Open Notepad as Administrator
2. Open the ApplicationHost.config file in %systemroot%\system32\inetsrv\config
3. Edit the <handlers> section accessPolicy attribute so that Write is not present when Script or Execute are present
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config /section:handlers /accessPolicy:Read,Script
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/handlers' -name 'accessPolicy' -value 'Read,Script'
Note: This configuration change cannot be made by using IIS Manager.
Default Value:
The default handlers accessPolicyis Read, Script."
      reference   : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv7|18,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "Write.*[\s](Execute|Script).*[\s]*$"
      appcmd_args : "list config {} /section:system.webServer/handlers /text:accessPolicy"
      appcmd_list : "list apps"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.9 Ensure 'notListedIsapisAllowed' is set to false"
      info        : "The notListedIsapisAllowedattribute is a server-level setting that is located in the ApplicationHost.config file in the <isapiCgiRestriction> element of the <system.webServer> section under <security>. This element ensures that malicious users cannot copy unauthorized ISAPI binaries to the Web server and then run them. It is recommended that notListedIsapisAllowed be set to false.
Rationale:
Restricting this attribute to falsewill help prevent potentially malicious ISAPI extensions from being run."
      solution    : "To use IIS Manager to set the notListedIsapisAllowed attribute to false:
1. Open IIS Manager as Administrator
2. In the Connections pane on the left, select server to be configured
3. In Features View, select ISAPI and CGI Restrictions; in the Actions pane, select Open Feature
4. In the Actions pane, select Edit Feature Settings
5. In the Edit ISAPI and CGI Restrictions Settings dialog, clear the Allow unspecified ISAPI modules check box, if checked
6. Click OK
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.webServer/security/isapiCgiRestriction /notListedIsapisAllowed:false
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/isapiCgiRestriction' -name 'notListedIsapisAllowed' -value 'False'
Default Value:
The default value for notListedIsapisAllowed is false."
      reference   : "800-171|3.13.13,800-53|SC-18,CSCv7|18,CSF|DE.CM-5,ITSG-33|SC-18,LEVEL|1S,NIAv2|NS26a,NIAv2|NS26d,NIAv2|SU3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config /section:system.webServer/security/isapiCgiRestriction /text:notListedIsapisAllowed"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.10 Ensure 'notListedCgisAllowed' is set to false"
      info        : "The notListedCgisAllowed attribute is a server-level setting that is located in the ApplicationHost.config file in the <isapiCgiRestriction> element of the <system.webServer> section under <security>. This element ensures that malicious users cannot copy unauthorized CGI binaries to the Web server and then run them. It is recommended that notListedCgisAllowed be set to false.
Rationale:
Restricting this attribute to false will help prevent unlisted CGI extensions, including potentially malicious CGI scripts from being run."
      solution    : "To set the notListedCgisAllowed attribute to false using IIS Manager:
1. Open IIS Manager as Administrator
2. In the Connections pane on the left, select the server to configure
3. In Features View, select ISAPI and CGI Restrictions; in the Actions pane, select Open Feature
4. In the Actions pane, select Edit Feature Settings
5. In the Edit ISAPI and CGI Restrictions Settings dialog, clear the Allow unspecified CGI modules check box
6. Click OK
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.webServer/security/isapiCgiRestriction /notListedCgisAllowed:false
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/isapiCgiRestriction' -name 'notListedCgisAllowed' -value 'False'
Default Value:
The default value for notListedCgisAllowed is false."
      reference   : "800-171|3.13.13,800-53|SC-18,CSCv7|18,CSF|DE.CM-5,ITSG-33|SC-18,LEVEL|1S,NIAv2|NS26a,NIAv2|NS26d,NIAv2|SU3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config /section:system.webServer/security/isapiCgiRestriction /text:notListedCgisAllowed"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.11 Ensure 'Dynamic IP Address Restrictions' is enabled - maxConcurrentRequests"
      info        : "IIS Dynamic IP Address Restrictions capability can be used to thwart DDos attacks. This is complimentary to the IP Addresses and Domain names Restrictions lists that can be manually maintained within IIS. In contrast, Dynamic IP address filtering allows administrators to configure the server to block access for IPs that exceed the specified request threshold. The default action Deny action for restrictions is to return a Forbidden response to the client.
Rationale:
Dynamic IP address filtering allows administrators to configure the server to block access for IPs that exceed the specified number of requests or requests frequency. Ensure that you receive the Forbidden page once the block has been enforced."
      solution    : "1. Open IIS Manager.
2. Open the IP Address and Domain Restrictions feature.
3. Click Edit Dynamic Restrictions Settings..
4. Check the Deny IP Address based on the number of concurrent requests and the Deny IP Address based on the number of requests over a period of time boxes. The values can be tweaked as needed for your specific environment.
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests' -name 'enabled' -value 'True'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests' -name 'maxConcurrentRequests' -value <number of requests>
Default Value:
By default Dynamic IP Restrictions are not enabled."
      reference   : "800-53|SC-5,CSCv7|9.5,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|1NS,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
# Note: Variable @MAX_CONCURRENT_REQUESTS@ replaced with "5" in field "value_data".
      value_data  : "5"
      appcmd_args : "list config /section:system.webServer/security/dynamicIpSecurity /text:denyByConcurrentRequests.maxConcurrentRequests"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.11 Ensure 'Dynamic IP Address Restrictions' is enabled  - Deny By Concurrent Requests"
      info        : "IIS Dynamic IP Address Restrictions capability can be used to thwart DDos attacks. This is complimentary to the IP Addresses and Domain names Restrictions lists that can be manually maintained within IIS. In contrast, Dynamic IP address filtering allows administrators to configure the server to block access for IPs that exceed the specified request threshold. The default action Deny action for restrictions is to return a Forbidden response to the client.
Rationale:
Dynamic IP address filtering allows administrators to configure the server to block access for IPs that exceed the specified number of requests or requests frequency. Ensure that you receive the Forbidden page once the block has been enforced."
      solution    : "1. Open IIS Manager.
2. Open the IP Address and Domain Restrictions feature.
3. Click Edit Dynamic Restrictions Settings..
4. Check the Deny IP Address based on the number of concurrent requests and the Deny IP Address based on the number of requests over a period of time boxes. The values can be tweaked as needed for your specific environment.
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests' -name 'enabled' -value 'True'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests' -name 'maxConcurrentRequests' -value <number of requests>
Default Value:
By default Dynamic IP Restrictions are not enabled."
      reference   : "800-53|SC-5,CSCv7|9.5,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|1NS,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "true"
      appcmd_args : "list config /section:system.webServer/security/dynamicIpSecurity /text:denyByConcurrentRequests.enabled"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "5.1 Ensure Default IIS web log location is moved"
      info        : "IIS will log relatively detailed information on every request. These logs are usually the first item looked at in a security response, and can be the most valuable. Malicious users are aware of this, and will often try to remove evidence of their activities. It is therefore recommended that the default location for IIS log files be changed to a restricted, non-system drive.
Rationale:
Moving IIS logging to a restricted, non-system drive will help mitigate the risk of logs being maliciously altered, removed, or lost in the event of system drive failure(s)."
      solution    : "Moving the default log location can be easily accomplished using the Logging feature in the IIS Management UI, AppCmd.exe, or PowerShell.
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd set config -section:sites -siteDefaults.logfile.directory:<new log location>
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/logFile' -name 'directory' -value <new log location>
Moving log file stores to a non-system drive or partition separate from where web applications run and/or content is served is preferred. Additionally, folder-level NTFS permissions should be set as restrictive as possible; Administrators and SYSTEM are typically the only principals requiring access.
While standard IIS logs can be moved and edited using IIS Manager, additional management tool add-ons are required in order to manage logs generated by other IIS features, such as Request Filtering and IIS Advanced Logging. These add-ons can be obtained using the Web Platform Installer or from Microsoft's site. The HTTPErr logging location can be changed by adding a registry key.
Default Value:
The default location for web logs in IIS is: %SystemDrive%\inetpub\logs\LogFiles."
      reference   : "800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv7|6.4,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "^(\%SystemDrive\%|C:)"
      appcmd_args : "list config /section:system.applicationHost/sites /text:siteDefaults.logfile.directory"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <report type:"WARNING">
      description : "5.2 Ensure Advanced IIS logging is enabled"
      info        : "IIS Advanced Logging is a module which provides flexibility in logging requests and client data. It provides controls that allow businesses to specify what fields are important, easily add additional fields, and provide policies pertaining to log file rollover and Request Filtering. HTTP request/response headers, server variables, and client-side fields can be easily logged with minor configuration in the IIS management console.
Rationale:
Many of the fields available in Advanced Logging many can provide extensive, real-time data and details not otherwise obtainable. Developers and security professionals can use this information to identify and remediate application vulnerabilities/attack patterns.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "IIS Advanced Logging can be configured for servers, Web sites, and directories in IIS Manager. To enable Advanced Logging using the UI:
1. Open Internet Information Services (IIS) Manager
2. Click the server in the Connections pane
3. Double-click the Logging icon on the Home page
4. Click Select Fields
The fields that will be logged need to be configured using the Add or Edit Fields button.
Note: There may be performance considerations depending on the extent of the configuration.
Default Value:
IIS Advanced Logging is enabled by default."
      reference   : "CSCv7|6.2,CSCv7|6.3,LEVEL|1S"
      see_also    : "https://workbench.cisecurity.org/files/2297"
    </report>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "Verify log format is W3c"
          value_type  : POLICY_TEXT
          value_data  : "W3C"
          appcmd_args : "list config /section:system.applicationHost/sites /text:siteDefaults.logfile.logFormat"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "5.3 Ensure 'ETW Logging' is enabled"
          info        : "IIS introduces a new logging method. Administrators can now send logging information to Event Tracing for Windows (ETW)
Rationale:
IIS flushes log information to disk, therefore prior to IIS, administrators do not have access to real-time logging information. Text-based log files can also be difficult and time consuming to process. By enabling ETW, administrators have access to use standard query tools for viewing real-time logging information."
          solution    : "To configure ETW logging:
1. Open IIS Manager
2. Select the server or site to enable ETW
3. Select Logging.
4. Ensure Log file format is W3C.
5. Select Both log file and ETW event
6. Save your settings."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.6,CSCv7|6.8,CSF|PR.PT-1,ITSG-33|AU-3,LEVEL|1NS,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.1|10.3,PCI-DSSv3.2|10.3,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "^.*ETW.*[\s]*$"
          appcmd_args : "list config /section:system.applicationHost/sites /text:siteDefaults.logfile.logTargetW3C"
          check_type  : CHECK_REGEX
        </custom_item>
      </then>

      <else>
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "5.3 Ensure 'ETW Logging' is enabled"
          info        : "IIS introduces a new logging method. Administrators can now send logging information to Event Tracing for Windows (ETW)
Rationale:
IIS flushes log information to disk, therefore prior to IIS, administrators do not have access to real-time logging information. Text-based log files can also be difficult and time consuming to process. By enabling ETW, administrators have access to use standard query tools for viewing real-time logging information."
          solution    : "To configure ETW logging:
1. Open IIS Manager
2. Select the server or site to enable ETW
3. Select Logging.
4. Ensure Log file format is W3C.
5. Select Both log file and ETW event
6. Save your settings."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.6,CSCv7|6.8,CSF|PR.PT-1,ITSG-33|AU-3,LEVEL|1NS,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.1|10.3,PCI-DSSv3.2|10.3,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "W3C"
          appcmd_args : "list config /section:system.applicationHost/sites /text:siteDefaults.logfile.logFormat"
        </custom_item>
      </else>
    </if>

    <custom_item>
      type                : AUDIT_IIS_APPCMD
      description         : "5.3 Ensure 'ETW Logging' is enabled - Sites logFormat W3C with ETW target"
      info                : "IIS introduces a new logging method. Administrators can now send logging information to Event Tracing for Windows (ETW)
Rationale:
IIS flushes log information to disk, therefore prior to IIS, administrators do not have access to real-time logging information. Text-based log files can also be difficult and time consuming to process. By enabling ETW, administrators have access to use standard query tools for viewing real-time logging information."
      solution            : "To configure ETW logging:
1. Open IIS Manager
2. Select the server or site to enable ETW
3. Select Logging.
4. Ensure Log file format is W3C.
5. Select Both log file and ETW event
6. Save your settings."
      reference           : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.6,CSCv7|6.8,CSF|PR.PT-1,ITSG-33|AU-3,LEVEL|1NS,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.1|10.3,PCI-DSSv3.2|10.3,SWIFT-CSCv1|6.4"
      see_also            : "https://workbench.cisecurity.org/files/2297"
      value_type          : POLICY_TEXT
      value_data          : "^.*ETW.*[\s]*$"
      appcmd_args         : "list config /section:system.applicationHost/sites /text:[name='{}'].logfile.logTargetW3C"
      appcmd_filter       : "list config /section:system.applicationHost/sites /text:[name='{}'].logfile.logFormat"
      appcmd_filter_value : "W3C"
      appcmd_list         : "list sites"
      check_type          : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "5.3 Ensure 'ETW Logging' is enabled - Sites logFormat W3C"
      info        : "IIS introduces a new logging method. Administrators can now send logging information to Event Tracing for Windows (ETW)
Rationale:
IIS flushes log information to disk, therefore prior to IIS, administrators do not have access to real-time logging information. Text-based log files can also be difficult and time consuming to process. By enabling ETW, administrators have access to use standard query tools for viewing real-time logging information."
      solution    : "To configure ETW logging:
1. Open IIS Manager
2. Select the server or site to enable ETW
3. Select Logging.
4. Ensure Log file format is W3C.
5. Select Both log file and ETW event
6. Save your settings."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.6,CSCv7|6.8,CSF|PR.PT-1,ITSG-33|AU-3,LEVEL|1NS,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.1|10.3,PCI-DSSv3.2|10.3,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_TEXT
      value_data  : "W3C"
      appcmd_args : "list config /section:system.applicationHost/sites /text:[name='{}'].logfile.logFormat"
      appcmd_list : "list sites"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify FTP service is installed"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "FTPSvc"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "6.1 Ensure FTP requests are encrypted - Control Channel Default"
          info        : "The new FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
Rationale:
By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception."
          solution    : "To configure FTP over SSL at the server level using AppCmd.exe or PowerShell:
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.applicationHost/sites /siteDefaults.ftpServer.security.ssl.controlChannelPolicy:'SslRequire' /siteDefaults.ftpServer.security.ssl.dataChannelPolicy:'SslRequire'  /commit:apphost
OR
Enter the following commands in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/ftpServer/security/ssl' -name 'controlChannelPolicy' -value 'SslRequire'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/ftpServer/security/ssl' -name 'dataChannelPolicy' -value 'SslRequire'
Default Value:
By default, FTP sites are not SSL enabled."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "SslRequire"
          appcmd_args : "list config /section:system.applicationHost/sites /text:siteDefaults.ftpServer.security.ssl.controlChannelPolicy"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "6.1 Ensure FTP requests are encrypted - Data Channel Default"
          info        : "The new FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
Rationale:
By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception."
          solution    : "To configure FTP over SSL at the server level using AppCmd.exe or PowerShell:
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.applicationHost/sites /siteDefaults.ftpServer.security.ssl.controlChannelPolicy:'SslRequire' /siteDefaults.ftpServer.security.ssl.dataChannelPolicy:'SslRequire'  /commit:apphost
OR
Enter the following commands in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/ftpServer/security/ssl' -name 'controlChannelPolicy' -value 'SslRequire'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/ftpServer/security/ssl' -name 'dataChannelPolicy' -value 'SslRequire'
Default Value:
By default, FTP sites are not SSL enabled."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "SslRequire"
          appcmd_args : "list config /section:system.applicationHost/sites /text:siteDefaults.ftpServer.security.ssl.dataChannelPolicy"
          appcmd_list : "list sites"
        </custom_item>

        <custom_item>
          type                : AUDIT_IIS_APPCMD
          description         : "6.1 Ensure FTP requests are encrypted - Control Channel Sites"
          info                : "The new FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
Rationale:
By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception."
          solution            : "To configure FTP over SSL at the server level using AppCmd.exe or PowerShell:
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.applicationHost/sites /siteDefaults.ftpServer.security.ssl.controlChannelPolicy:'SslRequire' /siteDefaults.ftpServer.security.ssl.dataChannelPolicy:'SslRequire'  /commit:apphost
OR
Enter the following commands in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/ftpServer/security/ssl' -name 'controlChannelPolicy' -value 'SslRequire'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/ftpServer/security/ssl' -name 'dataChannelPolicy' -value 'SslRequire'
Default Value:
By default, FTP sites are not SSL enabled."
          reference           : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also            : "https://workbench.cisecurity.org/files/2297"
          value_type          : POLICY_TEXT
          value_data          : "SslRequire"
          appcmd_args         : "list config /section:system.applicationHost/sites /text:[name='{}'].ftpServer.security.ssl.controlChannelPolicy"
          appcmd_filter       : "list config /section:system.applicationHost/sites /text:[name='{}'].bindings.[protocol='ftp'].protocol"
          appcmd_filter_value : "ftp"
          appcmd_list         : "list sites"
        </custom_item>

        <custom_item>
          type                : AUDIT_IIS_APPCMD
          description         : "6.1 Ensure FTP requests are encrypted - Data Channel Sites"
          info                : "The new FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
Rationale:
By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception."
          solution            : "To configure FTP over SSL at the server level using AppCmd.exe or PowerShell:
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.applicationHost/sites /siteDefaults.ftpServer.security.ssl.controlChannelPolicy:'SslRequire' /siteDefaults.ftpServer.security.ssl.dataChannelPolicy:'SslRequire'  /commit:apphost
OR
Enter the following commands in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/ftpServer/security/ssl' -name 'controlChannelPolicy' -value 'SslRequire'
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.applicationHost/sites/siteDefaults/ftpServer/security/ssl' -name 'dataChannelPolicy' -value 'SslRequire'
Default Value:
By default, FTP sites are not SSL enabled."
          reference           : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also            : "https://workbench.cisecurity.org/files/2297"
          value_type          : POLICY_TEXT
          value_data          : "SslRequire"
          appcmd_args         : "list config /section:system.applicationHost/sites /text:[name='{}'].ftpServer.security.ssl.dataChannelPolicy"
          appcmd_filter       : "list config /section:system.applicationHost/sites /text:[name='{}'].bindings.[protocol='ftp'].protocol"
          appcmd_filter_value : "ftp"
          appcmd_list         : "list sites"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "6.1 Ensure FTP requests are encrypted - Control Channel Default"
          info        : "The new FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
Rationale:
By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception.

NOTE: This check requires FTP services insalled, and FTP services have not been found as being installed on the target."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "6.1 Ensure FTP requests are encrypted - Data Channel Default"
          info        : "The new FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
Rationale:
By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception.

NOTE: This check requires FTP services insalled, and FTP services have not been found as being installed on the target."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "6.1 Ensure FTP requests are encrypted - Data Channel Sites"
          info        : "The new FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
Rationale:
By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception.

NOTE: This check requires FTP services insalled, and FTP services have not been found as being installed on the target."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>

        <report type:"PASSED">
          description : "6.1 Ensure FTP requests are encrypted - Control Channel Sites"
          info        : "The new FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.
Rationale:
By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception.

NOTE: This check requires FTP services insalled, and FTP services have not been found as being installed on the target."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify FTP service is installed"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "FTPSvc"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "6.2 Ensure FTP Logon attempt restrictions is enabled"
          info        : "IIS introduced a built-in network security feature to automatically block brute force FTP attacks. This can be used to mitigate a malicious client from attempting a brute-force attack on a discovered account, such as the local administrator account.
Rationale:
Successful brute force FTP attacks can allow an otherwise unauthorized user to make changes to data that should not be made. This could allow the unauthorized user to modify website code by uploading malicious software or even changing functionality for items such as online payments."
          solution    : "To configure FTP Logon Attempt Restrictions at the server level using AppCmd.exe or PowerShell:
Enter the following command in AppCmd.exe to configure:
%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.ftpServer/security/authentication /denyByFailure.enabled:'True'  /commit:apphost
OR
Enter the following command in PowerShell to configure:
Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.ftpServer/security/authentication/denyByFailure' -name 'enabled' -value 'True'
Default Value:
By default, this feature is not enabled when FTP is installed."
          reference   : "800-171|3.13.1,800-53|SC-7(12),CSCv7|9.1,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_TEXT
          value_data  : "true"
          appcmd_args : "list config /section:system.ftpServer/security/authentication /text:denyByFailure.enabled"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "6.2 Ensure FTP Logon attempt restrictions is enabled"
          info        : "IIS introduced a built-in network security feature to automatically block brute force FTP attacks. This can be used to mitigate a malicious client from attempting a brute-force attack on a discovered account, such as the local administrator account.
Rationale:
Successful brute force FTP attacks can allow an otherwise unauthorized user to make changes to data that should not be made. This could allow the unauthorized user to modify website code by uploading malicious software or even changing functionality for items such as online payments.

NOTE: This check requires FTP services insalled, and FTP services have not been found as being installed on the target."
          reference   : "800-171|3.13.1,800-53|SC-7(12),CSCv7|9.1,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REG_CHECK
          description : "SSL 2.0 key exists"
          value_type  : POLICY_TEXT
          value_data  : "HKLM\System\Currentcontrolset\Control\Securityproviders\Schannel\Protocols\Ssl 2.0"
          reg_option  : MUST_EXIST
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : REGISTRY_SETTING
          description : "7.2 Ensure SSLv2 is Disabled"
          info        : "This protocol is not considered cryptographically secure.
Rationale:
Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data."
          solution    : "Perform the following to disable SSL 2.0:
Set the following key is set to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client:Enabled

Set the following key is set to 1.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server:DisabledByDefault
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client:DisabledByDefault

To disable using PowerShell enter the following command:
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server' -Force | Out-Null

New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Client' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null
Default Value:
Enabled"
          reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|14.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_DWORD
          value_data  : 0
          reg_key     : "HKLM\System\Currentcontrolset\Control\Securityproviders\Schannel\Protocols\SSL 2.0\Server"
          reg_item    : "Enabled"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "7.2 Ensure SSLv2 is Disabled"
          info        : "This protocol is not considered cryptographically secure.
Rationale:
Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data.

NOTE: SSLv2 key was not found in the registry."
          reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|14.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.3 Ensure SSLv3 is Disabled"
      info        : "This protocol is not considered cryptographically secure. Disabling it is recommended.
Rationale:
Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data."
      solution    : "Perform the following to disable SSL 3.0:
Set the following key to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client:Enabled

Set the following key is set to 1.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server:DisabledByDefault
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client:DisabledByDefault

To disable using PowerShell enter the following command:
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server' -Force | Out-Null

New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null
Default Value:
Enabled"
      reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|14.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\Securityproviders\Schannel\Protocols\SSL 3.0\Server"
      reg_item    : "Enabled"
      reg_option  : CAN_NOT_BE_NULL
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.4 Ensure TLS 1.0 is Disabled"
      info        : "The PCI Data Security Standard 3.1 recommends disabling 'early TLS' along with SSL:
SSL and early TLS are not considered strong cryptography and cannot be used as a security control after June 30, 2016.
Rationale:
Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data."
      solution    : "Perform the following to disable TLS 1.0:
Set the following key to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client:Enabled

Set the following key is set to 1.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server:DisabledByDefault
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client:DisabledByDefault

To disable using PowerShell enter the following command:
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server' -Force | Out-Null

New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1NS,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Protocols\TLS 1.0\Server"
      reg_item    : "Enabled"
      reg_option  : CAN_NOT_BE_NULL
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.5 Ensure TLS 1.1 is Disabled - Enabled"
      info        : "TLS 1.1 is required for backward compatibility. Ensure you fully test your application to ensure that backwards compatibility is not needed. If it is, build in exceptions as necessary for backwards compatibility.
Rationale:
Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data."
      solution    : "Perform the following to disable TLS 1.1:
Set the following key is set to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client:Enabled

Set the following key is set to 1.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server:DisabledByDefault
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client:DisabledByDefault

To disable using PowerShell enter the following command:
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server' -Force | Out-Null

New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1NS,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Protocols\TLS 1.1\Server"
      reg_item    : "Enabled"
      reg_option  : CAN_BE_NULL
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REG_CHECK
          description : "Protocols TLS 1.2 key exists"
          value_type  : POLICY_TEXT
          value_data  : "HKLM\System\Currentcontrolset\Control\Securityproviders\Schannel\Protocols\Tls 1.2"
          reg_option  : MUST_EXIST
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : REGISTRY_SETTING
          description : "7.6 Ensure TLS 1.2 is Enabled"
          info        : "TLS 1.2 is the most recent and mature protocol for protecting the confidentiality and integrity of HTTP traffic.
Rationale:
Enabling this protocol will help ensure the confidentiality and integrity of data in transit."
          solution    : "Perform the following to enable TLS 1.2:
Set the following key to 1.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server:Enabled

Set the following key is set to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server:DisabledByDefault

To enable using PowerShell enter the following command:
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server' -name 'Enabled' -value '1' -PropertyType 'DWord' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server' -name 'DisabledByDefault' -value '0' -PropertyType 'DWord' -Force | Out-Null"
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.2,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Protocols\TLS 1.2\Server"
          reg_item    : "Enabled"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "7.6 Ensure TLS 1.2 is Enabled"
          info        : "TLS 1.2 is the most recent and mature protocol for protecting the confidentiality and integrity of HTTP traffic.
Rationale:
Enabling this protocol will help ensure the confidentiality and integrity of data in transit.

NOTE: TLS 1.1 key was not found in the registry."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.2,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.7 Ensure NULL Cipher Suites is Disabled"
      info        : "The NULL cipher does not provide data confidentiality or integrity. It is recommended that the NULL cipher be disabled.
Rationale:
By disabling the NULL cipher, there is a better chance of maintaining data confidentiality and integrity."
      solution    : "Perform the following to disable NULL cipher:
Set the following key to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\NULL:Enabled

To disable using PowerShell enter the following command:
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\NULL' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\NULL' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Ciphers\NULL"
      reg_item    : "Enabled"
      reg_option  : CAN_BE_NULL
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.8 Ensure DES Cipher Suites is Disabled"
      info        : "DES is a weak symmetric-key cipher. It is recommended that it be disabled.
Rationale:
By disabling DES, there is a better chance of maintaining data confidentiality and integrity."
      solution    : "Perform the following to disable DES 56/56 cipher:
Set the following key to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\DES 56/56:Enabled

To disable using PowerShell enter the following command:
(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('DES 56/56')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\DES 56/56' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Ciphers\DES 56/56"
      reg_item    : "Enabled"
      reg_option  : CAN_BE_NULL
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.9 Ensure RC4 Cipher Suites is Disabled - RC4 40/128"
      info        : "RC4 is a stream cipher that has known practical attacks. It is recommended that RC4 be disabled. The only RC4 cipher enabled by default on Server 2012 and 2012 R2 is RC4 128/128.
Rationale:
The use of RC4 may increase an adversaries ability to read sensitive information sent over SSL/TLS."
      solution    : "Perform the following to disable RC4 40/128, RC4 56/128, RC4 64/128, RC4 128/128 ciphers:
Set the following keys to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128:Enabled

To disable using PowerShell enter the following commands:
(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 40/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 56/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 64/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 128/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Ciphers\Rc4 40/128"
      reg_item    : "Enabled"
      reg_option  : CAN_BE_NULL
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.9 Ensure RC4 Cipher Suites is Disabled - RC4 56/128"
      info        : "RC4 is a stream cipher that has known practical attacks. It is recommended that RC4 be disabled. The only RC4 cipher enabled by default on Server 2012 and 2012 R2 is RC4 128/128.
Rationale:
The use of RC4 may increase an adversaries ability to read sensitive information sent over SSL/TLS."
      solution    : "Perform the following to disable RC4 40/128, RC4 56/128, RC4 64/128, RC4 128/128 ciphers:
Set the following keys to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128:Enabled

To disable using PowerShell enter the following commands:
(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 40/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 56/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 64/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 128/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Ciphers\RC4 56/128"
      reg_item    : "Enabled"
      reg_option  : CAN_BE_NULL
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.9 Ensure RC4 Cipher Suites is Disabled - RC4 64/128"
      info        : "RC4 is a stream cipher that has known practical attacks. It is recommended that RC4 be disabled. The only RC4 cipher enabled by default on Server 2012 and 2012 R2 is RC4 128/128.
Rationale:
The use of RC4 may increase an adversaries ability to read sensitive information sent over SSL/TLS."
      solution    : "Perform the following to disable RC4 40/128, RC4 56/128, RC4 64/128, RC4 128/128 ciphers:
Set the following keys to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128:Enabled

To disable using PowerShell enter the following commands:
(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 40/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 56/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 64/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 128/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Ciphers\RC4 64/128"
      reg_item    : "Enabled"
      reg_option  : CAN_BE_NULL
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.9 Ensure RC4 Cipher Suites is Disabled - RC4 128/128"
      info        : "RC4 is a stream cipher that has known practical attacks. It is recommended that RC4 be disabled. The only RC4 cipher enabled by default on Server 2012 and 2012 R2 is RC4 128/128.
Rationale:
The use of RC4 may increase an adversaries ability to read sensitive information sent over SSL/TLS."
      solution    : "Perform the following to disable RC4 40/128, RC4 56/128, RC4 64/128, RC4 128/128 ciphers:
Set the following keys to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128:Enabled
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128:Enabled

To disable using PowerShell enter the following commands:
(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 40/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 40/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 56/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 56/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 64/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 64/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null

(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('RC4 128/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Ciphers\RC4 128/128"
      reg_item    : "Enabled"
      reg_option  : CAN_BE_NULL
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "7.10 Ensure AES 128/128 Cipher Suite is Disabled"
      info        : "Enabling AES 128/128 may be required for client compatibility. Enable or disable this cipher suite accordingly.
Rationale:
This item is Scored for the following reasons and should be disabled:

Enabling AES 256/256 is recommended.
This cipher does not suffer from known practical attacks."
      solution    : "Perform the following to disable AES 128/128 cipher:
Set the following key to 0.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 128/128:Enabled

To disable using PowerShell enter the following command:
(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('AES 128/128')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 128/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null"
      reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1NS,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/2297"
      value_type  : POLICY_DWORD
      value_data  : 0
      reg_key     : "HKLM\System\Currentcontrolset\Control\SecurityProviders\Schannel\Ciphers\AES 128/128"
      reg_item    : "Enabled"
      reg_option  : CAN_NOT_BE_NULL
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : REG_CHECK
          description : "AES 256/256 key exists"
          value_type  : POLICY_TEXT
          value_data  : "HKLM\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 256/256"
          reg_option  : MUST_EXIST
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : REGISTRY_SETTING
          description : "7.11 Ensure AES 256/256 Cipher Suite is Enabled"
          info        : "AES 256/256 is the most recent and mature cipher suite for protecting the confidentiality and integrity of HTTP traffic. Enabling AES 256/256 is recommended. This is enabled by default on Server 2012 and 2012 R2.
Rationale:
Enabling this cipher will help ensure the confidentiality and integrity of data in transit."
          solution    : "Perform the following to enable AES 256/256 cipher:
Set the following key to 1.
HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 256/256:Enabled

To disable using PowerShell enter the following command:
(Get-Item 'HKLM:\').OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey('AES 256/256')

New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 256/256' -name 'Enabled' -value '1' -PropertyType 'DWord' -Force | Out-Null"
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
          value_type  : POLICY_DWORD
          value_data  : 4294967295
          reg_key     : "HKLM\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\AES 256/256"
          reg_item    : "Enabled"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "7.11 Ensure AES 256/256 Cipher Suite is Enabled"
          info        : "AES 256/256 is the most recent and mature cipher suite for protecting the confidentiality and integrity of HTTP traffic. Enabling AES 256/256 is recommended. This is enabled by default on Server 2012 and 2012 R2.
Rationale:
Enabling this cipher will help ensure the confidentiality and integrity of data in transit.

NOTE: The AES 256/256 key was not found in the registry."
          reference   : "800-171|3.13.8,800-53|SC-8(1),CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/files/2297"
        </report>
      </else>
    </if>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS Microsoft IIS 10 Benchmark v1.1.1 Level 1"
      info        : "This audit checks the testable Level 1 guidance in the CIS Microsoft IIS 10 Benchmark against Microsoft IIS 10 running on Microsoft Windows Server 2016.

Microsoft IIS 10 or Windows Server 2016 is not found as installed on the target.

NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/files/2297"
    </report>
  </else>
</if>

</group_policy>
</check_type>
