#
# (C) 2008-2015 Tenable Network Security, Inc.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable Network Security Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
#
# $Revision: 1.7 $
# $Date: 2016/01/18 $
#
# This .audit file looks for source code.
#
# The first rule parses .NET config files looking for database
# credentials stored in plain text
#
# The second rule is a stub rule that could be extended to include
# more banned functions from the list at
# http://msdn2.microsoft.com/en-us/library/bb288454.aspx
#
# This file should be customized for your local environment
# with keywords that identify your source code.
#
#<ui_metadata>
#<display_name>TNS File Analysis - Source Code Errors</display_name>
#<spec>
#  <type>TNS</type>
#  <name>File Analysis - Source Code Errors</name>
#  <version>1.0.0</version>
#</spec>
#<labels>filecontent,content,source,code,errors</labels>
#</ui_metadata>


<check_type : "FileContent">

#
# C and .NET checks
#
<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a .NET config file is storing database account information in plaintext."
        file_extension: "config"
	regex: "(([iI][dD]=.*;[pP][aA][sS]{2}[wW][oO][rR][dD]=.*))"
	expect: "Data Source="
	max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a .NET config file has set the Trust level to Full."
        file_extension: "config"
	# # <trust level="Full"/>
        regex: '((<[tT]rust [lL]evel=\"Full\".*/>))'
	expect: "Full"
        max_size : "1M"
</item>


<item>
	type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - cpy"
	file_extension: "c" | "cpp" | "cs"
        regex: "((strcpy|wcscpy|_tcscpy|_mbscpy|StrCpy|StrCpyA|StrCpyW))"
	expect: "strcpy" | "wcscpy" | "_tcscpy" | "_mbscpy" | "StrCpy" | "StrCpyA" | "StrCpyW"
	max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - cpy and cat"
        file_extension: "c" | "cpp" | "cs"
        regex: "((_tccpy|_mbccpy|strcat|wcscat|_tcscat|_mbscat|StrCat|StrCatA|StrCatW))"
        expect: "_tccpy" | "_mbccpy" | "strcat" | "wcscat" | "_tcscat" | "_mbscat" | "StrCat"
        max_size : "1M"
</item>


<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - cat"
        file_extension: "c" | "cpp" | "cs"
        regex: "((lstrcat|lstrcatA|lstrcatW|StrCatBuffW|StrCatBuff|StrCatBuffA|StrCatChainW|strcatA|strcatW|_tccat|_mbccat))"
        expect: "strcat" | "StrCat" | "_tccat" | "_mbccat"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - printf"
        file_extension: "c" | "cpp" | "cs"
        regex: "((wnsprintf|wnsprintfA|wnsprintfW|sprintfW|sprintfA|wsprintf|wsprintfW|wsprintfA|sprintf|swprintf|_stprintf|_snwprintf|_snprintf|_sntprintf|nsprintf))"
        expect: "sprintf" | "_stprintf" | "_snwprintf" | "_snprintf" | "_sntprintf"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - sprintf"
        file_extension: "c" | "cpp" | "cs"
        regex: "((wvsprintf|wvsprintfA|wvsprintfW|vsprintf|_vstprintf|vswprintf|_vsnprintf|_vsnwprintf|_vsntprintf|wvnsprintf|wvnsprintfA|wvnsprintfW))"
        expect: "sprintf"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - vnsprintf"
        file_extension: "c" | "cpp" | "cs"
        regex: "((_vsnprintf|_vsnwprintf|_vsntprintf|wvnsprintf|wvnsprintfA|wvnsprintfW))"
        expect: "sprintf"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - ncpy"
        file_extension: "c" | "cpp" | "cs"
        regex: "((strncpy|wcsncpy|_tcsncpy|_mbsncpy|_mbsnbcpy|StrCpyN|StrNCpy|strcpynA|StrNCpyA|StrNCpyW|lstrcpyn|lstrcpynA|lstrcpynW|_fstrncpy))"
        expect: "strncpy" | "wcsncpy" | "sncpy" | "StrCpy" | "lstrcpyn" | "StrNCpy"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - ncat"
        file_extension: "c" | "cpp" | "cs"
        regex: "((strncat|wcsncat|_tcsncat|_mbsncat|_mbsnbcat|StrCatN|StrNCat|StrNCatA|StrNCatW|lstrncat|lstrcatnA|lstrcatnW|lstrcatn|_fstrncat))"
        expect: "strncat" | "sncat" | "snbcat" | "StrCatN" | "StrNCat" | "strcat"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - tok and makepath"
        file_extension: "c" | "cpp" | "cs"
        regex: "((strtok|_tcstok|wcstok|_mbstok|Makepath|_tmakepath|_makepath|_wmakepath|_splitpath|_tsplitpath|_wsplitpath|scanf|wscanf|_tscanf|sscanf|swscanf|_stscanf))"
        expect: "strto" | "cstok" | "bstok" | "Makepath" | "makepath" | "splitpath" | "scanf"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - ito"
        file_extension: "c" | "cpp" | "cs"
        regex: "((snscanf|snwscanf|_sntscanf|_itoa|_itow|_i64toa|_i64tow|_ui64toa|_ui64tot|_ui64tow|_ultoa|_ultot|_ultow))"
        expect: "scanf" | "_ito" | "_i64to" | "_ui64to" | "_ulto"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function gets"
        file_extension: "c" | "cpp" | "cs"
        regex: "((gets|_getts|_gettws|IsBadWritePtr|IsBadHugeWritePtr|IsBadReadPtr|IsBadHugeReadPtr|IsBadCodePtr|IsBadStringPtr))"
        expect: "gets" | "_gettws" | "IsBad"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - charto and oemto"
        file_extension: "c" | "cpp" | "cs"
        regex: "((CharToOem|CharToOemA|CharToOemW|OemToChar|OemToCharA|OemToCharW|CharToOemBuffA|CharToOemBuffW|alloca|_alloca))"
        expect: "CharTo" | "OemTo" | "alloca"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Determine if a C/C++ source code file is using a Microsoft SDL banned function - len"
        file_extension: "c" | "cpp" | "cs"
        regex: "((strlen|wcslen|_mbslen|_mbstrlen|StrLen|lstrlen))"
        expect: "len" | "Len"
        max_size : "1M"
</item>


<item>
	type: FILE_CONTENT_CHECK
        description: "Potential strcpy buffer overflow in C/C++ code."
	file_extension: "c" | "cpp"
	regex: "((strcpy\(.*,argv\[.*\]\)))"
        expect: "include"
	max_size : "1M"
</item>

<item>
	type: FILE_CONTENT_CHECK
        description: "Potential strpy buffer overflow in C/C++ code."
	file_extension: "c" | "cpp"
	regex: "((strcpy\((buffer|buf),str\)))"
        expect: "include"
	max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Potential SQL injection in Microsoft C* code."
        file_extension: "c" | "cpp" | "cs" | "asp" | "aspx"
        regex: "(([sS][eE][lL][eE][cC][tT].*[fF][rR][oO][mM].*Request\.([fF]orm|[cC]ookies)[ ]+\[))"
        expect: "Request"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Potential injection vulnerability via unsanitized user supplied data - direct write of request"
        file_extension: "cs" | "asp" | "aspx"
        regex: "((Response.Write[ ]*\(Request\.))"
        expect: "Response.Write"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Potential injection vulnerability via unsanitized user supplied data - direct link of request"
        file_extension: "asp" | "aspx"
	# <a href=<%=request.servervariables("http_referer")%>
        regex: "(([aA] [hH][rR][eE][fF][ ]*=[ ]*<%=[ ]*[rR]equest\.[^%]*%>))"
        expect: "equest."
        max_size : "1M"
</item>


#
# PHP Coding Errors
#

<item>
	type: FILE_CONTENT_CHECK
        description: "Potential command injection via user request in PHP code."
	file_extension: "php"
	regex: "(((system|popen|shell_exec|exec|eval)[ ]*\(\$_(GET|POST|COOKIE|REQUEST|SESSION).*\)))"
        expect: "<?php"
	max_size : "1M"
</item>

<item>
	type: FILE_CONTENT_CHECK
        description: "Potential SQL Injection via mySQL user request in PHP code."
	file_extension: "php"
        regex: "((mysql_query\(.*\$_(GET|POST|COOKIE|SESSION|REQUEST)))"
        expect: "<?php"
	max_size : "1M"
</item>

<item>
	type: FILE_CONTENT_CHECK
        description: "Potential SQL injection via SQL query in PHP code."
	file_extension: "php"
        regex: "((WHERE .=\$_(GET|POST|SESSION|COOKIE|REQUEST)))"
        expect: "<?php"
	max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Potential XSS vulnerability via unsanitized user supplied data in PHP code."
        file_extension: "php"
        regex: "(((echo|print).*\$_(GET|POST|COOKIE|SESSION|REQUEST)))"
        expect: "<?php"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Potential injection via user-supplied HTTP headers in PHP code."
        file_extension: "php"
        # <?php echo $_SERVER["HTTP_USER_AGENT"];?>
        regex: '(((echo|print).*\$_SERVER[ ]*\[\"HTTP_(USER_AGENT|REFERER)))'
        expect: "<?php"
        max_size : "1M"
</item>



#
# Java Coding Errors
#

<item>
        type: FILE_CONTENT_CHECK
        description: "Potential SQL injection via SQL query in Java code - SQL"
        file_extension: "java"
        regex: '(([sS][eE][lL][eE][cC][tT].*[fF][rR][oO][mM].*request\.getParameter[ ]*\(\"))'
        expect: "request.getParameter"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Potential SQL injection via SQL query in Java code - execute"
        file_extension: "java"
        regex: '((executeQuery[ ]*\(.*request\.getParameter[ ]*\(\"))'
        expect: "request.getParameter"
        max_size : "1M"
</item>

<item>
        type: FILE_CONTENT_CHECK
        description: "Potential XSS vulnerability via unsanitized user data in Java code."
        file_extension: "java"
        regex: '((out\.println[ ]*\(.*request\.getParameter[ ]*\(\"))'
        expect: "out.println"
        max_size : "1M"
</item>

</check_type>
