#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2020/04/22 $
#
# Description   : This .audit is designed against the CIS Benchmark for PostgreSQL 9.5
#
#<ui_metadata>
#<display_name>CIS PostgreSQL 9.5 OS v1.1.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS PostgreSQL 9.5 OS v1.1.0</name>
#  <version>1.1.0</version>
#  <link>https://workbench.cisecurity.org/files/2234</link>
#</spec>
#<labels>CIS,postgres</labels>
#<variables>
#  <variable>
#    <name>PG_SUPER_USER</name>
#    <default>postgres</default>
#    <description>PostgreSQL Super User</description>
#    <info>PostgreSQL Super User for psql use</info>
#  </variable>
#  <variable>
#    <name>PG_CONF_FILE</name>
#    <default>/var/lib/pgsql/9.5/data/postgresql.conf</default>
#    <description>postgresql.conf</description>
#    <info>full path of postgresql.conf</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<custom_item>
  type        : CMD_EXEC
  description : "1.1 Ensure packages are obtained from authorized repositories"
  info        : "When obtaining and installing software packages (typically via yum), it's imperative that packages are sourced only from valid and authorized repositories. For PostgreSQL, a short list of valid repositories would include CentOS (www.centos.org) and the official PostgreSQL website (yum.postgresql.org).
Rationale:
Being open source, PostgreSQL packages are widely available across the internet through RPM aggregators and providers. However, using invalid or unauthorized sources for packages can lead to implementing untested, defective or malicious software.
Many organizations choose to implement a local yum repository within their organization. Care must be taken to ensure that only valid and authorized packages are downloaded and installed into such local repositories.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Alter the configured repositories so they only include valid and authorized sources of packages.
Here is an example of adding an authorized repository:
1. Install the PGDG repository RPM from yum.postgresql.org
$ rpm -ivh https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-centos95-9.5-3.noarch.rpm
Retrieving https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-centos95-9.5-3.noarch.rpm
warning: /var/tmp/rpm-tmp.DAPqyf: Header V4 DSA/SHA1 Signature, key ID 442df0f8: NOKEY
Preparing...         ########################################### [100%]
   1:pgdg-centos95   ########################################### [100%]
2. Verify the repository has been added and is enabled.
$ yum repolist all | grep enabled:
base                    CentOS-6 - Base                 enabled: 6,696
extras                  CentOS-6 - Extras               enabled:    62
updates                 CentOS-6 - Updates              enabled:   581
pgdg                    PostgreSQL 9.5 6 - x86_64       enabled:   406"
  reference   : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  cmd         : "yum repolist all | grep enabled"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "1.2 Ensure Installation of Binary Packages"
  info        : "The PostgreSQL package(s) are installed on the Operating System from valid source.
Rationale:
Standard Linux distributions, although possessing the requisite packages, often do not have PostgreSQL pre-installed. The installation process includes installing the binaries and the means to generate a data cluster too. Package installation should include both the server and client packages. Contribution modules are optional depending upon one's architectural requirements (they are recommended though).
From a security perspective, it's imperative to verify the PostgreSQL binary packages are sourced from a valid Linux yum repository. The most common Linux repositories include CentOS base and PGDG base; however, it's up to the organization to validate. For a complete listing of all PostgreSQL binaries available via configured repositories inspect the output from yum provides postgres*.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If the version of PostgreSQL installed is not 9.5.x, the packages may be uninstalled using this command:
$ whoami
root
$ yum remove $(rpm -qa|grep postgres)
The next recommendation \"1.3 Ensure Installation of Community Packages\" describes how to explicitly choose which version of PostgreSQL to install, regardless of Linux distribution association.
Impact:
If the PostgreSQL version shipped as part of the default binary installation associated with your Linux distribution satisfies your requirements, this may be adequate for development and testing purposes. However, for production instances it's generally recommended to install the latest stable release of PostgreSQL."
  reference   : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  cmd         : "rpm -qa|grep postgres"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "1.3 Ensure Installation of Community Packages"
  info        : "Adding, and installing, the PostgreSQL community packages to the host's package repository.
Rationale:
It's an unfortunate reality that Linux distributions do not always have the most up-to-date versions of PostgreSQL. Disadvantages of older releases include: missing bug patches, no access to highly desirable contribution modules, no access to 3rd party projects that are complimentary to PostgreSQL, and no upgrade path migrating from one version of PostgreSQL to the next. The worst set of circumstances is to be limited to a version of the RDBMS that has reached its end-of-life.
From a security perspective, it's imperative that Postgres Community Packages are only obtained from the official website https://yum.postgresql.org/. Being open source, the Postgres packages are widely available over the internet via myriad package aggregators and providers. Obtaining software from these unofficial sites risks installing defective, corrupt, or downright malicious versions of PostgreSQL.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "The following example blocks the outdated distro packages, adds the PGDG repository RPM for PostgreSQL version 9.6, and installs the client-server-contributions rpms to the host where you want to install the RDBMS:
$ whoami
root
$ vi /etc/yum.repos.d/CentOS-Base.repo
[base]
name=CentOS-$releasever - Base
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo
=os&infra=$infra
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
exclude=postgresql*  <-- add this line
[updates]
name=CentOS-$releasever - Updates
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo
=updates&infra=$infra
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
exclude=postgresql*  <-- add this line
Using a web browser, go to http://yum.postgresql.org and navigate to the repo download link for your OS and version:
$ whoami
root
$ yum -y install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-6-x86_64/pgdg-centos96-9.6-3.noarch.rpm
Finally, install the PostgreSQL packages:
$ whoami
root
$ yum -y groupinstall \"PostgreSQL Database Server 9.6 PGDG\"
Loaded plugins: fastestmirror
Setting up Group Process
Loading mirror speeds from cached hostfile
 * base: mirror.us.oneandone.net
 * extras: centos.mirrors.tds.net
 * updates: mirror.cisp.com
base                                                     | 3.7 kB     00:00
extras                                                   | 3.4 kB     00:00
updates                                                  | 3.4 kB     00:00
base/group_gz                                            | 242 kB     00:00
pgdg96/group_gz                                          |  249 B     00:00
Resolving Dependencies
--> Running transaction check
---> Package postgresql96.x86_64 0:9.6.10-1PGDG.rhel6 will be installed
---> Package postgresql96-contrib.x86_64 0:9.6.10-1PGDG.rhel6 will be installed
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.22)(64bit) for package: postgresql96-contrib-9.6.10-1PGDG.rhel6.x86_64
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.18)(64bit) for package: postgresql96-contrib-9.6.10-1PGDG.rhel6.x86_64
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.11)(64bit) for package: postgresql96-contrib-9.6.10-1PGDG.rhel6.x86_64
--> Processing Dependency: libxslt.so.1()(64bit) for package: postgresql96-contrib-9.6.10-1PGDG.rhel6.x86_64
---> Package postgresql96-libs.x86_64 0:9.6.10-1PGDG.rhel6 will be installed
---> Package postgresql96-server.x86_64 0:9.6.10-1PGDG.rhel6 will be installed
--> Running transaction check
---> Package libxslt.x86_64 0:1.1.26-2.el6_3.1 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package                  Arch       Version                   Repository  Size
================================================================================
Installing:
 postgresql96             x86_64     9.6.10-1PGDG.rhel6        pgdg96     1.4 M
 postgresql96-contrib     x86_64     9.6.10-1PGDG.rhel6        pgdg96     492 k
 postgresql96-libs        x86_64     9.6.10-1PGDG.rhel6        pgdg96     289 k
 postgresql96-server      x86_64     9.6.10-1PGDG.rhel6        pgdg96     5.0 M
Installing for dependencies:
 libxslt                  x86_64     1.1.26-2.el6_3.1          base       452 k
Transaction Summary
================================================================================
Install       5 Package(s)
Total download size: 7.7 M
Installed size: 31 M
Downloading Packages:
(1/5): libxslt-1.1.26-2.el6_3.1.x86_64.rpm               | 452 kB     00:00
(2/5): postgresql96-9.6.10-1PGDG.rhel6.x86_64.rpm        | 1.4 MB     00:01
(3/5): postgresql96-contrib-9.6.10-1PGDG.rhel6.x86_64.rp | 492 kB     00:00
(4/5): postgresql96-libs-9.6.10-1PGDG.rhel6.x86_64.rpm   | 289 kB     00:00
(5/5): postgresql96-server-9.6.10-1PGDG.rhel6.x86_64.rpm | 5.0 MB     00:00
--------------------------------------------------------------------------------
Total                                           2.5 MB/s | 7.7 MB     00:03
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : postgresql96-libs-9.6.10-1PGDG.rhel6.x86_64                  1/5
  Installing : postgresql96-9.6.10-1PGDG.rhel6.x86_64                       2/5
  Installing : libxslt-1.1.26-2.el6_3.1.x86_64                              3/5
  Installing : postgresql96-contrib-9.6.10-1PGDG.rhel6.x86_64               4/5
  Installing : postgresql96-server-9.6.10-1PGDG.rhel6.x86_64                5/5
  Verifying  : libxslt-1.1.26-2.el6_3.1.x86_64                              1/5
  Verifying  : postgresql96-9.6.10-1PGDG.rhel6.x86_64                       2/5
  Verifying  : postgresql96-libs-9.6.10-1PGDG.rhel6.x86_64                  3/5
  Verifying  : postgresql96-server-9.6.10-1PGDG.rhel6.x86_64                4/5
  Verifying  : postgresql96-contrib-9.6.10-1PGDG.rhel6.x86_64               5/5
Installed:
  postgresql96.x86_64 0:9.6.10-1PGDG.rhel6
  postgresql96-contrib.x86_64 0:9.6.10-1PGDG.rhel6
  postgresql96-libs.x86_64 0:9.6.10-1PGDG.rhel6
  postgresql96-server.x86_64 0:9.6.10-1PGDG.rhel6
Dependency Installed:
  libxslt.x86_64 0:1.1.26-2.el6_3.1
Complete!
Note: The above-mentioned example is referenced as an illustration only. Package names and versions may differ."
  reference   : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  cmd         : "yum list installed postgres*"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CHKCONFIG
  description : "1.4 Ensure Service Runlevel Is Registered And Set Correctly"
  info        : "Confirm, and set if necessary, the PostgreSQL runlevel on system-V operating systems.
Rationale:
Setting the runlevel on a System V OS ensures the database service is active especially when a change of state occurs as in the case of a system startup, reboot or an explicit change of runlevel by the sys-admin."
  solution    : "Irrespective of package source, PostgreSQL services can be identified because it typically includes the text string \"postgresql\". Correct installs automatically register the service although it may still be off. Multiple instances of PostgreSQL services often distinguish themselves using a version number. Unregistered services must be added before its runlevel can be administrated.
$ whoami
root
$ chkconfig --add postgresql-9.5 <-- registers if not already
$ chkconfig --level 3 postgresql-9.5 on
$ chkconfig --list | grep postgres
postgresql-9.5 	0:off	1:off	2:off	3:on	4:off	5:off	6:off"
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  levels      : "3"
  service     : "postgresql-9.5"
  status      : ON
</custom_item>

<report type:"WARNING">
  description : "1.5 Ensure Data Cluster Initialized Successfully"
  info        : "First time installs of PostgreSQL requires the instantiation of the database cluster. A database cluster is a collection of databases that are managed by a single server instance.
Rationale:
For the purposes of security, PostgreSQL enforces ownership and permissions of the data-cluster such that:
 An initialized data-cluster is owned by the UNIX account that created it.
 The data-cluster cannot be accessed by other UNIX user-accounts.
 The data-cluster cannot be created or owned by root
 The Postgres process cannot be invoked by root nor any UNIX user account other than the owner of the data cluster.
Incorrectly instantiating the data-cluster will result in a failed installation.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Attempting to instantiate a data cluster to an existing non-empty directory will fail:
$ whoami
root
$ service postgresql-9.5 initdb
Data directory is not empty!
[root@pg1_centos ~]#                                       [FAILED]
In the case of a cluster instantiation failure, one must delete/remove the entire data cluster directory and repeat the initdb command:
$ whoami
root
$ rm -rf ~postgres/9.5
$ service postgresql-9.5 initdb
Initializing database:                                     [  OK  ]"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2234"
</report>

<custom_item>
  type        : CMD_EXEC
  description : "2.1 Ensure the file permissions mask is correct"
  info        : "Files are always created using a default set of permissions. File permissions can be restricted by applying a permissions mask called the umask. The postgres user account should use a umask of 077 to deny file access to all user accounts except the owner.
Rationale:
The Linux OS defaults the umask to 002, which means the owner and primary group can read and write the file, and other accounts are permitted to read the file. Not explicitly setting the umask to a value as restrictive as 077 allows other users to read, write, or even execute files and scripts created by the postgres user account. The alternative to using a umask is explicitly updating file permissions after file creation using the command line utility chmod (a manual and error prone process that is not advised)."
  solution    : "Depending upon the postgres user's environment, the umask is typically set in the initialization file .bash_profile, but may also be set in .profile or .bashrc. To set the umask, add the following to the appropriate profile file:
$ whoami
postgres
$ cd ~
$ ls -ld .{bash_profile,profile,bashrc}
ls: cannot access .profile: No such file or directory
ls: cannot access .bashrc: No such file or directory
-rwx------. 1 postgres postgres 267 Aug 14 12:59 .bash_profile
$ echo \"umask 077\" >> .bash_profile
$ source .bash_profile
$ umask
077
Default Value:
002"
  reference   : "800-171|3.1.1,800-53|AC-3(4),CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  cmd         : "grep -i \'umask\' /var/lib/pgsql/.bash_profile /var/lib/pgsql/.profile /var/lib/pgsql/.bashrc"
  expect      : "UMASK [0-7]+77"
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "2.2 Ensure the PostgreSQL pg_wheel group membership is correct - /etc/groups"
  info        : "The group pg_wheel is explicitly created on a host where the PostgreSQL server is installed. Membership in this group enables an ordinary user account to gain 'superuser' access to a database cluster by using the sudo command (See 'Ensure sudo is configured correctly' later in this benchmark). Only user accounts authorized to have superuser access should be members of the pg_wheel group.
Rationale:
Users with unauthorized membership in the pg_wheel group can assume the privileges of the owner of the PostgreSQL RDBMS and administer the database, as well as accessing scripts, files, and other executables they should not be able to access.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If the pg_wheel group does not exist, use the following command to create it:
$ whoami
root
$ groupadd pg_wheel && getent group pg_wheel
pg_wheel:x:502:
Note: that your system's group number may not be 502. That's OK.
Adding the postgres user to the newly created group is done by issuing:
$ whoami
root
$ gpasswd -a postgres pg_wheel
Adding user postgres to group pg_wheel
$ # verify membership
$ awk -F':' '/pg_wheel/{print $4}' /etc/group
postgres
Removing a user account from the 'pg_wheel' group is achieved by executing the following command:
$ whoami
root
$ gpasswd -d pg_wheel postgres
Removing user postgres from group pg_wheel
$ # verify the user was removed
$ awk -F':' '/pg_wheel/{print $4}' /etc/group
$"
  reference   : "800-171|3.1.1,800-53|AC-2,CN-L3|7.1.3.2(d),CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1S,NESA|T5.2.1,NESA|T5.2.2,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  cmd         : "grep -i 'pg_wheel' /etc/group"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "2.2 Ensure the PostgreSQL pg_wheel group membership is correct - /etc/passwd"
  info        : "The group pg_wheel is explicitly created on a host where the PostgreSQL server is installed. Membership in this group enables an ordinary user account to gain 'superuser' access to a database cluster by using the sudo command (See 'Ensure sudo is configured correctly' later in this benchmark). Only user accounts authorized to have superuser access should be members of the pg_wheel group.
Rationale:
Users with unauthorized membership in the pg_wheel group can assume the privileges of the owner of the PostgreSQL RDBMS and administer the database, as well as accessing scripts, files, and other executables they should not be able to access.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If the pg_wheel group does not exist, use the following command to create it:
$ whoami
root
$ groupadd pg_wheel && getent group pg_wheel
pg_wheel:x:502:
Note: that your system's group number may not be 502. That's OK.
Adding the postgres user to the newly created group is done by issuing:
$ whoami
root
$ gpasswd -a postgres pg_wheel
Adding user postgres to group pg_wheel
$ # verify membership
$ awk -F':' '/pg_wheel/{print $4}' /etc/group
postgres
Removing a user account from the 'pg_wheel' group is achieved by executing the following command:
$ whoami
root
$ gpasswd -d pg_wheel postgres
Removing user postgres from group pg_wheel
$ # verify the user was removed
$ awk -F':' '/pg_wheel/{print $4}' /etc/group
$"
  reference   : "800-171|3.1.1,800-53|AC-2,CN-L3|7.1.3.2(d),CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1S,NESA|T5.2.1,NESA|T5.2.2,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  cmd         : "grep -i 'pg_wheel' /etc/passwd"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : FILE_CONTENT_CHECK
  description : "4.1 Ensure sudo is configured correctly"
  info        : "It is common to have more than one authorized individual administrating the PostgreSQL service at the Operating System level. It is also quite common to permit login privileges to individuals on a PostgreSQL host who otherwise are not authorized to access the server's data cluster and files. Administering the PostgreSQL data cluster, as opposed to its data, is to be accomplished via a localhost login of a regular UNIX user account. Access to the postgres superuser account is restricted in such a manner as to interdict unauthorized access. sudo satisfies the requirements by escalating ordinary user account privileges as the PostgreSQL RDBMS superuser.
Rationale:
Without sudo, there would not be capabilities to strictly control access to the superuser account and to securely and authoritatively audit its use."
  solution    : "As superuser root, execute the command visudo to edit the /etc/sudoers file so the following line is present:
%pg_wheel ALL= /bin/su - postgres
This grants any Operating System user that is a member of the pg_wheel group to use sudo to become the postgres user.
Ensure that all Operating System user's that need such access are members of the group as detailed earlier in this benchmark."
  reference   : "800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  file        : "/etc/sudoers"
  regex       : "^pg_wheel"
  expect      : "^pg_wheel[\\s]+ALL=[\\s]+/bin/su[\\s]+-[\\s]+postgres"
</custom_item>

<report type:"WARNING">
  description : "4.2 Ensure valid public keys are installed"
  info        : "Valid SSH public/private key pairs should be installed.
Rationale:
The most secure mechanism for management is to log in locally into the UNIX account that controls and maintains the server's environment with an SSH key and use the Command Line Interface (CLI) psql. SSH keys have other advantages too; it is simple to add and remove user authorization, it eliminates the redundant typing of passwords, and it enables administrating large number of servers from a centralized host using simple CLI scripts.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "For demonstration purposes, the following example highlights the various issues one must consider and is just one of many methods that can be used to install and use a public SSH key. It is recommended that a configuration management tool, such as Puppet, be used as part of a larger, and automated, provisioning process where there are many DBAs authorized to administrate multiple servers.
After creating your SSH public/private key pair, login as root on the PostgreSQL server and assign a temporary password to the postgres user account.
Copy the SSH public key from your key pair to the PostgreSQL server. This step will prompt you for the temporary password you set above:
ssh -copy -id -i $HOME/.ssh/id_rsa.pub postgres@<remote host>
Now that your SSH public key is in place, test that you can SSH to the PostgreSQL server without being prompted for a password:
ssh postgres@<remote host>
Upon successful login without being prompted for a password, one can now lock the postgres account to prevent future logins via password:
passwd -l postgres
New public keys can be added by editing the postgres account's authorization file directly:
ssh postgres@<remote host>
vim $HOME/.ssh/authorized_keys
Alternatively, another implementation would be to add the public key to one's own personal account on the remote host and then sudo into postgres. Added security is implied because you would need to supply your account password:
ssh -copy -id -i $HOME/.ssh/id_rsa.pub <remote host>
ssh <remote host>
sudo su - postgres"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2234"
</report>

<custom_item>
  type        : CMD_EXEC
  description : "4.3 Ensure excessive administrative privileges are revoked"
  info        : "With respect to PostgreSQL administrative SQL commands, only superusers should have elevated privileges. PostgreSQL regular, or application, users should not possess the ability to create roles, create new databases, manage replication, or perform any other action deemed privileged . Typically, regular users should only be granted the minimal set of privileges commensurate with managing the application:
 DDL (create table, create view, create index, etc.)
 DML (select, insert, update, delete)
Further, it has become best practice to create separate roles for DDL and DML. Given an application called 'payroll', one would create the following users:
 payroll_owner
 payroll_user
Any DDL privileges would be granted to the 'payroll_owner' account only, while DML privileges would be given to the 'payroll_user' account only. This prevents accidental creation/altering/dropping of database objects by application code that run as the 'payroll_user' account.
Rationale:
By not restricting global administrative commands to superusers only, regular users granted excessive privileges may execute administrative commands with unintended and undesirable results.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If any regular or application users have been granted excessive administrative rights, those privileges should be removed immediately via the PostgreSQL ALTER ROLE SQL command. Using the same example above, the following SQL statements revoke all unnecessary elevated administrative privileges from the regular user appuser:
$ whoami
postgres
$ psql -c \"ALTER ROLE appuser NOSUPERUSER;\"
ALTER ROLE
$ psql -c \"ALTER ROLE appuser NOCREATEROLE;\"
ALTER ROLE
$ psql -c \"ALTER ROLE appuser NOCREATEDB;\"
ALTER ROLE
$ psql -c \"ALTER ROLE appuser NOREPLICATION;\"
ALTER ROLE
$ psql -c \"ALTER ROLE appuser NOBYPASSRLS;\"
ALTER ROLE
$ psql -c \"ALTER ROLE appuser NOINHERIT;\"
ALTER ROLE
Verify the appuser now passes your check by having no defined Attributes:
$ whoami
postgres
$ psql -c \"\du appuser\"
          List of roles
Role name | Attributes | Member of
----------+------------+-----------
appuser   |            | {}"
  reference   : "800-171|3.1.1,800-53|AC-3,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,TBA-FIISB|31.1"
  see_also    : "https://workbench.cisecurity.org/files/2234"
# Note: Variable @PG_SUPER_USER@ replaced with "postgres" in field "cmd".
  cmd         : "su - postgres -c \"psql -c \'\\du *\'\""
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "5.1 Ensure login via 'local' UNIX Domain Socket is configured correctly"
  info        : "A remote host login, via ssh, is arguably the most secure means of remotely accessing and administering the PostgreSQL server. Connecting with the psql client, via UNIX DOMAIN SOCKETS, using the peer authentication method is the most secure mechanism available for local connections. Provided a database user account of the same name of the UNIX account has already been defined in the database, even ordinary user accounts can access the cluster in a similarly highly secure manner.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Creation of a database account that matches the local account allows PEER authentication:
$ psql -c \"CREATE ROLE user1 WITH LOGIN;\"
CREATE ROLE
Execute the following as the UNIX user account, the default authentication rules should now permit the login:
$ su - user1
$ whoami
user1
$ psql -d postgres
psql (9.5.15)
Type \"help\" for help.
postgres=>
As per the host-based authentication rules in $PGDATA/pg_hba.conf, all login attempts via UNIX DOMAIN SOCKETS are processed on the line beginning with local.
This is the minimal rule that must be in place allowing PEER connections:
local   all             postgres                                peer
More traditionally, a rule like the following would be used to allow any local PEER connection:
local   all             all                                     peer
Once edited, the server process must reload the authentication file before it can take effect. Improperly configured rules cannot update i.e. the old rules remain in place. The PostgreSQL logs will report the outcome of the SIGHUP:
postgres=# select pg_reload_conf();
 pg_reload_conf
----------------
 t
(1 row)
The following examples illustrate other possible configurations. The resultant \"rule\" of success/failure depends upon the first matching line:
local   all             postgres                                peer
local   all             all                                     peer
local   samerole        all                                     peer
local   all             +rw                                     peer"
  reference   : "LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2234"
</report>

<report type:"WARNING">
  description : "5.2 Ensure login via 'host' TCP/IP Socket is configured correctly"
  info        : "A large number of authentication METHODs are available for hosts connecting using TCP/IP sockets, including:
 trust
 reject
 md5
 password
 gss
 sspi
 ident
 pam
 ldap
 radius
 cert
METHODs trust, password, and ident are not to be used for remote logins. METHOD md5 is the most popular and can be used in both encrypted and unencrypted sessions.
Use of the gss, sspi, pam, ldap, radius, and cert METHODs, while more secure than md5, are dependent upon the availability of external authenticating processes/services and thus are not covered in this benchmark.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Confirm a login attempt has been made by looking for a logged error message detailing the nature of the authenticating failure. In the case of failed login attempts, whether encrypted or unencrypted, check the following:
 The server should be sitting on a port exposed to the remote connecting host i.e. NOT ip address 127.0.0.1
listen_addresses = '*'
 An authenticating rule must exist in the file pg_hba.conf
This example permits only encrypted sessions for the postgres role and denies all unencrypted session for the postgres role:
 # TYPE    DATABASE           USER            ADDRESS                 METHOD
 hostssl    all             postgres         0.0.0.0/0                 md5
 hostnossl  all             postgres         0.0.0.0/0                 reject
The following examples illustrate other possible configurations. The resultant \"rule\" of success/failure depends upon the first matching line.
host      all             postgres        127.0.0.1/32            md5

host      samerole        all             0.0.0.0/0               md5

host      samerole        +rw             0.0.0.0/0               md5"
  reference   : "LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2234"
</report>

<report type:"WARNING">
  description : "6.1 Ensure 'Attack Vectors' Runtime Parameters are Configured"
  info        : "Understanding the vulnerability of PostgreSQL runtime parameters by the particular delivery method, or attack vector.
Rationale:
There are as many ways of compromising a server as there are runtime parameters. A combination of any one or more of them executed at the right time under the right conditions has the potential to compromise the RDBMS. Mitigating risk is dependent upon one's understanding of the attack vectors and includes:
1. Via user session: includes those runtime parameters that can be set by a ROLE that persists for the life of a server-client session.
2. Via attribute: includes those runtime parameters that can be set by a ROLE during a server-client session that can be assigned as an attribute for an entity such as a table, index, database, or role.
3. Via server reload: includes those runtime parameters that can be set by the superuser using a SIGHUP or configuration file reload command and affects the entire cluster.
4. Via server restart: includes those runtime parameters that can be set and effected by restarting the server process and affects the entire cluster.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "In the case of a changed parameter, the value is returned back to its default value. In the case of a successful exploit of an already set runtime parameter then an analysis must be carried out determining the best approach mitigating the risk.
Impact:
It can be difficult to totally eliminate risk. Once changed, detecting a miscreant parameter can become problematic."
  reference   : "LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2234"
</report>

<custom_item>
  type        : CMD_EXEC
  description : "6.7 Ensure FIPS 140-2 OpenSSL Cryptography Is Used - fips_enabled"
  info        : "Install, configure, and use OpenSSL on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL. This provides PostgreSQL instances the ability to generate and validate cryptographic hashes to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owner's requirements.
Rationale:
Federal Information Processing Standard (FIPS) Publication 140-2 is a computer security standard developed by a U.S. Government and industry working group for validating the quality of cryptographic modules. Use of weak, or untested, encryption algorithms undermine the purposes of utilizing encryption to protect data. PostgreSQL uses OpenSSL for the underlying encryption layer.
The database and application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated. It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.
For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements for Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant. The security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A. Currently only Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140-2 OpenSSL libraries."
  solution    : "Configure OpenSSL to be FIPS compliant. PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official RHEL Documentation. Below is a general summary of the steps required:
 Install the dracut-fips package
$ yum -y install dracut-fips
Loaded plugins: fastestmirror
Setting up Install Process
Loading mirror speeds from cached hostfile
 * base: mirror.cisp.com
 * extras: mirror.den1.denvercolo.net
 * updates: mirror.math.princeton.edu
Resolving Dependencies
--> Running transaction check
---> Package dracut-fips.noarch 0:004-411.el6 will be installed
--> Processing Dependency: hmaccalc for package: dracut-fips-004-411.el6.noarch
--> Running transaction check
---> Package hmaccalc.x86_64 0:0.9.12-2.el6 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package              Arch            Version               Repository     Size
================================================================================
Installing:
 dracut-fips          noarch          004-411.el6           base           38 k
Installing for dependencies:
 hmaccalc             x86_64          0.9.12-2.el6          base           22 k
Transaction Summary
================================================================================
Install       2 Package(s)
Total download size: 60 k
Installed size: 108 k
Downloading Packages:
(1/2): dracut-fips-004-411.el6.noarch.rpm                |  38 kB     00:00
(2/2): hmaccalc-0.9.12-2.el6.x86_64.rpm                  |  22 kB     00:00
--------------------------------------------------------------------------------
Total                                           334 kB/s |  60 kB     00:00
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : hmaccalc-0.9.12-2.el6.x86_64                                 1/2
  Installing : dracut-fips-004-411.el6.noarch                               2/2
  Verifying  : hmaccalc-0.9.12-2.el6.x86_64                                 1/2
  Verifying  : dracut-fips-004-411.el6.noarch                               2/2
Installed:
  dracut-fips.noarch 0:004-411.el6
Dependency Installed:
  hmaccalc.x86_64 0:0.9.12-2.el6
Complete!
 Recreate the initramfs file
$ dracut -f
 Modify the kernel command line of the current kernel in the /boot/grub/grub.conf file by adding the following option: fips=1
 Reboot the system for changes to take effect.
 Verify fips_enabled according to Audit Procedure above."
  reference   : "800-171|3.13.11,800-53|SC-13,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  cmd         : "cat /proc/sys/crypto/fips_enabled"
  expect      : "1"
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "6.7 Ensure FIPS 140-2 OpenSSL Cryptography Is Used - openssl version"
  info        : "Install, configure, and use OpenSSL on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL. This provides PostgreSQL instances the ability to generate and validate cryptographic hashes to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owner's requirements.
Rationale:
Federal Information Processing Standard (FIPS) Publication 140-2 is a computer security standard developed by a U.S. Government and industry working group for validating the quality of cryptographic modules. Use of weak, or untested, encryption algorithms undermine the purposes of utilizing encryption to protect data. PostgreSQL uses OpenSSL for the underlying encryption layer.
The database and application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated. It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.
For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements for Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant. The security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A. Currently only Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140-2 OpenSSL libraries."
  solution    : "Configure OpenSSL to be FIPS compliant. PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official RHEL Documentation. Below is a general summary of the steps required:
 Install the dracut-fips package
$ yum -y install dracut-fips
Loaded plugins: fastestmirror
Setting up Install Process
Loading mirror speeds from cached hostfile
 * base: mirror.cisp.com
 * extras: mirror.den1.denvercolo.net
 * updates: mirror.math.princeton.edu
Resolving Dependencies
--> Running transaction check
---> Package dracut-fips.noarch 0:004-411.el6 will be installed
--> Processing Dependency: hmaccalc for package: dracut-fips-004-411.el6.noarch
--> Running transaction check
---> Package hmaccalc.x86_64 0:0.9.12-2.el6 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package              Arch            Version               Repository     Size
================================================================================
Installing:
 dracut-fips          noarch          004-411.el6           base           38 k
Installing for dependencies:
 hmaccalc             x86_64          0.9.12-2.el6          base           22 k
Transaction Summary
================================================================================
Install       2 Package(s)
Total download size: 60 k
Installed size: 108 k
Downloading Packages:
(1/2): dracut-fips-004-411.el6.noarch.rpm                |  38 kB     00:00
(2/2): hmaccalc-0.9.12-2.el6.x86_64.rpm                  |  22 kB     00:00
--------------------------------------------------------------------------------
Total                                           334 kB/s |  60 kB     00:00
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : hmaccalc-0.9.12-2.el6.x86_64                                 1/2
  Installing : dracut-fips-004-411.el6.noarch                               2/2
  Verifying  : hmaccalc-0.9.12-2.el6.x86_64                                 1/2
  Verifying  : dracut-fips-004-411.el6.noarch                               2/2
Installed:
  dracut-fips.noarch 0:004-411.el6
Dependency Installed:
  hmaccalc.x86_64 0:0.9.12-2.el6
Complete!
 Recreate the initramfs file
$ dracut -f
 Modify the kernel command line of the current kernel in the /boot/grub/grub.conf file by adding the following option: fips=1
 Reboot the system for changes to take effect.
 Verify fips_enabled according to Audit Procedure above."
  reference   : "800-171|3.13.11,800-53|SC-13,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  cmd         : "openssl version"
  expect      : "fips"
</custom_item>

<custom_item>
  type        : FILE_CONTENT_CHECK
  description : "7.4 Ensure WAL archiving is configured and functional - archive_mode"
  info        : "Write Ahead Log (WAL) Archiving, or Log Shipping, is the process of sending transaction log files from the PRIMARY host either to one or more STANDBY hosts or to be archived on a remote storage device for later use, e.g. PITR. There are several utilities that can copy WALs including, but not limited to, cp, scp, sftp, and rynsc. Basically, the server follows a set of runtime parameters which defines when the WAL should be copied using one of the aforementioned utilities.
Rationale:
Unless the server has been correctly configured, one runs the risk of sending WALs in an unsecured, unencrypted fashion."
  solution    : "Change parameters and restart the server as required.
Note: SSH public keys must be generated and installed as per industry standards."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  required    : YES
# Note: Variable @PG_CONF_FILE@ replaced with "/var/lib/pgsql/9.5/data/postgresql.conf" in field "file".
  file        : "/var/lib/pgsql/9.5/data/postgresql.conf"
  regex       : "^archive_mode"
  expect      : "^archive_mode[\\s]+=[\\s]+on"
</custom_item>

<custom_item>
  type        : FILE_CONTENT_CHECK
  description : "7.4 Ensure WAL archiving is configured and functional- archive_command"
  info        : "Write Ahead Log (WAL) Archiving, or Log Shipping, is the process of sending transaction log files from the PRIMARY host either to one or more STANDBY hosts or to be archived on a remote storage device for later use, e.g. PITR. There are several utilities that can copy WALs including, but not limited to, cp, scp, sftp, and rynsc. Basically, the server follows a set of runtime parameters which defines when the WAL should be copied using one of the aforementioned utilities.
Rationale:
Unless the server has been correctly configured, one runs the risk of sending WALs in an unsecured, unencrypted fashion."
  solution    : "Change parameters and restart the server as required.
Note: SSH public keys must be generated and installed as per industry standards."
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2234"
  required    : YES
# Note: Variable @PG_CONF_FILE@ replaced with "/var/lib/pgsql/9.5/data/postgresql.conf" in field "file".
  file        : "/var/lib/pgsql/9.5/data/postgresql.conf"
  regex       : "^archive_command"
  expect      : "^archive_command = \'.*ssh"
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "8.3 Ensure the backup and restore tool, 'pgBackRest', is installed and configured"
  info        : "pgBackRest aims to be a simple, reliable backup and restore system that can seamlessly scale up to the largest databases and workloads. Instead of relying on traditional backup tools like tar and rsync, pgBackRest implements all backup features internally and uses a custom protocol for communicating with remote systems. Removing reliance on tar and rsync allows for better solutions to database-specific backup challenges. The custom remote protocol allows for more flexibility and limits the types of connections that are required to perform a backup which increases security.
Rationale:
The native PostgreSQL backup facility pg_dump provides adequate logical backup operations but does not provide for Point In Time Recovery (PITR). The PostgreSQL facility pg_basebackup performs physical backup of the database files and does provide for PITR, but it is constrained by single threading. Both of these methodologies are standard in the PostgreSQL ecosystem and appropriate for particular backup/recovery needs. pgBackRest offers another option with much more robust features and flexibility.
pgBackRest is open source software developed to perform efficient backups on PostgreSQL databases that measure in tens of terabytes and greater. It supports per file checksums, compression, partial/failed backup resume, high-performance parallel transfer, asynchronous archiving, tablespaces, expiration, full/differential/incremental, local/remote operation via SSH, hard-linking, restore, backup encryption, and more. pgBackRest is written in C and Perl and does not depend on rsync or tar but instead performs its own deltas which gives it maximum flexibility. Finally, pgBackRest provides an easy to use internal repository listing backup details accessible via the pgbackrest info command, as illustrated below.
$ pgbackrest info
stanza: proddb01
status: ok
db (current)
  wal archive min/max (9.6-1): 000000010000000000000012 / 000000010000000000000017
        full backup: 20181002-153106F
            timestamp start/stop: 2018-10-02 15:31:06 / 2018-10-02 15:31:49
            wal start/stop: 000000010000000000000012 / 000000010000000000000012
            database size: 29.4MB, backup size: 29.4MB
            repository size: 3.4MB, repository backup size: 3.4MB
        diff backup: 20181002-153106F_20181002-173109D
            timestamp start/stop: 2018-10-02 17:31:09 / 2018-10-02 17:31:19
            wal start/stop: 000000010000000000000015 / 000000010000000000000015
            database size: 29.4MB, backup size: 2.6MB
            repository size: 3.4MB, repository backup size: 346.8KB
            backup reference list: 20181002-153106F
        incr backup: 20181002-153106F_20181002-183114I
            timestamp start/stop: 2018-10-02 18:31:14 / 2018-10-02 18:31:22
            wal start/stop: 000000010000000000000017 / 000000010000000000000017
            database size: 29.4MB, backup size: 8.2KB
            repository size: 3.4MB, repository backup size: 519B
            backup reference list: 20181002-153106F, 20181002-153106F_20181002-173109D
            NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "pgBackRest is not installed nor configured for PostgreSQL by default, but instead is maintained as a GitHub project. Fortunately, it is a part of the PGDG repository and can be easily installed:
$ whoami
root
$ yum -y install pgbackrest.x86_64
Loaded plugins: fastestmirror
Setting up Install Process
Loading mirror speeds from cached hostfile
 * base: centos.mirrors.tds.net
 * extras: mirror.cs.vt.edu
 * updates: mirror.cs.pitt.edu
Resolving Dependencies
--> Running transaction check
---> Package pgbackrest.x86_64 0:2.05-1.rhel6 will be installed
--> Processing Dependency: perl-parent for package: pgbackrest-2.05-1.rhel6.x86_64
--> Processing Dependency: perl-XML-LibXML for package: pgbackrest-2.05-1.rhel6.x86_64
--> Processing Dependency: perl-Time-HiRes for package: pgbackrest-2.05-1.rhel6.x86_64
--> Processing Dependency: perl-JSON for package: pgbackrest-2.05-1.rhel6.x86_64
--> Processing Dependency: perl-IO-Socket-SSL for package: pgbackrest-2.05-1.rhel6.x86_64
--> Processing Dependency: perl-Digest-SHA for package: pgbackrest-2.05-1.rhel6.x86_64
--> Processing Dependency: perl-DBD-Pg for package: pgbackrest-2.05-1.rhel6.x86_64
--> Running transaction check
---> Package perl-DBD-Pg.x86_64 0:2.15.1-4.el6_3 will be installed
--> Processing Dependency: perl(DBI) for package: perl-DBD-Pg-2.15.1-4.el6_3.x86_64
---> Package perl-Digest-SHA.x86_64 1:5.47-144.el6 will be installed
---> Package perl-IO-Socket-SSL.noarch 0:1.31-3.el6_8.2 will be installed
--> Processing Dependency: perl-Net-SSLeay >= 1.35-10.el6_8.1 for package: perl-IO-Socket-SSL-1.31-3.el6_8.2.noarch
--> Processing Dependency: perl(Net::LibIDN) for package: perl-IO-Socket-SSL-1.31-3.el6_8.2.noarch
---> Package perl-JSON.noarch 0:2.15-5.el6 will be installed
--> Processing Dependency: perl(LWP::UserAgent) for package: perl-JSON-2.15-5.el6.noarch
--> Processing Dependency: perl(HTTP::Daemon) for package: perl-JSON-2.15-5.el6.noarch
---> Package perl-Time-HiRes.x86_64 4:1.9721-144.el6 will be installed
---> Package perl-XML-LibXML.x86_64 1:1.70-5.el6 will be installed
--> Processing Dependency: perl(XML::SAX::Exception) for package: 1:perl-XML-LibXML-1.70-5.el6.x86_64
--> Processing Dependency: perl(XML::SAX::DocumentLocator) for package: 1:perl-XML-LibXML-1.70-5.el6.x86_64
--> Processing Dependency: perl(XML::SAX::Base) for package: 1:perl-XML-LibXML-1.70-5.el6.x86_64
--> Processing Dependency: perl(XML::NamespaceSupport) for package: 1:perl-XML-LibXML-1.70-5.el6.x86_64
---> Package perl-parent.x86_64 1:0.221-144.el6 will be installed
--> Running transaction check
---> Package perl-DBI.x86_64 0:1.609-4.el6 will be installed
---> Package perl-Net-LibIDN.x86_64 0:0.12-3.el6 will be installed
---> Package perl-Net-SSLeay.x86_64 0:1.35-10.el6_8.1 will be installed
---> Package perl-XML-NamespaceSupport.noarch 0:1.10-3.el6 will be installed
---> Package perl-XML-SAX.noarch 0:0.96-7.el6 will be installed
---> Package perl-libwww-perl.noarch 0:5.833-5.el6 will be installed
--> Processing Dependency: perl-HTML-Parser >= 3.33 for package: perl-libwww-perl-5.833-5.el6.noarch
--> Processing Dependency: perl(URI::URL) for package: perl-libwww-perl-5.833-5.el6.noarch
--> Processing Dependency: perl(URI::Heuristic) for package: perl-libwww-perl-5.833-5.el6.noarch
--> Processing Dependency: perl(URI) for package: perl-libwww-perl-5.833-5.el6.noarch
--> Processing Dependency: perl(HTML::Entities) for package: perl-libwww-perl-5.833-5.el6.noarch
--> Processing Dependency: perl(Compress::Zlib) for package: perl-libwww-perl-5.833-5.el6.noarch
--> Processing Dependency: mailcap for package: perl-libwww-perl-5.833-5.el6.noarch
--> Running transaction check
---> Package mailcap.noarch 0:2.1.31-2.el6 will be installed
---> Package perl-Compress-Zlib.x86_64 0:2.021-144.el6 will be installed
--> Processing Dependency: perl(IO::Uncompress::Gunzip) >= 2.021 for package: perl-Compress-Zlib-2.021-144.el6.x86_64
--> Processing Dependency: perl(IO::Compress::Gzip::Constants) >= 2.021 for package: perl-Compress-Zlib-2.021-144.el6.x86_64
--> Processing Dependency: perl(IO::Compress::Gzip) >= 2.021 for package: perl-Compress-Zlib-2.021-144.el6.x86_64
--> Processing Dependency: perl(IO::Compress::Base::Common) >= 2.021 for package: perl-Compress-Zlib-2.021-144.el6.x86_64
--> Processing Dependency: perl(Compress::Raw::Zlib) >= 2.021 for package: perl-Compress-Zlib-2.021-144.el6.x86_64
---> Package perl-HTML-Parser.x86_64 0:3.64-2.el6 will be installed
--> Processing Dependency: perl(HTML::Tagset) >= 3.03 for package: perl-HTML-Parser-3.64-2.el6.x86_64
--> Processing Dependency: perl(HTML::Tagset) for package: perl-HTML-Parser-3.64-2.el6.x86_64
---> Package perl-URI.noarch 0:1.40-2.el6 will be installed
--> Running transaction check
---> Package perl-Compress-Raw-Zlib.x86_64 1:2.021-144.el6 will be installed
---> Package perl-HTML-Tagset.noarch 0:3.20-4.el6 will be installed
---> Package perl-IO-Compress-Base.x86_64 0:2.021-144.el6 will be installed
---> Package perl-IO-Compress-Zlib.x86_64 0:2.021-144.el6 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
===========================================================================================================
 Package                             Arch             Version                       Repository        Size
===========================================================================================================
Installing:
 pgbackrest                          x86_64           2.05-1.rhel6                  pgdg96           203 k
Installing for dependencies:
 mailcap                             noarch           2.1.31-2.el6                  base              27 k
 perl-Compress-Raw-Zlib              x86_64           1:2.021-144.el6               base              70 k
 perl-Compress-Zlib                  x86_64           2.021-144.el6                 base              46 k
 perl-DBD-Pg                         x86_64           2.15.1-4.el6_3                base             196 k
 perl-DBI                            x86_64           1.609-4.el6                   base             705 k
 perl-Digest-SHA                     x86_64           1:5.47-144.el6                base              65 k
 perl-HTML-Parser                    x86_64           3.64-2.el6                    base             109 k
 perl-HTML-Tagset                    noarch           3.20-4.el6                    base              17 k
 perl-IO-Compress-Base               x86_64           2.021-144.el6                 base              70 k
 perl-IO-Compress-Zlib               x86_64           2.021-144.el6                 base             136 k
 perl-IO-Socket-SSL                  noarch           1.31-3.el6_8.2                base              70 k
 perl-JSON                           noarch           2.15-5.el6                    base              97 k
 perl-Net-LibIDN                     x86_64           0.12-3.el6                    base              35 k
 perl-Net-SSLeay                     x86_64           1.35-10.el6_8.1               base             174 k
 perl-Time-HiRes                     x86_64           4:1.9721-144.el6              base              49 k
 perl-URI                            noarch           1.40-2.el6                    base             117 k
 perl-XML-LibXML                     x86_64           1:1.70-5.el6                  base             364 k
 perl-XML-NamespaceSupport           noarch           1.10-3.el6                    base              17 k
 perl-XML-SAX                        noarch           0.96-7.el6                    base              78 k
 perl-libwww-perl                    noarch           5.833-5.el6                   base             390 k
 perl-parent                         x86_64           1:0.221-144.el6               base              28 k
Transaction Summary
===========================================================================================================
Install      22 Package(s)
Total download size: 3.0 M
Installed size: 7.5 M
Downloading Packages:
(1/22): mailcap-2.1.31-2.el6.noarch.rpm                                             |  27 kB     00:00
(2/22): perl-Compress-Raw-Zlib-2.021-144.el6.x86_64.rpm                             |  70 kB     00:00
(3/22): perl-Compress-Zlib-2.021-144.el6.x86_64.rpm                                 |  46 kB     00:00
(4/22): perl-DBD-Pg-2.15.1-4.el6_3.x86_64.rpm                                       | 196 kB     00:00
(5/22): perl-DBI-1.609-4.el6.x86_64.rpm                                             | 705 kB     00:00
(6/22): perl-Digest-SHA-5.47-144.el6.x86_64.rpm                                     |  65 kB     00:00
(7/22): perl-HTML-Parser-3.64-2.el6.x86_64.rpm                                      | 109 kB     00:00
(8/22): perl-HTML-Tagset-3.20-4.el6.noarch.rpm                                      |  17 kB     00:00
(9/22): perl-IO-Compress-Base-2.021-144.el6.x86_64.rpm                              |  70 kB     00:00
(10/22): perl-IO-Compress-Zlib-2.021-144.el6.x86_64.rpm                             | 136 kB     00:00
(11/22): perl-IO-Socket-SSL-1.31-3.el6_8.2.noarch.rpm                               |  70 kB     00:00
(12/22): perl-JSON-2.15-5.el6.noarch.rpm                                            |  97 kB     00:00
(13/22): perl-Net-LibIDN-0.12-3.el6.x86_64.rpm                                      |  35 kB     00:00
(14/22): perl-Net-SSLeay-1.35-10.el6_8.1.x86_64.rpm                                 | 174 kB     00:00
(15/22): perl-Time-HiRes-1.9721-144.el6.x86_64.rpm                                  |  49 kB     00:00
(16/22): perl-URI-1.40-2.el6.noarch.rpm                                             | 117 kB     00:00
(17/22): perl-XML-LibXML-1.70-5.el6.x86_64.rpm                                      | 364 kB     00:00
(18/22): perl-XML-NamespaceSupport-1.10-3.el6.noarch.rpm                            |  17 kB     00:00
(19/22): perl-XML-SAX-0.96-7.el6.noarch.rpm                                         |  78 kB     00:00
(20/22): perl-libwww-perl-5.833-5.el6.noarch.rpm                                    | 390 kB     00:00
(21/22): perl-parent-0.221-144.el6.x86_64.rpm                                       |  28 kB     00:00
(22/22): pgbackrest-2.05-1.rhel6.x86_64.rpm                                         | 203 kB     00:00
-----------------------------------------------------------------------------------------------------------
Total                                                                      1.1 MB/s | 3.0 MB     00:02
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : perl-IO-Compress-Base-2.021-144.el6.x86_64                                             1/22
  Installing : 1:perl-Compress-Raw-Zlib-2.021-144.el6.x86_64                                          2/22
  Installing : perl-XML-NamespaceSupport-1.10-3.el6.noarch                                            3/22
  Installing : 1:perl-XML-LibXML-1.70-5.el6.x86_64                                                    4/22
  Installing : perl-XML-SAX-0.96-7.el6.noarch                                                         5/22
  Installing : perl-IO-Compress-Zlib-2.021-144.el6.x86_64                                             6/22
  Installing : perl-Compress-Zlib-2.021-144.el6.x86_64                                                7/22
  Installing : 1:perl-Digest-SHA-5.47-144.el6.x86_64                                                  8/22
  Installing : 1:perl-parent-0.221-144.el6.x86_64                                                     9/22
  Installing : perl-DBI-1.609-4.el6.x86_64                                                           10/22
  Installing : perl-DBD-Pg-2.15.1-4.el6_3.x86_64                                                     11/22
  Installing : perl-HTML-Tagset-3.20-4.el6.noarch                                                    12/22
  Installing : perl-HTML-Parser-3.64-2.el6.x86_64                                                    13/22
  Installing : perl-URI-1.40-2.el6.noarch                                                            14/22
  Installing : perl-Net-LibIDN-0.12-3.el6.x86_64                                                     15/22
  Installing : mailcap-2.1.31-2.el6.noarch                                                           16/22
  Installing : perl-libwww-perl-5.833-5.el6.noarch                                                   17/22
  Installing : perl-JSON-2.15-5.el6.noarch                                                           18/22
  Installing : 4:perl-Time-HiRes-1.9721-144.el6.x86_64                                               19/22
  Installing : perl-Net-SSLeay-1.35-10.el6_8.1.x86_64                                                20/22
  Installing : perl-IO-Socket-SSL-1.31-3.el6_8.2.noarch                                              21/22
  Installing : pgbackrest-2.05-1.rhel6.x86_64                                                        22/22
  Verifying  : perl-Compress-Zlib-2.021-144.el6.x86_64                                                1/22
  Verifying  : perl-Net-SSLeay-1.35-10.el6_8.1.x86_64                                                 2/22
  Verifying  : pgbackrest-2.05-1.rhel6.x86_64                                                         3/22
  Verifying  : 4:perl-Time-HiRes-1.9721-144.el6.x86_64                                                4/22
  Verifying  : mailcap-2.1.31-2.el6.noarch                                                            5/22
  Verifying  : perl-Net-LibIDN-0.12-3.el6.x86_64                                                      6/22
  Verifying  : perl-libwww-perl-5.833-5.el6.noarch                                                    7/22
  Verifying  : perl-XML-NamespaceSupport-1.10-3.el6.noarch                                            8/22
  Verifying  : perl-DBD-Pg-2.15.1-4.el6_3.x86_64                                                      9/22
  Verifying  : perl-HTML-Parser-3.64-2.el6.x86_64                                                    10/22
  Verifying  : 1:perl-XML-LibXML-1.70-5.el6.x86_64                                                   11/22
  Verifying  : 1:perl-Compress-Raw-Zlib-2.021-144.el6.x86_64                                         12/22
  Verifying  : perl-IO-Socket-SSL-1.31-3.el6_8.2.noarch                                              13/22
  Verifying  : perl-URI-1.40-2.el6.noarch                                                            14/22
  Verifying  : perl-IO-Compress-Base-2.021-144.el6.x86_64                                            15/22
  Verifying  : perl-HTML-Tagset-3.20-4.el6.noarch                                                    16/22
  Verifying  : perl-DBI-1.609-4.el6.x86_64                                                           17/22
  Verifying  : perl-XML-SAX-0.96-7.el6.noarch                                                        18/22
  Verifying  : 1:perl-parent-0.221-144.el6.x86_64                                                    19/22
  Verifying  : 1:perl-Digest-SHA-5.47-144.el6.x86_64                                                 20/22
  Verifying  : perl-IO-Compress-Zlib-2.021-144.el6.x86_64                                            21/22
  Verifying  : perl-JSON-2.15-5.el6.noarch                                                           22/22
Installed:
  pgbackrest.x86_64 0:2.05-1.rhel6
Dependency Installed:
  mailcap.noarch 0:2.1.31-2.el6                       perl-Compress-Raw-Zlib.x86_64 1:2.021-144.el6
  perl-Compress-Zlib.x86_64 0:2.021-144.el6           perl-DBD-Pg.x86_64 0:2.15.1-4.el6_3
  perl-DBI.x86_64 0:1.609-4.el6                       perl-Digest-SHA.x86_64 1:5.47-144.el6
  perl-HTML-Parser.x86_64 0:3.64-2.el6                perl-HTML-Tagset.noarch 0:3.20-4.el6
  perl-IO-Compress-Base.x86_64 0:2.021-144.el6        perl-IO-Compress-Zlib.x86_64 0:2.021-144.el6
  perl-IO-Socket-SSL.noarch 0:1.31-3.el6_8.2          perl-JSON.noarch 0:2.15-5.el6
  perl-Net-LibIDN.x86_64 0:0.12-3.el6                 perl-Net-SSLeay.x86_64 0:1.35-10.el6_8.1
  perl-Time-HiRes.x86_64 4:1.9721-144.el6             perl-URI.noarch 0:1.40-2.el6
  perl-XML-LibXML.x86_64 1:1.70-5.el6                 perl-XML-NamespaceSupport.noarch 0:1.10-3.el6
  perl-XML-SAX.noarch 0:0.96-7.el6                    perl-libwww-perl.noarch 0:5.833-5.el6
  perl-parent.x86_64 1:0.221-144.el6
Complete!
Once installed, pgBackRest must be configured for things like stanza name, backup location, retention policy, logging, etc. Please consult the configuration guide.
If employing pgBackRest for your backup/recovery solution, ensure the repository, base backups, and WAL archives are stored on a reliable file system separate from the database server. Further, the external storage system where backups resided should have limited access to only those system administrators as necessary. Finally, as with any backup/recovery solution, stringent testing must be conducted. A backup is only good if it can be restored successfully."
  reference   : "800-171|3.8.9,800-53|CP-9,CSF|PR.IP-4,ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,LEVEL|1NS,NESA|M5.2.3,NESA|T2.2.4"
  see_also    : "https://workbench.cisecurity.org/files/2234"
# Note: Variable @PG_SUPER_USER@ replaced with "postgres" in field "cmd".
  cmd         : "su - postgres -c \"pgbackrest info\""
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

</check_type>
