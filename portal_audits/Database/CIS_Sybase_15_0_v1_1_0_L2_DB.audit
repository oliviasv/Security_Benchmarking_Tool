#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.4 $
# $Date: 2020/04/22 $
#
# Description	: This .audit is designed against the CIS Security Configuration Benchmark For
# 			Sybase ASE 15.0 Version 1.1.0 December 31, 2011
#
# Ref			: https://workbench.cisecurity.org/files/1612
#
#<ui_metadata>
#<display_name>CIS Sybase 15.0 L2 DB v1.1.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Sybase 15.0 L2 DB</name>
#  <version>1.1.0</version>
#  <link>https://workbench.cisecurity.org/files/1612</link>
#</spec>
#<labels>database,cis,sybase</labels>
#<variables>
#  <variable>
#    <name>LOCKOUT_THRESH</name>
#    <default>5</default>
#    <description>lockout threshold</description>
#    <info>1.7 Set lockout threshold</info>
#  </variable>
#  <variable>
#    <name>PW_EXPIRATION</name>
#    <default>90</default>
#    <description>password expiration</description>
#    <info>1.8 Set a system-wide password expiration</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Database" db_type:"sybase" version:"1">
<group_policy:"CIS Sybase">

<custom_item>
  type        : SQL_POLICY
  description : "1.6 Enforce password complexity - minimum password length"
  info        : "Sybase ASE 15.0 and 15.0.1 supports enforcing password complexity via:

. Setting the login mode to Integrated Mode so that password policy is enforced by
the Windows domain.

. A configuration parameter to enforce server-wide, per user account and per role
minimum password length (set to 0 by default)
. A configuration parameter to enforce at least one digit in a password (disabled by
default)

Sybase ASE 15.0.2 supports the above settings as well as more granular password
complexity via:

. A setting to enforce that a login name cannot be a substring of the password.
. A setting to enforce the minimum number of special characters for the password.
. A setting to enforce the minimum number of alphabetic characters for the password
. A setting to enforce the minimum number of upper-case letters for the password.
. A setting to enforce the minimum number of lower-case letters for the password.
. A setting to enforce that the password must be reset is the first time a login is used.
. A setting to enforce the minimum number of digits for the password.


In addition, Sybase ASE 15.0.2 supports the creation of a stored procedure to enforce
custom password complexity requirements.


It is recommended that strong password complexity is enforced in accordance with your
organizations policy. It may not be possible to enforce a sufficient policy on ASE 15.0 and
ASE 15.0.1; if this is the case the System Security Officer should consider one of the
following solutions:

. Upgrade systems to ASE 15.0.2 in order to make use of the more extensive password
complexity options.
. Enable Integrated Mode to rely on the Windows domain password policy.
. Accept the risk associated with the policy conflict and regularly audit password
strength using a password cracking tool.

Rationale:

Arguably the most common cause of database compromise is weak passwords. Setting
password complexity is essential step to ensuring the security and integrity of the data
within the database."
  solution    : "1. Connect to the ASE server as a user with the sso_role and execute the following
SQL statement in order to set a system-wide minimum password length according
to your organizations password (substitute 8 for an acceptable value):

exec sp_configure 'minimum password length', 8

2. Set a custom minimum password length for specific users and roles as required.
This should not be less than the system-wide length. This can be accomplished via
the sp_modifylogin stored procedure.

3. Execute the following statement to enforce at least one digit in passwords:

exec sp_configure 'check password for digit', 1"
  reference   : "800-171|3.5.7,800-53|IA-5(1),CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|2S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_configure 'minimum password length'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : "minimum password length", "6", "0", "8", "8", "bytes", "dynamic"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "1.6 Enforce password complexity - check password for digit"
  info        : "Sybase ASE 15.0 and 15.0.1 supports enforcing password complexity via:

. Setting the login mode to Integrated Mode so that password policy is enforced by
the Windows domain.

. A configuration parameter to enforce server-wide, per user account and per role
minimum password length (set to 0 by default)
. A configuration parameter to enforce at least one digit in a password (disabled by
default)

Sybase ASE 15.0.2 supports the above settings as well as more granular password
complexity via:

. A setting to enforce that a login name cannot be a substring of the password.
. A setting to enforce the minimum number of special characters for the password.
. A setting to enforce the minimum number of alphabetic characters for the password
. A setting to enforce the minimum number of upper-case letters for the password.
. A setting to enforce the minimum number of lower-case letters for the password.
. A setting to enforce that the password must be reset is the first time a login is used.
. A setting to enforce the minimum number of digits for the password.


In addition, Sybase ASE 15.0.2 supports the creation of a stored procedure to enforce
custom password complexity requirements.


It is recommended that strong password complexity is enforced in accordance with your
organizations policy. It may not be possible to enforce a sufficient policy on ASE 15.0 and
ASE 15.0.1; if this is the case the System Security Officer should consider one of the
following solutions:

. Upgrade systems to ASE 15.0.2 in order to make use of the more extensive password
complexity options.
. Enable Integrated Mode to rely on the Windows domain password policy.
. Accept the risk associated with the policy conflict and regularly audit password
strength using a password cracking tool.

Rationale:

Arguably the most common cause of database compromise is weak passwords. Setting
password complexity is essential step to ensuring the security and integrity of the data
within the database."
  solution    : "1. Connect to the ASE server as a user with the sso_role and execute the following
SQL statement in order to set a system-wide minimum password length according
to your organizations password (substitute 8 for an acceptable value):

exec sp_configure 'minimum password length', 8

2. Set a custom minimum password length for specific users and roles as required.
This should not be less than the system-wide length. This can be accomplished via
the sp_modifylogin stored procedure.

3. Execute the following statement to enforce at least one digit in passwords:

exec sp_configure 'check password for digit', 1"
  reference   : "800-171|3.5.7,800-53|IA-5(1),CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|2S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_configure 'check password for digit'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : "check password for digit", "0", "0", "1", "1", "switch", "dynamic"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "1.6 Enforce password complexity - exec sp_passwordpolicy 'list'"
  info        : "Sybase ASE 15.0 and 15.0.1 supports enforcing password complexity via:

. Setting the login mode to Integrated Mode so that password policy is enforced by
the Windows domain.

. A configuration parameter to enforce server-wide, per user account and per role
minimum password length (set to 0 by default)
. A configuration parameter to enforce at least one digit in a password (disabled by
default)

Sybase ASE 15.0.2 supports the above settings as well as more granular password
complexity via:

. A setting to enforce that a login name cannot be a substring of the password.
. A setting to enforce the minimum number of special characters for the password.
. A setting to enforce the minimum number of alphabetic characters for the password
. A setting to enforce the minimum number of upper-case letters for the password.
. A setting to enforce the minimum number of lower-case letters for the password.
. A setting to enforce that the password must be reset is the first time a login is used.
. A setting to enforce the minimum number of digits for the password.


In addition, Sybase ASE 15.0.2 supports the creation of a stored procedure to enforce
custom password complexity requirements.


It is recommended that strong password complexity is enforced in accordance with your
organizations policy. It may not be possible to enforce a sufficient policy on ASE 15.0 and
ASE 15.0.1; if this is the case the System Security Officer should consider one of the
following solutions:

. Upgrade systems to ASE 15.0.2 in order to make use of the more extensive password
complexity options.
. Enable Integrated Mode to rely on the Windows domain password policy.
. Accept the risk associated with the policy conflict and regularly audit password
strength using a password cracking tool.

Rationale:

Arguably the most common cause of database compromise is weak passwords. Setting
password complexity is essential step to ensuring the security and integrity of the data
within the database.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "1. Connect to the ASE server as a user with the sso_role and execute the following
SQL statement in order to set a system-wide minimum password length according
to your organizations password (substitute 8 for an acceptable value):

exec sp_configure 'minimum password length', 8

2. Set a custom minimum password length for specific users and roles as required.
This should not be less than the system-wide length. This can be accomplished via
the sp_modifylogin stored procedure.

3. Execute the following statement to enforce at least one digit in passwords:

exec sp_configure 'check password for digit', 1"
  reference   : "800-171|3.5.7,800-53|IA-5(1),CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|2S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_passwordpolicy 'list'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "1.7 Set lockout thresholds"
  info        : "Sybase ASE supports setting lockout thresholds that define the number of incorrect
consecutive login attempts that will result in the account or role being locked. These can be
specified on a global basis (i.e. applicable to all user accounts), on a per user basis and on a
per role basis with individual settings overriding server-wide settings.

The default lockout threshold in Sybase ASE allows unlimited incorrect login attempts. At a
minimum, a global lockout threshold should be set in accordance with your organizations
password policy. It is recommended that user accounts that have powerful roles such as
sa_role or sso_role should have a stricter threshold set.

Rationale:

Allowing an attacker unlimited attempts to login to an account permits a brute force attack
to proceed unhindered, potentially leading to compromise of the database."
  solution    : "1. Connect to the ASE server with a user that has the sso_role and execute the
following SQL statement (note 5 should be substituted for the lockout threshold
required within your organization):

exec sp_configure 'maximum failed logins', 5"
  reference   : "800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),ITSG-33|AC-7,LEVEL|2S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_configure 'maximum failed logins'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
# Note: Variable @LOCKOUT_THRESH@ replaced with "5" in field "sql_expect".
# Note: Variable @LOCKOUT_THRESH@ replaced with "5" in field "sql_expect".
  sql_expect  : "maximum failed logins", "0", "0", "5", "5", "number", "dynamic"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "1.8 Set a system-wide password expiration"
  info        : "Sybase ASE supports expiring passwords after a set interval. The interval can be set on a
global, per user or per role basis. Password expiration is disabled by default.

It is recommended that a system-wide password expiration is set according to your
organizations requirements.

Rationale:

Password expiration potentially mitigates the damage from a compromised account. It also
assists in identifying accounts that are no longer in use."
  solution    : "1. Connect to the ASE server with a user that has the sso_role and execute the
following SQL statement to set the system-wide password expiration (substitute 90
for a suitable password expiration value based on your organizations
requirements):

exec sp_configure 'systemwide password expiration', 90"
  reference   : "800-53|IA-5(1),CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|2S,NESA|T5.2.3,NIAv2|AM20,NIAv2|AM21,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.2"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_configure 'systemwide password expiration'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
# Note: Variable @PW_EXPIRATION@ replaced with "90" in field "sql_expect".
# Note: Variable @PW_EXPIRATION@ replaced with "90" in field "sql_expect".
  sql_expect  : "systemwide password expiration", "0", "0", "90", "90", "days", "dynamic"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "1.9 Set passwords on important roles"
  info        : "Sybase ASE supports setting role passwords to ensure that all users have to enter a
password before using a protected role. Powerful roles such sa_role and sso_role should
be password protected to provide as an additional layer of security.

Rationale:

Password protecting powerful roles means that even if a user is granted that role (which
might have been granted through error or indirectly via the WITH GRANT option) they must
know the password to use it.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "1. Connect to the ASE server with a user that has the sa_role and execute the
following SQL statement (where <Role> should be substituted for the role that is to
be password protected and <Password> for the new password):

set role '<Role>' with password '<Password>'"
  reference   : "800-53|IA-5(1),CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|2S,NESA|T5.2.3,SWIFT-CSCv1|4.1"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "select name from syssrvroles where password = NULL"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "1.10 Use login triggers to validate users IP addresses - exec sp_logintrigger"
  info        : "Sybase ASE supports login triggers; these execute a specified stored procedure every time a
user logs in. Login triggers can be used to carry out additional verification steps such as
checking the IP address that the user is logging in from is as expected.

Note: Global login triggers are available on ASE 15.0.2 and greater.

Rationale:

Login triggers can provide an additional layer of security through verification of criterion
such as IP address. Note that the IP address may be subject to spoofing or may indicate a
compromised client and as such should not be exclusively relied upon.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "1. Connect to the ASE server with a user that has the sso_role and execute the
following SQL statement where <Login_Name> should be substituted for the
username on which the login trigger will fire and <Sproc_Name> for the specific
stored procedure. If <Login_Name> is set to NULL, a global login trigger is registered
(i.e. for all users). Global login triggers can also be set via the sp_logintrigger
stored procedure.

exec sp_modifylogin <Login_Name>, 'login script', <Sproc_Name>

Note that the stored procedure registered as a login trigger must be available in the users
default database since Sybase ASE searches the sysobjects table in the users default
database in order to find the login trigger object."
  reference   : "800-171|3.1.1,800-171|3.1.2,800-53|AC-17,CN-L3|8.1.10.6(i),CN-L3|8.1.4.4(c),CSF|PR.AC-3,CSF|PR.PT-4,ISO/IEC-27001|A.6.2.2,ITSG-33|AC-17,LEVEL|2NS,NESA|T5.4.5,SWIFT-CSCv1|2.6"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_logintrigger"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : regex:".*", regex:".*"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "1.10 Use login triggers to validate users IP addresses - exec sp_displaylogin <Login_Name>"
  info        : "Sybase ASE supports login triggers; these execute a specified stored procedure every time a
user logs in. Login triggers can be used to carry out additional verification steps such as
checking the IP address that the user is logging in from is as expected.

Note: Global login triggers are available on ASE 15.0.2 and greater.

Rationale:

Login triggers can provide an additional layer of security through verification of criterion
such as IP address. Note that the IP address may be subject to spoofing or may indicate a
compromised client and as such should not be exclusively relied upon.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "1. Connect to the ASE server with a user that has the sso_role and execute the
following SQL statement where <Login_Name> should be substituted for the
username on which the login trigger will fire and <Sproc_Name> for the specific
stored procedure. If <Login_Name> is set to NULL, a global login trigger is registered
(i.e. for all users). Global login triggers can also be set via the sp_logintrigger
stored procedure.

exec sp_modifylogin <Login_Name>, 'login script', <Sproc_Name>

Note that the stored procedure registered as a login trigger must be available in the users
default database since Sybase ASE searches the sysobjects table in the users default
database in order to find the login trigger object."
  reference   : "800-171|3.1.1,800-171|3.1.2,800-53|AC-17,CN-L3|8.1.10.6(i),CN-L3|8.1.4.4(c),CSF|PR.AC-3,CSF|PR.PT-4,ISO/IEC-27001|A.6.2.2,ITSG-33|AC-17,LEVEL|2NS,NESA|T5.4.5,SWIFT-CSCv1|2.6"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_displaylogin '%'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : regex:".*", regex:".*"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "2.1 Enable Secure Socket Layer (SSL) Encryption - enable ssl"
  info        : "Sybase ASE supports SSL encryption as a means of ensuring confidentiality between clients and servers. SSL is a widely accepted standard for securing the transmission of sensitive information, such as credit card numbers, stock trades, and banking transactions over the Internet. It relies on public-key cryptography and allows the client and server to negotiate a mutually acceptable cipher.
Sybase ASE 15.0.2 also supports the NIST-approved AES algorithm and new options for setting cipher suite preference via the sp_ssladmin stored procedure.
SSL encryption of connections is disabled by default. When it is enabled, a client can potentially negotiate a cryptographically weak cipher suite. It is recommended that SSL support is enabled and that the cipher suite preference is set to strong (or FIPS if your organization mandates FIPS-compliance).
Rationale:
SSL encryption prevents passive sniffing attacking from capturing sensitive data that may be transmitted between client applications and the server such as credit cards and SSNs. A strong cipher suite is required to prevent cryptographic attacks on clients that force the server to use weak algorithms."
  solution    : "There are several steps involved to enable SSL. The information below is provided as an outline only; it is recommended that the System Security Officer consult the Sybase ASE 15.0 Administration Guide, Volume 1, Chapter 19 for detailed advice.
1. Generate a certificate for the server.
2. Create a trusted roots file.
3. Connect to the ASE server as a user with the sso_role and execute the following SQL statement to enable SSL:

exec sp_configure 'enable ssl' 1

4. Add the SSL filter to the interfaces file.
5. Use sp_ssladmin stored procedure to add a certificate to the certificates file. See Administering certificates.
6. Execute the following SQL statement to enforce strong cipher suites (note strong should be substituted for FIPS if your organization mandates the use of FIPS-compliant algorithms):

exec sp_ssladmin setcipher, 'strong'"
  reference   : "800-171|3.13.8,800-53|SC-8(1),CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|2S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_configure 'enable ssl'"
  sql_types   : POLICY_VARCHAR,POLICY_INTEGER,POLICY_INTEGER,POLICY_INTEGER,POLICY_INTEGER,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : "enable ssl", "0", "0", "1", "0", "switch", "static"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "2.1 Enable Secure Socket Layer (SSL) Encryption - lsciphers"
  info        : "Sybase ASE supports SSL encryption as a means of ensuring confidentiality between clients and servers. SSL is a widely accepted standard for securing the transmission of sensitive information, such as credit card numbers, stock trades, and banking transactions over the Internet. It relies on public-key cryptography and allows the client and server to negotiate a mutually acceptable cipher.
Sybase ASE 15.0.2 also supports the NIST-approved AES algorithm and new options for setting cipher suite preference via the sp_ssladmin stored procedure.
SSL encryption of connections is disabled by default. When it is enabled, a client can potentially negotiate a cryptographically weak cipher suite. It is recommended that SSL support is enabled and that the cipher suite preference is set to strong (or FIPS if your organization mandates FIPS-compliance).
Rationale:
SSL encryption prevents passive sniffing attacking from capturing sensitive data that may be transmitted between client applications and the server such as credit cards and SSNs. A strong cipher suite is required to prevent cryptographic attacks on clients that force the server to use weak algorithms.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "There are several steps involved to enable SSL. The information below is provided as an outline only; it is recommended that the System Security Officer consult the Sybase ASE 15.0 Administration Guide, Volume 1, Chapter 19 for detailed advice.
1. Generate a certificate for the server.
2. Create a trusted roots file.
3. Connect to the ASE server as a user with the sso_role and execute the following SQL statement to enable SSL:

exec sp_configure 'enable ssl' 1

4. Add the SSL filter to the interfaces file.
5. Use sp_ssladmin stored procedure to add a certificate to the certificates file. See Administering certificates.
6. Execute the following SQL statement to enforce strong cipher suites (note strong should be substituted for FIPS if your organization mandates the use of FIPS-compliant algorithms):

exec sp_ssladmin setcipher, 'strong'"
  reference   : "800-171|3.13.8,800-53|SC-8(1),CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|2S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_ssladmin lscipher"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "2.5.2 Consider disabling remote access"
  info        : "Sybase ASE allows server-to-server RPC to be disabled via the allow remote access
configuration parameter. By default server-to-server RPC is enabled since it is required for
communication with the Backup Server; disabling server-to-server RPC will make it
impossible to back up a database.

The Sybase System Administrator Guide for ASE 15.0, Volume 1 Chapter 5 claims:

Since other system administration actions are required to enable remote servers other than
Backup Server to execute RPCs, leaving this option set to 1 does not constitute a security risk.


Nonetheless, if communication with remote servers including the Backup Server is not
required then this configuration parameter can be set to 0 to disable server-to-server RPC.

Rationale:

Disabling remote access will reduce the remote attack surface of system."
  solution    : "1. Connect to the database as a user with the sso_role and execute the following SQL
statement to disable server-to-server RPC:
exec sp_configure 'allow remote access', 0"
  reference   : "800-171|3.1.1,800-171|3.1.2,800-53|AC-17,CIP|005-5-R2,CN-L3|8.1.10.6(i),CN-L3|8.1.4.4(c),CSF|PR.AC-3,CSF|PR.PT-4,ISO/IEC-27001|A.6.2.2,ITSG-33|AC-17,LEVEL|2S,NESA|T5.4.5,SWIFT-CSCv1|2.6"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_configure 'allow remote access'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : "allow remote access", "1", "0","0", "0", "switch", "dynamic"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "3.2.1 Review use of the guest user in databases"
  info        : "Adding a guest entry to the sysusers table of any database effectively permits any database
user to use the database with the permissions of the guest user (which by default inherits
the permissions of the public role).

Rather than using the guest user it is recommended that roles be set up within Sybase ASE
to facilitate multiuser access to databases.

Rationale:

Adding a guest entry to a database goes against the security best practice principle of least
privilege and makes it harder to audit operations.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "1. Identify the databases that contain a guest user.

2. Identify the users that access objects in these databases.

3. Either grant each user specific access to each database as required or create
appropriate roles and grant each role specific access to each database."
  reference   : "800-171|3.1.1,800-53|AC-2,CN-L3|7.1.3.2(d),CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|2S,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_helpuser guest"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "3.3.2 Limit access via procedures, views and triggers"
  info        : "Sybase ASE supports views and stored procedures as security mechanisms, allowing a user
(role or group) to be granted permission on a view or on a stored procedure even if they
have no permissions on objects the view or procedure references.

Rationale:

By defining different views and stored procedures and selectively granting permissions on
them, a user (or any combination of users) can be restricted to different subsets of data
allowing for a granular implementation of security requirements.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "1. Identify the subsets of data that should be accessible to particular users. Implement views and triggers as described in Sybase ASE System Administration Guide, Volume 1, chapter 17."
  reference   : "LEVEL|2S"
  see_also    : "https://workbench.cisecurity.org/files/1612"
</report>

<report type:"WARNING">
  description : "3.6.2 Store encryption keys in a separate database"
  info        : "Sybase ASE allows columns to be encrypted with keys that reside in the same database or
in different databases. Encryption keys should be stored in a separate database from the
data that they are used to encrypt.

Rationale:

In the event of the theft of a database dump, the attacker must have access to dumps of the
encryption key database and the database holding the encrypted data rather than a single
database that holds both the keys and the encrypted data.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "1. Connect to the ASE server as a user with the sso_role or the keycustodian_role
and execute the following SQL statement to create an encryption key in a specified
database (where <Database> should be substituted for the database that is to hold
the encryption key, <Owner> for key owner and <KeyName> for the key name). Note
that the following statement is provided as an example only; the Sybase ASE 15.0.2
Reference Manual contains the full syntax for the create encryption key
command.

create encryption key <Database>.<Owner>.<KeyName>"
  reference   : "LEVEL|2S"
  see_also    : "https://workbench.cisecurity.org/files/1612"
</report>

<report type:"WARNING">
  description : "3.6.3 Password protect encryption keys"
  info        : "Sybase ASE 15.0.2 supports per encryption key passwords that can be used to restrict
access to encrypted data. This can be used to limit DBO and system administrator access to
data; a user must have knowledge of the encryption key password as well as the decrypt
permission on the column in order to decrypt the data.

Rationale:

Depending on your organizations security policy it may be a requirement to restrict data
access to a small subset of users that excludes system administrators; encryption key
passwords provide a means of accomplishing this within Sybase ASE.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "1. Connect to the ASE server as a user with either the sso_role or the
keycustodian_role and execute the following SQL statement to create an
encryption key with a password (where <KeyName> should be substituted for the
chosen key name and <Password> for a strong password). Note that the following
statement is provided as an example only; the Sybase ASE 15.0.2 Reference Manual
contains the full syntax for the create encryption key command.

create encryption key <KeyName> with passwd '<Password>'"
  reference   : "LEVEL|2S"
  see_also    : "https://workbench.cisecurity.org/files/1612"
</report>

<report type:"WARNING">
  description : "4.1 Ensure sufficient space for logs"
  info        : "Logging plays a critical part in ensuring database consistency and integrity. Disk space
should be monitored to ensure that Sybase ASE has sufficient space to store logs.

Rationale:

A denial of service condition will occur if Sybase ASE runs out of space for logging. If the
database serves as a backend for a web application, it may be possible for a web application
user to trigger such a condition by repeatedly requesting dynamic resources.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "1. It is recommended that a separate partition is used for storing logs and that
thresholds are set up so that the sp_thresholdaction stored procedure is executed
when the threshold is crossed."
  reference   : "LEVEL|2S"
  see_also    : "https://workbench.cisecurity.org/files/1612"
</report>

<report type:"WARNING">
  description : "4.5 Periodically review audit settings"
  info        : "It is recommended that the audit settings are periodically reviewed to ensure that a
sufficient amount of audit events are being collected in accordance with internal and
regulatory requirements and that database performance is acceptable.

Rationale:

Regularly reviewing audit configuration represents security best practice.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "1. Carry out regular reviews of the system-wide and per server audit settings.


Audit:

1. Ensure that there is a record of current and previous system-wide and per server
audit settings that includes change control information."
  reference   : "LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/1612"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "4.7 Review suspend audit configuration when device is full"
  info        : "Sybase ASE is configured by default to suspend auditing when the device is full. This is
controlled via the suspend audit when device full configuration parameter. suspend
audit when device full is enabled by default.

If this option has been disabled (i.e. database operations continue when the audit device is
full), older events will be overwritten which could allow an attacker to mask evidence of an
attack.

Note that this is a potentially disruptive setting as it will suspend the audit process and all
user processes that cause an auditable event when the audit device is full. To resume
normal operation, an administrator with the sso_role must log in and set up an empty
table as the current audit table.

It is advised that this configuration is enabled for databases where maintaining an accurate
audit trail is more important than the database availability. If this setting is enabled, it is
recommended that audit device resources are checked regularly.

Rationale:

Enabling this configuration will ensure that an attacker cannot simply overwrite audit logs
by submitting a large number of events."
  solution    : "1. Connect to the ASE server as a user with the sso_role and execute the following
SQL statement:

exec sp_configure 'suspend audit when device full', 1"
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|2S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "exec sp_configure 'suspend audit when device full'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : "suspend audit when device full", "1", "0", "1", "1", "switch", "dynamic"
</custom_item>

<report type:"WARNING">
  description : "4.9 Monitor Usage Statistics"
  info        : "Sybase ASE records statistics (CPU and I/O accounting totals) for all logins. It is
recommended that these statistics are periodically reviewed. After recording and
reviewing these statistics, a new accounting period should be initiated by the server (i.e. it
should clear previous statistics).

Rationale:

The accounting totals may indicate evidence of a compromise or abuse of a user account,
e.g. if an account has been compromised and is being used to exfiltrate data, this may be
evident from an abnormal division of CPU workload. It is important to record previous sets
of statistics in order to be able to draw comparisons and thus determine abnormal
behavior.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "1. Connect to the ASE server as a user with the sa_role and execute the following SQL
statement:

exec sp_reportstats

2. Once statistics have been recorded, a new accounting period should be initiated.
Connect to the ASE server as a user with the sa_role and execute the following SQL
statement:

exec sp_clearstats"
  reference   : "LEVEL|2S"
  see_also    : "https://workbench.cisecurity.org/files/1612"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "5.3.1 Remove operating system related ESPs"
  info        : "Sybase ASE installs a number of powerful ESPs that allow interaction with the operating
system. A common target for an attacker is the xp_cmdshell ESP, which executes a native
operating system command on the host system running Sybase ASE.

The operating system user context under which the command executes is controlled by the
xp_cmdshell context configuration parameter. Though by default, this is set to only
permit execution by users with System Administration privileges at the operating system
level, it should be noted that this is insufficient since an attacker who compromised an
account with the sa_role could reconfigure the configuration parameter so that
xp_cmdshell executes commands under the user context that the database server itself is
running as.

By default, execution of the xp_cmdshell ESP is restricted to users with the sa_role. It is
recommended that it is removed, along with the other operating system related ESPs;
xp_freedll, xp_logevent (Windows only) and xp_enumgroups (Windows only).

Furthermore the library that houses each of these ESPs, sybsyesp.dll (Windows) or
sybsyesp.so (Unix), should be deleted from the file system to prevent them from being
recreated by an attacker.

Rationale:

The xp_cmdshell ESP provides a clear path for privilege escalation from the database to the
operating system. An attacker could use this functionality in conjunction with a SQL
injection attack to gain a foothold on the database host using it as a launch pad to
compromise other systems. If this ESP is not used, it is prudent to therefore remove it."
  solution    : "1. Connect to the ASE server with a user that has the sa_role and execute the
following statements:

exec sp_dropextendedproc 'xp_cmdshell'

exec sp_dropextendedproc 'xp_freedll'

In addition, the following statements should be executed on Windows systems:

exec sp_dropextendedproc 'xp_logevent'

exec sp_dropextendedproc 'xp_enumgroups'

If the above statements return Access is denied, stop the ASE server and repeat the
command.

2. On Windows systems, execute the following command from a command prompt to
delete sybsyesp.dll. It is prudent to keep a copy of the file offline in case it needs
the xp_cmdshell functionality needs to be restored.

del %SYBASE%\%SYBASE_ASE%\dll\sybsyesp.dll

On Unix systems, execute the following command from a command shell (assuming
the SYBASE environment variables have been set):

rm $SYBASE\$SYBASE_ASE\lib\sybsyesp.so

On Unix systems it may be necessary to stop and restart the ASE server for the
changes to take effect."
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "select name from sybsystemprocs.dbo.sysobjects where type='XP' and name='xp_cmdshell' or name='xp_freedll' or name='xp_logevent' or name='xp_enumgroups'"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "5.3.2 Remove mail related ESPs"
  info        : "On Windows systems, Sybase ASE installs a number of powerful ESPs that allow access to
email via the Adaptive Server inbox. These are xp_sendmail, xp_readmail, xp_deletemail,
xp_findnextmsg, xp_startmail and xp_stopmail.

By default, execution of these ESPs is restricted to users with the sa_role. It is
recommended they are removed as a defense in depth measure if they are not in use.
Furthermore the DLL that houses each of these ESPs, sybmail.dll, should be deleted from
the file system to prevent them from being recreated by an attacker.

Rationale:

The email ESPs provide an attacker with suitable privileges additional means of
communicating with other systems on the network and exfiltrating data. Given that ESPs
have previously had a number of associated security flaws it is prudent to remove those
that are not in use."
  solution    : "1. Connect to the ASE server with a user that has the sa_role and execute the
following query:

exec sp_dropextendedproc 'xp_sendmail'

exec sp_dropextendedproc 'xp_readmail'

exec sp_dropextendedproc 'xp_deletemail'

exec sp_dropextendedproc 'xp_findnextmsg'

exec sp_dropextendedproc 'xp_startmail'

exec sp_dropextendedproc 'xp_stopmail'

2. From a command prompt execute the following command to delete sybsyesp.dll:

del %SYBASE%\%SYBASE_ASE%\dll\sybmail.dll

3. If the above statement returns Access is denied, stop the ASE server and repeat the
command."
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/1612"
  sql_request : "select name from sybsystemprocs.dbo.sysobjects where type='XP' and name='xp_sendmail' or name='xp_readmail' or name='xp_deletemail' or name='xp_findnextmsg' or name='xp_startmail' or name='xp_stopmail'"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<report type:"WARNING">
  description : "6.2 Ensure the server is physically secure"
  info        : "The Sybase ASE server should be in located in a secure environment to prevent
unauthorized physical access to the machine.

Rationale:

It is generally accepted that physical access to a system results in its compromise even if
the attacker has been granted no privileges or permissions on the target system.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "1. Follow best practice recommendations for physical security and physical access
control."
  reference   : "LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/1612"
</report>

<report type:"WARNING">
  description : "6.8 Run a host and/or network-based packet firewall"
  info        : "Sybase ASE can be configured to listen on a variety of network transports. By default it will
listen on TCP and named pipes. Though the default TCP port is 5000, if there are multiple
server instances running on a single host, there will be multiple listening ports. Dynamic
listeners can also be set up via the sp_listener stored procedure.

It is recommended that a host and/or network-based firewall is configured to limit access
to the database server port. The default Windows firewall present on Windows XP and
above may be sufficient depending on your organizations requirements. Otherwise a
solution with greater configurability and auditing capabilities is recommended.

Rationale:

It represents security best practice to segregate hosts on the network by role. Furthermore
it is prudent to use firewalls, both to protect the database servers from the rest of the
network, and to protect the rest of the network from the database servers in the event of a
compromise.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "1. Run a host and/or network-based packet firewall to limit access to the database
server port based on IP address."
  reference   : "LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/1612"
</report>

</group_policy>
</check_type>
