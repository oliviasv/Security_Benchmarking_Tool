#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.0 $
# $Date: 2020/06/22 $
#
# Description : This document implements the security configuration as recommended by the
#               DISA Microsoft SQL Server Instance 2012 v1r20 STIG.
#
#<ui_metadata>
#<display_name>DISA STIG SQL Server 2012 DB Instance Security v1r20</display_name>
#<spec>
#  <type>DISA STIG</type>
#  <name>DISA STIG SQL Server 2012 Database Instance</name>
#  <version>1.20.0</version>
#  <link>https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip</link>
#</spec>
#<labels>database,disa,mssql,mssql_2012,instance</labels>
#<benchmark_refs>CAT,CCI,Rule-ID,STIG-ID,Vuln-ID,Group-ID</benchmark_refs>
#<variables>
#  <variable>
#    <name>TRACE_ID</name>
#    <default>1</default>
#    <description>Audit Trace ID</description>
#    <info>This is the ID of the trace which should include the required event IDs.</info>
#  </variable>
#  <variable>
#    <name>MAX_FILES</name>
#    <default>5</default>
#    <description>Max audit files</description>
#    <info>The amount of space determined for logging by SQL Server is calculated by multiplying the maximum number of files by the maximum file size.</info>
#  </variable>
#  <variable>
#    <name>MAX_SIZE</name>
#    <default>20</default>
#    <description>Max audit size</description>
#    <info>The amount of space determined for logging by SQL Server is calculated by multiplying the maximum number of files by the maximum file size.</info>
#  </variable>
#  <variable>
#    <name>SA_ACCT</name>
#    <default>sa</default>
#    <description>SA account name</description>
#    <info>The new name of the sa account after renaming per SQL2-00-017100.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Database" db_type:"SQLServer" version:"1">
<group_policy:"DISA STIG SQL Server 2012 Instance Database audit">

<report type:"WARNING">
  description : "DISA_STIG_MSSQL_2012_Instance-DB_v1r20.audit from DISA Microsoft SQL Server Instance 2012 v1r20 STIG"
  info        : "This STIG has been sunset by DISA and vendor support has ended."
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-000100 - The number of concurrent SQL Server sessions for each system account must be limited."
  info        : "A variety of technologies exist to limit or, in some cases, eliminate the effects of DoS attacks. For example, boundary protection devices can filter certain types of packets to protect devices on an organization's internal network from being directly affected by DoS attacks.

One way SQL Server can limit exposure to DoS attacks is to restrict the number of connections that can be opened by a single user. SQL Server supports this through the use of logon triggers.  (Note, however, that this need not be the only, or even the principal, means for satisfying this requirement.  Depending on the architecture and capabilities of the network and application, a network device or an application may be more suitable for providing this protection.)

When determining the appropriate values for this limit, take the characteristics of the various kinds of user into account, and bear in mind that some applications and some users may need to have multiple sessions open.  For example, while a standard account using a simple application may never need more than, say, five connections, a database administrator using SQL Server Management Studio may need significantly more, because each tab in that application counts as a distinct session.

Architectural note:  In SQL Server, a count of active sessions by user can be obtained from one of the dynamic management views.   For example:

	SELECT original_login_name, count(*)
	FROM sys.dm_exec_sessions
	WHERE is_user_process = 1
	GROUP BY original_login_name;

However, for this to return an accurate count in a logon trigger, the user would have to have the View Server State privilege.  (Without this privilege, the trigger sees information only about the current session, so would always return a count of one.)  View Server State would give that user access to a wide swath of information about the server, violating SQL2-00-004100.  One way to avoid this exposure is to create a summary table, and a view of that table that restricts each user to seeing his/her own count, and establish a frequently-run background job to refresh the table (using the above query or similar).  The logon trigger then queries the view to obtain a count that is accurate enough for most purposes.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Establish the limit(s) appropriate to the type(s) of user account accessing the SQL Server instance, and record them in the system documentation.

Implement one or more logon triggers to enforce the limit(s), without exposing the dynamic management views to general users."
  reference   : "CAT|II,CCI|CCI-000054,Rule-ID|SV-53793r4_rule,STIG-ID|SQL2-00-000100,Vuln-ID|V-41311"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 14'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 15'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 18'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 20'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 102'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 103'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 104'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 105'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 106'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 107'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 108'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 109'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 110'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 111'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 112'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 113'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 115'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 116'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 117'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 118'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 128'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 129'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 130'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 131'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 132'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 133'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 134'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 135'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 152'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 153'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 170'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 171'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 172'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 173'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 175'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 176'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 177'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001600 - SQL Server must ensure that remote sessions that access an organization-defined list of security functions and security-relevant information are audited - 'Event ID 178'"
  info        : "Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection. These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN). Neither of these internetworking mechanisms is private or secure, and they do not by default restrict access to networked resources once connectivity is established.

Numerous best practices are employed to protect remote connections, such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-002186,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53789r4_rule,STIG-ID|SQL2-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 14'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 15'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 18'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 20'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 102'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 103'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 104'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 105'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 106'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 107'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 108'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 109'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 110'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 111'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 112'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 113'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 115'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 116'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 117'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 118'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 128'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 129'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 130'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 131'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 132'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 133'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 134'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 135'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 152'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 153'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 170'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 171'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 172'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 173'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 175'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 176'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 177'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-001900 - SQL Server must automatically audit account modification - 'Event ID 178'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account.

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leverage complimentary technology providing this capability, or a combination thereof.

Automated account-auditing processes greatly reduce the risk that accounts will be surreptitiously modified, and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001403,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53788r4_rule,STIG-ID|SQL2-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41306"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-002200 - SQL Server must enforce non-DAC policies over users and resources where the policy rule set for each policy specifies access control information (i.e., position, nationality, age, project, time of day) - 'server permissions'"
  info        : "Non-DAC controls are determined by policy makers and are managed centrally or by a central authority. These controls must not be changed at the discretion of ordinary application users. Data protection requirements may result in a non-DAC policy being specified as part of the application design. Non-DACs are employed at the application level to restrict and control access to application data, thereby providing increased information security for the organization.

SQL Server Non-DAC is maintained through the use of Roles. Roles are set up within SQL Server to grant user accounts read and/or write permissions to system objects: databases, tables, columns, etc. After a role is created, user accounts can be assigned to a role granting them permissions of that role.

If users have permissions to database objects that they are not authorized to have, the user account that has access to the unauthorized database object must be removed from the role that grants that access. Policy rule sets would be developed to establish that each user receives only the information to which the user is authorized.

Frequently, roles grant access to multiple privileges; if a user is authorized and determined to need access to authorized privilege granted by a role, and unauthorized for other privileges of that same role, it may be necessary to split the privileges of one role into two roles."
  solution    : "Add the user as a member of the user-defined server role within the system documentation.

Remove the user from direct access to server permission by running the following script:
USE master
REVOKE <'server permission name'> TO <'account name'> CASCADE

Remove the user from user-defined role access by running the following script:
USE master
ALTER SERVER ROLE [<'server role name'>] DROP MEMBER <'user name'>"
  reference   : "800-171|3.1.1,800-171|3.1.4,800-53|AC-3(7),800-53|AC-5,CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),ISO/IEC-27001|A.6.1.2,ITSG-33|AC-5,NESA|T5.1.1,Rule-ID|SV-53786r4_rule,STIG-ID|SQL2-00-002200,SWIFT-CSCv1|5.1,Vuln-ID|V-41304"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pe.grantee_principal_id, pr.type AS 'Grantee_Type', pr.name AS 'Grantee_Name', pe.type, pe.permission_name, pe.state, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id JOIN sys.server_principals ps ON pe.grantor_principal_id = ps.principal_id LEFT JOIN sys.server_principals us ON us.principal_id = pe.major_id WHERE pr.type IN ('K', 'S', 'U') AND pe.grantee_principal_id > 10 AND NOT pr.name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##', 'NT AUTHORITY\NETWORK SERVICE', 'NT AUTHORITY\SYSTEM', 'NT SERVICE\MSSQLSERVER', 'NT SERVICE\SQLSERVERAGENT', 'NT SERVICE\SQLWriter', 'NT SERVICE\Winmgmt') AND NOT pe.permission_name = 'connect sql'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL,NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-002300 - SQL Server must enforce access control policies to restrict Alter server state permissions to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter server state' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Alter server state' permissions are granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter server state' permission access from the role that is not authorized by executing the following query:


REVOKE Alter server state TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53785r3_rule,STIG-ID|SQL2-00-002300,Vuln-ID|V-41303"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter server state' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-002400 - SQL Server must enforce access control policies to restrict the Alter any event session permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any event session' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any event session' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any event session' permission access from the role that is not authorized by executing the following query:


REVOKE Alter any event session TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53784r3_rule,STIG-ID|SQL2-00-002400,Vuln-ID|V-41302"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any event session' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-002500 - SQL Server must enforce access control policies to restrict the Alter any event notification permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any event notification' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any event notification' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE. Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission. If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any event notification' permission access from the role that is not authorized by executing the following query:

REVOKE Alter any event notification TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-74345r1_rule,STIG-ID|SQL2-00-002500,Vuln-ID|V-59915"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT who.name AS [Principal Name], who.type_desc AS [Principal Type], who.is_disabled AS [Principal Is Disabled], what.state_desc AS [Permission State], what.permission_name AS [Permission Name] FROM sys.server_permissions what INNER JOIN sys.server_principals who ON who.principal_id = what.grantee_principal_id WHERE what.permission_name = 'Alter any event notification' AND who.type_desc = 'SERVER_ROLE' ORDER BY who.name;"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-002600 - SQL Server must enforce access control policies to restrict the Alter any endpoint permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any endpoint' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any endpoint' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any endpoint' permission access from the role that is not authorized by executing the following query:


REVOKE Alter any endpoint TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53782r3_rule,STIG-ID|SQL2-00-002600,Vuln-ID|V-41300"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any endpoint' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-002700 - SQL Server must enforce access control policies to restrict the Alter any database permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any database' permission is a high server-level privilege that must only be granted to individual administration accounts through roles If the 'Alter any database' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any database' permission access from the role that is not authorized by executing the following query:


REVOKE Alter any database TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53781r3_rule,STIG-ID|SQL2-00-002700,Vuln-ID|V-41299"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any database' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-002800 - SQL Server must enforce access control policies to restrict the Alter any credential permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any credential' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any credential' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any credential' permission access from the role that is not authorized by executing the following query:


REVOKE Alter any credential TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53780r3_rule,STIG-ID|SQL2-00-002800,Vuln-ID|V-41298"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any credential' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-002900 - SQL Server must enforce access control policies to restrict the Alter any connection permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any connection' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any connection' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any connection' permission access from the role that is not authorized by executing the following query:


REVOKE Alter any connection  TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53779r3_rule,STIG-ID|SQL2-00-002900,Vuln-ID|V-41297"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any connection' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003000 - SQL Server must not grant users direct access to the View any definition permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'View any definition' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'View any definition' permission access from the account that has direct access by running the following script:


USE master

REVOKE VIEW ANY DEFINITION TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53778r5_rule,STIG-ID|SQL2-00-003000,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41296"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT who.name, who.type_desc, what.state_desc FROM sys.server_permissions what INNER JOIN sys.server_principals who ON who.principal_id = what.grantee_principal_id WHERE what.permission_name = 'View server state' AND who.name NOT LIKE '##MS%##' AND who.type_desc <> 'SERVER_ROLE' ORDER BY who.name;"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003100 - SQL Server must not grant users direct access to the Alter any server role permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any server role' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any server role' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY SERVER ROLE TO <'account name'>

GO"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53777r4_rule,STIG-ID|SQL2-00-003100,Vuln-ID|V-41295"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any server role' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003200 - SQL Server must not grant users direct access to the View server state permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'View server state' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Document any necessary exceptions, and obtain the appropriate approval.

Remove the 'View server state' permission access from an account that has direct access by running the following script:

USE master;
REVOKE VIEW SERVER STATE TO <'account name'>;
GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53776r6_rule,STIG-ID|SQL2-00-003200,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41294"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT who.name, who.type_desc, what.state_desc FROM sys.server_permissions what INNER JOIN sys.server_principals who ON who.principal_id = what.grantee_principal_id WHERE what.permission_name = 'View server state' AND who.name NOT LIKE '##MS%##' AND who.type_desc <> 'SERVER_ROLE' ORDER BY who.name;"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003300 - SQL Server must enforce access control policies to restrict the Create any database permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Create any database' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Create any database' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Create any database' permission access from the role that is not authorized by executing the following query:


REVOKE Create any database TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53775r4_rule,STIG-ID|SQL2-00-003300,Vuln-ID|V-41293"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create any database' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003400 - SQL Server must enforce access control policies to restrict the Authenticate server permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Authenticate server' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Authenticate server' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Authenticate server' permission access from the role that is not authorized by executing the following query:


REVOKE Authenticate server TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53774r4_rule,STIG-ID|SQL2-00-003400,Vuln-ID|V-41292"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Authenticate server' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003500 - SQL Server must enforce access control policies to restrict the Alter Settings permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter Settings' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Alter Settings' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter Settings' permission access from the role that is not authorized by executing the following query:


REVOKE Alter Settings TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53773r4_rule,STIG-ID|SQL2-00-003500,Vuln-ID|V-41291"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter Settings' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003600 - SQL Server must enforce access control policies to restrict the Alter any server role permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any server role' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any server role' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any server role' permission access from the role that is not authorized by executing the following query:


REVOKE Alter any server role TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53772r4_rule,STIG-ID|SQL2-00-003600,Vuln-ID|V-41290"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any server role' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003700 - SQL Server must not grant users direct access to the Create server role permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Create server role' permission is a high server-level privilege that must only be granted to individual administration accounts through roles.  This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'. These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Create server role' permission access from the account that has direct access by running the following script:


USE master

REVOKE CREATE SERVER ROLE TO <'account name'>

GO"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53771r4_rule,STIG-ID|SQL2-00-003700,Vuln-ID|V-41289"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create server role' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003800 - SQL Server must enforce access control policies to restrict the Control server permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Control server' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Control server' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Control server' permission access from the role that is not authorized by executing the following query:


REVOKE Control server TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53770r4_rule,STIG-ID|SQL2-00-003800,Vuln-ID|V-41288"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Control server' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-003900 - SQL Server must not grant users direct access to the Unsafe assembly permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Unsafe assembly' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Unsafe assembly' permission access from the account that has direct access by running the following script:


USE master

REVOKE UNSAFE ASSEMBLY TO <'account name'>

GO"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53769r4_rule,STIG-ID|SQL2-00-003900,Vuln-ID|V-41287"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Unsafe assembly' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004000 - SQL Server must enforce access control policies to restrict the Alter trace permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter trace' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Alter trace' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter trace' permission access from the role that is not authorized by executing the following query:


REVOKE Alter trace TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53768r4_rule,STIG-ID|SQL2-00-004000,Vuln-ID|V-41286"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter trace' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004100 - SQL Server must enforce access control policies to restrict the View server state permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'View server state' permission is a high server-level privilege that must only granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'View server state' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'View server state' permission access from the role that is not authorized by executing the following query:


REVOKE View server state TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53767r4_rule,STIG-ID|SQL2-00-004100,Vuln-ID|V-41285"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'View server state' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004200 - SQL Server must not grant users direct access control to the Shutdown permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Shutdown' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts. If administrative user accounts have direct access to administrative roles, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'. These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Shutdown' permission access from the account that has direct access by running the following script:


USE master

REVOKE SHUTDOWN TO <'account name'>

GO"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53766r4_rule,STIG-ID|SQL2-00-004200,Vuln-ID|V-41284"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Shutdown' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004300 - SQL Server must enforce access control policies to restrict the Alter any linked server permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any linked server' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any linked server' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any linked server' permission access from the role that is not authorized  by executing the following query:


REVOKE Alter any linked server TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53765r4_rule,STIG-ID|SQL2-00-004300,Vuln-ID|V-41283"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any linked server' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004500 - SQL Server must enforce access control policies to restrict the Alter any login permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any login' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any login' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any login' permission access from the role that is not authorized  by executing the following query:


REVOKE Alter any login TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53763r4_rule,STIG-ID|SQL2-00-004500,Vuln-ID|V-41281"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any login' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004600 - SQL Server must enforce access control policies to restrict the Alter any availability group permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any availability group' permission is a high server-level privilege that must only be granted to individual administration accounts through roles and users. If the 'Alter any availability group' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any availability group' permission access from the role that is not authorized  by executing the following query:


REVOKE Alter any availability group TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53762r4_rule,STIG-ID|SQL2-00-004600,Vuln-ID|V-41280"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any availability group' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004700 - SQL Server must not grant users direct access to the Alter any login permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any login' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any login' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY LOGIN TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53761r4_rule,STIG-ID|SQL2-00-004700,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41279"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any login' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004800 - SQL Server must not grant users direct access to the External access assembly permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'External access assembly' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'External access assembly' permission access from the account that has direct access by running the following script:


USE master

REVOKE EXTERNAL ACCESS ASSEMBLY TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53760r4_rule,STIG-ID|SQL2-00-004800,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41278"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'External access assembly' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004900 - SQL Server must not grant users direct access to the Alter resources permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter resources' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter resources' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER RESOURCES TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53759r4_rule,STIG-ID|SQL2-00-004900,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41277"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter resources' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005000 - SQL Server must not grant users direct access to the Create trace event notification permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Create trace event notification' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Create trace event notification' permission access from the account that has direct access by running the following script:


USE master

REVOKE CREATE TRACE EVENT NOTIFICATION TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53758r4_rule,STIG-ID|SQL2-00-005000,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41276"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create trace event notification' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005100 - SQL Server must not grant users direct access to the Alter Settings permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter Settings' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter Settings' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER SETTINGS TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53757r4_rule,STIG-ID|SQL2-00-005100,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41275"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter Settings' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005200 - SQL Server must not grant users direct access to the Alter trace permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter trace' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter trace' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER TRACE TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53756r4_rule,STIG-ID|SQL2-00-005200,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41274"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter trace' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005300 - SQL Server must not grant users direct control to the Alter any event session permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any event session' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any event session' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY EVENT SESSION TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53755r4_rule,STIG-ID|SQL2-00-005300,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41273"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any event session' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005500 - SQL Server must not grant users direct access to the Alter any linked server permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any linked server' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any linked server' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY LINKED SERVER TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53753r4_rule,STIG-ID|SQL2-00-005500,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41271"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any linked server' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005600 - SQL Server must enforce access control policies to restrict the Alter resources permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter resources' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Alter resources' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter resources' permission access from the role that is not authorized by executing the following query:


REVOKE Alter resources TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53752r4_rule,STIG-ID|SQL2-00-005600,Vuln-ID|V-41270"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter resources' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005700 - SQL Server must enforce access control policies to restrict the Administer bulk operations permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Administer bulk operations' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Administer bulk operations' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Administer bulk operations' permission access from the role that is not authorized by executing the following query:


REVOKE Administer bulk operations TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53751r4_rule,STIG-ID|SQL2-00-005700,Vuln-ID|V-41269"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Administer bulk operations' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005800 - SQL Server must not grant users direct access to the Control server permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Control server' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Control server' permission access from the account that has direct access by running the following script:


USE master

REVOKE CONTROL SERVER TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53750r4_rule,STIG-ID|SQL2-00-005800,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41268"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Control server'  AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-005900 - SQL Server must not grant users direct access to the Create any database permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Create any database' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Create any database'' permission access from the account that has direct access by running the following script:


USE master

REVOKE CREATE ANY DATABASE TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53749r4_rule,STIG-ID|SQL2-00-005900,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41267"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create any database' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006000 - SQL Server must not grant users direct access to the Create availability group permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Create availability group' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Create availability group' permission access from the account that has direct access by running the following script:


USE master

REVOKE CREATE AVAILABILITY GROUP TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53748r4_rule,STIG-ID|SQL2-00-006000,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41266"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create availability group' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006100 - SQL Server must not grant users direct access to the Create DDL event notification permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Create DDL event notification' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'. These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Create DDL event notification' permission access from the account that has direct access by running the following script:


USE master

REVOKE CREATE DDL EVENT NOTIFICATION TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53747r4_rule,STIG-ID|SQL2-00-006100,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41265"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create DDL event notification' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006200 - SQL Server must not grant users direct access to the Create endpoint permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Create endpoint' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Create endpoint' permission access from the account that has direct access by running the following script:


USE master

REVOKE CREATE ENDPOINT TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53746r4_rule,STIG-ID|SQL2-00-006200,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41264"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create endpoint' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006300 - SQL Server must not grant users direct access to the Administer bulk operations permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Administer bulk operations' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Administer bulk operations' permission access from the account that has direct access by running the following script:


USE master

REVOKE ADMINISTER BULK OPERATIONS TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53745r4_rule,STIG-ID|SQL2-00-006300,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41263"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Administer bulk operations' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006400 - SQL Server must not grant users direct access to the Authenticate server permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Authenticate Server' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Authenticate Server' permission access from the account that has direct access by running the following script:

USE master;
REVOKE AUTHENTICATE SERVER FROM <account name>;
GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53744r4_rule,STIG-ID|SQL2-00-006400,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41262"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Authenticate server' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006500 - SQL Server must enforce access control policies to restrict the View any definition permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'View any definition' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'View any definition' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'View any definition' permission access from the role that is not authorized by executing the following query:


REVOKE View any definition TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53743r4_rule,STIG-ID|SQL2-00-006500,Vuln-ID|V-41261"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'View any definition' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006600 - SQL Server must enforce access control policies to restrict the Alter any server audit permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations, or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Alter any server audit' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. If the 'Alter any server audit' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Alter any server audit' permission access from the role that is not authorized  by executing the following query:


REVOKE Alter any server audit TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53742r3_rule,STIG-ID|SQL2-00-006600,Vuln-ID|V-41260"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any server audit' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006700 - SQL Server must enforce access control policies to restrict the Create availability group permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Create availability group' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Create availability group' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Create availability group' permission access from the role that is not authorized by executing the following query:


REVOKE Create availability group TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53741r4_rule,STIG-ID|SQL2-00-006700,Vuln-ID|V-41259"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create availability group' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006800 - SQL Server must enforce access control policies to restrict the Create DDL event notification permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Create DDL event notification' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Create DDL event notification' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Create DDL event notification' permission access from the role that is not authorized by executing the following query:


REVOKE Create DDL event notification TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53740r4_rule,STIG-ID|SQL2-00-006800,Vuln-ID|V-41258"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create DDL event notification' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-006900 - SQL Server must enforce access control policies to restrict the Create endpoint permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Create endpoint' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Create endpoint' permissions are granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Create endpoint' permission access from the role that is not authorized by executing the following query:


REVOKE Create endpoint TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53739r4_rule,STIG-ID|SQL2-00-006900,Vuln-ID|V-41257"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create endpoint' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007000 - SQL Server must enforce access control policies to restrict the Create server role permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Create server role' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. , If the 'Create server role' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Create server role' permission access from the role that is not authorized by executing the following query:


REVOKE Create server role TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53738r4_rule,STIG-ID|SQL2-00-007000,Vuln-ID|V-41256"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create server role' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007100 - SQL Server must enforce access control policies to restrict the Create trace event notification permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Create trace event notification' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Create trace event notification' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Create trace event notification' permission access from the role that is not authorized by executing the following query:


REVOKE Create trace event notification TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53737r4_rule,STIG-ID|SQL2-00-007100,Vuln-ID|V-41255"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Create trace event notification' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007200 - SQL Server must enforce access control policies to restrict the External access assembly permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'External access assembly' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'External access assembly' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'External access assembly' permission access from the role that is not authorized by executing the following query:


REVOKE External access assembly TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53736r4_rule,STIG-ID|SQL2-00-007200,Vuln-ID|V-41254"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'External access assembly' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007300 - SQL Server must enforce access control policies to restrict the Shutdown permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Shutdown' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. , If the 'Shutdown' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the' 'Shutdown' permission access from the role that is not authorized by executing the following query:


REVOKE Shutdown TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53735r4_rule,STIG-ID|SQL2-00-007300,Vuln-ID|V-41253"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Shutdown' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007400 - SQL Server must not grant users direct access to the Alter any server audit permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any server audit' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any server audit' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY SERVER AUDIT TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53734r4_rule,STIG-ID|SQL2-00-007400,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41252"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any server audit' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007500 - SQL Server must enforce access control policies to restrict the View any database permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'View any database' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'View any database' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'View any database' permission access from the role that is not authorized by executing the following query:

REVOKE View any database TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53733r4_rule,STIG-ID|SQL2-00-007500,Vuln-ID|V-41251"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'View any database' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007600 - SQL Server must not grant users direct access to the Alter any event notification permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any event notification' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any event notification' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY EVENT NOTIFICATION TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53732r4_rule,STIG-ID|SQL2-00-007600,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41250"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any event notification' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007800 - SQL Server must not grant users direct access to the Alter server state permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter server state' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter server state' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER SERVER STATE TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53729r4_rule,STIG-ID|SQL2-00-007800,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41248"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter server state' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-007900 - SQL Server must not grant users direct access control to the Alter Any Availability Group permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any availability group' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts. If administrative user accounts have direct access to administrative roles, this access must be removed.

(The SQL Server installer gives this privilege to the system account 'NT AUTHORITY\SYSTEM', so this account is excluded from the Check.  See article KB2847723 in the Microsoft knowledge base.)

Note that this does not apply to logins with names of the form '##MS...##'. These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter Any Availability Group' permission access from the account that has direct access by using the following code.  Substitute the relevant names for the text in angle brackets.

-- For each login identified in the Check:
USE master;
REVOKE ALTER ANY AVAILABILITY GROUP FROM <login name>;
GO

-- If the necessary server role does not already exist,
-- and any user identified in the Check needs this permission:
USE master;
CREATE SERVER ROLE <role name> AUTHORIZATION <appropriate principal name>;
GO
GRANT ALTER ANY AVAILABILITY GROUP TO <role name>;
GO

-- For each user identified in the Check who needs this permission:
USE master;
ALTER SERVER ROLE <role name> ADD MEMBER <login name>;
GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53728r5_rule,STIG-ID|SQL2-00-007900,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41247"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any availability group' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008000 - SQL Server must not grant users direct access to the Alter any connection permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any connection' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'. These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any connection' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY CONNECTION TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53727r4_rule,STIG-ID|SQL2-00-008000,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41246"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any connection' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008100 - SQL Server must not grant users direct access to the Alter Any Credential permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any credential' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'.  These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any credential' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY CREDENTIAL TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53677r4_rule,STIG-ID|SQL2-00-008100,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41209"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any credential' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008200 - SQL Server must not grant users direct access to the Alter any database permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any database' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'. These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any database' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY DATABASE TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53675r4_rule,STIG-ID|SQL2-00-008200,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41208"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any database' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008300 - SQL Server must not grant users direct access to the Alter any endpoint permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'Alter any endpoint' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts. If administrative user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'. These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'Alter any endpoint' permission access from the account that has direct access by running the following script:


USE master

REVOKE ALTER ANY ENDPOINT TO <'account name'>

GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-003014,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53674r4_rule,STIG-ID|SQL2-00-008300,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41207"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Alter any endpoint' AND pr.name NOT LIKE '##MS%##'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008400 - SQL Server must enforce access control policies to restrict the Unsafe assembly permission to only authorized roles."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

SQL Server's 'Unsafe assembly' permission is a high server-level privilege that must only be granted to individual administration accounts through roles, and users who have access must require this privilege to accomplish the organizational missions and/or functions. If the 'Unsafe assembly' permission is granted to roles that are unauthorized to have this privilege, then this access must be removed.

Additionally, the permission must not be denied to a role, because that could disable a user's legitimate access via another role.

The fix for this vulnerability specifies the use of REVOKE.  Be aware that revoking a permission that is currently denied to a role or user does not necessarily disable the permission.  If the user or role can inherent the permission from another role, revoking the denied permission from the user or the first role can effectively enable the inherited permission."
  solution    : "Remove the 'Unsafe assembly' permission access from the role that is not authorized by executing the following query:


REVOKE Unsafe assembly TO <'role name'>"
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-003014,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53673r4_rule,STIG-ID|SQL2-00-008400,Vuln-ID|V-41206"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'Unsafe assembly' AND pr.type = 'R' AND (pe.state_desc = 'GRANT' OR pe.state_desc = 'GRANT_WITH_GRANT_OPTION' OR pe.state_desc = 'DENY')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008500 - SQL Server must enforce DAC policy allowing users to specify and control sharing by named individuals, groups of individuals, or by both; limiting propagation of access rights; and including or excluding access to the granularity of a single user - 'server permissions'"
  info        : "Access control policies (e.g., identity-based policies, role-based policies, attribute-based policies) and access enforcement mechanisms (e.g., access control lists, access control matrices, cryptography) are employed by organizations to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, domains).

DAC is a type of access control methodology serving as a means of restricting access to objects and data based on the identity of subjects and/or groups to which they belong. It is discretionary in the sense that application users with the appropriate permissions to access an application resource or data have the discretion to pass that permission on to another user either directly or indirectly.

Data protection requirements may result in a DAC policy being specified as part of the application design. Discretionary access controls would be employed at the application level to restrict and control access to application objects and data, thereby providing increased information security for the organization.

When DAC controls are employed, those controls must limit sharing to named application users, groups of users, or both. The application DAC controls must also limit the propagation of access rights and have the ability to exclude access to data down to the granularity of a single user.

Databases using DAC must have the ability for the owner of an object or information to assign or revoke rights to view or modify the object or information. If the owner of an object or information does not have rights to exclude access to an object or information at a user level, users may gain access to objects and information they are not authorized to view/modify."
  solution    : "Add the user-defined server role to the system documentation.

Add the user as a member of the user-defined server role within the system documentation.

Remove the user from direct access to server permission by running the following script:
USE master
REVOKE <'server permission name'> TO <'account name'> CASCADE

Remove the user from user-defined role access by running the following script:
USE master
ALTER SERVER ROLE [<'server role name'>] DROP MEMBER <'user name'>

Add the user-defined role access to the user by running the following script:
USE master
ALTER SERVER ROLE [<'server role name'>] ADD  MEMBER <'user name'>"
  reference   : "800-171|3.1.1,800-171|3.1.4,800-53|AC-3(7),800-53|AC-5,CAT|II,CCI|CCI-002165,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),ISO/IEC-27001|A.6.1.2,ITSG-33|AC-5,NESA|T5.1.1,Rule-ID|SV-53672r3_rule,STIG-ID|SQL2-00-008500,SWIFT-CSCv1|5.1,Vuln-ID|V-41205"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pe.grantee_principal_id, pr.type AS 'Grantee_Type', pr.name AS 'Grantee_Name', pe.type, pe.permission_name, pe.state, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id JOIN sys.server_principals ps ON pe.grantor_principal_id = ps.principal_id LEFT JOIN sys.server_principals us ON us.principal_id = pe.major_id WHERE pr.type IN ('K', 'S', 'U') AND pe.grantee_principal_id > 10 AND NOT pr.name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##', 'NT AUTHORITY\NETWORK SERVICE', 'NT AUTHORITY\SYSTEM', 'NT SERVICE\MSSQLSERVER', 'NT SERVICE\SQLSERVERAGENT', 'NT SERVICE\SQLWriter', 'NT SERVICE\Winmgmt')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL,NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008500 - SQL Server must enforce DAC policy allowing users to specify and control sharing by named individuals, groups of individuals, or by both; limiting propagation of access rights; and including or excluding access to the granularity of a single user - 'user defined roles'"
  info        : "Access control policies (e.g., identity-based policies, role-based policies, attribute-based policies) and access enforcement mechanisms (e.g., access control lists, access control matrices, cryptography) are employed by organizations to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, domains).

DAC is a type of access control methodology serving as a means of restricting access to objects and data based on the identity of subjects and/or groups to which they belong. It is discretionary in the sense that application users with the appropriate permissions to access an application resource or data have the discretion to pass that permission on to another user either directly or indirectly.

Data protection requirements may result in a DAC policy being specified as part of the application design. Discretionary access controls would be employed at the application level to restrict and control access to application objects and data, thereby providing increased information security for the organization.

When DAC controls are employed, those controls must limit sharing to named application users, groups of users, or both. The application DAC controls must also limit the propagation of access rights and have the ability to exclude access to data down to the granularity of a single user.

Databases using DAC must have the ability for the owner of an object or information to assign or revoke rights to view or modify the object or information. If the owner of an object or information does not have rights to exclude access to an object or information at a user level, users may gain access to objects and information they are not authorized to view/modify."
  solution    : "Add the user-defined server role to the system documentation.

Add the user as a member of the user-defined server role within the system documentation.

Remove the user from direct access to server permission by running the following script:
USE master
REVOKE <'server permission name'> TO <'account name'> CASCADE

Remove the user from user-defined role access by running the following script:
USE master
ALTER SERVER ROLE [<'server role name'>] DROP MEMBER <'user name'>

Add the user-defined role access to the user by running the following script:
USE master
ALTER SERVER ROLE [<'server role name'>] ADD  MEMBER <'user name'>"
  reference   : "800-171|3.1.1,800-171|3.1.4,800-53|AC-3(7),800-53|AC-5,CAT|II,CCI|CCI-002165,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),ISO/IEC-27001|A.6.1.2,ITSG-33|AC-5,NESA|T5.1.1,Rule-ID|SV-53672r3_rule,STIG-ID|SQL2-00-008500,SWIFT-CSCv1|5.1,Vuln-ID|V-41205"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pe.grantee_principal_id, pr.type AS 'Grantee_Type', pr.name AS 'Grantee_Name', pe.type, pe.permission_name, pe.state, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id JOIN sys.server_principals ps ON pe.grantor_principal_id = ps.principal_id LEFT JOIN sys.server_principals us ON us.principal_id = pe.major_id WHERE pr.type IN ('R') AND pe.grantee_principal_id > 10 AND NOT pr.name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##', 'NT AUTHORITY\NETWORK SERVICE', 'NT AUTHORITY\SYSTEM', 'NT SERVICE\MSSQLSERVER', 'NT SERVICE\SQLSERVERAGENT', 'NT SERVICE\SQLWriter', 'NT SERVICE\Winmgmt')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL,NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008800 - SQL Server must enforce separation of duties through assigned information access authorizations - 'server permissions'"
  info        : "Separation of duties is a prevalent Information Technology control that is implemented at different layers of the information system, including the operating system and in applications. It serves to eliminate or reduce the possibility that a single user may carry out a prohibited action. Separation of duties requires that the person accountable for approving an action is not the same person who is tasked with implementing or carrying out that action.

Additionally, the person or entity accountable for monitoring the activity must be separate as well. To meet this requirement, applications, when applicable, shall be divided where functionality is based on roles and duties. Examples of separation of duties include: (i) mission functions and distinct information system support functions are divided among different individuals/roles; (ii) different individuals perform information system support functions (e.g., system management, systems programming, configuration management, quality assurance and testing, network security); (iii) security personnel who administer access control functions do not administer audit functions; and (iv) different administrator accounts for different roles.

Privileges granted outside the role of the application user job function are more likely to go unmanaged or without oversight for authorization. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment."
  solution    : "Add the user-defined server role to the system documentation.

Add the assigned privileges of the user-defined server role to the system documentation.

Remove the user from direct access to server permission by running the following script:
USE master
REVOKE <'server permission name'> TO <'account name'> CASCADE

Remove server role permission from the user-defined server role by running the following script:
USE master
REVOKE <'server role name'> TO [<'server role name'>]"
  reference   : "800-171|3.1.1,800-171|3.1.4,800-53|AC-3(7),800-53|AC-5,CAT|II,CCI|CCI-000366,CCI|CCI-002220,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),ISO/IEC-27001|A.6.1.2,ITSG-33|AC-5,NESA|T5.1.1,Rule-ID|SV-53669r4_rule,STIG-ID|SQL2-00-008800,SWIFT-CSCv1|5.1,Vuln-ID|V-41202"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pe.grantee_principal_id, pr.type AS 'Grantee_Type', pr.name AS 'Grantee_Name', pe.type, pe.permission_name, pe.state, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id JOIN sys.server_principals ps ON pe.grantor_principal_id = ps.principal_id LEFT JOIN sys.server_principals us ON us.principal_id = pe.major_id WHERE pr.type IN ('K', 'S', 'U') AND pe.grantee_principal_id > 10 AND NOT pr.name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##', 'NT AUTHORITY\NETWORK SERVICE', 'NT AUTHORITY\SYSTEM', 'NT SERVICE\MSSQLSERVER', 'NT SERVICE\SQLSERVERAGENT', 'NT SERVICE\SQLWriter', 'NT SERVICE\Winmgmt')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL,NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-008800 - SQL Server must enforce separation of duties through assigned information access authorizations - 'user defined roles'"
  info        : "Separation of duties is a prevalent Information Technology control that is implemented at different layers of the information system, including the operating system and in applications. It serves to eliminate or reduce the possibility that a single user may carry out a prohibited action. Separation of duties requires that the person accountable for approving an action is not the same person who is tasked with implementing or carrying out that action.

Additionally, the person or entity accountable for monitoring the activity must be separate as well. To meet this requirement, applications, when applicable, shall be divided where functionality is based on roles and duties. Examples of separation of duties include: (i) mission functions and distinct information system support functions are divided among different individuals/roles; (ii) different individuals perform information system support functions (e.g., system management, systems programming, configuration management, quality assurance and testing, network security); (iii) security personnel who administer access control functions do not administer audit functions; and (iv) different administrator accounts for different roles.

Privileges granted outside the role of the application user job function are more likely to go unmanaged or without oversight for authorization. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment."
  solution    : "Add the user-defined server role to the system documentation.

Add the assigned privileges of the user-defined server role to the system documentation.

Remove the user from direct access to server permission by running the following script:
USE master
REVOKE <'server permission name'> TO <'account name'> CASCADE

Remove server role permission from the user-defined server role by running the following script:
USE master
REVOKE <'server role name'> TO [<'server role name'>]"
  reference   : "800-171|3.1.1,800-171|3.1.4,800-53|AC-3(7),800-53|AC-5,CAT|II,CCI|CCI-000366,CCI|CCI-002220,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),ISO/IEC-27001|A.6.1.2,ITSG-33|AC-5,NESA|T5.1.1,Rule-ID|SV-53669r4_rule,STIG-ID|SQL2-00-008800,SWIFT-CSCv1|5.1,Vuln-ID|V-41202"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pe.grantee_principal_id, pr.type AS 'Grantee_Type', pr.name AS 'Grantee_Name', pe.type, pe.permission_name, pe.state, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id JOIN sys.server_principals ps ON pe.grantor_principal_id = ps.principal_id LEFT JOIN sys.server_principals us ON us.principal_id = pe.major_id WHERE pr.type IN ('R') AND pe.grantee_principal_id > 10 AND NOT pr.name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##', 'NT AUTHORITY\NETWORK SERVICE', 'NT AUTHORITY\SYSTEM', 'NT SERVICE\MSSQLSERVER', 'NT SERVICE\SQLSERVERAGENT', 'NT SERVICE\SQLWriter', 'NT SERVICE\Winmgmt')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL,NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-009000 - SQL Server must restrict access to sensitive information to authorized user roles."
  info        : "Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.

Unauthorized access to sensitive data may compromise the confidentiality of personnel privacy, threaten national security or compromise a variety of other sensitive operations. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user."
  solution    : "Add the user-defined server role to the system documentation.

Add the assigned privileges of the user-defined server role to the system documentation.

Remove the user from direct access to server permission by running the following script:
USE master
REVOKE <'server permission name'> TO <'account name'> CASCADE

Remove server role permission from the user-defined server role by running the following script:
USE master
REVOKE <'server role name'> TO [<'server role name'>]

Rename the user-defined role by running the following script:
USE master
ALTER SERVER ROLE [<'old role name'>] WITH NAME = [<'new role name'>]"
  reference   : "800-171|3.1.1,800-171|3.1.4,800-53|AC-3(7),800-53|AC-5,CAT|II,CCI|CCI-000366,CCI|CCI-002220,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),ISO/IEC-27001|A.6.1.2,ITSG-33|AC-5,NESA|T5.1.1,Rule-ID|SV-53421r2_rule,STIG-ID|SQL2-00-009000,SWIFT-CSCv1|5.1,Vuln-ID|V-41046"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pe.grantee_principal_id, pr.type AS 'Grantee_Type', pr.name AS 'Grantee_Name', pe.type, pe.permission_name, pe.state, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id JOIN sys.server_principals ps ON pe.grantor_principal_id = ps.principal_id LEFT JOIN sys.server_principals us ON us.principal_id = pe.major_id WHERE pr.type IN ('R') AND pe.grantee_principal_id > 10 AND NOT pr.name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##', 'NT AUTHORITY\NETWORK SERVICE', 'NT AUTHORITY\SYSTEM', 'NT SERVICE\MSSQLSERVER', 'NT SERVICE\SQLSERVERAGENT', 'NT SERVICE\SQLWriter', 'NT SERVICE\Winmgmt')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL,NULL,NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-009400 - SQL Server must restrict access to system tables, other configuration information, and metadata to DBAs and other authorized users."
  info        : "The principle of Least Privilege must be applied to the ability of users to access system tables, system management information, other configuration information, and metadata.  Unauthorized access to this data could result in unauthorized changes to database objects, access controls, or SQL Server configuration.  Only database administrators and other authorized users must be allowed such access.

To aid in tracking and administering such permissions, individual logins must not be directly granted permissions or built-in server roles.  Instead, user-defined server roles must be created, with the permissions and built-in server roles granted to them; the individual logins must be assigned to the appropriate user-defined server roles.

The built-in server role 'sysadmin' is a partial exception.  This cannot be granted to a user-defined role, only to a login account.  Most (not necessarily all) database administrators will need to be members of sysadmin.  Without this, most DBCC commands and the system stored procedures/functions listed below are unavailable.  The users who require such access must be documented and approved.

In addition, if the site uses backup-restore software that connects to SQL Server via the Virtual Device Interface (VDI), the account used by that software must have the sysadmin role.  (See Microsoft Knowledge Base article 2926557, http://support.microsoft.com/kb/2926557).  If this applies, it must be documented and approved.

Stored procedures/functions available only to the sysadmin role:
fn_yukonsecuritymodelrequired
sp_add_agent_parameter
sp_add_agent_profile
sp_adddatatype
sp_adddistributiondb
sp_adddistributor
sp_addqreader_agent
sp_addsubscriber
sp_addsubscriber_schedule
sp_addtabletocontents
sp_attachsubscription
sp_cdc_cleanup_change_table
sp_cdc_disable_db
sp_cdc_disable_table
sp_cdc_drop_job
sp_cdc_enable_db
sp_cdc_enable_table
sp_cdc_restoredb
sp_cdc_vupgrade
sp_certify_removable
sp_change_agent_parameter
sp_change_agent_profile
sp_change_subscription_properties
sp_change_users_login
sp_changedistpublisher
sp_changedistributiondb
sp_changedistributor_password
sp_changedistributor_property
sp_changemergesubscription
sp_changeqreader_agent
sp_changereplicationserverpasswords
sp_changesubscriptiondtsinfo
sp_checkinvalidivarticle
sp_copysubscription
sp_create_removable
sp_cycle_errorlog
sp_dbcmptlevel
sp_dbmmonitoraddmonitoring
sp_dbmmonitorchangealert
sp_dbmmonitordropalert
sp_dbmmonitordropmonitoring
sp_dbmmonitorhelpalert
sp_dbmmonitorhelpmonitoring
sp_dbmmonitorresults
sp_dbmmonitorupdate
sp_dbremove
sp_drop_agent_parameter
sp_drop_agent_profile
sp_dropdatatypemapping
sp_dropdistpublisher
sp_dropdistributiondb
sp_dropdistributor
sp_dropmergepullsubscription
sp_droppullsubscription
sp_dropsubscriber
sp_dsninfo
sp_enumdsn
sp_flush_commit_table_on_demand
sp_generate_agent_parameter
sp_get_distributor
sp_get_Oracle_publisher_metadata
sp_getagentparameterlist
sp_getdefaultdatatypemapping
sp_grant_publication_access
sp_help_agent_default
sp_help_agent_parameter
sp_help_agent_profile
sp_helpdistpublisher
sp_helpdistributor
sp_helpmergesubscription
sp_helpqreader_agent
sp_helpreplicationdboption
sp_identitycolumnforreplication
sp_IHValidateRowFilter
sp_IHXactSetJob
sp_link_publication
sp_monitor
sp_MSadd_distribution_agent
sp_MSadd_logreader_agent
sp_MSadd_merge_agent
sp_MSadd_snapshot_agent
sp_MSadd_subscriber_schedule
sp_MSadd_tracer_history
sp_MSadd_tracer_token
sp_MScdc_cleanup_job
sp_MScdc_db_ddl_event
sp_MScdc_ddl_event
sp_MSchange_distribution_agent_properties
sp_MSchange_logreader_agent_properties
sp_MSchange_merge_agent_properties
sp_MSchange_snapshot_agent_properties
sp_MSchangedynamicsnapshotjobatdistributor
sp_MSchangedynsnaplocationatdistributor
sp_MScheck_pull_access
sp_MScleanupmergepublisher_internal
sp_MSclear_dynamic_snapshot_location
sp_MScreate_dist_tables
sp_MSdbuserpriv
sp_MSdeletefoldercontents
sp_MSdrop_6x_replication_agent
sp_MSdrop_merge_agent
sp_MSdrop_snapshot_dirs
sp_MSdropmergedynamicsnapshotjob
sp_MSdynamicsnapshotjobexistsatdistributor
sp_MSenumallpublications
sp_MSfetchAdjustidentityrange
sp_MSfix_6x_tasks
sp_MSforce_drop_distribution_jobs
sp_MSget_agent_names
sp_MSget_jobstate
sp_MSget_oledbinfo
sp_MSget_publication_from_taskname
sp_MSgetdbversion
sp_MSgetmaxsnapshottimestamp
sp_MShelp_repl_agent
sp_MShelp_replication_status
sp_MShelp_snapshot_agent
sp_MShelpconflictpublications
sp_MShelpdynamicsnapshotjobatdistributor
sp_MShelplogreader_agent
sp_MShelpsnapshot_agent
sp_MShelptranconflictcounts
sp_MSinit_publication_access
sp_MSreinit_failed_subscriptions
sp_MSremoveoffloadparameter
sp_MSrepl_backup_complete
sp_MSrepl_backup_start
sp_MSrepl_createdatatypemappings
sp_MSrepl_dropdatatypemappings
sp_MSrepl_enumarticlecolumninfo
sp_MSrepl_enumpublications
sp_MSrepl_enumpublishertables
sp_MSrepl_enumsubscriptions
sp_MSrepl_enumtablecolumninfo
sp_MSrepl_getdistributorinfo
sp_MSrepl_startup_internal
sp_MSreplagentjobexists
sp_MSreplcheck_permission
sp_MSreplcheck_pull
sp_MSreplcheck_subscribe
sp_MSreplcheck_subscribe_withddladmin
sp_MSreplcopyscriptfile
sp_MSreplremoveuncdir
sp_MSsetalertinfo
sp_MSSetServerProperties
sp_MSsetupnosyncsubwithlsnatdist
sp_MSsetupnosyncsubwithlsnatdist_cleanup
sp_MSsetupnosyncsubwithlsnatdist_helper
sp_MSstartdistribution_agent
sp_MSstartmerge_agent
sp_MSstartsnapshot_agent
sp_MSstopdistribution_agent
sp_MSstopmerge_agent
sp_MSstopsnapshot_agent
sp_MSupdate_agenttype_default
sp_oledbinfo
sp_procoption
sp_removedbreplication
sp_removesrvreplication
sp_replication_agent_checkup
sp_replicationdboption
sp_resetstatus
sp_restoredbreplication
sp_SetAutoSAPasswordAndDisable
sp_setdefaultdatatypemapping
sp_updatestats
sp_validatelogins
sp_vupgrade_mergeobjects
sp_vupgrade_replication
sp_vupgrade_replsecurity_metadata
xp_repl_convert_encrypt_sysadmin_wrapper

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "If necessary memberships in the sysadmin role are not documented or not approved, document them and obtain approval.

If unnecessary memberships in the sysadmin role are documented, remove them from the documentation.

Remove all direct access permissions and unauthorized permissions as required using the below instructions:

In SQL Server Management Studio, Object Explorer, expand  <SQL Server instance> >> Security >> Logins >> Right-click <user account name> >> Properties >> User >> Securables.

Remove Securables permissions from user account.

Navigate from Securables to Server Roles.

Remove Server Roles permissions from user account.

Navigate from Server Roles to Users Mapping.

Remove direct permissions on db_accessadmin, db_backupoperator, db_datareader, db_datawriter, db_ddladmin, db_denydatareader, db_denydatawriter, db_owner, and db_securityadmin from user account."
  reference   : "CAT|II,CCI|CCI-000366,CCI|CCI-002220,Rule-ID|SV-53419r5_rule,STIG-ID|SQL2-00-009400,Vuln-ID|V-41044"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-009600 - Administrators must utilize a separate, distinct administrative account when performing administrative activities, accessing database security functions, or accessing security-relevant information within SQL Server."
  info        : "This requirement is intended to limit exposure due to operating from within a privileged account or role. The inclusion of role is intended to address those situations where an access control policy, such as Role-Based Access Control (RBAC), is being implemented and where a change of role provides the same degree of assurance in the change of access authorizations for both the user and all processes acting on behalf of the user as would be provided by a change between a privileged and non-privileged account.

To limit exposure when operating from within a privileged account or role, SQL Server does support organizational requirements that users of information system accounts, or roles, with access to an organization-defined list of security functions or security-relevant information, use non-privileged accounts, or roles, when accessing other (non-security) system functions.

When privileged activities are not separated from non-privileged activities, SQL Server could be subject to unauthorized changes of settings or data, which a standard user would not normally have access to outside of an authorized maintenance session. Often, administrator accounts have a unique prefix to help with identification. These accounts are located within SQL Server and may only provide access to one database instance or a limited number of database objects."
  solution    : "Remove DBA privileges and privileges to administer owned objects that are assigned to the administrator's non-DBA account.
Remove the permission access from the account that has direct access by running the following script:
USE master
REVOKE <'server privilege name'> TO <'account name'>
GO

Remove the user account from the role's Member list where the account is not authorized for specified permission by running the following script:
USE master
ALTER SERVER ROLE [<'server role name'>] DROP MEMBER <'user name'>
GO

Provide administrators with separate accounts for administration and regular accounts for non-administrator activity."
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-000366,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53418r2_rule,STIG-ID|SQL2-00-009600,Vuln-ID|V-41043"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT SP1.[name] AS 'Login', 'Role: ' + SP2.[name] COLLATE DATABASE_DEFAULT AS 'ServerPermission' FROM sys.server_principals SP1 JOIN sys.server_role_members SRM ON SP1.principal_id = SRM.member_principal_id JOIN sys.server_principals SP2 ON SRM.role_principal_id = SP2.principal_id UNION ALL SELECT SP.[name] AS 'Login' , SPerm.state_desc + ' ' + SPerm.permission_name COLLATE DATABASE_DEFAULT AS 'ServerPermission' FROM sys.server_principals SP JOIN sys.server_permissions SPerm ON SP.principal_id = SPerm.grantee_principal_id ORDER BY [Login], [ServerPermission]"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-009700 - All use of privileged accounts must be audited."
  info        : "This is intended to limit exposure, by making it possible to trace any unauthorized access to other data or functionality by a privileged user account or role that has permissions on security functions or security-relevant information.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-53417r5_rule,STIG-ID|SQL2-00-009700,Vuln-ID|V-41042"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-009710 - Owners of privileged accounts must use non-privileged accounts for non-administrative activities."
  info        : "Use of privileged accounts for non-administrative purposes puts data at risk of unintended or unauthorized loss, modification, or exposure. In particular, DBA accounts, if used for non-administration application development or application maintenance, can lead to excessive privileges where privileges are inherited by object owners. It may also lead to loss or compromise of application data where the elevated privileges bypass controls designed in and provided by applications.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Require that DBAs and other privileged users use non-privileged accounts for non-administrative activities."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-74287r1_rule,STIG-ID|SQL2-00-009710,Vuln-ID|V-59857"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-009800 - SQL Server DBA roles must not be assigned excessive or unauthorized privileges."
  info        : "This requirement is intended to limit exposure due to operating from within a privileged account or role. The inclusion of role is intended to address those situations where an access control policy, such as Role-Based Access Control (RBAC), is being implemented and where a change of role provides the same degree of assurance in the change of access authorizations for both the user and all processes acting on behalf of the user as would be provided by a change between a privileged and non-privileged account.

Audit of privileged activity may require physical separation, employing information systems on which the user does not have privileged access.

To limit exposure and provide forensic history of activity when operating from within a privileged account or role, SQL Server does support organizational requirements that users of information system accounts, or roles, with access to an organization-defined list of security functions or security-relevant information, use non-privileged accounts, or roles, when accessing other (non-security) system functions.

SQL Server provides access logging that ensures users who are granted a privileged role (or roles) have their privileged activity logged. DBAs, if assigned excessive privileges, could perform actions that endanger the information system or hide evidence of malicious activity.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Remove permissions from DBAs and other administrative users beyond those required for administrative functions.

Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User >> Securables.

Remove 'Securables' permissions from DBAs and other administrative users that are beyond what is required.

Navigate from 'Securables' to 'Server Roles'.

Remove 'Server Roles' permissions from DBAs and other administrative users that are beyond what is required.

Navigate from 'Server Roles' to 'Users mapped to the login'.

Remove 'Users mapped to the login' permissions from DBAs and other administrative users that are beyond what is required."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-53416r2_rule,STIG-ID|SQL2-00-009800,Vuln-ID|V-41041"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-010200 - SQL Server default account sa must have its name changed."
  info        : "SQL Server's 'sa' account has special privileges required to administer the database. The 'sa' account is a well-known SQL Server account name and is likely to be targeted by attackers, and is thus more prone to providing unauthorized access to the database.

Since the SQL Server 'sa' is administrative in nature, the compromise of a default account can have catastrophic consequences, including the complete loss of control over SQL Server. Since SQL Server needs for this account to exist and it should not be removed, one way to mitigate this risk is to change the 'sa' account name."
  solution    : "Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> click 'sa' account name.

Hit <F2> while the name is highlighted in order to edit the name.

Rename the 'sa' account."
  reference   : "800-171|3.5.2,800-53|IA-5,CAT|III,CCI|CCI-000366,CSF|PR.AC-1,ITSG-33|IA-5,NESA|T5.2.3,Rule-ID|SV-53412r2_rule,STIG-ID|SQL2-00-010200,Vuln-ID|V-41037"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name AS 'Account Name' FROM sys.sql_logins WHERE name = 'sa'"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-010400 - SQL Server auditing configuration maximum file size must be configured to reduce the likelihood of storage capacity being exceeded, while meeting organization-defined auditing requirements - 'max_files'"
  info        : "Configure SQL Server during the installation and/or configuration process to determine if adequate storage capacity has been allocated for audit logs.

If SQL Server audit logs that are being generated exceed the amount of space reserved for those logs, the system may shutdown or take other measures to stop processing in order to protect transactions from continuing unlogged.

After the initial setup of SQL Server audit log configuration, it is best to check the available space until the maximum number of files has been reached. SQL will overwrite the oldest files when the max_files parameter has been exceeded. Care must be taken to ensure that this does not happen, or data will be lost. Therefore, the combination of max_size and max_files must be monitored to ensure that overwriting does not occur. This must also coincide with the backup process of off-loading the files."
  solution    : "Configure the maximum file size of each audit log file that is to be generated, staying within the file size the system was sized to support. Modify the audit in question to be placed on drives with adequate space or reconfigure to ensure the audit will not fill the space allocated."
  reference   : "800-53|AU-4,CAT|II,CCI|CCI-001849,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,NESA|T3.3.1,NESA|T3.6.2,Rule-ID|SV-53400r2_rule,STIG-ID|SQL2-00-010400,Vuln-ID|V-41025"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "Select path,CAST(max_files as int) as max_files from sys.traces"
  sql_types   : POLICY_VARCHAR,POLICY_INTEGER
# Note: Variable @MAX_FILES@ replaced with "5" in field "sql_expect".
  sql_expect  : regex:".+",5
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-010400 - SQL Server auditing configuration maximum file size must be configured to reduce the likelihood of storage capacity being exceeded, while meeting organization-defined auditing requirements - 'max_size'"
  info        : "Configure SQL Server during the installation and/or configuration process to determine if adequate storage capacity has been allocated for audit logs.

If SQL Server audit logs that are being generated exceed the amount of space reserved for those logs, the system may shutdown or take other measures to stop processing in order to protect transactions from continuing unlogged.

After the initial setup of SQL Server audit log configuration, it is best to check the available space until the maximum number of files has been reached. SQL will overwrite the oldest files when the max_files parameter has been exceeded. Care must be taken to ensure that this does not happen, or data will be lost. Therefore, the combination of max_size and max_files must be monitored to ensure that overwriting does not occur. This must also coincide with the backup process of off-loading the files."
  solution    : "Configure the maximum file size of each audit log file that is to be generated, staying within the file size the system was sized to support. Modify the audit in question to be placed on drives with adequate space or reconfigure to ensure the audit will not fill the space allocated."
  reference   : "800-53|AU-4,CAT|II,CCI|CCI-001849,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,NESA|T3.3.1,NESA|T3.6.2,Rule-ID|SV-53400r2_rule,STIG-ID|SQL2-00-010400,Vuln-ID|V-41025"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "Select path,CAST(max_size as int) as max_size from sys.traces"
  sql_types   : POLICY_VARCHAR,POLICY_INTEGER
# Note: Variable @MAX_SIZE@ replaced with "20" in field "sql_expect".
  sql_expect  : regex:".+",20
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-010500 - SQL Server auditing configuration maximum number of files must be configured to reduce the likelihood of storage capacity being exceeded, while meeting organization-defined auditing requirements - 'max_files'"
  info        : "Configure SQL Server during the installation and/or configuration process to determine if adequate storage capacity has been allocated for audit logs.

If SQL Server audit logs that are being generated exceed the amount of space reserved for those logs, the system may shutdown or take other measures to stop processing in order to protect transactions from continuing unlogged.

After the initial setup of SQL Server audit log configuration, it is best to check the available space frequently until the maximum number of files has been reached. Checking the available space can help determine the balance of online audit data with space required."
  solution    : "Configure the maximum number of audit log files that are to be generated, staying within the number of logs the system was sized to support.

Update the max_files parameter of the audits to ensure the correct number of files is defined."
  reference   : "800-53|AU-4,CAT|II,CCI|CCI-001849,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,NESA|T3.3.1,NESA|T3.6.2,Rule-ID|SV-53399r2_rule,STIG-ID|SQL2-00-010500,Vuln-ID|V-41024"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "Select path,CAST(max_files as int) as max_files from sys.traces"
  sql_types   : POLICY_VARCHAR,POLICY_INTEGER
# Note: Variable @MAX_FILES@ replaced with "5" in field "sql_expect".
  sql_expect  : ".+",5
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-010500 - SQL Server auditing configuration maximum number of files must be configured to reduce the likelihood of storage capacity being exceeded, while meeting organization-defined auditing requirements - 'max_size'"
  info        : "Configure SQL Server during the installation and/or configuration process to determine if adequate storage capacity has been allocated for audit logs.

If SQL Server audit logs that are being generated exceed the amount of space reserved for those logs, the system may shutdown or take other measures to stop processing in order to protect transactions from continuing unlogged.

After the initial setup of SQL Server audit log configuration, it is best to check the available space frequently until the maximum number of files has been reached. Checking the available space can help determine the balance of online audit data with space required."
  solution    : "Configure the maximum number of audit log files that are to be generated, staying within the number of logs the system was sized to support.

Update the max_files parameter of the audits to ensure the correct number of files is defined."
  reference   : "800-53|AU-4,CAT|II,CCI|CCI-001849,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,NESA|T3.3.1,NESA|T3.6.2,Rule-ID|SV-53399r2_rule,STIG-ID|SQL2-00-010500,Vuln-ID|V-41024"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "Select path,CAST(max_size as int) as max_size from sys.traces"
  sql_types   : POLICY_VARCHAR,POLICY_INTEGER
# Note: Variable @MAX_SIZE@ replaced with "20" in field "sql_expect".
  sql_expect  : ".+",20
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011000 - SQL Server utilizing Discretionary Access Control (DAC) must enforce a policy that limits propagation of access rights."
  info        : "Discretionary Access Control (DAC) is based on the premise that individual users are 'owners' of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write).

These DAC concepts extend to the server level.  Server instances have the potential for the access controls to propagate without limit, resulting in unauthorized access.

The DBMS must ensure the recipient of server permissions possesses only the access intended. The DBMS must enforce the ability to limit unauthorized rights propagation. If propagation is not prevented, users can continue to grant rights to other users without limit."
  solution    : "Document and obtain approval for each GRANT_WITH_GRANT_OPTION that is required.

Correct each unapproved GRANT_WITH_GRANT_OPTION with REVOKE and GRANT statements of the form (replacing 'ALTER ANY DATABASE' with the actual server permission at issue):

REVOKE ALTER ANY DATABASE FROM SampleLoginOrServerRole CASCADE;
GRANT ALTER ANY DATABASE TO SampleServerRole;  -- Note, no WITH GRANT OPTION clause here."
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-002165,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53671r4_rule,STIG-ID|SQL2-00-011000,Vuln-ID|V-41204"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pe.permission_name, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.state_desc = 'GRANT_WITH_GRANT_OPTION'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 14'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 15'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 18'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 20'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 102'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 103'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 104'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 105'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 106'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 107'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 108'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 109'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 110'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 111'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 112'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 113'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 115'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 116'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 117'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 118'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 128'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 129'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 130'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 131'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 132'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 133'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 134'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 135'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 152'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 153'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 170'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 171'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 172'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 173'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 175'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 176'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 177'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011400 - SQL Server must generate audit records for the DoD-selected list of auditable events - 'Event ID 178'"
  info        : "Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked).

Organizations may define the organizational personnel accountable for determining which application components shall provide auditable events.

Auditing provides accountability for changes made to the SQL Server configuration or its objects and data. It provides a means to discover suspicious activity and unauthorized changes. Without auditing, a compromise may go undetected and without a means to determine accountability."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53410r4_rule,STIG-ID|SQL2-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41035"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 14'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 15'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 18'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 20'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 102'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 103'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 104'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 105'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 106'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 107'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 108'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 109'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 110'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 111'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 112'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 113'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 115'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 116'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 117'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 118'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 128'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 129'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 130'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 131'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 132'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 133'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 134'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 135'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 152'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 153'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 170'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 171'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 172'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 173'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 175'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 176'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 177'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011800 - SQL Server must produce audit records containing sufficient information to establish what type of events occurred - 'Event ID 178'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the event type-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53408r4_rule,STIG-ID|SQL2-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41033"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 14'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 15'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 18'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 20'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 102'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 103'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 104'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 105'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 106'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 107'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 108'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 109'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 110'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 111'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 112'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 113'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 115'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 116'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 117'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 118'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 128'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 129'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 130'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 131'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 132'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 133'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 134'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 135'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 152'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 153'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 170'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 171'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 172'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 173'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 175'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 176'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 177'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011900 - SQL Server must produce audit records containing sufficient information to establish when (date and time) the events occurred - 'Event ID 178'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when actions were performed. This requires specific information regarding the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.

If auditing is enabled, SQL Server does capture the date and time-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53407r4_rule,STIG-ID|SQL2-00-011900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41032"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 14'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 15'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 18'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 20'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 102'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 103'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 104'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 105'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 106'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 107'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 108'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 109'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 110'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 111'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 112'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 113'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 115'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 116'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 117'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 118'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 128'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 129'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 130'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 131'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 132'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 133'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 134'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 135'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 152'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 153'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 170'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 171'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 172'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 173'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 175'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 176'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 177'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012000 - SQL Server must produce audit records containing sufficient information to establish where the events occurred - 'Event ID 178'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly where actions were performed. This requires specific information regarding the event location an audit record is referring to. If event location information is not recorded and stored with the audit record, the record itself is of very limited use.

An event location can be a database instance, table, column, row, etc. Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered. If auditing is enabled, SQL Server does capture the event location-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53406r4_rule,STIG-ID|SQL2-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41031"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 14'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 15'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 18'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 20'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 102'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 103'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 104'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 105'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 106'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 107'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 108'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 109'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 110'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 111'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 112'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 113'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 115'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 116'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 117'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 118'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 128'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 129'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 130'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 131'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 132'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 133'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 134'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 135'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 152'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 153'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 170'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 171'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 172'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 173'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 175'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 176'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 177'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012100 - SQL Server must produce audit records containing sufficient information to establish the sources (origins) of the events - 'Event ID 178'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed what actions. This requires specific information regarding the source of the event an audit record is referring to. If the source of the event information is not recorded and stored with the audit record, the record itself is of very limited use.

The source of the event can be a user account and sometimes a system account when timed jobs are run. Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable. If auditing is enabled, SQL Server does capture the source of the event-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53405r4_rule,STIG-ID|SQL2-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41030"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 14'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 15'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 18'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 20'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 102'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 103'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 104'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 105'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 106'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 107'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 108'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 109'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 110'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 111'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 112'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 113'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 115'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 116'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 117'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 118'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 128'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 129'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 130'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 131'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 132'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 133'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 134'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 135'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 152'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 153'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 170'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 171'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 172'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 173'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 175'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 176'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 177'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012200 - SQL Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events - 'Event ID 178'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes, but is not limited to:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know the outcome of attempted actions. This requires specific information regarding the outcome of the action or event that the audit record is referring to. If outcome status information is not recorded and stored with the audit record, the record itself is of very limited use.

Success and failure indicators ascertain the outcome of a particular event. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response. Without knowing the outcome of audit events, it is very difficult to accurately recreate the series of events during forensic analysis.

If auditing is enabled, SQL Server does capture the outcome status-specific information in all audit records."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53404r4_rule,STIG-ID|SQL2-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41029"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 14'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 15'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 18'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 20'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 102'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 103'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 104'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 105'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 106'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 107'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 108'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 109'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 110'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 111'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 112'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 113'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 115'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 116'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 117'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 118'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 128'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 129'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 130'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 131'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 132'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 133'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 134'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 135'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 152'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 153'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 170'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 171'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 172'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 173'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 175'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 176'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 177'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012300 - SQL Server must produce audit records containing sufficient information to establish the identity of any user/subject associated with the event - 'Event ID 178'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly who performed a given action. If user identification information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53403r4_rule,STIG-ID|SQL2-00-012300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41028"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 14'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 15'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 18'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 20'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 102'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 103'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 104'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 105'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 106'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 107'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 108'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 109'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 110'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 111'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 112'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 113'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 115'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 116'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 117'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 118'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 128'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 129'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 130'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 131'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 132'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 133'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 134'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 135'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 152'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 153'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 170'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 171'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 172'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 173'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 175'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 176'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 177'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012400 - SQL Server must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject - 'Event ID 178'"
  info        : "SQL Server auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

SQL Server does have a means available to add organizationally defined additional, more detailed information in the audit event records. These events may be identified by type, location, or subject. An example of more detailed information the organization may require in audit records could be the name of the application where the request is coming from.

Some organizations may determine that more detailed information is required for specific database event types. If this information is not available, it could negatively impact forensic investigations into user actions or other malicious events."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53402r4_rule,STIG-ID|SQL2-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41027"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-012600 - SQL Server itself, or the logging or alerting mechanism the application utilizes, must provide a warning when allocated audit record storage volume reaches an organization-defined percentage of maximum audit record storage capacity."
  info        : "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Audit processing failures include:  software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.

If audit log capacity were to be exceeded, then events subsequently occurring will not be recorded. Organizations shall define a maximum allowable percentage of storage capacity serving as an alarming threshold (e.g., application has exceeded 80% of log storage capacity allocated) at which time the application or the logging mechanism the application utilizes will provide a warning to the appropriate personnel.

A failure of database auditing will result in either the database continuing to function without auditing, or in a complete halt to database operations. When audit processing fails, appropriate personnel must be alerted immediately to avoid further downtime or unaudited transactions. This can be an alert provided by a log repository or the OS when a designated log directory is nearing capacity.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "From File Server Resource Manager:  Choose the From Server Selection, Select a server from the server pool, and select the server from the lower menu. Expand the File and Storage Services Role. Then Expand the File and iSCSI Services subtree. Select File Server Resource Manager. Click Add Features. Return to Add Roles and Features Wizard. Click Next. On the Features Tab, Click Next. Click Install to install and enable the FSRM.msc Microsoft Management Console Snap-in tool.
From a Command Prompt, open fsrm.msc. Enable File and Folder Quota Management.
Create Quotas for previously identified Audit storage locations based on organizationally defined requirements.

Right click the appropriate quota or quotas, and click Edit Quota Properties. From the Notification thresholds pane, create a Notification threshold for this Quota utilizing a generate email alert, or a generated Event Log entry."
  reference   : "CAT|III,CCI|CCI-001855,Rule-ID|SV-53398r2_rule,STIG-ID|SQL2-00-012600,Vuln-ID|V-41023"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-012800 - SQL Server must shutdown immediately in the event of an audit failure, unless an alternative audit capability exists."
  info        : "It is critical that, when SQL Server is at risk of failing to process audit logs as required, it takes action to mitigate the failure. If the system were to continue processing without auditing enabled, actions could be taken on the system that could not be tracked and recorded for later forensic analysis.

In many system configurations, the disk space allocated to the auditing system is separate from the disks allocated for the operating system; therefore, this may not result in a system outage. This places the onus on the DBMS to detect and take actions.

A failure of SQL Server auditing will result in either the database continuing to function without auditing, or the halting of SQL Server operations. In this case, the database must cease processing immediately in order to not allow unlogged transaction to occur.

Note that trace file rollover does not count as an audit failure, provided that the system is also configured to shut down when it runs out of space.  Trace file rollover can be a useful technique for breaking the log into manageable pieces, for archiving, or for transfer to a log management system."
  solution    : "If a trace does not exist, create a trace specification that complies with requirements.

If a trace exists, but is not set to SHUTDOWN_ON_ERROR, modify the SQL Server audit setting to immediately shutdown the database in the event of an audit failure by setting property 1 to a value of 4 or 6 for the audit.

(See the SQL Server Help page for sys.sp_trace_create for implementation details.)"
  reference   : "800-171|3.3.4,800-53|AU-5,CAT|II,CCI|CCI-001861,CN-L3|7.1.3.3(e),CSF|PR.PT-1,ITSG-33|AU-5,NESA|T3.6.2,Rule-ID|SV-53397r3_rule,STIG-ID|SQL2-00-012800,Vuln-ID|V-41022"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT value FROM sys.FN_TRACE_GETINFO('0') WHERE property = 1"
  sql_types   : POLICY_INTEGER
  sql_expect  : 4 || 6
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 14'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 15'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 18'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 20'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 102'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 103'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 104'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 105'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 106'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 107'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 108'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 109'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 110'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 111'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 112'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 113'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 115'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 116'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 117'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 118'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 128'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 129'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 130'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 131'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 132'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 133'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 134'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 135'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 152'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 153'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 170'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 171'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 172'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 173'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 175'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 176'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 177'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-013400 - SQL Server must audit attempts to bypass access controls - 'Event ID 178'"
  info        : "Information system auditing capability is critical for accurate forensic analysis. Audit record content which may be necessary to satisfy the requirement of this control includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Detection of suspicious activity, including access attempts and successful access from unexpected places, during unexpected times, or other unusual indicators, can support decisions to apply countermeasures to deter an attack. Without detection, malicious activity may proceed without hindrance. In SQL Server's case, this is a combination of the standard audit trace, as well as the operating system logs. Only the SQL Server logs are validated for this check, as the other part is dependent upon the operating system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000158,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53396r4_rule,STIG-ID|SQL2-00-013400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41021"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-015300 - SQL Server must monitor for security-relevant configuration settings to discover unauthorized changes."
  info        : "When dealing with change control issues, it should be noted, any changes to security-relevant configuration settings of SQL Server can potentially have significant effects on the overall security of the system.

If SQL Server were to allow any user to make changes to configuration settings, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process. This requirement is contingent upon the configuration of SQL Server's hosted application and the security-relevant configuration settings of SQL Server.

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to these security-relevant configuration settings for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to SQL Server software libraries or configuration can lead to unauthorized or compromised installations.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Document the monitoring of security-relevant configuration settings to discover unauthorized changes within the system documentation.

Document the specific users or types of security personnel that are able to monitor security-relevant configuration settings to discover unauthorized changes.

Deploy and implement a third-party tool or some other SQL Server method of monitoring security-relevant configuration settings to discover unauthorized changes."
  reference   : "CAT|II,CCI|CCI-001499,Rule-ID|SV-53303r2_rule,STIG-ID|SQL2-00-015300,Vuln-ID|V-40949"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-015700 - Vendor-supported software and patches must be evaluated and patched against newly found vulnerabilities."
  info        : "Security faults with software applications and operating systems are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.

Any time new software code is introduced to a system there is the potential for unintended consequences. There have been documented instances where the application of a patch has caused problems with system integrity or availability. Due to information system integrity and availability concerns, organizations must give careful consideration to the methodology used to carry out automatic updates.

If SQL Server were no longer supported, no patches from Microsoft would address newly discovered security vulnerabilities. Unpatched software is vulnerable to attack."
  solution    : "Upgrade SQL Server to the Microsoft-supported version.

Apply the latest SQL Server patches after evaluation of impact."
  reference   : "800-171|3.14.1,800-53|SI-2,CAT|I,CCI|CCI-001499,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,Rule-ID|SV-53299r4_rule,STIG-ID|SQL2-00-015700,SWIFT-CSCv1|2.2,Vuln-ID|V-40945"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT CONVERT(CHAR(13), SERVERPROPERTY('ProductVersion'))"
  sql_types   : POLICY_VARCHAR
  sql_expect  : regex: "^11\..+"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-016200 - SQL Server must have the publicly available NorthWind sample database removed."
  info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plug-ins not related to requirements and providing a wide array of functionality not required for every mission, but which cannot be disabled.

Applications must adhere to the principles of least functionality by providing only essential capabilities. Even though the very popular 'NorthWind' database is no longer available by default, it introduces a vulnerability to SQL Server and must be removed.

Demonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding specific functions and are not developed to prevent vulnerabilities from being introduced to the SQL Server and the OS."
  solution    : "Remove the publicly available 'Northwind' database from SQL Server by running the following query:


DROP DATABASE Northwind"
  reference   : "800-53|CM-4(1),CAT|II,CCI|CCI-000381,CSF|PR.DS-7,CSF|PR.IP-3,ISO/IEC-27001|A.12.1.4,ITSG-33|CM-4(1),Rule-ID|SV-53297r3_rule,STIG-ID|SQL2-00-016200,Vuln-ID|V-40943"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name FROM sysdatabases WHERE name LIKE 'Northwind%'"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-016300 - SQL Server must have the publicly available AdventureWorks sample database removed."
  info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plug-ins not related to requirements and providing a wide array of functionality not required for every mission, but which cannot be disabled.

Applications must adhere to the principles of least functionality by providing only essential capabilities. Even though the very popular 'AdventureWorks' database is no longer available by default, it introduces a vulnerability to SQL Server and must be removed.

Demonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding specific functions and are not developed to prevent vulnerabilities from being introduced to the SQL Server and the OS."
  solution    : "Remove the publicly available 'AdventureWorks' database from SQL Server by running the following query:

DROP DATABASE AdventureWorks"
  reference   : "800-53|CM-4(1),CAT|II,CCI|CCI-000381,CSF|PR.DS-7,CSF|PR.IP-3,ISO/IEC-27001|A.12.1.4,ITSG-33|CM-4(1),Rule-ID|SV-53296r3_rule,STIG-ID|SQL2-00-016300,Vuln-ID|V-40942"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name FROM sysdatabases WHERE name LIKE 'AdventureWorks%'"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-017000 - Unused database components that are integrated in SQL Server and cannot be uninstalled must be disabled."
  info        : "SQL Server is capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software demonstrations, or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, but which cannot be disabled.

Applications must adhere to the principles of least functionality by providing only essential capabilities.

Unused and unnecessary SQL Server components increase the number of available attack vectors to SQL Server by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced. Components of the system that are unused and cannot be uninstalled must be disabled.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "If any components or features of SQL Server are required for operation of applications that will be accessing SQL Server data or configuration, include them in the system documentation.

If any unused components or features of SQL Server are installed and cannot be uninstalled or removed, then disable those components or features."
  reference   : "CAT|II,CCI|CCI-000381,Rule-ID|SV-53291r3_rule,STIG-ID|SQL2-00-017000,Vuln-ID|V-40937"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-017100 - SQL Server default account sa must be disabled."
  info        : "SQL Server's 'sa' account has special privileges required to administer the database. The 'sa' account is a well-known SQL Server account and is likely to be targeted by attackers and thus more prone to providing unauthorized access to the database.

This 'sa' default account is administrative and could lead to catastrophic consequences, including the complete loss of control over SQL Server.

If the 'sa' default account is not disabled, an attacker might be able to gain access through the account. SQL Server by default, at installation, disables the 'sa' account.

Some applications that run on SQL Server require the 'sa' account to be enabled in order for the application to function properly. These applications that require the 'sa' account to be enabled are usually legacy systems."
  solution    : "Modify the enabled flag of SQL Server's 'sa' (sysadmin) account by running the following script.  If the account name has been changed per SQL2-00-010200, replace the letters 'sa' in the query with the new name.

USE master;
GO
ALTER LOGIN [sa] DISABLE;"
  reference   : "800-171|3.1.1,800-53|AC-2,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.2(d),CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,Rule-ID|SV-53290r3_rule,STIG-ID|SQL2-00-017100,Vuln-ID|V-40936"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name, CAST(is_disabled as int) FROM sys.sql_logins WHERE principal_id = 1;"
  sql_types   : POLICY_VARCHAR,POLICY_INTEGER
# Note: Variable @SA_ACCT@ replaced with "sa" in field "sql_expect".
  sql_expect  : 'sa',"1"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-017200 - Access to xp_cmdshell must be disabled."
  info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plug-ins not related to requirements; or providing a wide array of functionality not required for every mission, but which cannot be disabled.

Applications must adhere to the principles of least functionality by providing only essential capabilities.

DBMSs may spawn additional external processes to execute procedures that are defined in the DBMS, but stored in external host files (external procedures). The spawned process used to execute the external procedure may operate within a different OS security context than the DBMS and provide unauthorized access to the host system.

The xp_cmdshell extended stored procedure allows execution of host executables outside the controls of database access permissions. This access may be exploited by malicious users who have compromised the integrity of the SQL Server database process to control the host operating system to perpetrate additional malicious activity."
  solution    : "To disable the use of xp_cmdshell, from the query prompt:
EXEC sp_configure 'show advanced options', 1
GO

RECONFIGURE
GO

EXEC sp_configure 'xp_cmdshell', 0
GO

RECONFIGURE
GO"
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CAT|II,CCI|CCI-000381,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,Rule-ID|SV-53289r2_rule,STIG-ID|SQL2-00-017200,SWIFT-CSCv1|2.3,Vuln-ID|V-40935"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "EXEC SP_CONFIGURE 'show advanced option', '1'; RECONFIGURE WITH OVERRIDE; EXEC SP_CONFIGURE 'xp_cmdshell'; EXEC SP_CONFIGURE 'show advanced option', '0'; RECONFIGURE"
  sql_types   : POLICY_VARCHAR,POLICY_INTEGER,POLICY_INTEGER,POLICY_INTEGER,POLICY_INTEGER
  sql_expect  : "xp_cmdshell", regex: "[0-1]", regex: "[0-1]","0", regex: "[0-1]"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-017300 - SQL Server must specifically prohibit or restrict the use of unauthorized functions and services in each instance."
  info        : "SQL Server is capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

Additionally, it is sometimes convenient to provide multiple services from a single component of an information system (e.g., email and web services), but doing so increases risk over limiting the services provided by any one component."
  solution    : "To remove a function from SQL Server, run the following SQL Script:
DROP FUNCTION <'function name'>

To remove a Stored Procedure from SQL Server, run the following SQL Script:
DROP PROCEDURE <'stored procedure name'>

If the user-defined Stored Procedures and Functions need to remain available, but access needs to be more restricted, then the user-defined Stored Procedures and Functions should be moved to a separate schema or database that has more restrictive access."
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CAT|II,CCI|CCI-000382,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,Rule-ID|SV-53288r3_rule,STIG-ID|SQL2-00-017300,SWIFT-CSCv1|2.3,Vuln-ID|V-40934"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "EXEC sp_MSforeachdb 'SELECT ''?'' AS ''Table Name'', name, type_desc FROM [?].sys.objects WHERE type in (''FN'', ''P'') AND is_ms_shipped <> 1 '"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-017400 - SQL Server must support the organizational requirements to specifically prohibit or restrict the use of unauthorized functions, ports, protocols, and/or services."
  info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

Additionally, it is sometimes convenient to provide multiple services from a single component of an information system (e.g., email and web services) but doing so increases risk over limiting the services provided by any one component.

To support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.

Database Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and, through the database, to other components of the information system.

For detailed guidance on Ports, Protocols, and Services Management (PPSM), refer to the PPSM section of the Information Assurance Support Environment (IASE) web site, at http://iase.disa.mil/ppsm/Pages/index.aspx.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Disable functions, ports, protocols, and services that are not approved or are not used, but are enabled."
  reference   : "CAT|II,CCI|CCI-000382,Rule-ID|SV-53287r3_rule,STIG-ID|SQL2-00-017400,Vuln-ID|V-40933"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-017500 - SQL Server must recover to a known state that is verifiable."
  info        : "Application recovery and reconstitution constitutes executing an information system contingency plan comprising activities that restore essential missions and business functions.

SQL Server utilizes transaction-based processing and is a good example of information systems that are transaction-based. Transaction rollback and transaction journaling are examples of mechanisms supporting transaction recovery.

SQL Server may be vulnerable to use of compromised data or other critical files during recovery. Use of compromised files could introduce maliciously altered application code, relaxed security settings, or loss of data integrity. SQL Server mechanisms must be configured to protect all files that could compromise the system or its data during a SQL Server recovery."
  solution    : "Implement SQL Server recovery procedures to ensure the use of trusted files during SQL Server recovery.

Modify the parameters for the transaction log file(s) for the system databases:

Navigate to SQL Server Management Studio >> Object Explorer >> <SQL Server instance name> >> Databases >> System Databases >> right-click on <system database name> >> Properties >> Files.

OR

Modify the parameters for the transaction log file(s) for application databases:

Navigate to SQL Server Management Studio >> Object Explorer >> <SQL Server instance name> >> Databases >> right-click on <user-defined database name> >> Properties >> Files.

THEN

Define additional space for the transaction log file, or extra transaction log files, as necessary.

To modify Initial Size (MB), click in the 'Initial Size (MB)' field for the log file in question, then edit the value.

To modify Autogrowth, click on the 'Autogrowth/Maxsize' button for the log file in question, choose 'In Percent' or 'In Megabytes', enter value, and then click OK.

To modify Maximum File Size, click on the 'Autogrowth/Maxsize' button for the log file in question, choose 'Limited to (MB)', enter value, and then click OK. Do not select 'Unlimited'."
  reference   : "800-53|CP-10(2),CAT|I,CCI|CCI-000553,CSF|RC.RP-1,CSF|RS.RP-1,ITSG-33|CP-10(2),NESA|T2.2.4,Rule-ID|SV-53286r4_rule,STIG-ID|SQL2-00-017500,Vuln-ID|V-40932"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "EXEC sp_MSforeachdb 'SELECT ''?'' AS ''database name'', name AS ''log file name'', physical_name AS ''log file location and name'', size, max_size, growth, is_percent_growth FROM [?].sys.database_files WHERE type_desc = ''LOG'' AND state = 0'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_INTEGER,POLICY_INTEGER,POLICY_INTEGER,POLICY_INTEGER
  sql_expect  : NULL,NULL,NULL,NULL,NULL,NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-017700 - SQL Server user-level information must be backed up based on a defined frequency."
  info        : "SQL Server backups are a critical step in maintaining data assurance and availability.

User-level information is data generated by information system and/or application users. In order to assure availability of this data in the event of a system failure, DoD organizations are required to ensure user generated data is backed up at a defined frequency. This includes data stored on file systems, within SQL Server or within any other storage media.

Applications performing backups must be capable of backing up user-level information per the DoD defined frequency.

Databases that do not backup information regularly risk the loss of that information in the event of a system failure.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Deploy a backup solution to perform backups as per organizationally defined Backup Policy."
  reference   : "CAT|II,CCI|CCI-000535,Rule-ID|SV-53284r2_rule,STIG-ID|SQL2-00-017700,Vuln-ID|V-40930"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-017800 - SQL Server backup procedures must be defined, documented, and implemented."
  info        : "SQL Server backup is a critical step in maintaining data assurance and availability.

User-level information is data generated by the information system and/or application users. In order to assure availability of this data in the event of a system failure, DoD organizations are required to ensure user-generated data is backed up at a defined frequency. This includes data stored on file systems, within SQL Server or within any other storage media.

Applications performing backups must be configured to back up user-level information per the DoD-defined frequency.

SQL Server Database backups provide the required means to restore databases after compromise or loss. Backups help reduce the vulnerability to unauthorized access or hardware loss.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop, document, and implement database backup procedures."
  reference   : "CAT|II,CCI|CCI-000535,Rule-ID|SV-53283r2_rule,STIG-ID|SQL2-00-017800,Vuln-ID|V-40929"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-017900 - SQL Server recovery procedures that are documented must be implemented and periodically tested."
  info        : "SQL Server backups are a critical step in maintaining data assurance and availability.

User-level information is data generated by the information system and/or application users. In order to assure availability of this data in the event of a system failure, DoD organizations are required to ensure user-generated data is backed up at a defined frequency. This includes data stored on file systems, within SQL Server or within any other storage media.

Applications performing backups must be capable of backing up user-level information per the DoD-defined frequency.

Problems with backup procedures or backup media may not be discovered until after a recovery is needed. Testing and verification of procedures provides the opportunity to discover oversights, conflicts, or other issues in the backup procedures or use of media designed to be used.

Part of an overall backup and recovery methodology includes regular recovery testing. This is very important and helps to expose any issue in the recovery process (e.g., hardware, procedures, etc.).

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop or update recovery procedures and add the new recovery procedures to the system documentation.

Plan for and test system recovery procedures and document the test."
  reference   : "CAT|II,CCI|CCI-000535,Rule-ID|SV-53282r2_rule,STIG-ID|SQL2-00-017900,Vuln-ID|V-40928"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-018100 - SQL Server backup and restoration files must be protected from unauthorized access."
  info        : "SQL Server backups are a critical step in maintaining data assurance and availability.

User-level information is data generated by information system and/or application users. In order to assure availability of this data in the event of a system failure, DoD organizations are required to ensure user generated data is backed up at a defined frequency. This includes data stored on file systems, within databases or within any other storage media.

Applications performing backups must be capable of backing up user-level information per the DoD-defined frequency.

Lost or compromised SQL Server backup or restoration files may lead to not only the loss of data, but also the unauthorized access to sensitive data.

SQL Server can maintain local copies of critical control files to provide transparent or easy recovery from hard disk loss or other interruptions to database operation.

Backup files, both local to the SQL Server machine and not local to the machine, need the same protections against unauthorized access when stored on backup media as when online and actively in use by the database system. In addition, the backup media needs to be protected against physical loss.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop, document, and implement protection against unauthorized access of backup and restoration files.

Document personnel and the level of access authorized for each to the backup and restoration files in the system documentation."
  reference   : "CAT|II,CCI|CCI-000535,Rule-ID|SV-53281r2_rule,STIG-ID|SQL2-00-018100,Vuln-ID|V-40927"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-018200 - SQL Server backups of system-level information per organization-defined frequency must be performed that is consistent with recovery time and recovery point objectives."
  info        : "SQL Server backups are a critical step in maintaining data assurance and availability.

System-level information includes:  system-state information, operating system and application software, and licenses.

Backups shall be consistent with organizationally defined recovery time and recovery point objectives.

SQL Server depends upon the availability and integrity of its system-level information. Without backups, compromise or loss of system-level information can prevent a successful recovery of SQL Server operations. If SQL Server system-level information is not backed up regularly this risks the loss of SQL Server data in the event of a system failure.

A mixture of full and incrementally server level backups that backup the system-level information would satisfy this requirement.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Deploy a backup solution to perform backups as per organizationally defined Backup Policy."
  reference   : "CAT|II,CCI|CCI-000537,Rule-ID|SV-53280r2_rule,STIG-ID|SQL2-00-018200,Vuln-ID|V-40926"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-018300 - SQL Server software libraries must be periodically backed up."
  info        : "SQL Server backups are a critical step in maintaining data assurance and availability.

System-level information includes system-state information, operating system and application software, and licenses.

Backups shall be consistent with organization-defined recovery time and recovery point objectives.

SQL Server depends upon the availability and integrity of its software libraries. Without backups, compromise or loss of the software libraries can prevent a successful recovery of SQL Server operations.

A mixture of full and incremental server-level backups by a third-party tool that backs up those software library directories would satisfy this requirement.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Ensure inclusion of all SQL Server software libraries into the backup process."
  reference   : "CAT|II,CCI|CCI-000537,Rule-ID|SV-53279r2_rule,STIG-ID|SQL2-00-018300,Vuln-ID|V-40925"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-018400 - SQL Server must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users) - or processes acting on behalf of organizational users"
  info        : "To ensure accountability and prevent unauthorized SQL Server access, organizational users shall be identified and authenticated.

Organizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations).

Users (and any processes acting on behalf of users) are uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization, which outlines specific user actions that can be performed on SQL Server without identification or authentication."
  solution    : "Remove user-accessible shared accounts and use individual userids.

Build/configure applications to ensure successful individual authentication prior to shared account access.

Ensure each user's identity is received and used in audit data in all relevant circumstances."
  reference   : "800-171|3.5.1,800-53|IA-2,CAT|II,CCI|CCI-000764,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,ITSG-33|IA-2,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,Rule-ID|SV-53278r3_rule,STIG-ID|SQL2-00-018400,TBA-FIISB|35.1,TBA-FIISB|36.1,Vuln-ID|V-40924"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name AS 'Account Name', CASE is_disabled WHEN 1 THEN 'disabled' ELSE 'enabled' END AS 'Is Disabled', CONVERT(varchar(10), create_date, 20) AS 'Account Create Date', CONVERT(varchar(10), LOGINPROPERTY(name, 'PasswordLastSetTime'), 20) AS 'Password Last Set on' FROM sys.server_principals WHERE NOT TYPE IN ('C', 'R', 'U') -- ('C', 'G', 'K', 'R', 'S', 'U') AND NOT name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##') AND sid <> CONVERT(VARBINARY(85), 0x01) -- no 'sa' account ORDER BY name"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-018500 - SQL Server must ensure users are authenticated with an individual authenticator prior to using a shared authenticator."
  info        : "To ensure individual accountability and prevent unauthorized access, application users (and any processes acting on behalf of users) must be individually identified and authenticated.

A shared authenticator is a generic account used by multiple individuals. Use of a shared authenticator alone does not uniquely identify individual users. An example of a shared authenticator is the UNIX OS 'root' user account, a Windows 'administrator' account, an 'sa' account, or a 'helpdesk' account.

Legitimate use of shared accounts includes, for example, connection pooling.  Since this is insufficient to ensure non-repudiation, such shared accounts should be kept 'under the covers,' be inaccessible directly to end users, be invoked only after successful individual authentication, be communicated to the DBMS by the application, and be recorded in all relevant audit contexts.

(Shared accounts should not be confused with Windows groups, which are used in role-based access control.)"
  solution    : "Remove user-accessible shared accounts and use individual userids.

Build/configure applications to ensure successful individual authentication prior to shared account access.

Ensure each user's identity is received and used in audit data in all relevant circumstances."
  reference   : "800-171|3.5.1,800-53|IA-2,CAT|II,CCI|CCI-000770,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,ITSG-33|IA-2,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,Rule-ID|SV-53277r3_rule,STIG-ID|SQL2-00-018500,TBA-FIISB|35.1,TBA-FIISB|36.1,Vuln-ID|V-40923"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT uid, name, roles FROM sys.sysusers WHERE uid > 16000 AND name NOT IN ('db_owner', 'db_accessadmin', 'db_securityadmin', 'db_ddladmin', 'db_backupoperator', 'db_datareader', 'db_datawriter', 'db_denydatareader', 'db_denydatawriter')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-018600 - SQL Server must enforce password encryption for storage."
  info        : "SQL Server must enforce password encryption when storing passwords. Passwords need to be protected at all times, and encryption is the standard method for protecting passwords. If passwords are not encrypted, they can be plainly read and easily compromised.

Passwords stored in clear text are vulnerable to unauthorized disclosure. Database passwords should always be encoded or encrypted when stored internally or externally to SQL Server.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop, document, and maintain a list of SQL Server database objects, database configuration files, associated scripts, and applications defined within or external to SQL Server that access the database/user environment files/settings in the System Security Plan.

Record whether they do or do not contain SQL Server passwords. If passwords are present, ensure they are encrypted."
  reference   : "CAT|II,CCI|CCI-000196,Rule-ID|SV-53276r2_rule,STIG-ID|SQL2-00-018600,Vuln-ID|V-40922"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-018900 - SQL Server must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users) - or processes acting as non-organizational users."
  info        : "Non-organizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations).

Non-organizational users shall be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.

This may be accomplished by a code embedded within the userid, or via a flag or code columns in a table of users, or by some other means. In any case, the user must be individually identified to, and within, SQL Server via a mapping to an individual account and not mapping to a shared account.

Accordingly, a risk assessment is used in determining the authentication needs of the organization.

Scalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, and other organizations.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure SQL Server to uniquely identify and authenticate all non-organizational users who log onto the system. This likely would be done via a combination of the operating system with unique accounts and the SQL Server by ensuring mapping to individual accounts."
  reference   : "CAT|II,CCI|CCI-000804,Rule-ID|SV-53273r3_rule,STIG-ID|SQL2-00-018900,Vuln-ID|V-40919"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-019600 - SQL Server databases in the classified environment, containing classified or sensitive information, must be encrypted using approved cryptography."
  info        : "Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data.

Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.

Data files that are not encrypted are vulnerable to theft. When data files are not encrypted, they can be copied and opened on a separate system. The data can be compromised without the information owner's knowledge that the theft has even taken place.

NSA has developed Type 1 algorithms for protecting classified information. The Committee on National Security Systems (CNSS) National Information Assurance Glossary (CNSS Instruction No. 4009) defines Type 1 products as:
'Cryptographic equipment, assembly or component classified or certified by NSA for encrypting and decrypting classified and sensitive national security information when appropriately keyed.
Developed using established NSA business processes and containing NSA approved algorithms are used to protect systems requiring the most stringent protection mechanisms.'

NSA-approved cryptography is required to be used for classified information system processing.

See FIPS Publication 140-2 and related documents for guidance on approved encryption techniques and certified encryption modules.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure SQL Server to encrypt sensitive or classified data stored in each database. Use only NIST-certified or NSA-approved cryptography to provide encryption."
  reference   : "CAT|I,CCI|CCI-002450,Rule-ID|SV-53271r4_rule,STIG-ID|SQL2-00-019600,Vuln-ID|V-40917"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-019800 - SQL Server must employ NSA-approved cryptography to protect classified information."
  info        : "Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.

NSA has developed Type 1 algorithms for protecting classified information. The Committee on National Security Systems (CNSS) National Information Assurance Glossary (CNSS Instruction No. 4009) defines Type 1 products as:
'Cryptographic equipment, assembly or component classified or certified by NSA for encrypting and decrypting classified and sensitive national security information when appropriately keyed.
Developed using established NSA business processes and containing NSA approved algorithms are used to protect systems requiring the most stringent protection mechanisms.'

NSA-approved cryptography is required to be used for classified information system processing."
  solution    : "Document within the system documentation the type of information hosted on SQL Server: classified, sensitive, and/or unclassified.

Obtain and utilize native or third-party NIST-validated FIPS 140-2 compliant cryptography solution on SQL Server.

Configure cryptographic functions to use FIPS 140-2 compliant algorithms functions.

Use DoD certificates to create asymmetric keys stored in the database and used to encrypt sensitive data stored in the database.

Run the following SQL script to create a certificate:
USE <database name>
CREATE CERTIFICATE <certificate name>
   ENCRYPTION BY PASSWORD = '<password>'
   FROM FILE = '<path/file_name>'
   WITH SUBJECT = '<name of person creating key>',
   EXPIRY_DATE = '<expiration date: yyyymmdd>'

Run the following SQL script to create a symmetric key and assign an existing certificate:
USE <database name>
CREATE SYMMETRIC KEY <'key name'>
   WITH ALGORITHM = AES_256
   ENCRYPTION BY CERTIFICATE <certificate name>

Assign the application object owner account as the owner of asymmetric and symmetric keys, and certificates.  (Ownership is assigned via the AUTHORIZATION clause of the CREATE statement, or the ALTER AUTHORIZATION statement.)

Create audit events for access to the key by other than the application owner account or approved application objects.  (If using a server-level SQL Server Audit specification, DATABASE_OBJECT_PERMISSION_CHANGE_GROUP accomplishes this.)

Revoke any privileges on encryption keys assigned to principals other than the application object owner account and authorized users.

Protect the private key by encrypting it with the database or service master key.

For whole-database encryption (Transparent Data Encryption - TDE):
USE master;
CREATE MASTER KEY ENCRYPTION BY PASSWORD = '<password>';
CREATE CERTIFICATE <certificate name> . . .;
USE <database name>;
CREATE DATABASE ENCRYPTION KEY
WITH ALGORITHM = AES_256
ENCRYPTION BY SERVER CERTIFICATE <certificate name>;
ALTER DATABASE <database name>
SET ENCRYPTION ON;"
  reference   : "800-171|3.13.11,800-53|SC-13,CAT|II,CCI|CCI-002450,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-53272r6_rule,STIG-ID|SQL2-00-019800,Vuln-ID|V-40918"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "EXEC sp_MSforeachdb 'SELECT ''?'' AS ''database ?'', name, algorithm_desc FROM [?].sys.symmetric_keys WHERE key_algorithm NOT IN (''D3'',''A1'',''A2'',''A3'')'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-020000 - SQL Server must protect the integrity of publicly available information and SQL Servers configuration from unauthorized Securables access."
  info        : "The purpose of this control is to ensure organizations explicitly address the protection needs for public information and applications, with such protection likely being implemented as part of other security controls.

SQL Server must be configured to contain publicly available information. Though not concerned with confidentiality, SQL Server must maintain the integrity of the data. If data available to the public is not protected from unauthorized modification or deletion, then the data cannot be trusted by those accessing it. A publicly available user account must not have access to the OS or SQL Server configuration information, including read access to schema information. Determine what publicly available user account is being used to access SQL Server and validate that the publicly available user account only has read access to the public data and nothing else. This read-only access does not include SQL Server 'Securables' assignments.

SQL Server 'Securables' assignments grant the assignee privileges that are beyond read access to data. No public user account must have SQL Server 'Securables' privileges. Any assigned 'Securables' privileges to the public user account must be removed.

Likely the only 'Server roles' assignment for the publicly available user account would be 'public'. The only other 'Server roles' that could be authorized as read-only is a user-defined 'Server role'. It is more likely that read-only access is set up at the user database instance in role(s) specifically set up for this purpose. Assignment to the user database instances are made in the 'User Mapping' highlight within a user's properties.

This requirement is not intended to prevent the establishment of public-facing systems for the purpose of collecting data from the public.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'user account'> >> Properties >> Securables >> highlight 'Securable Name'.

Uncheck all 'Grant', 'With Grant', and 'Deny' for the highlighted 'Securable'."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-53270r3_rule,STIG-ID|SQL2-00-020000,Vuln-ID|V-40916"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-020200 - SQL Server must protect the integrity of publicly available information and SQL Servers configuration from unauthorized User Mapping access."
  info        : "The purpose of this control is to ensure organizations explicitly address the protection needs for public information and applications, with such protection likely being implemented as part of other security controls. If SQL Server contains publicly available information, though not concerned with confidentiality, SQL Server must maintain the integrity of the data. If data available to the public is not protected from unauthorized modification or deletion, then the data cannot be trusted by those accessing it.

The user account  associated with public access must not have access to the OS or SQL Server configuration information, include read access to schema information. This access includes, but is not limited to, SQL Server 'User Mapping' assignments.

SQL Server access to any of the three system databases (master, model, or msdb) is restricted from the publicly available user account, because this would grant more than read-only access to public information. Of the existing user-defined databases, privileges must be checked to allow only read access to publically available data.

This requirement is not intended to prevent the establishment of public-facing systems for the purpose of collecting data from the public.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'user account'> >> Properties >> User Mapping >> highlight checked database.

Uncheck the 'Database role membership' that is checked and grants more than read-only access to the publicly available information."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-53268r3_rule,STIG-ID|SQL2-00-020200,Vuln-ID|V-40914"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-020300 - SQL Server must protect the integrity of publicly available information and SQL Servers configuration from unauthorized Server Roles access."
  info        : "The purpose of this control is to ensure organizations explicitly address the protection needs for public information and applications, with such protection likely being implemented as part of other security controls. If SQL Server contains publicly available information, though not concerned with confidentiality, SQL Server must maintain the integrity of the data. If data available to the public is not protected from unauthorized modification or deletion, then the data cannot be trusted by those accessing it.

The user account associated with public access must not have access to the OS or SQL Server configuration information, include read access to schema information.

This requirement is not intended to prevent the establishment of public-facing systems for the purpose of collecting data from the public.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'user account'> >> Properties >> Server Roles.

Uncheck the 'Server Roles' that are checked and grant more than read-only access to the publicly available information."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-53267r3_rule,STIG-ID|SQL2-00-020300,Vuln-ID|V-40913"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-020400 - SQL Server must associate and maintain security labels when exchanging information between systems."
  info        : "When data is exchanged between information systems, the security attributes associated with said data need to be maintained.

Security attributes are an abstraction representing the basic properties or characteristics of an entity with respect to safeguarding information, typically associated with internal data structures (e.g., records, buffers, files) within the information system and used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

Security attributes may be explicitly or implicitly associated with the information contained within the information system.

If database security labels are not maintained as information moves between systems, handling instructions can be lost and data can be accidentally distributed to unauthorized individuals.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop SQL code or acquire a third party tool to perform data labeling. SQL Server Label Security Toolkit can be downloaded from http://www.codeplex.com. This tool can satisfy all data labeling and security data labeling requirements."
  reference   : "CAT|III,CCI|CCI-001157,Rule-ID|SV-53266r3_rule,STIG-ID|SQL2-00-020400,Vuln-ID|V-40912"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-021500 - SQL Server must isolate security functions from nonsecurity functions by means of separate security domains."
  info        : "Security functions are defined as 'the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based'.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.

Database Management Systems typically separate security functionality from nonsecurity functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and nonsecurity functionality is commingled, users who have access to nonsecurity functionality may be able to access security functionality."
  solution    : "Locate security-related database objects and code in a separate database, schema, or other separate security domain from database objects and code implementing application logic."
  reference   : "800-53|SC-3,CAT|II,CCI|CCI-001084,ITSG-33|SC-3,NESA|T3.4.1,NESA|T4.3.1,NESA|T4.3.2,Rule-ID|SV-53264r3_rule,STIG-ID|SQL2-00-021500,Vuln-ID|V-40910"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT Name FROM sys.databases WHERE database_id > 4 ORDER BY 1;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-022300 - SQL Server must limit the use of resources by priority and not impede the host from servicing processes designated as a higher priority."
  info        : "Priority protection helps prevent a lower-priority process from delaying or interfering with the information system servicing any higher-priority process. This control does not apply to components in the information system for which there is only a single user/role. The application must limit the use of resources by priority.

SQL Server often runs queries for multiple users at the same time. If lower priority processes are utilizing a disproportionately high amount of database resources, this can severely impact higher priority processes.

Even if SQL Server's utilization is very small and there may seem to be no need to priority protection, often resources grow exponentially and must be implemented as part of an initial deployment.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "SQL Server utilizes the 'Resource Governor' to determine who is allowed high processing resources. There are several configurations regarding the 'Resource Governor' that mostly comes down to users or groups of users having a 'MAX_CPU_PERCENT', 'MIN_CPU_PERCENT', 'MIN_MEMORY_PERCENT', and/or 'MAX_MEMORY_PERCENT' settings.

Users are assigned to Workgroups and the Workgroups are configured processing resources via the 'Resource Governor'."
  reference   : "CAT|III,CCI|CCI-002394,Rule-ID|SV-53263r2_rule,STIG-ID|SQL2-00-022300,Vuln-ID|V-40909"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-022400 - SQL Server must ensure, if Database Availability Groups are being used and there is a server failure, that none of the potential failover servers would suffer from resource exhaustion."
  info        : "SQL Server has a feature called 'Availability Group' which provides automatic failover from a primary SQL Server to a secondary server. This concept is not new, but because SQL Server does warn that if the secondary SQL Server is not dedicated 100% to being a backup server, that 'resource exhaustion' may be an issue if there is some load balancing going on.

If the primary SQL Server has a backup/secondary server that is dedicated 100% to the primary server's process, this is not a finding. If, however, the processing of the primary SQL Server is loaded to a secondary server that is already partly resourced to process something other than that of the primary SQL Server responsibility, then there can be load balancing issues.

Load balancing for the purpose of sharing a secondary/backup SQL Server is often done to share and save on resources.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Allocate replacement server(s) to provide failover support to the Primary SQL Server.

If a single solution cannot be employed, split the processing of a secondary SQL Server amongst two or more secondary servers."
  reference   : "CAT|II,CCI|CCI-002394,Rule-ID|SV-53262r3_rule,STIG-ID|SQL2-00-022400,Vuln-ID|V-40908"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-022600 - SQL Server must employ cryptographic mechanisms preventing the unauthorized disclosure of information during transmission."
  info        : "Preventing the disclosure of transmitted information requires that applications take measures to employ some form of cryptographic mechanism in order to protect the information during transmission. This is usually achieved through the use of Transport Layer Security (TLS), VPN, or IPSEC tunnel.

Information in transmission is particularly vulnerable to attack. If the DBMS does not employ cryptographic mechanisms preventing unauthorized disclosure of information during transit, the information may be compromised."
  solution    : "Deploy organization-approved encryption to the SQL Server network connections.

Where physical network devices are used for encryption, set them up such that:

1. The plaintext connection to the database server is afforded the highest protections, allowing no access to unauthorized or non-cleared personnel.
2. The encryption device is configured to pass traffic to only the specific IP addresses as identified by the database documentation.
3. The encryption keys utilized are current and valid keys.
4. The keys utilized meet approved organizationally defined compliant algorithms.

Where SQL Server network encryption is used, open SQL Server Configuration Manager.  Navigate to SQL Server Configuration Manager >> SQL Server Network Configuration. Right click on Protocols for [NAME OF INSTANCE], where [NAME OF INSTANCE] is a placeholder for the SQL Server instance name, and click on Properties.  On the Flags tab, set Force Encryption to YES, provide a DoD certificate on the Certificate tab."
  reference   : "800-171|3.13.8,800-53|SC-8(1),CAT|I,CCI|CCI-002421,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,Rule-ID|SV-53261r4_rule,STIG-ID|SQL2-00-022600,SWIFT-CSCv1|2.1,TBA-FIISB|29.1,Vuln-ID|V-40907"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT DISTINCT net_transport,encrypt_option FROM sys.dm_exec_connections WHERE encrypt_option = 'FALSE'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-022700 - SQL Server must identify potential security-relevant error conditions."
  info        : "The structure and content of SQL Server error messages need to be carefully considered by the organization and development team. The extent to which the application is able to identify and handle error conditions is guided by organizational policy and operational requirements.

Database logs can be monitored for specific security-related errors. Any error that can have a negative effect on database security should be quickly identified and forwarded to the appropriate personnel. If security-relevant error conditions are not identified by SQL Server they may be overlooked by the personnel responsible for addressing them.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Monitor SQL Server log files to determine when a security-related error occurs.

Add/Update list of appropriate personnel that are to be alerted when a security related error condition occurs to system documentation. Consider an automated job for both the monitor and the alerting."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-53260r2_rule,STIG-ID|SQL2-00-022700,Vuln-ID|V-40906"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-023000 - The system must activate an alarm and/or automatically shut SQL Server down if a failure is detected in its software components."
  info        : "Predictable failure prevention requires organizational planning to address system failure issues. If components key to maintaining system security fail to function, then SQL Server could continue operating in an unsecure state. The organization must be prepared, and the system must be configured, to send an alarm for such conditions and/or automatically shut SQL Server down.

If appropriate actions are not taken when component failures occur, a denial of service condition may occur. Appropriate actions can include conducting a graceful application shutdown to avoid losing information.

For the purposes of this requirement, 'component' may be interpreted as meaning any of the Windows services that comprise a SQL Server instance.  'The system' encompasses SQL Server itself, the Windows operating system, and any monitoring/management tools used to control the server.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure the system to activate an alarm and/or trigger a SQL Server shutdown when a component failure is detected."
  reference   : "CAT|II,CCI|CCI-001328,Rule-ID|SV-53259r5_rule,STIG-ID|SQL2-00-023000,Vuln-ID|V-40905"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 14'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 15'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 18'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 20'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 102'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 103'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 104'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 105'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 106'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 107'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 108'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 109'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 110'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 111'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023300 - SQL Server must notify appropriate individuals when accounts are modified - 'Event ID 130'"
  info        : "Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account for later use.

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exist. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001684,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53787r4_rule,STIG-ID|SQL2-00-023300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023600 - SQL Server must be configured to use Windows Integrated Security."
  info        : "SQL Server Authentication does not provide for many of the authentication requirements of the DoD. In some cases workarounds are present, but the authentication is not as robust and does not provide needed functionality. Without that functionality, SQL Server is vulnerable to authentication attacks. Consideration must be given to the placement of SQL server inside a forest to ensure evaluation of risk within the environment is considered. Risk includes introduction of risk to SQL Server from other applications or workstations as well as risk from introduction of SQL server itself into an established environment.

There may be situations where SQL Server Authentication must remain enabled, because of constraints imposed by a third-party application.  In such a case, document the constraint in the system security plan, and obtain signed approval."
  solution    : "From SQL Server Management Studio, right-click the server, and then click Properties.

Select the Security page. Under Server authentication, select Windows Authentication Mode, and then click OK."
  reference   : "800-171|3.5.1,800-53|IA-2,CAT|II,CCI|CCI-000366,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,ITSG-33|IA-2,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,Rule-ID|SV-53411r5_rule,STIG-ID|SQL2-00-023600,TBA-FIISB|35.1,TBA-FIISB|36.1,Vuln-ID|V-41036"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "EXEC XP_LOGINCONFIG 'login mode'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : "login mode", "Windows NT Authentication"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023700 - SQL Server must protect against an individual using a shared account from falsely denying having performed a particular action."
  info        : "Non-repudiation of actions taken is required in order to maintain application integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message.

Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document.

Use of shared accounts does not provide individual accountability for actions taken on the DBMS or data. Whenever a single database account is used to connect to the database, a secondary authentication method that provides individual accountability is required. This scenario most frequently occurs when an externally hosted application authenticates individual users to the application and the application uses a single account to retrieve or update database information on behalf of the individual users (as in connection pooling).

When shared accounts are utilized without another means of identifying individual users, users may deny having performed a particular action.

(Shared accounts should not be confused with Windows groups, which are used in role-based access control.)"
  solution    : "Remove user-accessible shared accounts and use individual userids.

Build/configure applications to ensure successful individual authentication prior to shared account access.

Ensure each user's identity is received and used in audit data in all relevant circumstances.

Design, develop, and implement a method to log use of any account to which more than one person has access. Restrict interactive access to shared accounts to the fewest persons possible."
  reference   : "800-53|AU-10,CAT|III,CCI|CCI-000166,CSF|PR.PT-1,ITSG-33|AU-10,NESA|T4.3.1,NESA|T7.3.3,Rule-ID|SV-53409r4_rule,STIG-ID|SQL2-00-023700,Vuln-ID|V-41034"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name,type_desc FROM sys.server_principals WHERE (type = 'S') OR (type = 'U')"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-024600 - Domain accounts used to manage a SQL Server platform must be different from those used to manage other platforms."
  info        : "Separate accounts used to manage the SQL Server platform help prevent a lateral move within an environment if SQL were to be compromised.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Set up and use separate domain accounts to manage the SQL Server platform.  These accounts must be different from those used to manage other platforms."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-55935r2_rule,STIG-ID|SQL2-00-024600,Vuln-ID|V-43196"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-004400 - SQL Server must not grant users direct access to the View Any Database permission."
  info        : "The concept of least privilege must be applied to SQL Server processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and SQL Server accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of SQL Server and the OS.

Unauthorized access to sensitive data or SQL Server control may compromise the confidentiality of personnel privacy, threaten national security, compromise a variety of other sensitive operations or lead to a loss of system control. Access controls are best managed by defining requirements based on distinct job functions and assigning access based on the job function assigned to the individual user.

Privileges granted outside of SQL Server's role-based account assignments are more likely to go unmanaged and without oversight of granted access. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server's 'View Any Database' permission is a high server-level privilege that must only be granted to individual administration accounts through roles. This administrative privilege must not be assigned directly to administrative user accounts (or any other user accounts). If any user accounts have direct access to administrative privileges, this access must be removed.

Note that this does not apply to logins with names of the form '##MS...##'. These accounts are internal-use system principals provisioned by the DBMS, and required by it for specific purposes."
  solution    : "Remove the 'View Any Database' permission access from the account that has direct access by running the following script:

USE master
REVOKE VIEW ANY DATABASE TO <'account name'>
GO"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-001499,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-70059r4_rule,STIG-ID|SQL2-00-004400,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-55805"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT pr.name, pr.type, pr.is_disabled, pe.state_desc FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_id WHERE pe.permission_name = 'View Any Database' AND pr.name NOT LIKE '##MS%##' AND pr.type_desc <> 'SERVER_ROLE'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-019601 - SQL Server databases in the unclassified environment, containing sensitive information, must be encrypted using approved cryptography."
  info        : "Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data.

Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.

Data files that are not encrypted are vulnerable to theft. When data files are not encrypted, they can be copied and opened on a separate system. The data can be compromised without the information owner's knowledge that the theft has even taken place.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure SQL Server to encrypt sensitive data stored in each database. Use only NIST-certified cryptography to provide encryption."
  reference   : "CAT|II,CCI|CCI-002450,Rule-ID|SV-68097r2_rule,STIG-ID|SQL2-00-019601,Vuln-ID|V-53877"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-038900 - If SQL Server authentication, using passwords, is employed, SQL Server must enforce the DoD standards for password complexity."
  info        : "Windows domain/enterprise authentication and identification must be used (SQL2-00-023600). Native SQL Server authentication may be used only when circumstances make it unavoidable; and must be documented and AO-approved.

The DoD standard for authentication is DoD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.

In such cases, the DoD standards for password complexity must be implemented.

The requirements for password complexity are:
a. minimum of 15 Characters, 1 of each of the following character sets:
- Upper-case
- Lower-case
- Numeric
- Special characters (e.g. ~ ! @ # $ % ^ & * ( ) _ + = - ' [ ] / ? > <)];
b. Minimum number of characters changed from previous password: 50% of the minimum password length (that is, 8).

To enforce this in SQL Server, configure each DBMS-managed login to inherit the rules from Windows.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "For each SQL Server Login identified in the Check as out of compliance:
In SQL Server Management Studio Object Explorer, navigate to <SQL Server instance name> >> Security >> Logins >> <login name>.  Right-click, select Properties.  Select the check box Enforce Password Policy.  Click OK.

Alternatively, for each identified Login, run the statement:
ALTER LOGIN <login name> CHECK_POLICY = ON;"
  reference   : "800-171|3.5.7,800-53|IA-5(1),CAT|II,CCI|CCI-000192,CCI|CCI-000193,CCI|CCI-000194,CCI|CCI-000195,CCI|CCI-000205,CCI|CCI-001619,CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,Rule-ID|SV-87037r1_rule,STIG-ID|SQL2-00-038900,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4,Vuln-ID|V-72413"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name FROM sys.sql_logins WHERE type_desc = 'SQL_LOGIN' AND is_disabled = 0 AND is_policy_checked = 0;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "ManualReviewRequired"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-038910 - If SQL Server authentication, using passwords, is employed, SQL Server must enforce the DoD standards for password lifetime."
  info        : "Windows domain/enterprise authentication and identification must be used (SQL2-00-023600). Native SQL Server authentication may be used only when circumstances make it unavoidable; and must be documented and AO-approved.

The DoD standard for authentication is DoD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.

In such cases, the DoD standards for password lifetime must be implemented.

The requirements for password lifetime are:
a. Password lifetime limits for interactive accounts:  Minimum 24 hours, Maximum 60 days
b. Password lifetime limits for non-interactive accounts:  Minimum 24 hours, Maximum 365 days
c. Number of password changes before an old one may be reused:  Minimum of 5.

To enforce this in SQL Server, configure each DBMS-managed login to inherit the rules from Windows."
  solution    : "For each SQL Server Login identified in the Check as out of compliance:
In SQL Server Management Studio Object Explorer, navigate to <SQL Server instance name> >> Security >> Logins >> <login name>. Right-click, select Properties. Select the check box Enforce Password Expiration. Click OK.

Alternatively, for each identified Login, run the statement:
ALTER LOGIN <login name> CHECK_EXPIRATION = ON;"
  reference   : "800-53|IA-5(1),CAT|II,CCI|CCI-000198,CCI|CCI-000199,CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),NESA|T5.2.3,NIAv2|AM20,NIAv2|AM21,PCI-DSSv3.1|8.2.4,PCI-DSSv3.2|8.2.4,Rule-ID|SV-87039r2_rule,STIG-ID|SQL2-00-038910,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.2,Vuln-ID|V-72415"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name FROM sys.sql_logins WHERE type_desc = 'SQL_LOGIN' AND is_disabled = 0 AND is_expiration_checked = 0;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-024500 - The Service Master Key must be backed up, stored offline and off-site."
  info        : "Backup and recovery of the Service Master Key may be critical to the complete recovery of the database. Not having this key can lead to loss of data during recovery.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Document and implement procedures to safely back up and store the Service Master Key. Include in the procedures methods to establish evidence of backup and storage, and careful, restricted access and restoration of the Service Master Key. Also, include provisions to store the key off-site.
BACKUP SERVICE MASTER KEY TO FILE = 'path_to_file'
ENCRYPTION BY PASSWORD = 'password'"
  reference   : "CAT|II,CCI|CCI-001199,Rule-ID|SV-53948r3_rule,STIG-ID|SQL2-00-024500,Vuln-ID|V-41419"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

</group_policy>
</check_type>
