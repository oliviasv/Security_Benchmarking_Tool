#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.0 $
# $Date: 2020/08/24 $
#
# Description : This document implements the security configuration as recommended by the
#               DISA PostgreSQL 9.x v1r7 STIG.
#
#<ui_metadata>
#<display_name>DISA STIG PostgreSQL 9.x on RHEL DB v1r7</display_name>
#<spec>
#  <type>DISA STIG</type>
#  <name>PostgreSQL 9.x on RHEL</name>
#  <version>1.7.0</version>
#  <link>https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip</link>
#</spec>
#<labels>database,disa,postgresql</labels>
#<benchmark_refs>CAT,CCI,Rule-ID,STIG-ID,Vuln-ID,Group-ID</benchmark_refs>
#<variables>
#  <variable>
#    <name>PG_CONF</name>
#    <default>/etc/postgresql/9.5/main</default>
#    <description>PostgreSQL configuration directory</description>
#    <info>Location of the PostgreSQL configuration files.</info>
#  </variable>
#  <variable>
#    <name>PG_DATA</name>
#    <default>/var/lib/postgresql/9.5/main</default>
#    <description>PostgreSQL data directory</description>
#    <info>Location of the PostgreSQL data files and directories.</info>
#  </variable>
#  <variable>
#    <name>PG_INST</name>
#    <default>/usr/lib/postgresql/9.5</default>
#    <description>PostgreSQL install directory</description>
#    <info>Location of the PostgreSQL installation of binary and library files.</info>
#  </variable>
#  <variable>
#    <name>PG_LOGS</name>
#    <default>pg_log</default>
#    <description>PostgreSQL log file directory</description>
#    <info>Location of the PostgreSQL log files.</info>
#  </variable>
#  <variable>
#    <name>PG_OWNER</name>
#    <default>postgres</default>
#    <description>PostgreSQL OS Owner</description>
#    <info>Name of the account that the database runs as and owns all files.</info>
#  </variable>
#  <variable>
#    <name>PG_GROUP</name>
#    <default>postgres</default>
#    <description>PostgreSQL OS Group</description>
#    <info>Name of the group that the database runs as and owns all files.</info>
#  </variable>
#  <variable>
#    <name>LABELED_TABLES</name>
#    <default>False</default>
#    <description>Schema.tables with Label Requirement</description>
#    <info>Comma separated list (no spaces) of schema.tables that require security labeling.</info>
#  </variable>
#  <variable>
#    <name>SECURITY_TABLES</name>
#    <default>False</default>
#    <description>Schema.tables with Security Objs</description>
#    <info>Comma separated list (no spaces) of schema.tables that contain security objects.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Check psql is working"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c 'select version();'\""
      expect      : "^[\\s]*version[\\s]*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "DISA_STIG_PostgreSQL_9-x_on_RHEL_v1r7_OS.audit from DISA PostgreSQL 9.x v1r7 STIG"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "PSQL is operational."
      info        : "This audit requires the use of PSQL as a number of checks in the benchmark use PSQL meta-commands that are not available from the database proper."
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "solution".
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "solution".
      solution    : "This check as failed to a number of possible factors:
- PostgreSQL is not installed on the target.
- Scanning account is not able to switch user to postgres.
- PSQL command is not available in the path of postgres.

Please review the above items to enable scanning of the target."
      reference   : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c 'select version();'\""
      expect      : "^[\\s]*version[\\s]*$"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "Check if logging_collector is on"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*logging_collector[\\s]*="
          expect      : "^[\\s]*logging_collector[\\s]*=[\\s]*on[\\s]*($|#)"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "Check if logging mode is stderr or csvlog"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_destination[\\s]*="
          expect      : "(stderr|csvlog)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "PGS9-00-000400 - The audit information produced by PostgreSQL must be protected from unauthorized modification - log_file_mode"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.

This requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Modification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CAT|II,CCI|CCI-000163,CN-L3|8.1.4.3(d),CSF|PR.PT-1,ITSG-33|AU-9(4),NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,Rule-ID|SV-87499r2_rule,STIG-ID|PGS9-00-000400,SWIFT-CSCv1|5.1,Vuln-ID|V-72847"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_file_mode[\\s]*="
          expect      : "^[\\s]*log_file_mode[\\s]*=[\\s]*0600[\\s]*($|#)"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "PGS9-00-000400 - The audit information produced by PostgreSQL must be protected from unauthorized modification - log directory"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.

This requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Modification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CAT|II,CCI|CCI-000163,CN-L3|8.1.4.3(d),CSF|PR.PT-1,ITSG-33|AU-9(4),NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,Rule-ID|SV-87499r2_rule,STIG-ID|PGS9-00-000400,SWIFT-CSCv1|5.1,Vuln-ID|V-72847"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_directory[\\s]*="
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "expect".
          expect      : "^[\\s]*log_directory[\\s]*=[\\s]*'pg_log'[\\s]*($|#)"
        </custom_item>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check PG_LOGS is sub-directory of PG_DATA"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "file".
              file        : "/var/lib/postgresql/9.5/main/pg_log"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              type        : FILE_CHECK
              description : "PGS9-00-000400 - The audit information produced by PostgreSQL must be protected from unauthorized modification - log files"
              info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.

This requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Modification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
              solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
              reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-000163,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87499r2_rule,STIG-ID|PGS9-00-000400,SWIFT-CSCv1|2.3,Vuln-ID|V-72847"
              see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "file".
              file        : "/var/lib/postgresql/9.5/main/pg_log/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
              owner       : "postgres"
              mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
              group       : "postgres"
            </custom_item>
          </then>

          <else>
            <custom_item>
              type        : FILE_CHECK
              description : "PGS9-00-000400 - The audit information produced by PostgreSQL must be protected from unauthorized modification - log files"
              info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.

This requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Modification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
              solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
              reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-000163,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87499r2_rule,STIG-ID|PGS9-00-000400,SWIFT-CSCv1|2.3,Vuln-ID|V-72847"
              see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
              file        : "PG_LOGS@/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
              owner       : "postgres"
              mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
              group       : "postgres"
            </custom_item>
          </else>
        </if>
      </then>

      <else>
        <report type:"WARNING">
          description : "PGS9-00-000400 - The audit information produced by PostgreSQL must be protected from unauthorized modification - log_file_mode"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.

This requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Modification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "CAT|II,CCI|CCI-000163,Rule-ID|SV-87499r2_rule,STIG-ID|PGS9-00-000400,Vuln-ID|V-72847"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>

        <report type:"WARNING">
          description : "PGS9-00-000400 - The audit information produced by PostgreSQL must be protected from unauthorized modification - log directory"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.

This requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Modification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "CAT|II,CCI|CCI-000163,Rule-ID|SV-87499r2_rule,STIG-ID|PGS9-00-000400,Vuln-ID|V-72847"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>

        <report type:"WARNING">
          description : "PGS9-00-000400 - The audit information produced by PostgreSQL must be protected from unauthorized modification - log files"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.

This requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Modification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "CAT|II,CCI|CCI-000163,Rule-ID|SV-87499r2_rule,STIG-ID|PGS9-00-000400,Vuln-ID|V-72847"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>
      </else>
    </if>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "PGS9-00-000500 - PostgreSQL must integrate with an organization-level authentication/access mechanism providing account management and automation for all users, groups, roles, and any other principals."
      info        : "Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.

A comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed.

Examples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in non-centralized account stores, such as multiple servers. Account management functions can also include: assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.

PostgreSQL must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy.

Automation may be comprised of differing technologies that when placed together contain an overall mechanism supporting an organization's automated account management requirements."
      solution    : "Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

Integrate PostgreSQL security with an organization-level authentication/access mechanism providing account management for all users, groups, roles, and any other principals.

As the database administrator (shown here as 'postgres'), edit pg_hba.conf authentication file:

$ sudo su - postgres
$ vi ${PGDATA?}/pg_hba.conf

For each PostgreSQL-managed account that is not documented and approved, either transfer it to management by the external mechanism, or document the need for it and obtain approval, as appropriate."
      reference   : "800-171|3.5.1,800-53|IA-2,CAT|II,CCI|CCI-000015,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,ITSG-33|IA-2,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,Rule-ID|SV-87501r1_rule,STIG-ID|PGS9-00-000500,TBA-FIISB|35.1,TBA-FIISB|36.1,Vuln-ID|V-72849"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/pg_hba.conf"
      regex       : "^[\\s]*(local|host|hostssl|hostnossl)([\\s]+[^\\s]+){3,4}"
      expect      : "^[\\s]*(local|host|hostssl|hostnossl)([\\s]+[^\\s]+){3,4}[\\s]+(gss|sspi|ldap)"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-000700 - Privileges to change PostgreSQL software modules must be limited - data"
      info        : "If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

As the database administrator (shown here as 'postgres'), change the ownership and permissions of configuration files in PGDATA:

$ sudo su - postgres
$ chown postgres:postgres ${PGDATA?}/postgresql.conf
$ chmod 0600 ${PGDATA?}/postgresql.conf

As the server administrator, change the ownership and permissions of shared objects in /usr/pgsql-${PGVER?}/*.so

$ sudo chown root:root /usr/pgsql-${PGVER?}/lib/*.so
$ sudo chmod 0755 /usr/pgsql-${PGVER?}/lib/*.so

As the service administrator, change the ownership and permissions of executables in /usr/pgsql-${PGVER?}/bin:

$ sudo chown root:root /usr/pgsql-${PGVER?}/bin/*
$ sudo chmod 0755 /usr/pgsql-${PGVER?}/bin/*"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001499,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87505r2_rule,STIG-ID|PGS9-00-000700,SWIFT-CSCv1|2.3,Vuln-ID|V-72853"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
      file        : "/var/lib/postgresql/9.5/main/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
      mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-000700 - Privileges to change PostgreSQL software modules must be limited - shared objects"
      info        : "If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

As the database administrator (shown here as 'postgres'), change the ownership and permissions of configuration files in PGDATA:

$ sudo su - postgres
$ chown postgres:postgres ${PGDATA?}/postgresql.conf
$ chmod 0600 ${PGDATA?}/postgresql.conf

As the server administrator, change the ownership and permissions of shared objects in /usr/pgsql-${PGVER?}/*.so

$ sudo chown root:root /usr/pgsql-${PGVER?}/lib/*.so
$ sudo chmod 0755 /usr/pgsql-${PGVER?}/lib/*.so

As the service administrator, change the ownership and permissions of executables in /usr/pgsql-${PGVER?}/bin:

$ sudo chown root:root /usr/pgsql-${PGVER?}/bin/*
$ sudo chmod 0755 /usr/pgsql-${PGVER?}/bin/*"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001499,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87505r2_rule,STIG-ID|PGS9-00-000700,SWIFT-CSCv1|2.3,Vuln-ID|V-72853"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_INST@ replaced with "/usr/lib/postgresql/9.5" in field "file".
      file        : "/usr/lib/postgresql/9.5/lib/*.so"
      owner       : "root"
      mask        : "7022"
      group       : "root"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-000700 - Privileges to change PostgreSQL software modules must be limited - binary objects"
      info        : "If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

As the database administrator (shown here as 'postgres'), change the ownership and permissions of configuration files in PGDATA:

$ sudo su - postgres
$ chown postgres:postgres ${PGDATA?}/postgresql.conf
$ chmod 0600 ${PGDATA?}/postgresql.conf

As the server administrator, change the ownership and permissions of shared objects in /usr/pgsql-${PGVER?}/*.so

$ sudo chown root:root /usr/pgsql-${PGVER?}/lib/*.so
$ sudo chmod 0755 /usr/pgsql-${PGVER?}/lib/*.so

As the service administrator, change the ownership and permissions of executables in /usr/pgsql-${PGVER?}/bin:

$ sudo chown root:root /usr/pgsql-${PGVER?}/bin/*
$ sudo chmod 0755 /usr/pgsql-${PGVER?}/bin/*"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001499,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87505r2_rule,STIG-ID|PGS9-00-000700,SWIFT-CSCv1|2.3,Vuln-ID|V-72853"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_INST@ replaced with "/usr/lib/postgresql/9.5" in field "file".
      file        : "/usr/lib/postgresql/9.5/bin/*"
      owner       : "root"
      mask        : "7022"
      group       : "root"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-000710 - PostgreSQL must limit privileges to change functions and triggers, and links to software external to PostgreSQL - database"
      info        : "If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database code can lead to unauthorized or compromised installations.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "To change ownership of an object, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER FUNCTION function_name OWNER TO new_role_name'

To change ownership of postgresql.conf, as the database administrator (shown here as 'postgres'), run the following commands:

$ sudo su - postgres
$ chown postgres:postgres ${PGDATA?}/postgresql.conf
$ chmod 0600 ${PGDATA?}/postgresql.conf

To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE rolename WITH NOSUPERUSER'"
      reference   : "800-171|3.1.5,800-53|AC-6(1),CAT|II,CCI|CCI-001499,CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,Rule-ID|SV-87507r1_rule,STIG-ID|PGS9-00-000710,SWIFT-CSCv1|5.1,Vuln-ID|V-72855"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\df+'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-000710 - PostgreSQL must limit privileges to change functions and triggers, and links to software external to PostgreSQL - config"
      info        : "If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database code can lead to unauthorized or compromised installations."
      solution    : "To change ownership of an object, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER FUNCTION function_name OWNER TO new_role_name'

To change ownership of postgresql.conf, as the database administrator (shown here as 'postgres'), run the following commands:

$ sudo su - postgres
$ chown postgres:postgres ${PGDATA?}/postgresql.conf
$ chmod 0600 ${PGDATA?}/postgresql.conf

To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE rolename WITH NOSUPERUSER'"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001499,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87507r1_rule,STIG-ID|PGS9-00-000710,SWIFT-CSCv1|2.3,Vuln-ID|V-72855"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
      file        : "/var/lib/postgresql/9.5/main/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
      mask        : "7133"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "PGS9-00-000800 - If passwords are used for authentication, PostgreSQL must transmit only encrypted representations of passwords."
      info        : "The DoD standard for authentication is DoD-approved PKI certificates.

Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.

In such cases, passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission.

PostgreSQL passwords sent in clear text format across the network are vulnerable to discovery by unauthorized users. Disclosure of passwords may easily lead to unauthorized access to the database."
      solution    : "Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

As the database administrator (shown here as 'postgres'), edit pg_hba.conf authentication file and change all entries of 'password' to 'md5':

$ sudo su - postgres
$ vi ${PGDATA?}/pg_hba.conf
host all all .example.com md5"
      reference   : "800-171|3.5.10,800-53|IA-5(1),CAT|II,CCI|CCI-000197,CSCv6|16.13,CSCv6|16.14,CSF|PR.AC-1,ITSG-33|IA-5(1),NESA|T5.2.3,NIAv2|CY6,PCI-DSSv3.1|8.2.1,PCI-DSSv3.2|8.2.1,Rule-ID|SV-87509r1_rule,STIG-ID|PGS9-00-000800,SWIFT-CSCv1|4.1,TBA-FIISB|26.1,Vuln-ID|V-72857"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/pg_hba.conf"
      regex       : "^[\\s]*(local|host|hostssl|hostnossl)([\\s]+[^\\s]+){3,4}[\\s]+password"
      expect      : "^[\\s]*(local|host|hostssl|hostnossl)([\\s]+[^\\s]+){3,4}[\\s]+password"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-000900 - PostgreSQL must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies - role privileges"
      info        : "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access PostgreSQL. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies.

Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.

Access control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.

This requirement is applicable to access control enforcement applications, a category that includes database management systems. If PostgreSQL does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Create and/or maintain documentation of each group role's appropriate permissions on database objects.

Implement these permissions in the database, and remove any permissions that exceed those documented.

- - - - -

The following are examples of how to use role privileges in PostgreSQL to enforce access controls. For a complete list of privileges, see the official documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html

#### Roles Example 1

The following example demonstrates how to create an admin role with CREATEDB and CREATEROLE privileges.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'CREATE ROLE admin WITH CREATEDB CREATEROLE'

#### Roles Example 2

The following example demonstrates how to create a role with a password that expires and makes the role a member of the 'admin' group.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL '2016-09-20' IN ROLE admin'

#### Roles Example 3

The following demonstrates how to revoke privileges from a role using REVOKE.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'REVOKE admin FROM joe'

#### Roles Example 4

The following demonstrates how to alter privileges in a role using ALTER.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'ALTER ROLE joe NOLOGIN'

The following are examples of how to use grant privileges in PostgreSQL to enforce access controls on objects. For a complete list of privileges, see the official documentation: https://www.postgresql.org/docs/current/static/sql-grant.html

#### Grant Example 1

The following example demonstrates how to grant INSERT on a table to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT SELECT ON stig_test TO joe'

#### Grant Example 2

The following example demonstrates how to grant ALL PRIVILEGES on a table to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT ALL PRIVILEGES ON stig_test TO joe'

#### Grant Example 3

The following example demonstrates how to grant a role to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT admin TO joe'

#### Revoke Example 1

The following example demonstrates how to revoke access from a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'REVOKE admin FROM joe'

To change authentication requirements for the database, as the database administrator (shown here as 'postgres'), edit pg_hba.conf:

$ sudo su - postgres

$ vi ${PGDATA?}/pg_hba.conf

Edit authentication requirements to the organizational requirements. See the official documentation for the complete list of options for authentication: http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html

After changes to pg_hba.conf, reload the server:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
      reference   : "800-171|3.1.1,800-53|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,Rule-ID|SV-87511r2_rule,STIG-ID|PGS9-00-000900,TBA-FIISB|31.1,Vuln-ID|V-72859"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\du'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-000900)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-000900 - PostgreSQL must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies - table privileges"
      info        : "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access PostgreSQL. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies.

Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.

Access control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.

This requirement is applicable to access control enforcement applications, a category that includes database management systems. If PostgreSQL does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Create and/or maintain documentation of each group role's appropriate permissions on database objects.

Implement these permissions in the database, and remove any permissions that exceed those documented.

- - - - -

The following are examples of how to use role privileges in PostgreSQL to enforce access controls. For a complete list of privileges, see the official documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html

#### Roles Example 1

The following example demonstrates how to create an admin role with CREATEDB and CREATEROLE privileges.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'CREATE ROLE admin WITH CREATEDB CREATEROLE'

#### Roles Example 2

The following example demonstrates how to create a role with a password that expires and makes the role a member of the 'admin' group.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL '2016-09-20' IN ROLE admin'

#### Roles Example 3

The following demonstrates how to revoke privileges from a role using REVOKE.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'REVOKE admin FROM joe'

#### Roles Example 4

The following demonstrates how to alter privileges in a role using ALTER.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'ALTER ROLE joe NOLOGIN'

The following are examples of how to use grant privileges in PostgreSQL to enforce access controls on objects. For a complete list of privileges, see the official documentation: https://www.postgresql.org/docs/current/static/sql-grant.html

#### Grant Example 1

The following example demonstrates how to grant INSERT on a table to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT SELECT ON stig_test TO joe'

#### Grant Example 2

The following example demonstrates how to grant ALL PRIVILEGES on a table to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT ALL PRIVILEGES ON stig_test TO joe'

#### Grant Example 3

The following example demonstrates how to grant a role to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT admin TO joe'

#### Revoke Example 1

The following example demonstrates how to revoke access from a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'REVOKE admin FROM joe'

To change authentication requirements for the database, as the database administrator (shown here as 'postgres'), edit pg_hba.conf:

$ sudo su - postgres

$ vi ${PGDATA?}/pg_hba.conf

Edit authentication requirements to the organizational requirements. See the official documentation for the complete list of options for authentication: http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html

After changes to pg_hba.conf, reload the server:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
      reference   : "800-171|3.1.1,800-53|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,Rule-ID|SV-87511r2_rule,STIG-ID|PGS9-00-000900,TBA-FIISB|31.1,Vuln-ID|V-72859"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dp'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-000900)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "PGS9-00-000900 - PostgreSQL must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies - authentication"
      info        : "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access PostgreSQL. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies.

Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.

Access control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.

This requirement is applicable to access control enforcement applications, a category that includes database management systems. If PostgreSQL does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Create and/or maintain documentation of each group role's appropriate permissions on database objects.

Implement these permissions in the database, and remove any permissions that exceed those documented.

- - - - -

The following are examples of how to use role privileges in PostgreSQL to enforce access controls. For a complete list of privileges, see the official documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html

#### Roles Example 1

The following example demonstrates how to create an admin role with CREATEDB and CREATEROLE privileges.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'CREATE ROLE admin WITH CREATEDB CREATEROLE'

#### Roles Example 2

The following example demonstrates how to create a role with a password that expires and makes the role a member of the 'admin' group.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL '2016-09-20' IN ROLE admin'

#### Roles Example 3

The following demonstrates how to revoke privileges from a role using REVOKE.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'REVOKE admin FROM joe'

#### Roles Example 4

The following demonstrates how to alter privileges in a role using ALTER.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'ALTER ROLE joe NOLOGIN'

The following are examples of how to use grant privileges in PostgreSQL to enforce access controls on objects. For a complete list of privileges, see the official documentation: https://www.postgresql.org/docs/current/static/sql-grant.html

#### Grant Example 1

The following example demonstrates how to grant INSERT on a table to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT SELECT ON stig_test TO joe'

#### Grant Example 2

The following example demonstrates how to grant ALL PRIVILEGES on a table to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT ALL PRIVILEGES ON stig_test TO joe'

#### Grant Example 3

The following example demonstrates how to grant a role to a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'GRANT admin TO joe'

#### Revoke Example 1

The following example demonstrates how to revoke access from a role.

As the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres

$ psql -c 'REVOKE admin FROM joe'

To change authentication requirements for the database, as the database administrator (shown here as 'postgres'), edit pg_hba.conf:

$ sudo su - postgres

$ vi ${PGDATA?}/pg_hba.conf

Edit authentication requirements to the organizational requirements. See the official documentation for the complete list of options for authentication: http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html

After changes to pg_hba.conf, reload the server:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
      reference   : "800-171|3.1.1,800-53|AC-3,CAT|II,CCI|CCI-000213,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,Rule-ID|SV-87511r2_rule,STIG-ID|PGS9-00-000900,TBA-FIISB|31.1,Vuln-ID|V-72859"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/pg_hba.conf"
      regex       : "^[^#]"
      expect      : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-001100 - PostgreSQL must associate organization-defined types of security labels having organization-defined security label values with information in transmission."
      info        : "Without the association of security labels to information, there is no basis for PostgreSQL to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "In addition to the SQL-standard privilege system available through GRANT, tables can have row security policies that restrict, on a per-user basis, which rows can be returned by normal queries or inserted, updated, or deleted by data modification commands. This feature is also known as Row-Level Security(RLS).

RLS policies can be very different depending on their use case. For one example of using RLS for Security Labels, see supplementary content APPENDIX-D."
      reference   : "800-171|3.13.8,800-53|SC-8,CAT|II,CCI|CCI-002264,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSF|PR.DS-2,CSF|PR.DS-5,ITSG-33|SC-8,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE12,NIAv2|IE8,NIAv2|IE9,NIAv2|NS29,NIAv2|SS24,Rule-ID|SV-87513r1_rule,STIG-ID|PGS9-00-001100,Vuln-ID|V-72861"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @LABELED_TABLES@ replaced with "False" in field "cmd".
      cmd         : "echo 'False' | awk -F, '{ for (x=1; x<=NF; x++) { print \"su - postgres -c '\\''psql -c \\\"\\\\d+ \"$x\"\\\"'\\''\" } } END { if (NF == 0) print \"echo none\" }' | bash"
      expect      : "^(none|ManualReviewRequired)$"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-001300 - The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (functions, trigger procedures, links to software external to PostgreSQL, etc.) must be restricted to authorized users - s used to modify database structure and logic modules must be restricted to authorized users."
      info        : "If PostgreSQL were to allow any user to make changes to database structure or logic, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "As the database administrator, revoke any permissions from a role that are deemed unnecessary by running the following SQL:

ALTER ROLE bob NOCREATEDB;
ALTER ROLE bob NOCREATEROLE;
ALTER ROLE bob NOSUPERUSER;
ALTER ROLE bob NOINHERIT;
REVOKE SELECT ON some_function FROM bob;"
      reference   : "800-171|3.1.5,800-53|AC-6(1),CAT|II,CCI|CCI-001499,CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,Rule-ID|SV-87517r1_rule,STIG-ID|PGS9-00-001300,SWIFT-CSCv1|5.1,Vuln-ID|V-72865"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dp *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-001400 - PostgreSQL must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users)."
      info        : "Non-organizational users include all information system users other than organizational users, which includes organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations).

Non-organizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.

Accordingly, a risk assessment is used in determining the authentication needs of the organization.

Scalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, other organizations, and the Nation.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "To drop a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'DROP ROLE <role_to_drop>'

To create a role, as the database administrator, run the following SQL:

$ sudo su - postgres
$ psql -c 'CREATE ROLE <role name> LOGIN'

For the complete list of permissions allowed by roles, see the official documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html"
      reference   : "800-171|3.5.1,800-53|IA-2,CAT|II,CCI|CCI-000804,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,ITSG-33|IA-2,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,Rule-ID|SV-87519r1_rule,STIG-ID|PGS9-00-001400,TBA-FIISB|35.1,TBA-FIISB|36.1,Vuln-ID|V-72867"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\du'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-001400)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-001700 - PostgreSQL must associate organization-defined types of security labels having organization-defined security label values with information in storage."
      info        : "Without the association of security labels to information, there is no basis for PostgreSQL to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "In addition to the SQL-standard privilege system available through GRANT, tables can have row security policies that restrict, on a per-user basis, which rows can be returned by normal queries or inserted, updated, or deleted by data modification commands. This feature is also known as Row-Level Security (RLS).

RLS policies can be very different depending on their use case. For one example of using RLS for Security Labels, see supplementary content APPENDIX-D."
      reference   : "800-171|3.13.8,800-53|SC-8,CAT|II,CCI|CCI-002262,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSF|PR.DS-2,CSF|PR.DS-5,ITSG-33|SC-8,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE12,NIAv2|IE8,NIAv2|IE9,NIAv2|NS29,NIAv2|SS24,Rule-ID|SV-87521r1_rule,STIG-ID|PGS9-00-001700,Vuln-ID|V-72869"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @LABELED_TABLES@ replaced with "False" in field "cmd".
      cmd         : "echo 'False' | awk -F, '{ for (x=1; x<=NF; x++) { print \"su - postgres -c '\\''psql -c \\\"\\\\d+ \"$x\"\\\"'\\''\" } } END { if (NF == 0) print \"echo none\" }' | bash"
      expect      : "^(none|ManualReviewRequired)$"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-002100 - PostgreSQL must allocate audit record storage capacity in accordance with organization-defined audit record storage requirements."
      info        : "In order to ensure sufficient storage capacity for the audit logs, PostgreSQL must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be off-loaded to a centralized log management system, it remains necessary to provide space on the database server to serve as a buffer against outages and capacity limits of the off-loading mechanism.

The task of allocating audit record storage capacity is usually performed during initial installation of PostgreSQL and is closely associated with the DBA and system administrator roles. The DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.

In determining the capacity requirements, consider such factors as: total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are off-loaded to the central log management system; and any limitations that exist on PostgreSQL's ability to reuse the space formerly occupied by off-loaded records.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Allocate sufficient audit file/table space to support peak demand."
      reference   : "800-53|AU-5(2),CAT|II,CCI|CCI-001849,CSF|PR.PT-1,ITSG-33|AU-5(2),NIAv2|GS7f,Rule-ID|SV-87529r1_rule,STIG-ID|PGS9-00-002100,Vuln-ID|V-72877"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "cmd".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "cmd".
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "cmd".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "cmd".
      cmd         : "df -h /var/lib/postgresql/9.5/main pg_log /var/lib/postgresql/9.5/main/pg_log 2>/dev/null | grep '/' | sort -u"
      expect      : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-002200 - PostgreSQL must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects - dn"
      info        : "Discretionary Access Control (DAC) is based on the notion that individual users are 'owners' of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.

When discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.

A subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.

The policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Implement the organization's DAC policy in the security configuration of the database and PostgreSQL, and, if applicable, the security configuration of the application(s) using the database.

To GRANT privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test'
$ psql -c 'GRANT CREATE ON SCHEMA test TO bob'
$ psql -c 'CREATE TABLE test.test_table(id INT)'
$ psql -c 'GRANT SELECT ON TABLE test.test_table TO bob'

To REVOKE privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ psql -c 'REVOKE SELECT ON TABLE test.test_table FROM bob'
$ psql -c 'REVOKE CREATE ON SCHEMA test FROM bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-002165,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87535r1_rule,STIG-ID|PGS9-00-002200,Vuln-ID|V-72883"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dn *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-002200 - PostgreSQL must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects - dt"
      info        : "Discretionary Access Control (DAC) is based on the notion that individual users are 'owners' of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.

When discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.

A subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.

The policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Implement the organization's DAC policy in the security configuration of the database and PostgreSQL, and, if applicable, the security configuration of the application(s) using the database.

To GRANT privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test'
$ psql -c 'GRANT CREATE ON SCHEMA test TO bob'
$ psql -c 'CREATE TABLE test.test_table(id INT)'
$ psql -c 'GRANT SELECT ON TABLE test.test_table TO bob'

To REVOKE privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ psql -c 'REVOKE SELECT ON TABLE test.test_table FROM bob'
$ psql -c 'REVOKE CREATE ON SCHEMA test FROM bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-002165,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87535r1_rule,STIG-ID|PGS9-00-002200,Vuln-ID|V-72883"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dt *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-002200 - PostgreSQL must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects - ds"
      info        : "Discretionary Access Control (DAC) is based on the notion that individual users are 'owners' of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.

When discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.

A subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.

The policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Implement the organization's DAC policy in the security configuration of the database and PostgreSQL, and, if applicable, the security configuration of the application(s) using the database.

To GRANT privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test'
$ psql -c 'GRANT CREATE ON SCHEMA test TO bob'
$ psql -c 'CREATE TABLE test.test_table(id INT)'
$ psql -c 'GRANT SELECT ON TABLE test.test_table TO bob'

To REVOKE privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ psql -c 'REVOKE SELECT ON TABLE test.test_table FROM bob'
$ psql -c 'REVOKE CREATE ON SCHEMA test FROM bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-002165,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87535r1_rule,STIG-ID|PGS9-00-002200,Vuln-ID|V-72883"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\ds *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-002200 - PostgreSQL must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects - dv"
      info        : "Discretionary Access Control (DAC) is based on the notion that individual users are 'owners' of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.

When discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.

A subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.

The policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Implement the organization's DAC policy in the security configuration of the database and PostgreSQL, and, if applicable, the security configuration of the application(s) using the database.

To GRANT privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test'
$ psql -c 'GRANT CREATE ON SCHEMA test TO bob'
$ psql -c 'CREATE TABLE test.test_table(id INT)'
$ psql -c 'GRANT SELECT ON TABLE test.test_table TO bob'

To REVOKE privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ psql -c 'REVOKE SELECT ON TABLE test.test_table FROM bob'
$ psql -c 'REVOKE CREATE ON SCHEMA test FROM bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-002165,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87535r1_rule,STIG-ID|PGS9-00-002200,Vuln-ID|V-72883"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dv *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-002200 - PostgreSQL must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects - df+"
      info        : "Discretionary Access Control (DAC) is based on the notion that individual users are 'owners' of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.

When discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.

A subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.

The policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Implement the organization's DAC policy in the security configuration of the database and PostgreSQL, and, if applicable, the security configuration of the application(s) using the database.

To GRANT privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test'
$ psql -c 'GRANT CREATE ON SCHEMA test TO bob'
$ psql -c 'CREATE TABLE test.test_table(id INT)'
$ psql -c 'GRANT SELECT ON TABLE test.test_table TO bob'

To REVOKE privileges to roles, as the database administrator (shown here as 'postgres'), run statements like the following examples:

$ psql -c 'REVOKE SELECT ON TABLE test.test_table FROM bob'
$ psql -c 'REVOKE CREATE ON SCHEMA test FROM bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-002165,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87535r1_rule,STIG-ID|PGS9-00-002200,Vuln-ID|V-72883"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\df+ *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "Check if logging_collector is on"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*logging_collector[\\s]*="
          expect      : "^[\\s]*logging_collector[\\s]*=[\\s]*on[\\s]*($|#)"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "Check if logging mode is stderr or csvlog"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_destination[\\s]*="
          expect      : "(stderr|csvlog)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "PGS9-00-002300 - The audit information produced by PostgreSQL must be protected from unauthorized deletion - log_file_mode"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.

Some commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Deletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CAT|II,CCI|CCI-000164,CN-L3|8.1.4.3(d),CSF|PR.PT-1,ITSG-33|AU-9(4),NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,Rule-ID|SV-87537r3_rule,STIG-ID|PGS9-00-002300,SWIFT-CSCv1|5.1,Vuln-ID|V-72885"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_file_mode[\\s]*="
          expect      : "^[\\s]*log_file_mode[\\s]*=[\\s]*0600[\\s]*($|#)"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "PGS9-00-002300 - The audit information produced by PostgreSQL must be protected from unauthorized deletion - log directory"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.

Some commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Deletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CAT|II,CCI|CCI-000164,CN-L3|8.1.4.3(d),CSF|PR.PT-1,ITSG-33|AU-9(4),NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,Rule-ID|SV-87537r3_rule,STIG-ID|PGS9-00-002300,SWIFT-CSCv1|5.1,Vuln-ID|V-72885"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_directory[\\s]*="
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "expect".
          expect      : "^[\\s]*log_directory[\\s]*=[\\s]*'pg_log'[\\s]*($|#)"
        </custom_item>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check PG_LOGS is sub-directory of PG_DATA"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "file".
              file        : "/var/lib/postgresql/9.5/main/pg_log"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              type        : FILE_CHECK
              description : "PGS9-00-002300 - The audit information produced by PostgreSQL must be protected from unauthorized deletion - log files"
              info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.

Some commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Deletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
              solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
              reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-000164,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87537r3_rule,STIG-ID|PGS9-00-002300,SWIFT-CSCv1|2.3,Vuln-ID|V-72885"
              see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "file".
              file        : "/var/lib/postgresql/9.5/main/pg_log/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
              owner       : "postgres"
              mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
              group       : "postgres"
            </custom_item>
          </then>

          <else>
            <custom_item>
              type        : FILE_CHECK
              description : "PGS9-00-002300 - The audit information produced by PostgreSQL must be protected from unauthorized deletion - log files"
              info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.

Some commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Deletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
              solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
              reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-000164,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87537r3_rule,STIG-ID|PGS9-00-002300,SWIFT-CSCv1|2.3,Vuln-ID|V-72885"
              see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
              file        : "PG_LOGS@/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
              owner       : "postgres"
              mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
              group       : "postgres"
            </custom_item>
          </else>
        </if>
      </then>

      <else>
        <report type:"WARNING">
          description : "PGS9-00-002300 - The audit information produced by PostgreSQL must be protected from unauthorized deletion - log_file_mode"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.

Some commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Deletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "CAT|II,CCI|CCI-000164,Rule-ID|SV-87537r3_rule,STIG-ID|PGS9-00-002300,Vuln-ID|V-72885"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>

        <report type:"WARNING">
          description : "PGS9-00-002300 - The audit information produced by PostgreSQL must be protected from unauthorized deletion - log directory"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.

Some commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Deletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "CAT|II,CCI|CCI-000164,Rule-ID|SV-87537r3_rule,STIG-ID|PGS9-00-002300,Vuln-ID|V-72885"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>

        <report type:"WARNING">
          description : "PGS9-00-002300 - The audit information produced by PostgreSQL must be protected from unauthorized deletion - log files"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.

Some commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Deletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

#### stderr Logging

With stderr logging enabled, as the database owner (shown here as 'postgres'), set the following parameter in postgresql.conf:

$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

To change the owner and permissions of the log files, run the following:

$ chown postgres:postgres ${PGDATA?}/<log directory name>
$ chmod 0700 ${PGDATA?}/<log directory name>
$ chmod 600 ${PGDATA?}/<log directory name>/*.log

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with 0600 permissions.

$ chown root:root <log directory name>/<log_filename>
$ chmod 0700 <log directory name>
$ chmod 0600 <log directory name>/*.log"
          reference   : "CAT|II,CCI|CCI-000164,Rule-ID|SV-87537r3_rule,STIG-ID|PGS9-00-002300,Vuln-ID|V-72885"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>
      </else>
    </if>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "PGS9-00-002500 - PostgreSQL must reveal detailed error messages only to the ISSO, ISSM, SA and DBA."
      info        : "If PostgreSQL provides too much information in error logs and administrative messages to the screen, this could lead to compromise. The structure and content of error messages need to be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.

Some default PostgreSQL error messages can contain information that could aid an attacker in, among others things, identifying the database type, host address, or state of the database. Custom errors may contain sensitive customer information.

It is important that detailed error messages be visible only to those who are authorized to view them; that general users receive only generalized acknowledgment that errors have occurred; and that these generalized messages appear only when relevant to the user's task. For example, a message along the lines of, 'An error has occurred. Unable to save your changes. If this problem persists, please contact your help desk' would be relevant. A message such as 'Warning: your transaction generated a large number of page splits' would likely not be relevant.

Administrative users authorized to review detailed error messages typically are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified according to organization-specific needs, with DBA approval."
      solution    : "Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

To set the level of detail for errors messages exposed to clients, as the database administrator (shown here as 'postgres'), run the following commands:

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
client_min_messages = notice"
      reference   : "800-53|SI-11,CAT|II,CCI|CCI-001314,ITSG-33|SI-11,Rule-ID|SV-87541r2_rule,STIG-ID|PGS9-00-002500,Vuln-ID|V-72889"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/postgresql.conf"
      regex       : "^[\\s]*client_min_messages[\\s]*="
      expect      : "^[\\s]*client_min_messages[\\s]*=[\\s]*([Ll][Oo][Gg]|[Dd][Ee][Bb][Uu][Gg][0-9]*)[\\s]*($|#)"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-002600 - PostgreSQL must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited - Data"
      info        : "Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.

Suppression of auditing could permit an adversary to evade detection.

Misconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one."
      solution    : "Configure PostgreSQL's settings to allow designated personnel to select which auditable events are audited.

Using pgaudit allows administrators the flexibility to choose what they log. For an overview of the capabilities of pgaudit, see https://github.com/pgaudit/pgaudit.

See supplementary content APPENDIX-B for documentation on installing pgaudit.

See supplementary content APPENDIX-C for instructions on enabling logging. Only administrators/superuser can change PostgreSQL configurations. Access to the database administrator must be limited to designated personnel only.

To ensure that postgresql.conf is owned by the database owner:

$ chown postgres:postgres ${PGDATA?}/postgresql.conf
$ chmod 600 ${PGDATA?}/postgresql.conf"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-000171,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87543r1_rule,STIG-ID|PGS9-00-002600,SWIFT-CSCv1|2.3,Vuln-ID|V-72891"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
      file        : "/var/lib/postgresql/9.5/main/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-002600 - PostgreSQL must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited - Config"
      info        : "Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.

Suppression of auditing could permit an adversary to evade detection.

Misconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one."
      solution    : "Configure PostgreSQL's settings to allow designated personnel to select which auditable events are audited.

Using pgaudit allows administrators the flexibility to choose what they log. For an overview of the capabilities of pgaudit, see https://github.com/pgaudit/pgaudit.

See supplementary content APPENDIX-B for documentation on installing pgaudit.

See supplementary content APPENDIX-C for instructions on enabling logging. Only administrators/superuser can change PostgreSQL configurations. Access to the database administrator must be limited to designated personnel only.

To ensure that postgresql.conf is owned by the database owner:

$ chown postgres:postgres ${PGDATA?}/postgresql.conf
$ chmod 600 ${PGDATA?}/postgresql.conf"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-000171,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87543r1_rule,STIG-ID|PGS9-00-002600,SWIFT-CSCv1|2.3,Vuln-ID|V-72891"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
      mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-002600 - PostgreSQL must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited - Roles"
      info        : "Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.

Suppression of auditing could permit an adversary to evade detection.

Misconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Configure PostgreSQL's settings to allow designated personnel to select which auditable events are audited.

Using pgaudit allows administrators the flexibility to choose what they log. For an overview of the capabilities of pgaudit, see https://github.com/pgaudit/pgaudit.

See supplementary content APPENDIX-B for documentation on installing pgaudit.

See supplementary content APPENDIX-C for instructions on enabling logging. Only administrators/superuser can change PostgreSQL configurations. Access to the database administrator must be limited to designated personnel only.

To ensure that postgresql.conf is owned by the database owner:

$ chown postgres:postgres ${PGDATA?}/postgresql.conf
$ chmod 600 ${PGDATA?}/postgresql.conf"
      reference   : "800-53|AU-6(7),CAT|II,CCI|CCI-000171,CSF|DE.AE-2,CSF|DE.AE-3,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-2,ITSG-33|AU-6(7),NESA|M5.2.5,Rule-ID|SV-87543r1_rule,STIG-ID|PGS9-00-002600,SWIFT-CSCv1|6.4,Vuln-ID|V-72891"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\du'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-002600)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-003100 - Database objects (including but not limited to tables, indexes, storage, trigger procedures, functions, links to software external to PostgreSQL, etc.) must be owned by database/DBMS principals authorized for ownership - dn"
      info        : "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Assign ownership of authorized objects to authorized object owner accounts.

#### Schema Owner

To create a schema owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test AUTHORIZATION bob'

To alter the ownership of an existing object to be owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER SCHEMA test OWNER TO bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-001499,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87549r2_rule,STIG-ID|PGS9-00-003100,Vuln-ID|V-72897"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dn *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-003100 - Database objects (including but not limited to tables, indexes, storage, trigger procedures, functions, links to software external to PostgreSQL, etc.) must be owned by database/DBMS principals authorized for ownership - dt"
      info        : "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Assign ownership of authorized objects to authorized object owner accounts.

#### Schema Owner

To create a schema owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test AUTHORIZATION bob'

To alter the ownership of an existing object to be owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER SCHEMA test OWNER TO bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-001499,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87549r2_rule,STIG-ID|PGS9-00-003100,Vuln-ID|V-72897"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dt *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-003100 - Database objects (including but not limited to tables, indexes, storage, trigger procedures, functions, links to software external to PostgreSQL, etc.) must be owned by database/DBMS principals authorized for ownership - ds"
      info        : "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Assign ownership of authorized objects to authorized object owner accounts.

#### Schema Owner

To create a schema owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test AUTHORIZATION bob'

To alter the ownership of an existing object to be owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER SCHEMA test OWNER TO bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-001499,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87549r2_rule,STIG-ID|PGS9-00-003100,Vuln-ID|V-72897"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\ds *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-003100 - Database objects (including but not limited to tables, indexes, storage, trigger procedures, functions, links to software external to PostgreSQL, etc.) must be owned by database/DBMS principals authorized for ownership - dv"
      info        : "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Assign ownership of authorized objects to authorized object owner accounts.

#### Schema Owner

To create a schema owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test AUTHORIZATION bob'

To alter the ownership of an existing object to be owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER SCHEMA test OWNER TO bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-001499,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87549r2_rule,STIG-ID|PGS9-00-003100,Vuln-ID|V-72897"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dv *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-003100 - Database objects (including but not limited to tables, indexes, storage, trigger procedures, functions, links to software external to PostgreSQL, etc.) must be owned by database/DBMS principals authorized for ownership - df+"
      info        : "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Assign ownership of authorized objects to authorized object owner accounts.

#### Schema Owner

To create a schema owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'CREATE SCHEMA test AUTHORIZATION bob'

To alter the ownership of an existing object to be owned by the user bob, run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER SCHEMA test OWNER TO bob'"
      reference   : "800-171|3.1.1,800-53|AC-3(4),CAT|II,CCI|CCI-001499,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),Rule-ID|SV-87549r2_rule,STIG-ID|PGS9-00-003100,Vuln-ID|V-72897"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\df+ *.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <report type:"WARNING">
      description : "PGS9-00-003300 - Database software, including PostgreSQL configuration files, must be stored in dedicated directories separate from the host OS and other applications."
      info        : "When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system.

Multiple applications can provide a cumulative negative effect. A vulnerability and subsequent exploit to one application can lead to an exploit of other applications sharing the same security context. For example, an exploit to a web server process that leads to unauthorized administrative access to host system directories can most likely lead to a compromise of all applications hosted by the same system. Database software not installed using dedicated directories both threatens and is threatened by other hosted applications. Access controls defined for one application may by default provide access to the other application's database objects or directories. Any method that provides any level of separation of security context assists in the protection between applications.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Install all applications on directories separate from the PostgreSQL software library directory. Relocate any directories or reinstall other application software that currently shares the PostgreSQL software library directory."
      reference   : "CAT|II,CCI|CCI-001499,Rule-ID|SV-87553r2_rule,STIG-ID|PGS9-00-003300,Vuln-ID|V-72901"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-004000 - PostgreSQL must isolate security functions from non-security functions - dp pg_catalog"
      info        : "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.

Database Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Do not locate security-related database objects with application tables or schema.

Review any site-specific applications security modules built into the database: determine what schema they are located in and take appropriate action.

Do not grant access to pg_catalog or information_schema to anyone but the database administrator(s). Access to the database administrator account(s) must not be granted to anyone without official approval."
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),CAT|II,CCI|CCI-001084,CN-L3|8.1.10.6(h),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(13),NIAv2|GS7d,Rule-ID|SV-87563r1_rule,STIG-ID|PGS9-00-004000,SWIFT-CSCv1|3.1,Vuln-ID|V-72911"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dp pg_catalog.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-004000 - PostgreSQL must isolate security functions from non-security functions - dp information_schema"
      info        : "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.

Database Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Do not locate security-related database objects with application tables or schema.

Review any site-specific applications security modules built into the database: determine what schema they are located in and take appropriate action.

Do not grant access to pg_catalog or information_schema to anyone but the database administrator(s). Access to the database administrator account(s) must not be granted to anyone without official approval."
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),CAT|II,CCI|CCI-001084,CN-L3|8.1.10.6(h),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(13),NIAv2|GS7d,Rule-ID|SV-87563r1_rule,STIG-ID|PGS9-00-004000,SWIFT-CSCv1|3.1,Vuln-ID|V-72911"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dp information_schema.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-004000 - PostgreSQL must isolate security functions from non-security functions - df+ pg_catalog"
      info        : "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.

Database Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Do not locate security-related database objects with application tables or schema.

Review any site-specific applications security modules built into the database: determine what schema they are located in and take appropriate action.

Do not grant access to pg_catalog or information_schema to anyone but the database administrator(s). Access to the database administrator account(s) must not be granted to anyone without official approval."
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),CAT|II,CCI|CCI-001084,CN-L3|8.1.10.6(h),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(13),NIAv2|GS7d,Rule-ID|SV-87563r1_rule,STIG-ID|PGS9-00-004000,SWIFT-CSCv1|3.1,Vuln-ID|V-72911"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\df+ pg_catalog.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-004000 - PostgreSQL must isolate security functions from non-security functions - df+ information_schema"
      info        : "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.

Database Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Do not locate security-related database objects with application tables or schema.

Review any site-specific applications security modules built into the database: determine what schema they are located in and take appropriate action.

Do not grant access to pg_catalog or information_schema to anyone but the database administrator(s). Access to the database administrator account(s) must not be granted to anyone without official approval."
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),CAT|II,CCI|CCI-001084,CN-L3|8.1.10.6(h),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(13),NIAv2|GS7d,Rule-ID|SV-87563r1_rule,STIG-ID|PGS9-00-004000,SWIFT-CSCv1|3.1,Vuln-ID|V-72911"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\df+ information_schema.*'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-004000 - PostgreSQL must isolate security functions from non-security functions - dp custom tables"
      info        : "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.

Database Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Do not locate security-related database objects with application tables or schema.

Review any site-specific applications security modules built into the database: determine what schema they are located in and take appropriate action.

Do not grant access to pg_catalog or information_schema to anyone but the database administrator(s). Access to the database administrator account(s) must not be granted to anyone without official approval."
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),CAT|II,CCI|CCI-001084,CN-L3|8.1.10.6(h),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(13),NIAv2|GS7d,Rule-ID|SV-87563r1_rule,STIG-ID|PGS9-00-004000,SWIFT-CSCv1|3.1,Vuln-ID|V-72911"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @SECURITY_TABLES@ replaced with "False" in field "cmd".
      cmd         : "echo 'False' | awk -F, '{ for (x=1; x<=NF; x++) { print \"su - postgres -c '\\''psql -c \\\"\\\\dp \"$x\"\\\"'\\''\" } } END { if (NF == 0) print \"echo none\" }' | bash"
      expect      : "^(none|ManualReviewRequired)$"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-004000 - PostgreSQL must isolate security functions from non-security functions - df+ custom tables"
      info        : "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.

Database Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Do not locate security-related database objects with application tables or schema.

Review any site-specific applications security modules built into the database: determine what schema they are located in and take appropriate action.

Do not grant access to pg_catalog or information_schema to anyone but the database administrator(s). Access to the database administrator account(s) must not be granted to anyone without official approval."
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),CAT|II,CCI|CCI-001084,CN-L3|8.1.10.6(h),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(13),NIAv2|GS7d,Rule-ID|SV-87563r1_rule,STIG-ID|PGS9-00-004000,SWIFT-CSCv1|3.1,Vuln-ID|V-72911"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @SECURITY_TABLES@ replaced with "False" in field "cmd".
      cmd         : "echo 'False' | awk -F, '{ for (x=1; x<=NF; x++) { print \"su - postgres -c '\\''psql -c \\\"\\\\df+ \"$x\"\\\"'\\''\" } } END { if (NF == 0) print \"echo none\" }' | bash"
      expect      : "^(none|ManualReviewRequired)$"
      severity    : MEDIUM
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "Check if logging_collector is on"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*logging_collector[\\s]*="
          expect      : "^[\\s]*logging_collector[\\s]*=[\\s]*on[\\s]*($|#)"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "Check if logging mode is stderr or csvlog"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_destination[\\s]*="
          expect      : "(stderr|csvlog)"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "PGS9-00-004200 - The audit information produced by PostgreSQL must be protected from unauthorized read access - log_file_mode"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.

This requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location.

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity."
          solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log files.

#### stderr Logging

If PostgreSQL is configured to use stderr for logging, permissions of the log files can be set in postgresql.conf.

As the database administrator (shown here as 'postgres'), edit the following settings of logs in the postgresql.conf file:

Note: Consult the organization's documentation on acceptable log privileges.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
          reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CAT|II,CCI|CCI-000162,CN-L3|8.1.4.3(d),CSF|PR.PT-1,ITSG-33|AU-9(4),NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,Rule-ID|SV-87567r2_rule,STIG-ID|PGS9-00-004200,SWIFT-CSCv1|5.1,Vuln-ID|V-72915"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_file_mode[\\s]*="
          expect      : "^[\\s]*log_file_mode[\\s]*=[\\s]*0600[\\s]*($|#)"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "PGS9-00-004200 - The audit information produced by PostgreSQL must be protected from unauthorized read access - log directory"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.

This requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location.

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity."
          solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log files.

#### stderr Logging

If PostgreSQL is configured to use stderr for logging, permissions of the log files can be set in postgresql.conf.

As the database administrator (shown here as 'postgres'), edit the following settings of logs in the postgresql.conf file:

Note: Consult the organization's documentation on acceptable log privileges.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
          reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CAT|II,CCI|CCI-000162,CN-L3|8.1.4.3(d),CSF|PR.PT-1,ITSG-33|AU-9(4),NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,Rule-ID|SV-87567r2_rule,STIG-ID|PGS9-00-004200,SWIFT-CSCv1|5.1,Vuln-ID|V-72915"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
          file        : "/etc/postgresql/9.5/main/postgresql.conf"
          regex       : "^[\\s]*log_directory[\\s]*="
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "expect".
          expect      : "^[\\s]*log_directory[\\s]*=[\\s]*'pg_log'[\\s]*($|#)"
        </custom_item>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check PG_LOGS is sub-directory of PG_DATA"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "file".
              file        : "/var/lib/postgresql/9.5/main/pg_log"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              type        : FILE_CHECK
              description : "PGS9-00-004200 - The audit information produced by PostgreSQL must be protected from unauthorized read access - log files"
              info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.

This requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location.

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity."
              solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log files.

#### stderr Logging

If PostgreSQL is configured to use stderr for logging, permissions of the log files can be set in postgresql.conf.

As the database administrator (shown here as 'postgres'), edit the following settings of logs in the postgresql.conf file:

Note: Consult the organization's documentation on acceptable log privileges.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
              reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-000162,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87567r2_rule,STIG-ID|PGS9-00-004200,SWIFT-CSCv1|2.3,Vuln-ID|V-72915"
              see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "file".
              file        : "/var/lib/postgresql/9.5/main/pg_log/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
              owner       : "postgres"
              mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
              group       : "postgres"
            </custom_item>
          </then>

          <else>
            <custom_item>
              type        : FILE_CHECK
              description : "PGS9-00-004200 - The audit information produced by PostgreSQL must be protected from unauthorized read access - log files"
              info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.

This requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location.

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity."
              solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log files.

#### stderr Logging

If PostgreSQL is configured to use stderr for logging, permissions of the log files can be set in postgresql.conf.

As the database administrator (shown here as 'postgres'), edit the following settings of logs in the postgresql.conf file:

Note: Consult the organization's documentation on acceptable log privileges.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
              reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-000162,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87567r2_rule,STIG-ID|PGS9-00-004200,SWIFT-CSCv1|2.3,Vuln-ID|V-72915"
              see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
              file        : "PG_LOGS@/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
              owner       : "postgres"
              mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
              group       : "postgres"
            </custom_item>
          </else>
        </if>
      </then>

      <else>
        <report type:"WARNING">
          description : "PGS9-00-004200 - The audit information produced by PostgreSQL must be protected from unauthorized read access - log_file_mode"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.

This requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location.

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log files.

#### stderr Logging

If PostgreSQL is configured to use stderr for logging, permissions of the log files can be set in postgresql.conf.

As the database administrator (shown here as 'postgres'), edit the following settings of logs in the postgresql.conf file:

Note: Consult the organization's documentation on acceptable log privileges.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
          reference   : "CAT|II,CCI|CCI-000162,Rule-ID|SV-87567r2_rule,STIG-ID|PGS9-00-004200,Vuln-ID|V-72915"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>

        <report type:"WARNING">
          description : "PGS9-00-004200 - The audit information produced by PostgreSQL must be protected from unauthorized read access - log directory"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.

This requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location.

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log files.

#### stderr Logging

If PostgreSQL is configured to use stderr for logging, permissions of the log files can be set in postgresql.conf.

As the database administrator (shown here as 'postgres'), edit the following settings of logs in the postgresql.conf file:

Note: Consult the organization's documentation on acceptable log privileges.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
          reference   : "CAT|II,CCI|CCI-000162,Rule-ID|SV-87567r2_rule,STIG-ID|PGS9-00-004200,Vuln-ID|V-72915"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>

        <report type:"WARNING">
          description : "PGS9-00-004200 - The audit information produced by PostgreSQL must be protected from unauthorized read access - log files"
          info        : "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.

This requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location.

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.

#### syslog Logging

If PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log files.

#### stderr Logging

If PostgreSQL is configured to use stderr for logging, permissions of the log files can be set in postgresql.conf.

As the database administrator (shown here as 'postgres'), edit the following settings of logs in the postgresql.conf file:

Note: Consult the organization's documentation on acceptable log privileges.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
          reference   : "CAT|II,CCI|CCI-000162,Rule-ID|SV-87567r2_rule,STIG-ID|PGS9-00-004200,Vuln-ID|V-72915"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
        </report>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Debian package query available"
          cmd         : "dpkg --version"
          expect      : "Debian"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : CMD_EXEC
          description : "PGS9-00-004300 - When updates are applied to PostgreSQL software, any software components that have been replaced or made unnecessary must be removed."
          info        : "Previous versions of PostgreSQL components that are not removed from the information system after updates have been installed may be exploited by adversaries.

Some PostgreSQL installation tools may remove older versions of software automatically from the information system. In other cases, manual review and removal will be required. In planning installations and upgrades, organizations must include steps (automated, manual, or both) to identify and remove the outdated modules.

A transition period may be necessary when both the old and the new software are required. This should be taken into account in the planning.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution    : "Use package managers (RPM or apt-get) for installing PostgreSQL. Unused software is removed when updated."
          reference   : "800-171|3.4.8,800-53|CM-7(4),CAT|II,CCI|CCI-002617,CSF|PR.IP-1,CSF|PR.PT-3,ISO/IEC-27001|A.12.6.2,NIAv2|SS13a,Rule-ID|SV-87569r1_rule,STIG-ID|PGS9-00-004300,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3,Vuln-ID|V-72917"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
          cmd         : "dpkg --get-selections | grep postgres"
          expect      : "ManualReviewRequired"
          severity    : MEDIUM
        </custom_item>
      </then>

      <else>
        <custom_item>
          type        : CMD_EXEC
          description : "PGS9-00-004300 - When updates are applied to PostgreSQL software, any software components that have been replaced or made unnecessary must be removed."
          info        : "Previous versions of PostgreSQL components that are not removed from the information system after updates have been installed may be exploited by adversaries.

Some PostgreSQL installation tools may remove older versions of software automatically from the information system. In other cases, manual review and removal will be required. In planning installations and upgrades, organizations must include steps (automated, manual, or both) to identify and remove the outdated modules.

A transition period may be necessary when both the old and the new software are required. This should be taken into account in the planning.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution    : "Use package managers (RPM or apt-get) for installing PostgreSQL. Unused software is removed when updated."
          reference   : "800-171|3.4.8,800-53|CM-7(4),CAT|II,CCI|CCI-002617,CSF|PR.IP-1,CSF|PR.PT-3,ISO/IEC-27001|A.12.6.2,NIAv2|SS13a,Rule-ID|SV-87569r1_rule,STIG-ID|PGS9-00-004300,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3,Vuln-ID|V-72917"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
          cmd         : "rpm -qa | grep postgres"
          expect      : "ManualReviewRequired"
          severity    : MEDIUM
        </custom_item>
      </else>
    </if>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-007000 - PostgreSQL, when utilizing PKI-based authentication, must validate certificates by performing RFC 5280-compliant certification path validation - ssl_crl_file"
      info        : "The DoD standard for authentication is DoD-approved PKI certificates.

A certificate's certification path is the path from the end entity certificate to a trusted root certification authority (CA). Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate issuer trust, time validity and revocation status for each certificate in the certification path. Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.

Database Management Systems that do not validate certificates by performing RFC 5280-compliant certification path validation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow unauthorized access to the database."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G.

To generate a Certificate Revocation List, see the official Red Hat Documentation: https://access.redhat.com/documentation/en-US/Red_Hat_Update_Infrastructure/2.1/html/Administration_Guide/chap-Red_Hat_Update_Infrastructure-Administration_Guide-Certification_Revocation_List_CRL.html

As the database administrator (shown here as 'postgres'), copy the CRL file into the data directory:

First, as the system administrator, copy the CRL file into the PostgreSQL Data Directory:

$ sudo cp root.crl ${PGDATA?}/root.crl

As the database administrator (shown here as 'postgres'), set the ssl_crl_file parameter to the filename of the CRL:

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
ssl_crl_file = 'root.crl'

Next, in pg_hba.conf, require ssl authentication:

$ sudo su - postgres
$ vi ${PGDATA?}/pg_hba.conf
hostssl <database> <user> <address> cert clientcert=1

Now, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
      reference   : "800-171|3.13.15,800-53|SC-23(5),CAT|II,CCI|CCI-000185,Rule-ID|SV-87631r2_rule,STIG-ID|PGS9-00-007000,Vuln-ID|V-72979"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "cmd".
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "cmd".
      cmd         : "egrep '^\\s*ssl_crl_file' /etc/postgresql/9.5/main/postgresql.conf | cut -f2 -d\"'\" | xargs -I{} ls -l {} /etc/postgresql/9.5/main/{} 2>/dev/null | awk '{ print } END { if (NR == 0) print \"none\" }'"
      expect      : "^-rw-[-r]--[-r]--"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "PGS9-00-007000 - PostgreSQL, when utilizing PKI-based authentication, must validate certificates by performing RFC 5280-compliant certification path validation - hostssl cert"
      info        : "The DoD standard for authentication is DoD-approved PKI certificates.

A certificate's certification path is the path from the end entity certificate to a trusted root certification authority (CA). Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate issuer trust, time validity and revocation status for each certificate in the certification path. Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.

Database Management Systems that do not validate certificates by performing RFC 5280-compliant certification path validation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow unauthorized access to the database."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G.

To generate a Certificate Revocation List, see the official Red Hat Documentation: https://access.redhat.com/documentation/en-US/Red_Hat_Update_Infrastructure/2.1/html/Administration_Guide/chap-Red_Hat_Update_Infrastructure-Administration_Guide-Certification_Revocation_List_CRL.html

As the database administrator (shown here as 'postgres'), copy the CRL file into the data directory:

First, as the system administrator, copy the CRL file into the PostgreSQL Data Directory:

$ sudo cp root.crl ${PGDATA?}/root.crl

As the database administrator (shown here as 'postgres'), set the ssl_crl_file parameter to the filename of the CRL:

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
ssl_crl_file = 'root.crl'

Next, in pg_hba.conf, require ssl authentication:

$ sudo su - postgres
$ vi ${PGDATA?}/pg_hba.conf
hostssl <database> <user> <address> cert clientcert=1

Now, as the system administrator, reload the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl reload postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} reload"
      reference   : "800-171|3.13.15,800-53|SC-23(5),CAT|II,CCI|CCI-000185,Rule-ID|SV-87631r2_rule,STIG-ID|PGS9-00-007000,Vuln-ID|V-72979"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/pg_hba.conf"
      regex       : "^[\\s]*hostssl[\\s]"
      expect      : "(.*[\\s]cert|.*[\\s]clientcert=1){2}([\\s]|$)"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "PGS9-00-008000 - PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules to generate and validate cryptographic hashes."
      info        : "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.

For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant."
      solution    : "Configure OpenSSL to be FIPS compliant.

PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official RHEL Documentation: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Processing_Standard.html

For more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G."
      reference   : "800-171|3.13.11,800-53|SC-13,CAT|I,CCI|CCI-002450,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-87641r1_rule,STIG-ID|PGS9-00-008000,Vuln-ID|V-72989"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
      file        : "/proc/sys/crypto/fips_enabled"
      regex       : "[0-9]"
      expect      : "^1$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "PGS9-00-008200 - PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owners requirements."
      info        : "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.

It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.

For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant."
      solution    : "Configure OpenSSL to be FIPS compliant.

PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official RHEL Documentation: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Processing_Standard.html

For more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G."
      reference   : "800-171|3.13.11,800-53|SC-13,CAT|I,CCI|CCI-002450,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-87645r1_rule,STIG-ID|PGS9-00-008200,Vuln-ID|V-72993"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
      file        : "/proc/sys/crypto/fips_enabled"
      regex       : "[0-9]"
      expect      : "^1$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-008400 - PostgreSQL must prohibit user installation of logic modules (functions, trigger procedures, views, etc.) without explicit privileged status - dp"
      info        : "Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.

PostgreSQL functionality and the nature and requirements of databases will vary; so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.

PostgreSQL must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization).

In the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Document and obtain approval for any non-administrative users who require the ability to create, alter or replace logic modules.

Implement the approved permissions. Revoke any unapproved permissions."
      reference   : "800-171|3.1.5,800-53|AC-6(1),CAT|II,CCI|CCI-001812,CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,Rule-ID|SV-87649r1_rule,STIG-ID|PGS9-00-008400,SWIFT-CSCv1|5.1,Vuln-ID|V-72997"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dp'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-008400 - PostgreSQL must prohibit user installation of logic modules (functions, trigger procedures, views, etc.) without explicit privileged status - dn+"
      info        : "Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.

PostgreSQL functionality and the nature and requirements of databases will vary; so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.

PostgreSQL must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization).

In the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Document and obtain approval for any non-administrative users who require the ability to create, alter or replace logic modules.

Implement the approved permissions. Revoke any unapproved permissions."
      reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-001812,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,Rule-ID|SV-87649r1_rule,STIG-ID|PGS9-00-008400,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-72997"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dn+'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-008500 - PostgreSQL must separate user functionality (including user interface services) from database management functionality."
      info        : "Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access.

The separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate.

An example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources.

This may include isolating the administrative interface on a different domain and with additional access controls.

If administrative functionality or information regarding PostgreSQL management is presented on an interface available for users, information on DBMS settings may be inadvertently made available to the user.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Configure PostgreSQL to separate database administration and general user functionality.

Do not grant superuser, create role, create db or bypass rls role attributes to users that do not require it.

To remove privileges, see the following example:

ALTER ROLE <username> NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;"
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),CAT|II,CCI|CCI-001082,CN-L3|8.1.10.6(h),CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(13),NIAv2|GS7d,Rule-ID|SV-87651r1_rule,STIG-ID|PGS9-00-008500,SWIFT-CSCv1|3.1,Vuln-ID|V-72999"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\du'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-008500)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-009100 - Access to external executables must be disabled or restricted - du"
      info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives.

Applications must adhere to the principles of least functionality by providing only essential capabilities.

PostgreSQLs may spawn additional external processes to execute procedures that are defined in PostgreSQL but stored in external host files (external procedures). The spawned process used to execute the external procedure may operate within a different OS security context than PostgreSQL and provide unauthorized access to the host system.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE <role-name> WITH NOSUPERUSER'

To remove extensions from PostgreSQL, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'DROP EXTENSION extension_name'"
      reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-000381,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,Rule-ID|SV-87661r1_rule,STIG-ID|PGS9-00-009100,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-73009"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\du'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-009100)"
      severity    : MEDIUM
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if Debian package query available"
          cmd         : "dpkg --version"
          expect      : "Debian"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : CMD_EXEC
          description : "PGS9-00-009200 - Unused database components which are integrated in PostgreSQL and cannot be uninstalled must be disabled."
          info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives.

PostgreSQL must adhere to the principles of least functionality by providing only essential capabilities.

Unused, unnecessary PostgreSQL components increase the attack vector for PostgreSQL by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced. Components of the system that are unused and cannot be uninstalled must be disabled. The techniques available for disabling components will vary by DBMS product, OS and the nature of the component and may include DBMS configuration settings, OS service settings, OS file access security, and DBMS user/role permissions.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution    : "To remove any unneeded executables, as the system administrator, run the following:

# RHEL/CENT Systems
$ sudo yum erase <package_name>

# Debian Systems
$ sudo apt-get remove <package_name>"
          reference   : "800-171|3.4.8,800-53|CM-7(4),CAT|II,CCI|CCI-000381,CSF|PR.IP-1,CSF|PR.PT-3,ISO/IEC-27001|A.12.6.2,NIAv2|SS13a,Rule-ID|SV-87663r2_rule,STIG-ID|PGS9-00-009200,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3,Vuln-ID|V-73011"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
          cmd         : "dpkg --get-selections | grep postgres"
          expect      : "ManualReviewRequired"
          severity    : MEDIUM
        </custom_item>
      </then>

      <else>
        <custom_item>
          type        : CMD_EXEC
          description : "PGS9-00-009200 - Unused database components which are integrated in PostgreSQL and cannot be uninstalled must be disabled."
          info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives.

PostgreSQL must adhere to the principles of least functionality by providing only essential capabilities.

Unused, unnecessary PostgreSQL components increase the attack vector for PostgreSQL by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced. Components of the system that are unused and cannot be uninstalled must be disabled. The techniques available for disabling components will vary by DBMS product, OS and the nature of the component and may include DBMS configuration settings, OS service settings, OS file access security, and DBMS user/role permissions.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution    : "To remove any unneeded executables, as the system administrator, run the following:

# RHEL/CENT Systems
$ sudo yum erase <package_name>

# Debian Systems
$ sudo apt-get remove <package_name>"
          reference   : "800-171|3.4.8,800-53|CM-7(4),CAT|II,CCI|CCI-000381,CSF|PR.IP-1,CSF|PR.PT-3,ISO/IEC-27001|A.12.6.2,NIAv2|SS13a,Rule-ID|SV-87663r2_rule,STIG-ID|PGS9-00-009200,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3,Vuln-ID|V-73011"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
          cmd         : "yum list installed | grep postgres"
          expect      : "ManualReviewRequired"
          severity    : MEDIUM
        </custom_item>
      </else>
    </if>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-009400 - PostgreSQL must associate organization-defined types of security labels having organization-defined security label values with information in process."
      info        : "Without the association of security labels to information, there is no basis for PostgreSQL to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

The mechanism used to support security labeling may be the sepgsql feature of PostgreSQL, a third-party product, or custom application code.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "In addition to the SQL-standard privilege system available through GRANT, tables can have row security policies that restrict, on a per-user basis, which rows can be returned by normal queries or inserted, updated, or deleted by data modification commands. This feature is also known as Row-Level Security (RLS).

RLS policies can be very different depending on their use case. For one example of using RLS for Security Labels, see supplementary content APPENDIX-D."
      reference   : "800-171|3.13.8,800-53|SC-8,CAT|II,CCI|CCI-002263,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSF|PR.DS-2,CSF|PR.DS-5,ITSG-33|SC-8,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE12,NIAv2|IE8,NIAv2|IE9,NIAv2|NS29,NIAv2|SS24,Rule-ID|SV-87665r1_rule,STIG-ID|PGS9-00-009400,Vuln-ID|V-73013"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @LABELED_TABLES@ replaced with "False" in field "cmd".
      cmd         : "echo 'False' | awk -F, '{ for (x=1; x<=NF; x++) { print \"su - postgres -c '\\''psql -c \\\"\\\\d+ \"$x\"\\\"'\\''\" } } END { if (NF == 0) print \"echo none\" }' | bash"
      expect      : "^(none|ManualReviewRequired)$"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-009600 - PostgreSQL must enforce access restrictions associated with changes to the configuration of PostgreSQL or database(s) - du"
      info        : "Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system.

When dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system.

Accordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Configure PostgreSQL to enforce access restrictions associated with changes to the configuration of PostgreSQL or database(s).

Use ALTER ROLE to remove accesses from roles:

$ psql -c 'ALTER ROLE <role_name> NOSUPERUSER'

Use REVOKE to remove privileges from databases and schemas:

$ psql -c 'REVOKE ALL PRIVILEGES ON <table> FROM <role_name>'"
      reference   : "800-171|3.1.1,800-53|AC-3,CAT|II,CCI|CCI-001813,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,Rule-ID|SV-87669r2_rule,STIG-ID|PGS9-00-009600,TBA-FIISB|31.1,Vuln-ID|V-73017"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\du'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-009600)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-009600 - PostgreSQL must enforce access restrictions associated with changes to the configuration of PostgreSQL or database(s) - l"
      info        : "Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system.

When dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system.

Accordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Configure PostgreSQL to enforce access restrictions associated with changes to the configuration of PostgreSQL or database(s).

Use ALTER ROLE to remove accesses from roles:

$ psql -c 'ALTER ROLE <role_name> NOSUPERUSER'

Use REVOKE to remove privileges from databases and schemas:

$ psql -c 'REVOKE ALL PRIVILEGES ON <table> FROM <role_name>'"
      reference   : "800-171|3.1.1,800-53|AC-3,CAT|II,CCI|CCI-001813,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,Rule-ID|SV-87669r2_rule,STIG-ID|PGS9-00-009600,TBA-FIISB|31.1,Vuln-ID|V-73017"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\l'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-009600 - PostgreSQL must enforce access restrictions associated with changes to the configuration of PostgreSQL or database(s) - df+"
      info        : "Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system.

When dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system.

Accordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Configure PostgreSQL to enforce access restrictions associated with changes to the configuration of PostgreSQL or database(s).

Use ALTER ROLE to remove accesses from roles:

$ psql -c 'ALTER ROLE <role_name> NOSUPERUSER'

Use REVOKE to remove privileges from databases and schemas:

$ psql -c 'REVOKE ALL PRIVILEGES ON <table> FROM <role_name>'"
      reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-001813,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,Rule-ID|SV-87669r2_rule,STIG-ID|PGS9-00-009600,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-73017"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\dn+'\""
      expect      : "(0 rows|ManualReviewRequired)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-009900 - The system must provide a warning to appropriate support staff when allocated audit record storage volume reaches 75% of maximum audit record storage capacity - capacity"
      info        : "Organizations are required to use a central log management system, so, under normal conditions, the audit space allocated to PostgreSQL on its own server will not be an issue. However, space will still be required on PostgreSQL server for audit records in transit, and, under abnormal conditions, this could fill up. Since a requirement exists to halt processing upon audit failure, a service outage would result.

If support personnel are not notified immediately upon storage volume utilization reaching 75%, they are unable to plan for storage capacity expansion.

The appropriate support staff include, at a minimum, the ISSO and the DBA/SA."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

Configure the system to notify appropriate support staff immediately upon storage volume utilization reaching 75%.

PostgreSQL does not monitor storage, however, it is possible to monitor storage with a script.

##### Example Monitoring Script

#!/bin/bash

PGDATA=/var/lib/psql/${PGVER?}/data
CURRENT=$(df ${PGDATA?} | grep / | awk '{ print $5}' | sed 's/%//g')
THRESHOLD=75

if [ '$CURRENT' -gt '$THRESHOLD' ] ; then
mail -s 'Disk Space Alert' mail@support.com << EOF
The data directory volume is almost full. Used: $CURRENT
%EOF
fi

Schedule this script in cron to run around the clock."
      reference   : "800-53|AU-5(2),CAT|II,CCI|CCI-001855,CSF|PR.PT-1,ITSG-33|AU-5(2),NIAv2|GS7f,Rule-ID|SV-87675r2_rule,STIG-ID|PGS9-00-009900,Vuln-ID|V-73023"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "cmd".
      cmd         : "df -h /var/lib/postgresql/9.5/main | tail -1"
      expect      : "[\\s]([0-9]|[1-6][0-9]|7[0-5])%[\\s]"
    </custom_item>

    <report type:"WARNING">
      description : "PGS9-00-009900 - The system must provide a warning to appropriate support staff when allocated audit record storage volume reaches 75% of maximum audit record storage capacity - alert"
      info        : "Organizations are required to use a central log management system, so, under normal conditions, the audit space allocated to PostgreSQL on its own server will not be an issue. However, space will still be required on PostgreSQL server for audit records in transit, and, under abnormal conditions, this could fill up. Since a requirement exists to halt processing upon audit failure, a service outage would result.

If support personnel are not notified immediately upon storage volume utilization reaching 75%, they are unable to plan for storage capacity expansion.

The appropriate support staff include, at a minimum, the ISSO and the DBA/SA.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

Configure the system to notify appropriate support staff immediately upon storage volume utilization reaching 75%.

PostgreSQL does not monitor storage, however, it is possible to monitor storage with a script.

##### Example Monitoring Script

#!/bin/bash

PGDATA=/var/lib/psql/${PGVER?}/data
CURRENT=$(df ${PGDATA?} | grep / | awk '{ print $5}' | sed 's/%//g')
THRESHOLD=75

if [ '$CURRENT' -gt '$THRESHOLD' ] ; then
mail -s 'Disk Space Alert' mail@support.com << EOF
The data directory volume is almost full. Used: $CURRENT
%EOF
fi

Schedule this script in cron to run around the clock."
      reference   : "CAT|II,CCI|CCI-001855,Rule-ID|SV-87675r2_rule,STIG-ID|PGS9-00-009900,Vuln-ID|V-73023"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-010200 - PostgreSQL must enforce authorized access to all PKI private keys stored/utilized by PostgreSQL."
      info        : "The DoD standard for authentication is DoD-approved PKI certificates. PKI certificate-based authentication is performed by requiring the certificate holder to cryptographically prove possession of the corresponding private key.

If the private key is stolen, an attacker can use the private key(s) to impersonate the certificate holder. In cases where PostgreSQL-stored private keys are used to authenticate PostgreSQL to the system's clients, loss of the corresponding private keys would allow an attacker to successfully perform undetected man-in-the-middle attacks against PostgreSQL system and its clients.

Both the holder of a digital certificate and the issuing authority must take careful measures to protect the corresponding private key. Private keys should always be generated and protected in FIPS 140-2 validated cryptographic modules.

All access to the private key(s) of PostgreSQL must be restricted to authorized and authenticated users. If unauthorized users have access to one or more of PostgreSQL's private keys, an attacker could gain access to the key(s) and use them to impersonate the database on the network or otherwise perform unauthorized actions."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

Store all PostgreSQL PKI private keys in a FIPS 140-2-validated cryptographic module.

Ensure access to PostgreSQL PKI private keys is restricted to only authenticated and authorized users.

PostgreSQL private key(s) can be stored in $PGDATA directory, which is only accessible by the database owner (usually postgres, DBA) user. Do not allow access to this system account to unauthorized users.

To put the keys in a different directory, as the database administrator (shown here as 'postgres'), set the following settings to a protected directory:

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
ssl_ca_file = '/some/protected/directory/root.crt'
ssl_crl_file = '/some/protected/directory/root.crl'
ssl_cert_file = '/some/protected/directory/server.crt'
ssl_key_file = '/some/protected/directory/server.key'

Now, as the system administrator, restart the server with the new configuration:

# SYSTEMD SERVER ONLY
$ sudo systemctl restart postgresql-${PGVER?}

# INITD SERVER ONLY
$ sudo service postgresql-${PGVER?} restart

For more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G."
      reference   : "800-53|IA-5(2),CAT|I,CCI|CCI-000186,CSF|PR.AC-1,ITSG-33|IA-5(2),Rule-ID|SV-87681r2_rule,STIG-ID|PGS9-00-010200,Vuln-ID|V-73029"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "cmd".
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "cmd".
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "egrep '^\\s*ssl_(ca|cert|crl|key)_file' /etc/postgresql/9.5/main/postgresql.conf | cut -f2 -d\"'\" | xargs dirname | xargs ls -ld /etc/postgresql/9.5/main | awk '{ print } $3 !~ /^(root|postgres)$/ || $1 !~ /^dr[-w]x[-r]-[-x]---$/ { f = 1 } END { if (f == 0) print \"all protected\" }'"
      expect      : "^all protected$"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-010700 - PostgreSQL must protect its audit features from unauthorized access - Data"
      info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data.

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.

Audit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records.

If an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

If pg_log or data directory are not owned by postgres user and group, configure them as follows:

$ sudo chown -R postgres:postgres ${PGDATA?}

If the pgaudit installation is not owned by root user and group, configure it as follows:

$ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit

To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE <role-name> WITH NOSUPERUSER'"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001493,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87691r2_rule,STIG-ID|PGS9-00-010700,SWIFT-CSCv1|2.3,Vuln-ID|V-73039"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
      file        : "/var/lib/postgresql/9.5/main/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-010700 - PostgreSQL must protect its audit features from unauthorized access - Config"
      info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data.

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.

Audit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records.

If an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

If pg_log or data directory are not owned by postgres user and group, configure them as follows:

$ sudo chown -R postgres:postgres ${PGDATA?}

If the pgaudit installation is not owned by root user and group, configure it as follows:

$ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit

To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE <role-name> WITH NOSUPERUSER'"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001493,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87691r2_rule,STIG-ID|PGS9-00-010700,SWIFT-CSCv1|2.3,Vuln-ID|V-73039"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check PG_LOGS is sub-directory of PG_DATA"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "file".
          file        : "/var/lib/postgresql/9.5/main/pg_log"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : FILE_CHECK
          description : "PGS9-00-010700 - PostgreSQL must protect its audit features from unauthorized access - Logs"
          info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data.

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.

Audit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records.

If an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity."
          solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

If pg_log or data directory are not owned by postgres user and group, configure them as follows:

$ sudo chown -R postgres:postgres ${PGDATA?}

If the pgaudit installation is not owned by root user and group, configure it as follows:

$ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit

To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE <role-name> WITH NOSUPERUSER'"
          reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001493,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87691r2_rule,STIG-ID|PGS9-00-010700,SWIFT-CSCv1|2.3,Vuln-ID|V-73039"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
# Note: Variable @PG_LOGS@ replaced with "pg_log" in field "file".
          file        : "/var/lib/postgresql/9.5/main/pg_log/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
          owner       : "postgres"
          mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
          group       : "postgres"
        </custom_item>
      </then>

      <else>
        <custom_item>
          type        : FILE_CHECK
          description : "PGS9-00-010700 - PostgreSQL must protect its audit features from unauthorized access - Logs"
          info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data.

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.

Audit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records.

If an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity."
          solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

If pg_log or data directory are not owned by postgres user and group, configure them as follows:

$ sudo chown -R postgres:postgres ${PGDATA?}

If the pgaudit installation is not owned by root user and group, configure it as follows:

$ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit

To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE <role-name> WITH NOSUPERUSER'"
          reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001493,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87691r2_rule,STIG-ID|PGS9-00-010700,SWIFT-CSCv1|2.3,Vuln-ID|V-73039"
          see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
          file        : "PG_LOGS@/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
          owner       : "postgres"
          mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
          group       : "postgres"
        </custom_item>
      </else>
    </if>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-010700 - PostgreSQL must protect its audit features from unauthorized access - Roles"
      info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data.

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.

Audit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records.

If an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

If pg_log or data directory are not owned by postgres user and group, configure them as follows:

$ sudo chown -R postgres:postgres ${PGDATA?}

If the pgaudit installation is not owned by root user and group, configure it as follows:

$ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit

To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE <role-name> WITH NOSUPERUSER'"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CAT|II,CCI|CCI-001493,CN-L3|8.1.4.3(d),CSF|PR.PT-1,ITSG-33|AU-9(4),NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,Rule-ID|SV-87691r2_rule,STIG-ID|PGS9-00-010700,SWIFT-CSCv1|5.1,Vuln-ID|V-73039"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\du'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-010700)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-010700 - PostgreSQL must protect its audit features from unauthorized access - pgaudit install"
      info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data.

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.

Audit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records.

If an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

If pg_log or data directory are not owned by postgres user and group, configure them as follows:

$ sudo chown -R postgres:postgres ${PGDATA?}

If the pgaudit installation is not owned by root user and group, configure it as follows:

$ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit

To remove superuser from a role, as the database administrator (shown here as 'postgres'), run the following SQL:

$ sudo su - postgres
$ psql -c 'ALTER ROLE <role-name> WITH NOSUPERUSER'"
      reference   : "800-53|AU-5(2),CAT|II,CCI|CCI-001493,CSF|PR.PT-1,ITSG-33|AU-5(2),NIAv2|GS7f,Rule-ID|SV-87691r2_rule,STIG-ID|PGS9-00-010700,Vuln-ID|V-73039"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
      cmd         : "find /usr /opt -type f -name \"pgaudit*\" -exec ls -ld {} \\; | awk '{ print } $3 != \"root\" || $4 != \"root\" { f = 1 } END { if (f == 0) print \"all owned by root:root\" }'"
      expect      : "all owned by root:root"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-011200 - PostgreSQL must protect its audit features from unauthorized removal - Data"
      info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit tools.

Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

As the system administrator, change the permissions of PGDATA:

$ sudo chown -R postgres:postgres ${PGDATA?}
$ sudo chmod 700 ${PGDATA?}

As the system administrator, change the permissions of pgsql:

$ sudo chown -R root:root /usr/pgsql-${PGVER?}"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001495,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87695r2_rule,STIG-ID|PGS9-00-011200,SWIFT-CSCv1|2.3,Vuln-ID|V-73043"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
      file        : "/var/lib/postgresql/9.5/main"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
      mask        : "7077"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-011200 - PostgreSQL must protect its audit features from unauthorized removal - pgaudit"
      info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit tools.

Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
      solution    : "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.

As the system administrator, change the permissions of PGDATA:

$ sudo chown -R postgres:postgres ${PGDATA?}
$ sudo chmod 700 ${PGDATA?}

As the system administrator, change the permissions of pgsql:

$ sudo chown -R root:root /usr/pgsql-${PGVER?}"
      reference   : "800-53|AU-5(2),CAT|II,CCI|CCI-001495,CSF|PR.PT-1,ITSG-33|AU-5(2),NIAv2|GS7f,Rule-ID|SV-87695r2_rule,STIG-ID|PGS9-00-011200,Vuln-ID|V-73043"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
      cmd         : "find /usr /lib* /opt -type d \\( -name \"bin\" -o -name \"share\" -o -name \"include\" \\) -exec ls -ld {} \\; | egrep '(psql|postgres)' | awk '{ print } $3 != \"root\" || $4 != \"root\" { f = 1 } END { if (f == 0) print \"all owned by root:root\" }'"
      expect      : "all owned by root:root"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-011500 - PostgreSQL must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users) - Roles"
      info        : "To assure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system.

Organizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:

(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and
(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

Configure PostgreSQL settings to uniquely identify and authenticate all organizational users who log on/connect to the system.

To create roles, use the following SQL:

CREATE ROLE <role_name> [OPTIONS]

For more information on CREATE ROLE, see the official documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html

For each role created, the database administrator can specify database authentication by editing pg_hba.conf:

$ sudo su - postgres
$ vi ${PGDATA?}/pg_hba.conf

An example pg_hba entry looks like this:

# TYPE DATABASE USER ADDRESS METHOD
host test_db bob 192.168.0.0/16 md5

For more information on pg_hba.conf, see the official documentation: https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html"
      reference   : "800-171|3.5.1,800-53|IA-2,CAT|II,CCI|CCI-000764,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,ITSG-33|IA-2,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,Rule-ID|SV-87701r1_rule,STIG-ID|PGS9-00-011500,TBA-FIISB|35.1,TBA-FIISB|36.1,Vuln-ID|V-73049"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "cmd".
      cmd         : "su - postgres -c \"psql -c '\\du'\""
      expect      : "(0 rows|ManualReviewRequired-PGS9-00-011500)"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "PGS9-00-011500 - PostgreSQL must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users) - Authentication"
      info        : "To assure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system.

Organizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:

(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and
(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

Configure PostgreSQL settings to uniquely identify and authenticate all organizational users who log on/connect to the system.

To create roles, use the following SQL:

CREATE ROLE <role_name> [OPTIONS]

For more information on CREATE ROLE, see the official documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html

For each role created, the database administrator can specify database authentication by editing pg_hba.conf:

$ sudo su - postgres
$ vi ${PGDATA?}/pg_hba.conf

An example pg_hba entry looks like this:

# TYPE DATABASE USER ADDRESS METHOD
host test_db bob 192.168.0.0/16 md5

For more information on pg_hba.conf, see the official documentation: https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html"
      reference   : "800-171|3.5.1,800-53|IA-2,CAT|II,CCI|CCI-000764,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,ITSG-33|IA-2,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,Rule-ID|SV-87701r1_rule,STIG-ID|PGS9-00-011500,TBA-FIISB|35.1,TBA-FIISB|36.1,Vuln-ID|V-73049"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/pg_hba.conf"
      regex       : "^[\\s]*(local|host|hostssl|hostnossl)[\\s]"
      expect      : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-011800 - PostgreSQL must map the PKI-authenticated identity to an associated user account."
      info        : "The DoD standard for authentication is DoD-approved PKI certificates. Once a PKI certificate has been validated, it must be mapped to PostgreSQL user account for the authenticated identity to be meaningful to PostgreSQL and useful for authorization decisions.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Configure PostgreSQL to map authenticated identities directly to PostgreSQL user accounts.

For information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G."
      reference   : "800-53|IA-5(2),CAT|II,CCI|CCI-000187,CSF|PR.AC-1,ITSG-33|IA-5(2),Rule-ID|SV-87707r1_rule,STIG-ID|PGS9-00-011800,Vuln-ID|V-73055"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "cmd".
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "cmd".
      cmd         : "echo 'Maps in pg_hba.conf:'; grep 'map' /etc/postgresql/9.5/main/pg_hba.conf; echo; echo 'Content of pg_ident.conf:'; egrep -v '^#' /etc/postgresql/9.5/main/pg_ident.conf"
      expect      : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-012000 - Access to database files must be limited to relevant processes and to authorized, administrative users - Data"
      info        : "Applications, including PostgreSQL, must prevent unauthorized and unintended information transfer via shared system resources. Permitting only DBMS processes and authorized, administrative users to have access to the files where the database resides helps ensure that those files are not shared inappropriately and are not open to backdoor access and manipulation."
      solution    : "Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

Configure the permissions granted by the operating system/file system on the database files, database log files, and database backup files so that only relevant system accounts and authorized system administrators and database administrators with a need to know are permitted to read/view these files.

Any files (for example: extra configuration files) created in PGDATA must be owned by the database administrator, with only owner permissions to read, write, and execute."
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001090,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87711r2_rule,STIG-ID|PGS9-00-012000,SWIFT-CSCv1|2.3,Vuln-ID|V-73059"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_DATA@ replaced with "/var/lib/postgresql/9.5/main" in field "file".
      file        : "/var/lib/postgresql/9.5/main/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
      mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-012000 - Access to database files must be limited to relevant processes and to authorized, administrative users - Config"
      info        : "Applications, including PostgreSQL, must prevent unauthorized and unintended information transfer via shared system resources. Permitting only DBMS processes and authorized, administrative users to have access to the files where the database resides helps ensure that those files are not shared inappropriately and are not open to backdoor access and manipulation."
      solution    : "Note: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for instructions on configuring PGDATA.

Configure the permissions granted by the operating system/file system on the database files, database log files, and database backup files so that only relevant system accounts and authorized system administrators and database administrators with a need to know are permitted to read/view these files.

Any files (for example: extra configuration files) created in PGDATA must be owned by the database administrator, with only owner permissions to read, write, and execute."
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001090,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87711r2_rule,STIG-ID|PGS9-00-012000,SWIFT-CSCv1|2.3,Vuln-ID|V-73059"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/*"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
      mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "PGS9-00-012200 - PostgreSQL must protect its audit configuration from unauthorized modification - postgresql.conf"
      info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the modification of audit tools.

Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
      solution    : "Apply or modify access controls and permissions (both within PostgreSQL and in the file system/operating system) to tools used to view or modify audit log data. Tools must be configurable by authorized personnel only.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the database administrator (shown here as 'postgres'), change the ownership and permissions of configuration files in PGDATA:

$ sudo su - postgres
$ chown postgres:postgres ${PGDATA?}/*.conf
$ chmod 0600 ${PGDATA?}/*.conf"
      reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001494,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-87713r1_rule,STIG-ID|PGS9-00-012200,SWIFT-CSCv1|2.3,Vuln-ID|V-73061"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/postgresql.conf"
# Note: Variable @PG_OWNER@ replaced with "postgres" in field "owner".
      owner       : "postgres"
      mask        : "7177"
# Note: Variable @PG_GROUP@ replaced with "postgres" in field "group".
      group       : "postgres"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "PGS9-00-012200 - PostgreSQL must protect its audit configuration from unauthorized modification - log_file_mode"
      info        : "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the modification of audit tools.

Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
      solution    : "Apply or modify access controls and permissions (both within PostgreSQL and in the file system/operating system) to tools used to view or modify audit log data. Tools must be configurable by authorized personnel only.

$ sudo su - postgres
$ vi ${PGDATA?}/postgresql.conf
log_file_mode = 0600

Next, as the database administrator (shown here as 'postgres'), change the ownership and permissions of configuration files in PGDATA:

$ sudo su - postgres
$ chown postgres:postgres ${PGDATA?}/*.conf
$ chmod 0600 ${PGDATA?}/*.conf"
      reference   : "800-171|3.3.8,800-171|3.3.9,800-53|AU-9(4),CAT|II,CCI|CCI-001494,CN-L3|8.1.4.3(d),CSF|PR.PT-1,ITSG-33|AU-9(4),NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,Rule-ID|SV-87713r1_rule,STIG-ID|PGS9-00-012200,SWIFT-CSCv1|5.1,Vuln-ID|V-73061"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
# Note: Variable @PG_CONF@ replaced with "/etc/postgresql/9.5/main" in field "file".
      file        : "/etc/postgresql/9.5/main/postgresql.conf"
      regex       : "^[\\s]*log_file_mode[\\s]*="
      expect      : "^[\\s]*log_file_mode[\\s]*=[\\s]*0600[\\s]*($|#)"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-012300 - PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules for cryptographic operations."
      info        : "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption and digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic modules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be relied on for authentication, confidentiality or integrity. Weak cryptography could allow an attacker to gain access to and modify data stored in the database as well as the administration settings of the DBMS.

Applications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 validated cryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.

The security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A.

NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules."
      solution    : "Configure OpenSSL to meet FIPS Compliance using the following documentation in section 9.1:

http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1758.pdf

For more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G."
      reference   : "800-171|3.13.11,800-53|SC-13,CAT|I,CCI|CCI-000803,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-87715r1_rule,STIG-ID|PGS9-00-012300,Vuln-ID|V-73063"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
      cmd         : "openssl version"
      expect      : "fips"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-012800 - The DBMS must be configured on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL - kernel"
      info        : "PostgreSQL uses OpenSSL for the underlying encryption layer. It must be installed on an operating system that contains a certified FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140-2 OpenSSL libraries.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Install PostgreSQL on an operating system with FIPS-compliant cryptography enabled; or by other means ensure that FIPS 140-2-certified OpenSSL libraries are used by the DBMS."
      reference   : "800-171|3.13.11,800-53|SC-13,CAT|I,CCI|CCI-000803,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-87723r3_rule,STIG-ID|PGS9-00-012800,Vuln-ID|V-73071"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
      cmd         : "uname -a"
      expect      : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "PGS9-00-012800 - The DBMS must be configured on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL - postgres version"
      info        : "PostgreSQL uses OpenSSL for the underlying encryption layer. It must be installed on an operating system that contains a certified FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140-2 OpenSSL libraries.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Install PostgreSQL on an operating system with FIPS-compliant cryptography enabled; or by other means ensure that FIPS 140-2-certified OpenSSL libraries are used by the DBMS."
      reference   : "800-171|3.13.11,800-53|SC-13,CAT|I,CCI|CCI-000803,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-87723r3_rule,STIG-ID|PGS9-00-012800,Vuln-ID|V-73071"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
      cmd         : "psql --version"
      expect      : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "PGS9-00-012800 - The DBMS must be configured on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL - fips_enabled"
      info        : "PostgreSQL uses OpenSSL for the underlying encryption layer. It must be installed on an operating system that contains a certified FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140-2 OpenSSL libraries.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Install PostgreSQL on an operating system with FIPS-compliant cryptography enabled; or by other means ensure that FIPS 140-2-certified OpenSSL libraries are used by the DBMS."
      reference   : "800-171|3.13.11,800-53|SC-13,CAT|I,CCI|CCI-000803,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-87723r3_rule,STIG-ID|PGS9-00-012800,Vuln-ID|V-73071"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
      file        : "/proc/sys/crypto/fips_enabled"
      regex       : "[0-9]"
      expect      : "^1$"
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "DISA_STIG_PostgreSQL_9-x_on_RHEL_v1r7_OS.audit from DISA PostgreSQL 9.x v1r7 STIG"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_PGS_SQL_9-x_V1R7_STIG.zip"
    </report>
  </else>
</if>

</check_type>
