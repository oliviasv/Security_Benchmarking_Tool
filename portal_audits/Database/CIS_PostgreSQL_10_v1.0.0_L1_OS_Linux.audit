#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2020/04/22 $
#
# Description   : This .audit is designed against the CIS Benchmark for PostgreSQL 10
#
#<ui_metadata>
#<display_name>CIS PostgreSQL 10 OS v1.0.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS PostgreSQL 10 OS v1.0.0</name>
#  <version>1.0.0</version>
#  <link>https://workbench.cisecurity.org/files/2235</link>
#</spec>
#<labels>CIS,postgres</labels>
#<benchmark_refs>LEVEL,CSCv6,CSCv7</benchmark_refs>
#<variables>
#  <variable>
#    <name>PG_SUPER_USER</name>
#    <default>postgres</default>
#    <description>PostgreSQL Super User</description>
#    <info>PostgreSQL Super User for psql use</info>
#  </variable>
#  <variable>
#    <name>PG_CONF_FILE</name>
#    <default>/var/lib/pgsql/10/data/postgresql.conf</default>
#    <description>postgresql.conf</description>
#    <info>full path to postgresql.conf</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<custom_item>
  type        : CMD_EXEC
  description : "1.1 Ensure packages are obtained from authorized repositories"
  info        : "When obtaining and installing software packages (typically via yum), it's imperative that packages are sourced only from valid and authorized repositories. For PostgreSQL, a short list of valid repositories would include CentOS (www.centos.org) and the official PostgreSQL website (yum.postgresql.org).
Rationale:
Being open source, PostgreSQL packages are widely available across the internet through RPM aggregators and providers. However, using invalid or unauthorized sources for packages can lead to implementing untested, defective, or malicious software.
Many organizations choose to implement a local yum repository within their organization. Care must be taken to ensure that only valid and authorized packages are downloaded and installed into such local repositories.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Alter the configured repositories so they only include valid and authorized sources of packages.
As an example of adding an authorized repository, we will install the PGDG repository RPM from 'yum.postgresql.org':
$ whoami
root
$ rpm -ivh https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
Retrieving https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
warning: /var/tmp/rpm-tmp.xU8FK1: Header V4 DSA/SHA1 Signature, key ID 442df0f8: NOKEY
Preparing...                ########################################### [100%]
   1:pgdg-centos10          ########################################### [100%]
Verify the repository has been added and is enabled:
$ whoami
root
$ yum repolist all | grep enabled:
base                        CentOS-6 - Base                    enabled: 6,713
extras                      CentOS-6 - Extras                  enabled:    31
pgdg10                      PostgreSQL 10.7 - x86_64           enabled:   536
updates                     CentOS-6 - Updates                 enabled:    96"
  reference   : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv6|2,CSCv7|2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "yum repolist all | grep enabled"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "1.2 Ensure Installation of Binary Packages"
  info        : "The PostgreSQL packages are installed on the Operating System from valid source.
Rationale:
Standard Linux distributions, although possessing the requisite packages, often do not have PostgreSQL pre-installed. The installation process includes installing the binaries and the means to generate a data cluster too. Package installation should include both the server and client packages. Contribution modules are optional depending upon one's architectural requirements (they are recommended though).
From a security perspective, it's imperative to verify the PostgreSQL binary packages are sourced from a valid Linux yum repository. The most common Linux repositories include CentOS base and PGDG base; however, it's up to the organization to validate. For a complete listing of all PostgreSQL binaries available via configured repositories inspect the output from yum provides postgres*.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If the version of PostgreSQL installed is not 10.x, the packages may be uninstalled using this command:
$ whoami
root
$ yum remove $(rpm -qa|grep postgres)
The next recommendation '1.3 Ensure Installation of Community Packages' describes how to explicitly choose which version of PostgreSQL to install, regardless of Linux distribution association.
Impact:
If the PostgreSQL version shipped as part of the default binary installation associated with your Linux distribution satisfies your requirements, this may be adequate for development and testing purposes. However, for production instances it's generally recommended to install the latest stable release of PostgreSQL."
  reference   : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv6|2,CSCv7|2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "rpm -qa|grep postgres"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "1.3 Ensure Installation of Community Packages"
  info        : "Adding, and installing, the PostgreSQL community packages to the host's package repository.
Rationale:
It's an unfortunate reality that Linux distributions do not always have the most up-to-date versions of PostgreSQL. Disadvantages of older releases include: missing bug patches, no access to highly desirable contribution modules, no access to 3rd party projects that are complimentary to PostgreSQL, and no upgrade path migrating from one version of PostgreSQL to the next. The worst set of circumstances is to be limited to a version of the RDBMS that has reached its end-of-life.
From a security perspective, it's imperative that Postgres Community Packages are only obtained from the official website https://yum.postgresql.org/. Being open source, the Postgres packages are widely available over the internet via myriad package aggregators and providers. Obtaining software from these unofficial sites risks installing defective, corrupt, or downright malicious versions of PostgreSQL.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "The following example blocks the outdated distro packages, adds the PGDG repository RPM for PostgreSQL version 10, and installs the client-server-contributions rpms to the host where you want to install the RDBMS:
$ whoami
root
$ vi /etc/yum.repos.d/CentOS-Base.repo
[base]
name=CentOS-$releasever - Base
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo
=os&infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
exclude=postgresql*  <-- add this line

#released updates
[updates]
name=CentOS-$releasever - Updates
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo
=updates&infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
exclude=postgresql*  <-- add this line
Using a web browser, go to http://yum.postgresql.org and navigate to the repo download link for your OS and version:
$ whoami
root
$ yum -y install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
Finally, install the PostgreSQL packages:
$ whoami
root
$ yum -y groupinstall 'PostgreSQL Database Server 10 PGDG'
Loaded plugins: fastestmirror
Setting up Group Process
Loading mirror speeds from cached hostfile
 * base: mirror.us.oneandone.net
 * extras: centos.mirrors.tds.net
 * updates: mirror.cisp.com
base                                                     | 3.7 kB     00:00
extras                                                   | 3.4 kB     00:00
updates                                                  | 3.4 kB     00:00
base/group_gz                                            | 242 kB     00:00
pgdg10/group_gz                                          |  249 B     00:00
Resolving Dependencies
--> Running transaction check
---> Package postgresql10.x86_64 0:10.7-1PGDG.rhel7 will be installed
---> Package postgresql10-contrib.x86_64 0:10.7-1PGDG.rhel7 will be installed
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.22)(64bit) for package: postgresql10-contrib-10.7-1PGDG.rhel7.x86_64
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.18)(64bit) for package: postgresql10-contrib-10.7-1PGDG.rhel7.x86_64
--> Processing Dependency: libxslt.so.1(LIBXML2_1.0.11)(64bit) for package: postgresql10-contrib-10.7-1PGDG.rhel7.x86_64
--> Processing Dependency: libxslt.so.1()(64bit) for package: postgresql10-contrib-10.7-1PGDG.rhel7.x86_64
---> Package postgresql10-libs.x86_64 0:10.7-1PGDG.rhel7 will be installed
---> Package postgresql10-server.x86_64 0:10.7-1PGDG.rhel7 will be installed
--> Running transaction check
---> Package libxslt.x86_64 0:1.1.26-2.el7_3.1 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

================================================================================
 Package                  Arch       Version                   Repository  Size
================================================================================
Installing:
 postgresql10             x86_64     10.7-1PGDG.rhel7          pgdg10     1.4 M
 postgresql10-contrib     x86_64     10.7-1PGDG.rhel7          pgdg10     492 k
 postgresql10-libs        x86_64     10.7-1PGDG.rhel7          pgdg10     289 k
 postgresql10-server      x86_64     10.7-1PGDG.rhel7          pgdg10     5.0 M
Installing for dependencies:
 libxslt                  x86_64     1.1.26-2.el7_3.1          base       452 k

Transaction Summary
================================================================================
Install       5 Package(s)

Total download size: 7.7 M
Installed size: 31 M
Downloading Packages:
(1/5): libxslt-1.1.26-2.el7_3.1.x86_64.rpm               | 452 kB     00:00
(2/5): postgresql10-10.7-1PGDG.rhel7.x86_64.rpm          | 1.4 MB     00:01
(3/5): postgresql10-contrib-10.7-1PGDG.rhel7.x86_64.rpm  | 492 kB     00:00
(4/5): postgresql10-libs-10.7-1PGDG.rhel7.x86_64.rpm     | 289 kB     00:00
(5/5): postgresql10-server-10.7-1PGDG.rhel7.x86_64.rpm   | 5.0 MB     00:00
--------------------------------------------------------------------------------
Total                                           2.5 MB/s | 7.7 MB     00:03
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : postgresql10-libs-10.7-1PGDG.rhel7.x86_64                    1/5
  Installing : postgresql10-10.7-1PGDG.rhel7.x86_64                         2/5
  Installing : libxslt-1.1.26-2.el7_3.1.x86_64                              3/5
  Installing : postgresql10-contrib-10.7-1PGDG.rhel6.x86_64                 4/5
  Installing : postgresql10-server-10.7-1PGDG.rhel6.x86_64                  5/5
  Verifying  : libxslt-1.1.26-2.el7_3.1.x86_64                              1/5
  Verifying  : postgresql10-10.7-1PGDG.rhel7.x86_64                         2/5
  Verifying  : postgresql10-libs-10.7-1PGDG.rhel7.x86_64                    3/5
  Verifying  : postgresql10-server-10.7-1PGDG.rhel7.x86_64                  4/5
  Verifying  : postgresql10-contrib-10.7-1PGDG.rhel7.x86_64                 5/5

Installed:
  postgresql10.x86_64 0:10.7-1PGDG.rhel7
  postgresql10-contrib.x86_64 0:10.7-1PGDG.rhel7
  postgresql10-libs.x86_64 0:10,7-1PGDG.rhel7
  postgresql10-server.x86_64 0:10,7-1PGDG.rhel7

Dependency Installed:
  libxslt.x86_64 0:1.1.26-2.el7_3.1

Complete!
Note: The above-mentioned example is referenced as an illustration only. Package names and versions may differ."
  reference   : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv6|18.1,CSCv7|18.3,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "yum list installed postgres*"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "1.4 Ensure systemd Service Files Are Enabled"
  info        : "Confirm, and correct if necessary, the PostgreSQL systemd service is enabled.
Rationale:
Enabling the systemd service on the OS ensures the database service is active when a change of state occurs as in the case of a system startup or reboot."
  solution    : "Irrespective of package source, PostgreSQL services can be identified because it typically includes the text string 'postgresql'. PGDG installs do not automatically register the service as a 'want' of the default systemd target. Multiple instances of PostgreSQL services often distinguish themselves using a version number.
$ whoami
root
$ systemctl enable postgresql-10
Created symlink from /etc/systemd/system/multi-user.target.wants/postgresql-10.service to /usr/lib/systemd/system/postgresql-10.service.
$ systemctl list-dependencies multi-user.target | grep -i postgres
* postgresql-10.service"
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|18,CSCv7|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "systemctl list-dependencies multi-user.target | grep -i postgresql"
  regex       : "postgresql-10.service"
  expect      : "^.*postgresql-10.service[\\s]*"
</custom_item>

<report type:"WARNING">
  description : "1.5 Ensure Data Cluster Initialized Successfully"
  info        : "First time installs of PostgreSQL requires the instantiation of the database cluster. A database cluster is a collection of databases that are managed by a single server instance.
Rationale:
For the purposes of security, PostgreSQL enforces ownership and permissions of the data-cluster such that:
* An initialized data-cluster is owned by the UNIX account that created it.
* The data-cluster cannot be accessed by other UNIX user-accounts.
* The data-cluster cannot be created or owned by root
* The PostgreSQL process cannot be invoked by root nor any UNIX user account other than the owner of the data cluster.
Incorrectly instantiating the data-cluster will result in a failed installation.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Attempting to instantiate a data cluster to an existing non-empty directory will fail:
$ whoami
root
$ /usr/pgsql-10/bin/postgresql-10-setup initdb
Data directory is not empty!
In the case of a cluster instantiation failure, one must delete/remove the entire data cluster directory and repeat the initdb command:
$ whoami
root
$ rm -rf ~postgres/10
$ /usr/pgsql-10/bin/postgresql-10-setup initdb
Initializing database ... OK"
  reference   : "CSCv6|14.4,CSCv7|14.6,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2306"
</report>

<custom_item>
  type        : CMD_EXEC
  description : "2.1 Ensure the file permissions mask is correct"
  info        : "Files are always created using a default set of permissions. File permissions can be restricted by applying a permissions mask called the umask. The postgres user account should use a umask of 077 to deny file access to all user accounts except the owner.
Rationale:
The Linux OS defaults the umask to 002, which means the owner and primary group can read and write the file, and other accounts are permitted to read the file. Not explicitly setting the umask to a value as restrictive as 077 allows other users to read, write, or even execute files and scripts created by the postgres user account. The alternative to using a umask is explicitly updating file permissions after file creation using the command line utility chmod (a manual and error prone process that is not advised)."
  solution    : "Depending upon the postgres user's environment, the umask is typically set in the initialization file .bash_profile, but may also be set in .profile or .bashrc. To set the umask, add the following to the appropriate profile file:
$ whoami
postgres
$ cd ~
$ ls -ld .{bash_profile,profile,bashrc}
ls: cannot access .profile: No such file or directory
ls: cannot access .bashrc: No such file or directory
-rwx------. 1 postgres postgres 267 Aug 14 12:59 .bash_profile
$ echo 'umask 077' >> .bash_profile
$ source .bash_profile
$ umask
0077
Default Value:
0022"
  reference   : "800-171|3.1.1,800-53|AC-3(4),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(4),LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "/bin/grep -i \\'umask\\' /var/lib/pgsql/.bash_profile /var/lib/pgsql/.profile /var/lib/pgsql/.bashrc"
  expect      : "[Uu][Mm][Aa][Ss][Kk] [0-7]+77"
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "2.2 Ensure the PostgreSQL pg_wheel group membership is correct - /etc/group"
  info        : "The group pg_wheel is explicitly created on a host where the PostgreSQL server is installed. Membership in this group enables an ordinary user account to gain 'superuser' access to a database cluster by using the sudo command (See 'Ensure sudo is configured correctly' later in this benchmark). Only user accounts authorized to have superuser access should be members of the pg_wheel group.
Rationale:
Users with unauthorized membership in the pg_wheel group can assume the privileges of the owner of the PostgreSQL RDBMS and administer the database, as well as accessing scripts, files, and other executables they should not be able to access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If the pg_wheel group does not exist, use the following command to create it:
$ whoami
root
$ groupadd pg_wheel && getent group pg_wheel
pg_wheel:x:502:
Note: that your system's group number may not be 502. That's OK.
Adding the postgres user to the newly created group is done by issuing:
$ whoami
root
$ gpasswd -a postgres pg_wheel
Adding user postgres to group pg_wheel
$ # verify membership
$ awk -F':' '/pg_wheel/{print $4}' /etc/group
postgres
Removing a user account from the 'pg_wheel' group is achieved by executing the following command:
$ whoami
root
$ gpasswd -d pg_wheel postgres
Removing user postgres from group pg_wheel
$ # verify the user was removed
$ awk -F':' '/pg_wheel/{print $4}' /etc/group
$"
  reference   : "800-171|3.1.1,800-53|AC-2,CN-L3|7.1.3.2(d),CSCv6|14.4,CSCv7|14.6,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1S,NESA|T5.2.1,NESA|T5.2.2,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "grep -i 'pg_wheel' /etc/group"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "2.2 Ensure the PostgreSQL pg_wheel group membership is correct - /etc/passwd"
  info        : "The group pg_wheel is explicitly created on a host where the PostgreSQL server is installed. Membership in this group enables an ordinary user account to gain 'superuser' access to a database cluster by using the sudo command (See 'Ensure sudo is configured correctly' later in this benchmark). Only user accounts authorized to have superuser access should be members of the pg_wheel group.
Rationale:
Users with unauthorized membership in the pg_wheel group can assume the privileges of the owner of the PostgreSQL RDBMS and administer the database, as well as accessing scripts, files, and other executables they should not be able to access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If the pg_wheel group does not exist, use the following command to create it:
$ whoami
root
$ groupadd pg_wheel && getent group pg_wheel
pg_wheel:x:502:
Note: that your system's group number may not be 502. That's OK.
Adding the postgres user to the newly created group is done by issuing:
$ whoami
root
$ gpasswd -a postgres pg_wheel
Adding user postgres to group pg_wheel
$ # verify membership
$ awk -F':' '/pg_wheel/{print $4}' /etc/group
postgres
Removing a user account from the 'pg_wheel' group is achieved by executing the following command:
$ whoami
root
$ gpasswd -d pg_wheel postgres
Removing user postgres from group pg_wheel
$ # verify the user was removed
$ awk -F':' '/pg_wheel/{print $4}' /etc/group
$"
  reference   : "800-171|3.1.1,800-53|AC-2,CN-L3|7.1.3.2(d),CSCv6|14.4,CSCv7|14.6,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1S,NESA|T5.2.1,NESA|T5.2.2,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "grep -i 'pg_wheel' /etc/passwd"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : FILE_CONTENT_CHECK
  description : "4.1 Ensure sudo is configured correctly"
  info        : "It is common to have more than one authorized individual administering the PostgreSQL service at the Operating System level. It is also quite common to permit login privileges to individuals on a PostgreSQL host who otherwise are not authorized to access the server's data cluster and files. Administering the PostgreSQL data cluster, as opposed to its data, is to be accomplished via a localhost login of a regular UNIX user account. Access to the postgres superuser account is restricted in such a manner as to interdict unauthorized access. sudo satisfies the requirements by escalating ordinary user account privileges as the PostgreSQL RDBMS superuser.
Rationale:
Without sudo, there would not be capabilities to strictly control access to the superuser account and to securely and authoritatively audit its use."
  solution    : "As superuser root, execute the command visudo to edit the /etc/sudoers file so the following line is present:
%pg_wheel ALL= /bin/su - postgres
This grants any Operating System user that is a member of the pg_wheel group to use sudo to become the postgres user.
Ensure that all Operating System user's that need such access are members of the group as detailed earlier in this benchmark."
  reference   : "800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSCv6|5.8,CSCv7|4.3,CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  file        : "/etc/sudoers"
  regex       : "^pg_wheel"
  expect      : "^pg_wheel[\\s]+ALL=[\\s]+/bin/su[\\s]+-[\\s]+postgres"
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "4.3 Ensure excessive function privileges are revoked"
  info        : "In certain situations, to provide required functionality, PostgreSQL needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by their organization. This is known as privilege elevation. Privilege elevation must be utilized only where necessary. Execute privileges for application functions should be restricted to authorized users only.
Rationale:
Ideally, all application source code should be vetted to validate interactions between the application and the logic in the database, but this is usually not possible or feasible with available resources even if the source code is available. The DBA should attempt to obtain assurances from the development organization that this issue has been addressed and should document what has been discovered. The DBA should also inspect all application logic stored in the database (in the form of functions, rules, and triggers) for excessive privileges.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Where possible, revoke SECURITY DEFINER on PostgreSQL functions. To change a SECURITY DEFINER function to SECURITY INVOKER, run the following SQL:
$ whoami
root
$ sudo su - postgres
$ psql -c 'ALTER FUNCTION [functionname] SECURITY INVOKER;'
If it is not possible to revoke SECURITY DEFINER, ensure the function can be executed by only the accounts that absolutely need such functionality:
REVOKE EXECUTE ON FUNCTION delete_customer(integer,boolean) FROM appreader;
REVOKE
Confirm that the appreader user may no longer execute the function:
SELECT proname, proacl FROM pg_proc WHERE proname = 'delete_customer';
     proname     |                         proacl
-----------------+--------------------------------------------------------
 delete_customer | {=X/postgres,postgres=X/postgres,appwriter=X/postgres}
(1 row)
Based on output above, appreader=X/postgres no longer exists in the proacl column results returned from query and confirms appreader is no longer granted execute privilege on the function."
  reference   : "800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSCv6|5.1,CSCv7|4,CSF|PR.AC-4,CSF|PR.PT-3,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2306"
# Note: Variable @PG_SUPER_USER@ replaced with "postgres" in field "cmd".
  cmd         : "su - postgres -c \'/bin/psql -c \"SELECT nspname, proname, proargtypes, prosecdef, rolname, proconfig FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN pg_authid a ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL;\"\'"
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "5.1 Ensure login via 'local' UNIX Domain Socket is configured correctly"
  info        : "A remote host login, via ssh, is arguably the most secure means of remotely accessing and administering the PostgreSQL server. Connecting with the psql client, via UNIX DOMAIN SOCKETS, using the peer authentication method is the most secure mechanism available for local connections. Provided a database user account of the same name of the UNIX account has already been defined in the database, even ordinary user accounts can access the cluster in a similarly highly secure manner.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Creation of a database account that matches the local account allows PEER authentication:
$ psql -c 'CREATE ROLE user1 WITH LOGIN;'
CREATE ROLE
Execute the following as the UNIX user account, the default authentication rules should now permit the login:
$ su - user1
$ whoami
user1
$ psql -d postgres
psql (10.6)
Type 'help' for help.

postgres=>
As per the host-based authentication rules in $PGDATA/pg_hba.conf, all login attempts via UNIX DOMAIN SOCKETS are processed on the line beginning with local.
This is the minimal rule that must be in place allowing PEER connections:
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             postgres                                peer
More traditionally, a rule like the following would be used to allow any local PEER connection:
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             all                                     peer
Once edited, the server process must reload the authentication file before it can take effect. Improperly configured rules cannot update i.e. the old rules remain in place. The PostgreSQL logs will report the outcome of the SIGHUP:
postgres=# select pg_reload_conf();
 pg_reload_conf
----------------
 t
(1 row)
The following examples illustrate other possible configurations. The resultant 'rule' of success/failure depends upon the first matching line:
# allow postgres user logins
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             postgres                                peer
# allow all local users
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             all                                     peer
# allow all local users only if they are connecting to a db named the same as their username
# e.g. if user 'bob' is connecting to a db named 'bob'
# TYPE  DATABASE        USER                                    METHOD
local   samerole        all                                     peer
# allow only local users who are members of the 'rw' role in the db
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             +rw                                     peer"
  reference   : "CSCv6|3.4,CSCv7|4.5,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2306"
</report>

<report type:"WARNING">
  description : "5.2 Ensure login via 'host' TCP/IP Socket is configured correctly"
  info        : "A large number of authentication METHODs are available for hosts connecting using TCP/IP sockets, including:
* trust
* reject
* md5
* scram-sha-256
* password
* gss
* sspi
* ident
* pam
* ldap
* radius
* cert
METHODs trust, password, and ident are not to be used for remote logins. METHOD md5 is the most popular and can be used in both encrypted and unencrypted sessions,however, it is vulnerable to packet replay attacks. It is recommended that scram-sha-256 be used instead of md5.
Use of the gss, sspi, pam, ldap, radius, and cert METHODs, while more secure than md5, are dependent upon the availability of external authenticating processes/services and thus are not covered in this benchmark.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Confirm a login attempt has been made by looking for a logged error message detailing the nature of the authenticating failure. In the case of failed login attempts, whether encrypted or unencrypted, check the following:
* The server should be sitting on a port exposed to the remote connecting host i.e. NOT ip address 127.0.0.1
listen_addresses = '*'
* An authenticating rule must exist in the file pg_hba.conf
This example permits only encrypted sessions for the postgres role and denies all unencrypted session for the postgres role:
 # TYPE    DATABASE           USER            ADDRESS                 METHOD
 hostssl    all             postgres         0.0.0.0/0                 scram-sha-256
 hostnossl  all             postgres         0.0.0.0/0                 reject
The following examples illustrate other possible configurations. The resultant 'rule' of success/failure depends upon the first matching line.
# allow 'postgres' user only from 'localhost/loopback' connections
# and only if you know the password
# TYPE    DATABASE        USER            ADDRESS                 METHOD
host      all             postgres        127.0.0.1/32            scram-sha-256

# allow users to connect remotely only to the database named after them,
# with the correct user password:
# (accepts both SSL and non-SSL connections)
# TYPE    DATABASE        USER            ADDRESS                 METHOD
host      samerole        all             0.0.0.0/0               scram-sha-256

# allow only those users who are a member of the 'rw' role to connect
# only to the database named after them, with the correct user password:
# (accepts both SSL and non-SSL connections)
# TYPE    DATABASE        USER            ADDRESS                 METHOD
host      samerole        +rw             0.0.0.0/0               scram-sha-256
Default Value:
The availability of the different password-based authentication methods depends on how a user's password on the server is encrypted (or hashed, more accurately). This is controlled by the configuration parameter password_encryption at the time the password is set. If a password was encrypted using the scram-sha-256 setting, then it can be used for the authentication methods scram-sha-256 and password (but password transmission will be in plain text in the latter case). The authentication method specification md5 will automatically switch to using the scram-sha-256 method in this case, as explained above, so it will also work. If a password was encrypted using the md5 setting, then it can be used only for the md5 and password authentication method specifications (again, with the password transmitted in plain text in the latter case). (Previous PostgreSQL releases supported storing the password on the server in plain text. This is no longer possible.) To check the currently stored password hashes, see the system catalog pg_authid.
To upgrade an existing installation from md5 to scram-sha-256, after having ensured that all client libraries in use are new enough to support SCRAM, set password_encryption = 'scram-sha-256' in postgresql.conf, reload the postmaster, make all users set new passwords, and change the authentication method specifications in pg_hba.conf to scram-sha-256."
  reference   : "CSCv6|14.2,CSCv7|14.4,LEVEL|1S"
  see_also    : "https://workbench.cisecurity.org/files/2306"
</report>

<custom_item>
  type        : CMD_EXEC
  description : "6.7 Ensure FIPS 140-2 OpenSSL Cryptography Is Used - fips_enabled"
  info        : "Install, configure, and use OpenSSL on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL. This provides PostgreSQL instances the ability to generate and validate cryptographic hashes to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owner's requirements.
Rationale:
Federal Information Processing Standard (FIPS) Publication 140-2 is a computer security standard developed by a U.S. Government and industry working group for validating the quality of cryptographic modules. Use of weak, or untested, encryption algorithms undermine the purposes of utilizing encryption to protect data. PostgreSQL uses OpenSSL for the underlying encryption layer.
The database and application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated. It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.
For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements for Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant. The security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A. Currently only Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140-2 OpenSSL libraries."
  solution    : "Configure OpenSSL to be FIPS compliant. PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official RHEL Documentation. Below is a general summary of the steps required:
* Install the dracut-fips package
$ yum -y install dracut-fips
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
[snip]
Resolving Dependencies
--> Running transaction check
---> Package dracut-fips.x86_64 0:033-554.el7 will be installed
--> Processing Dependency: hmaccalc for package: dracut-fips-033-554.el7.x86_64
--> Running transaction check
---> Package hmaccalc.x86_64 0:0.9.13-4.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved

 Package                      Arch                    Version                          Repository             Size

Installing:
 dracut-fips                  x86_64                  033-554.el7                      base                   61 k
Installing for dependencies:
 hmaccalc                     x86_64                  0.9.13-4.el7                     base                   26 k

Transaction Summary
Install  1 Package (+1 Dependent package)

Total download size: 87 k
Installed size: 107 k
Downloading packages:
[snip]
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : hmaccalc-0.9.13-4.el7.x86_64                                                                    1/2
  Installing : dracut-fips-033-554.el7.x86_64                                                                  2/2
  Verifying  : hmaccalc-0.9.13-4.el7.x86_64                                                                    1/2
  Verifying  : dracut-fips-033-554.el7.x86_64                                                                  2/2

Installed:
  dracut-fips.x86_64 0:033-554.el7

Dependency Installed:
  hmaccalc.x86_64 0:0.9.13-4.el7

Complete!
* Recreate the initramfs file
$ dracut -f
* Modify the kernel command line, e.g. GRUB_CMDLINE_LINUX, of the current kernel in the /etc/default/grub file by adding the following option: fips=1
* Run one, or both if unsure how the machine is booting, of the following commands:
# If booting from BIOS
$ grub2-mkconfig -o /boot/grub2/grub.cfg

# If booting from EFI
$ grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg
* If you have prelink installed you will want to execute prelink -u -a prior to the next reboot.
* Reboot the system for changes to take effect.
* Verify fips_enabled according to Audit Procedure above."
  reference   : "800-171|3.13.11,800-53|SC-13,CSCv6|14.2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "cat /proc/sys/crypto/fips_enabled"
  expect      : "1"
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "6.7 Ensure FIPS 140-2 OpenSSL Cryptography Is Used - openssl version"
  info        : "Install, configure, and use OpenSSL on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL. This provides PostgreSQL instances the ability to generate and validate cryptographic hashes to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owner's requirements.
Rationale:
Federal Information Processing Standard (FIPS) Publication 140-2 is a computer security standard developed by a U.S. Government and industry working group for validating the quality of cryptographic modules. Use of weak, or untested, encryption algorithms undermine the purposes of utilizing encryption to protect data. PostgreSQL uses OpenSSL for the underlying encryption layer.
The database and application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated. It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.
For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements for Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant. The security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A. Currently only Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140-2 OpenSSL libraries."
  solution    : "Configure OpenSSL to be FIPS compliant. PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official RHEL Documentation. Below is a general summary of the steps required:
* Install the dracut-fips package
$ yum -y install dracut-fips
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
[snip]
Resolving Dependencies
--> Running transaction check
---> Package dracut-fips.x86_64 0:033-554.el7 will be installed
--> Processing Dependency: hmaccalc for package: dracut-fips-033-554.el7.x86_64
--> Running transaction check
---> Package hmaccalc.x86_64 0:0.9.13-4.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved

 Package                      Arch                    Version                          Repository             Size

Installing:
 dracut-fips                  x86_64                  033-554.el7                      base                   61 k
Installing for dependencies:
 hmaccalc                     x86_64                  0.9.13-4.el7                     base                   26 k

Transaction Summary
Install  1 Package (+1 Dependent package)

Total download size: 87 k
Installed size: 107 k
Downloading packages:
[snip]
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : hmaccalc-0.9.13-4.el7.x86_64                                                                    1/2
  Installing : dracut-fips-033-554.el7.x86_64                                                                  2/2
  Verifying  : hmaccalc-0.9.13-4.el7.x86_64                                                                    1/2
  Verifying  : dracut-fips-033-554.el7.x86_64                                                                  2/2

Installed:
  dracut-fips.x86_64 0:033-554.el7

Dependency Installed:
  hmaccalc.x86_64 0:0.9.13-4.el7

Complete!
* Recreate the initramfs file
$ dracut -f
* Modify the kernel command line, e.g. GRUB_CMDLINE_LINUX, of the current kernel in the /etc/default/grub file by adding the following option: fips=1
* Run one, or both if unsure how the machine is booting, of the following commands:
# If booting from BIOS
$ grub2-mkconfig -o /boot/grub2/grub.cfg

# If booting from EFI
$ grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg
* If you have prelink installed you will want to execute prelink -u -a prior to the next reboot.
* Reboot the system for changes to take effect.
* Verify fips_enabled according to Audit Procedure above."
  reference   : "800-171|3.13.11,800-53|SC-13,CSCv6|14.2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  cmd         : "openssl version"
  expect      : "fips"
</custom_item>

<custom_item>
  type        : FILE_CONTENT_CHECK
  description : "7.3 Ensure WAL archiving is configured and functional - archive_command"
  info        : "Write Ahead Log (WAL) Archiving, or Log Shipping, is the process of sending transaction log files from the PRIMARY host either to one or more STANDBY hosts or to be archived on a remote storage device for later use, e.g. PITR. There are several utilities that can copy WALs including, but not limited to, cp, scp, sftp, and rynsc. Basically, the server follows a set of runtime parameters which defines when the WAL should be copied using one of the aforementioned utilities.
Rationale:
Unless the server has been correctly configured, one runs the risk of sending WALs in an unsecured, unencrypted fashion."
  solution    : "Change parameters and restart the server as required.
Note: SSH public keys must be generated and installed as per industry standards."
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  required    : YES
# Note: Variable @PG_CONF_FILE@ replaced with "/var/lib/pgsql/10/data/postgresql.conf" in field "file".
  file        : "/var/lib/pgsql/10/data/postgresql.conf"
  regex       : "^archive_command"
  expect      : "^archive_command = \'.*ssh"
</custom_item>

<custom_item>
  type        : FILE_CONTENT_CHECK
  description : "7.3 Ensure WAL archiving is configured and functional - archive_mode"
  info        : "Write Ahead Log (WAL) Archiving, or Log Shipping, is the process of sending transaction log files from the PRIMARY host either to one or more STANDBY hosts or to be archived on a remote storage device for later use, e.g. PITR. There are several utilities that can copy WALs including, but not limited to, cp, scp, sftp, and rynsc. Basically, the server follows a set of runtime parameters which defines when the WAL should be copied using one of the aforementioned utilities.
Rationale:
Unless the server has been correctly configured, one runs the risk of sending WALs in an unsecured, unencrypted fashion."
  solution    : "Change parameters and restart the server as required.
Note: SSH public keys must be generated and installed as per industry standards."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|14.2,CSCv7|14.4,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also    : "https://workbench.cisecurity.org/files/2306"
  required    : YES
# Note: Variable @PG_CONF_FILE@ replaced with "/var/lib/pgsql/10/data/postgresql.conf" in field "file".
  file        : "/var/lib/pgsql/10/data/postgresql.conf"
  regex       : "^archive_mode"
  expect      : "^archive_mode[\\s]+=[\\s]+on"
</custom_item>

<custom_item>
  type        : CMD_EXEC
  description : "8.3 Ensure the backup and restore tool, 'pgBackRest', is installed and configured"
  info        : "pgBackRest aims to be a simple, reliable backup and restore system that can seamlessly scale up to the largest databases and workloads. Instead of relying on traditional backup tools like tar and rsync, pgBackRest implements all backup features internally and uses a custom protocol for communicating with remote systems. Removing reliance on tar and rsync allows for better solutions to database-specific backup challenges. The custom remote protocol allows for more flexibility and limits the types of connections that are required to perform a backup which increases security.
Rationale:
The native PostgreSQL backup facility pg_dump provides adequate logical backup operations but does not provide for Point In Time Recovery (PITR). The PostgreSQL facility pg_basebackup performs physical backup of the database files and does provide for PITR, but it is constrained by single threading. Both of these methodologies are standard in the PostgreSQL ecosystem and appropriate for particular backup/recovery needs. pgBackRest offers another option with much more robust features and flexibility.
pgBackRest is open source software developed to perform efficient backups on PostgreSQL databases that measure in tens of terabytes and greater. It supports per file checksums, compression, partial/failed backup resume, high-performance parallel transfer, asynchronous archiving, tablespaces, expiration, full/differential/incremental, local/remote operation via SSH, hard-linking, restore, backup encryption, and more. pgBackRest is written in C and Perl and does not depend on rsync or tar but instead performs its own deltas which gives it maximum flexibility. Finally, pgBackRest provides an easy to use internal repository listing backup details accessible via the pgbackrest info command, as illustrated below.
$ pgbackrest info
stanza: proddb01
status: ok

db (current)
  wal archive min/max (10.6-1): 000000010000000000000012 / 000000010000000000000017

        full backup: 20181002-153106F
            timestamp start/stop: 2018-10-02 15:31:06 / 2018-10-02 15:31:49
            wal start/stop: 000000010000000000000012 / 000000010000000000000012
            database size: 29.4MB, backup size: 29.4MB
            repository size: 3.4MB, repository backup size: 3.4MB

        diff backup: 20181002-153106F_20181002-173109D
            timestamp start/stop: 2018-10-02 17:31:09 / 2018-10-02 17:31:19
            wal start/stop: 000000010000000000000015 / 000000010000000000000015
            database size: 29.4MB, backup size: 2.6MB
            repository size: 3.4MB, repository backup size: 346.8KB
            backup reference list: 20181002-153106F

        incr backup: 20181002-153106F_20181002-183114I
            timestamp start/stop: 2018-10-02 18:31:14 / 2018-10-02 18:31:22
            wal start/stop: 000000010000000000000017 / 000000010000000000000017
            database size: 29.4MB, backup size: 8.2KB
            repository size: 3.4MB, repository backup size: 519B
            backup reference list: 20181002-153106F, 20181002-153106F_20181002-173109D

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "pgBackRest is not installed nor configured for PostgreSQL by default, but instead is maintained as a GitHub project. Fortunately, it is a part of the PGDG repository and can be easily installed:
$ whoami
root
$ Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirror.cc.columbia.edu
 * epel: mirror.us.leaseweb.net
 * extras: mirror.es.its.nyu.edu
 * updates: mirror.cogentco.com
Resolving Dependencies
[snip]

Dependencies Resolved

 =================================================================================================================
 Package                               Arch               Version                         Repository          Size
 =================================================================================================================
Installing:
 pgbackrest                            x86_64             2.10-1.rhel7                    pgdg10             241 k
Installing for dependencies:
 mailcap                               noarch             2.1.41-2.el7                    base                31 k
 perl-Business-ISBN                    noarch             2.06-2.el7                      base                25 k
 perl-Business-ISBN-Data               noarch             20120719.001-2.el7              base                24 k
 perl-Compress-Raw-Bzip2               x86_64             2.061-3.el7                     base                32 k
 perl-Compress-Raw-Zlib                x86_64             1:2.061-4.el7                   base                57 k
 perl-DBD-Pg                           x86_64             2.19.3-4.el7                    base               195 k
 perl-DBI                              x86_64             1.627-4.el7                     base               802 k
 perl-Data-Dumper                      x86_64             2.145-3.el7                     base                47 k
 perl-Digest                           noarch             1.17-245.el7                    base                23 k
 perl-Digest-MD5                       x86_64             2.52-3.el7                      base                30 k
 perl-Digest-SHA                       x86_64             1:5.85-4.el7                    base                58 k
 perl-Encode-Locale                    noarch             1.03-5.el7                      base                16 k
 perl-File-Listing                     noarch             6.04-7.el7                      base                13 k
 perl-HTML-Parser                      x86_64             3.71-4.el7                      base               115 k
 perl-HTML-Tagset                      noarch             3.20-15.el7                     base                18 k
 perl-HTTP-Cookies                     noarch             6.01-5.el7                      base                26 k
 perl-HTTP-Daemon                      noarch             6.01-8.el7                      base                21 k
 perl-HTTP-Date                        noarch             6.02-8.el7                      base                14 k
 perl-HTTP-Message                     noarch             6.06-6.el7                      base                82 k
 perl-HTTP-Negotiate                   noarch             6.01-5.el7                      base                17 k
 perl-IO-Compress                      noarch             2.061-2.el7                     base               260 k
 perl-IO-HTML                          noarch             1.00-2.el7                      base                23 k
 perl-IO-Socket-IP                     noarch             0.21-5.el7                      base                36 k
 perl-IO-Socket-SSL                    noarch             1.94-7.el7                      base               115 k
 perl-JSON-PP                          noarch             2.27202-2.el7                   base                55 k
 perl-LWP-MediaTypes                   noarch             6.02-2.el7                      base                24 k
 perl-Mozilla-CA                       noarch             20130114-5.el7                  base                11 k
 perl-Net-Daemon                       noarch             0.48-5.el7                      base                51 k
 perl-Net-HTTP                         noarch             6.06-2.el7                      base                29 k
 perl-Net-LibIDN                       x86_64             0.12-15.el7                     base                28 k
 perl-Net-SSLeay                       x86_64             1.55-6.el7                      base               285 k
 perl-PlRPC                            noarch             0.2020-14.el7                   base                36 k
 perl-TimeDate                         noarch             1:2.30-2.el7                    base                52 k
 perl-URI                              noarch             1.60-9.el7                      base               106 k
 perl-WWW-RobotRules                   noarch             6.02-5.el7                      base                18 k
 perl-XML-LibXML                       x86_64             1:2.0018-5.el7                  base               373 k
 perl-XML-NamespaceSupport             noarch             1.11-10.el7                     base                18 k
 perl-XML-SAX                          noarch             0.99-9.el7                      base                63 k
 perl-XML-SAX-Base                     noarch             1.08-7.el7                      base                32 k
 perl-libwww-perl                      noarch             6.05-2.el7                      base               205 k
 perl-version                          x86_64             3:0.99.07-3.el7                 base                84 k

Transaction Summary
===================================================================================================================
Install  1 Package (+41 Dependent packages)

Total download size: 3.7 M
Installed size: 9.4 M
[snip]
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
[snip]
Installed:
  pgbackrest.x86_64 0:2.10-1.rhel7

Dependency Installed:
  mailcap.noarch 0:2.1.41-2.el7                               perl-Business-ISBN.noarch 0:2.06-2.el7
  perl-Business-ISBN-Data.noarch 0:20120719.001-2.el7         perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7
  perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7                 perl-DBD-Pg.x86_64 0:2.19.3-4.el7
  perl-DBI.x86_64 0:1.627-4.el7                               perl-Data-Dumper.x86_64 0:2.145-3.el7
  perl-Digest.noarch 0:1.17-245.el7                           perl-Digest-MD5.x86_64 0:2.52-3.el7
  perl-Digest-SHA.x86_64 1:5.85-4.el7                         perl-Encode-Locale.noarch 0:1.03-5.el7
  perl-File-Listing.noarch 0:6.04-7.el7                       perl-HTML-Parser.x86_64 0:3.71-4.el7
  perl-HTML-Tagset.noarch 0:3.20-15.el7                       perl-HTTP-Cookies.noarch 0:6.01-5.el7
  perl-HTTP-Daemon.noarch 0:6.01-8.el7                        perl-HTTP-Date.noarch 0:6.02-8.el7
  perl-HTTP-Message.noarch 0:6.06-6.el7                       perl-HTTP-Negotiate.noarch 0:6.01-5.el7
  perl-IO-Compress.noarch 0:2.061-2.el7                       perl-IO-HTML.noarch 0:1.00-2.el7
  perl-IO-Socket-IP.noarch 0:0.21-5.el7                       perl-IO-Socket-SSL.noarch 0:1.94-7.el7
  perl-JSON-PP.noarch 0:2.27202-2.el7                         perl-LWP-MediaTypes.noarch 0:6.02-2.el7
  perl-Mozilla-CA.noarch 0:20130114-5.el7                     perl-Net-Daemon.noarch 0:0.48-5.el7
  perl-Net-HTTP.noarch 0:6.06-2.el7                           perl-Net-LibIDN.x86_64 0:0.12-15.el7
  perl-Net-SSLeay.x86_64 0:1.55-6.el7                         perl-PlRPC.noarch 0:0.2020-14.el7
  perl-TimeDate.noarch 1:2.30-2.el7                           perl-URI.noarch 0:1.60-9.el7
  perl-WWW-RobotRules.noarch 0:6.02-5.el7                     perl-XML-LibXML.x86_64 1:2.0018-5.el7
  perl-XML-NamespaceSupport.noarch 0:1.11-10.el7              perl-XML-SAX.noarch 0:0.99-9.el7
  perl-XML-SAX-Base.noarch 0:1.08-7.el7                       perl-libwww-perl.noarch 0:6.05-2.el7
  perl-version.x86_64 3:0.99.07-3.el7

Complete!
Once installed, pgBackRest must be configured for things like stanza name, backup location, retention policy, logging, etc. Please consult the configuration guide.
If employing pgBackRest for your backup/recovery solution, ensure the repository, base backups, and WAL archives are stored on a reliable file system separate from the database server. Further, the external storage system where backups resided should have limited access to only those system administrators as necessary. Finally, as with any backup/recovery solution, stringent testing must be conducted. A backup is only good if it can be restored successfully."
  reference   : "CSCv6|10,CSCv7|10.1,CSCv7|10.2,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2306"
# Note: Variable @PG_SUPER_USER@ replaced with "postgres" in field "cmd".
  cmd         : "su - postgres -c \"pgbackrest info\""
  expect      : "MANUAL_REVIEW"
  severity    : MEDIUM
</custom_item>

</check_type>
