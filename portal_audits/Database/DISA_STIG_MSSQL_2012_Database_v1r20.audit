#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.0 $
# $Date: 2020/06/22 $
#
# Description : This document implements the security configuration as recommended by the
#               DISA Microsoft SQL Server Database 2012 v1r20 STIG.
#
#<ui_metadata>
#<display_name>DISA STIG SQL Server 2012 Database Audit v1r20</display_name>
#<spec>
#  <type>DISA STIG</type>
#  <name>DISA STIG SQL Server 2012 Database</name>
#  <version>1.20.0</version>
#  <link>https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip</link>
#</spec>
#<labels>database,disa,mssql,mssql_2012</labels>
#<benchmark_refs>CAT,CCI,Rule-ID,STIG-ID,Vuln-ID,Group-ID</benchmark_refs>
#<variables>
#  <variable>
#    <name>TRACE_ID</name>
#    <default>1</default>
#    <description>Audit Trace ID</description>
#    <info>This is the ID of the trace which should include the required event IDs.</info>
#  </variable>
#  <variable>
#    <name>MAX_CONN</name>
#    <default>32767</default>
#    <description>Maximum Connections</description>
#    <info>This is the value that determines the maximum number of connections that are allowed to your SQL server.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Database" db_type:"SQLServer" version:"1">
<group_policy:"DISA STIG SQL Server 2012 Database audit">

<report type:"WARNING">
  description : "DISA_STIG_MSSQL_2012_Database_v1r20.audit from DISA Microsoft SQL Server Instance 2012 v1r20 STIG"
  info        : "This STIG has been sunset by DISA and vendor support has ended."
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-021300 - SQL Server must protect data at rest and ensure confidentiality and integrity of data."
  info        : "This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information.  Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use.

User-generated data, as well as, application-specific configuration data, needs to be protected. Configurations and/or rule sets for firewalls, gateways, intrusion detection/prevention systems, filtering routers, and authenticator content are examples of system information likely requiring protection. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate.

If the confidentiality and integrity of SQL Server data is not protected, the data will be open to compromise and unauthorized modification.

Protective measures include encryption, physical security of the facility where the storage devices reside, operating system file permissions, and organizational controls.  Each of these should be applied as necessary and appropriate."
  solution    : "Apply appropriate controls to protect the confidentiality and integrity of data on a secondary device.

Where encryption is required, this can be done by full-disk encryption or by database encryption. To enable database encryption, create a master key, create a database encryption key, and protect it by using mechanisms tied to the master key, and then set encryption on.

Implement physical security measures, operating system access control lists and organizational controls appropriate to the sensitivity level of the data in the database(s)."
  reference   : "800-171|3.13.16,800-53|SC-28(1),CAT|II,CCI|CCI-001199,CSCv6|13.2,CSF|PR.DS-1,ITSG-33|SC-28(1),Rule-ID|SV-53265r5_rule,STIG-ID|SQL2-00-021300,TBA-FIISB|28.1,Vuln-ID|V-40911"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT d.name AS [Database Name],CASE e.encryption_state WHEN 0 THEN 'No database encryption key present, no encryption' WHEN 1 THEN 'Unencrypted' WHEN 2 THEN 'Encryption in progress' WHEN 3 THEN 'Encrypted' WHEN 4 THEN 'Key change in progress' WHEN 5 THEN 'Decryption in progress' WHEN 6 THEN 'Protection change in progress' END AS [Encryption State] FROM sys.dm_database_encryption_keys e RIGHT JOIN sys.databases d ON DB_NAME(e.database_id) = d.name WHERE d.name NOT IN ('master','model','msdb')ORDER BY 1;"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-000300 - SQL Server must maintain and support organization-defined security labels on stored information."
  info        : "Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but, either way, it is imperative these assignments are maintained while the data is in storage. If the security attributes are lost when the data is stored, there is the risk of a data compromise.

The sensitivity marking or labeling of stored data items promotes the correct handling and protection of data.  Without such notification, the user may unwittingly disclose sensitive data to unauthorized users.

(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop SQL or application code or acquire a third party tool to perform data labeling."
  reference   : "CAT|II,CCI|CCI-002262,Rule-ID|SV-53912r4_rule,STIG-ID|SQL2-00-000300,Vuln-ID|V-41389"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-000400 - SQL Server must maintain and support organization-defined security labels on information in process."
  info        : "Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.

Organizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization-defined security attributes must maintain the binding of these attributes to the data when the data is transmitted.

If the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.

The sensitivity marking or labeling of data items promotes the correct handling and protection of data. Without such notification, the user may unwittingly disclose sensitive data to unauthorized users. Security labels must be correctly maintained throughout transmission.

(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop SQL or application code or acquire a third party tool to perform data labeling."
  reference   : "CAT|II,CCI|CCI-002263,Rule-ID|SV-53914r4_rule,STIG-ID|SQL2-00-000400,Vuln-ID|V-41391"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-000500 - SQL Server must maintain and support organization-defined security labels on data in transmission."
  info        : "Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.

Organizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization-defined security attributes must maintain the binding of these attributes to the data when the data is transmitted.

If the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.

The sensitivity marking or labeling of data items promotes the correct handling and protection of data. Without such notification, the user may unwittingly disclose sensitive data to unauthorized users. Security labels must be correctly maintained throughout transmission.

(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop SQL or application code or acquire a third party tool to perform data labeling."
  reference   : "CAT|II,CCI|CCI-002264,Rule-ID|SV-53916r4_rule,STIG-ID|SQL2-00-000500,Vuln-ID|V-41392"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-000900 - SQL Server must allow authorized users to associate security labels to information in the database."
  info        : "Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions, or support other aspects of the information security policy.

Examples of application security attributes are classified, FOUO, sensitive, etc.

Throughout the course of normal usage, authorized users of applications that handle sensitive data will have the need to associate security attributes with information. Applications that maintain the binding of organization-defined security attributes to data must ensure authorized users can associate security attributes with information. For databases, this is accomplished via labeling.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop SQL code or acquire a third party tool to perform data labeling. SQL Server Label Security Toolkit can be downloaded from http://www.codeplex.com. This tool can satisfy all data labeling and security data labeling requirements."
  reference   : "CAT|II,CCI|CCI-002289,Rule-ID|SV-53917r3_rule,STIG-ID|SQL2-00-000900,Vuln-ID|V-41393"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-009200 - SQL Server must be protected from unauthorized access by developers."
  info        : "Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.

Developers granted elevated database and/or operating system privileges on production databases can affect the operation and/or security of the database system. Operating system and database privileges assigned to developers on production systems should not be allowed."
  solution    : "Remove unnecessary developer accounts from SQL Server instances hosting only production databases, by running the following SQL script:

USE master
DROP LOGIN <'account name'>"
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-002220,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53920r4_rule,STIG-ID|SQL2-00-009200,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41395"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name AS 'Account Name', CONVERT(varchar(10), create_date, 20) AS 'Account Create Date', CONVERT(varchar(10), LOGINPROPERTY(name, 'PasswordLastSetTime'), 20) AS 'Password Last Set on' FROM sys.server_principals WHERE NOT TYPE IN ('C', 'R', 'U') AND NOT name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##') AND sid <> CONVERT(VARBINARY(85), 0x01) AND is_disabled <> 1 ORDER BY name"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-009300 - SQL Server must be protected from unauthorized access by developers on shared production/development host systems."
  info        : "Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.

Developers granted elevated database and/or operating system privileges on systems that support both development and production databases can affect the operation and/or security of the production database system. Operating system and database privileges assigned to developers on shared development and production systems must be restricted."
  solution    : "Within the system documentation, clearly identify if SQL Server is hosting both development and production databases.

Restrict developer privileges to production objects to only objects and data where those privileges are required and authorized by running the following scripts as needed:

Remove the user from direct access to server permission by running the following script:
USE master
REVOKE <'server permission name'> TO <'account name'> CASCADE

Remove the user from user-defined role access by running the following script:
USE master
ALTER SERVER ROLE [<'server role name'>] DROP MEMBER <'user name'>

Remove permissions from developer user accounts that grant permissions beyond the development database.

Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User >> Securables.

Remove 'Securables' permissions from accounts that are beyond what is required.

Navigate from 'Securables' to 'Server Roles'.

Remove 'Server Roles' permissions from accounts that are beyond what is required.

Navigate from 'Server Roles' to 'Users mapped to the login'.

Remove 'Users mapped to the login' permissions from accounts that are beyond what is required."
  reference   : "800-171|3.1.5,800-53|AC-6,CAT|II,CCI|CCI-002220,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.1|7.1.2,PCI-DSSv3.2|7.1.2,Rule-ID|SV-53921r2_rule,STIG-ID|SQL2-00-009300,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-41396"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name AS 'Account Name', CONVERT(varchar(10), create_date, 20) AS 'Account Create Date', CONVERT(varchar(10), LOGINPROPERTY(name, 'PasswordLastSetTime'), 20) AS 'Password Last Set on' FROM sys.server_principals WHERE NOT TYPE IN ('C', 'R', 'U') AND NOT name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##') AND sid <> CONVERT(VARBINARY(85), 0x01) AND is_disabled <> 1 ORDER BY name"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-009500 - Administrative privileges, built-in server roles and built-in database roles must be assigned to the DBMS login accounts that require them via custom roles, and not directly."
  info        : "SQL Server must employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.

Privileges granted outside the role of the application user job function are more likely to go unmanaged or without oversight for authorization. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.

SQL Server built-in administrative privileges, built-in server roles and built-in database roles must not be assigned directly to administrative user accounts (that is, server logins and database users). If administrative user accounts have direct access to administrative roles, this access must be removed, with the exception of administrative roles that the DBMS assigns to the special database principal [dbo], and will not allow to be altered.

The built-in server role 'sysadmin' is a partial exception. This cannot be granted to a user-defined role, only to a login account. Most (not necessarily all) database administrators will need to be members of sysadmin. Without this, most DBCC commands and the system stored procedures/functions listed below are unavailable. The users who require such access must be documented and approved.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User Mapping >> <'highlight the database'> >> review 'Database role membership' each database.

Remove 'Database role membership' by clicking the appropriate check box.

Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> Server Roles.

Remove 'Server roles' by clicking the appropriate check box.

The special database principal [dbo] is an exception.  It is mapped to the server login that is the database owner.  Some roles cannot be mapped to it or unmapped from it.

The built-in server role 'sysadmin' is a partial exception.  See the Vulnerability Discussion."
  reference   : "CAT|II,CCI|CCI-002220,Rule-ID|SV-53922r5_rule,STIG-ID|SQL2-00-009500,Vuln-ID|V-41397"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011050 - SQL Server utilizing Discretionary Access Control (DAC) must enforce a policy that limits propagation of access rights."
  info        : "Discretionary Access Control (DAC) is based on the premise that individual users are 'owners' of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment.

DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled file permissions. DAC models have the potential for the access controls to propagate without limit, resulting in unauthorized access to said objects.

When applications provide a discretionary access control mechanism, the application must be able to limit the propagation of those access rights.

The DBMS must ensure the recipient of object permissions possesses only the access intended. The database must enforce the ability to limit unauthorized rights propagation. If propagation is not prevented, users can continue to grant rights to other users without limit."
  solution    : "Document and obtain approval for each GRANT_WITH_GRANT_OPTION that is required.

Correct each unapproved GRANT_WITH_GRANT_OPTION with REVOKE and GRANT statements of the form (replacing 'UPDATE' with the actual permission at issue):
REVOKE UPDATE ON SampleTable FROM SampleUserOrRole CASCADE;
GRANT UPDATE ON SampleTable TO SampleRole;  -- Note, no WITH GRANT OPTION clause here."
  reference   : "800-171|3.1.1,800-53|AC-3(7),CAT|II,CCI|CCI-002165,CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSF|PR.AC-4,CSF|PR.PT-3,HIPAA|164.310(a)(2)(iii),Rule-ID|SV-53918r3_rule,STIG-ID|SQL2-00-011050,Vuln-ID|V-41394"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "Select u.name, p.permission_name from sys.database_permissions as p JOIN sys.server_principals AS u ON u.principal_id = p.grantee_principal_id WHERE state_desc = 'GRANT_WITH_GRANT_OPTION'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 14'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 14"
  sql_types   : POLICY_INTEGER
  sql_expect  : "14"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 15'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 15"
  sql_types   : POLICY_INTEGER
  sql_expect  : "15"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 18'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 18"
  sql_types   : POLICY_INTEGER
  sql_expect  : "18"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 20'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 20"
  sql_types   : POLICY_INTEGER
  sql_expect  : "20"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 102'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 102"
  sql_types   : POLICY_INTEGER
  sql_expect  : "102"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 103'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 103"
  sql_types   : POLICY_INTEGER
  sql_expect  : "103"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 104'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 104"
  sql_types   : POLICY_INTEGER
  sql_expect  : "104"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 105'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 105"
  sql_types   : POLICY_INTEGER
  sql_expect  : "105"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 106'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 106"
  sql_types   : POLICY_INTEGER
  sql_expect  : "106"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 107'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 107"
  sql_types   : POLICY_INTEGER
  sql_expect  : "107"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 108'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 108"
  sql_types   : POLICY_INTEGER
  sql_expect  : "108"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 109'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 109"
  sql_types   : POLICY_INTEGER
  sql_expect  : "109"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 110'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 110"
  sql_types   : POLICY_INTEGER
  sql_expect  : "110"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 111'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 111"
  sql_types   : POLICY_INTEGER
  sql_expect  : "111"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 112'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 112"
  sql_types   : POLICY_INTEGER
  sql_expect  : "112"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 113'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 113"
  sql_types   : POLICY_INTEGER
  sql_expect  : "113"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 115'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 115"
  sql_types   : POLICY_INTEGER
  sql_expect  : "115"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 116'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 116"
  sql_types   : POLICY_INTEGER
  sql_expect  : "116"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 117'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 117"
  sql_types   : POLICY_INTEGER
  sql_expect  : "117"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 118'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 118"
  sql_types   : POLICY_INTEGER
  sql_expect  : "118"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 128'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 128"
  sql_types   : POLICY_INTEGER
  sql_expect  : "128"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 129'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 129"
  sql_types   : POLICY_INTEGER
  sql_expect  : "129"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 130'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 130"
  sql_types   : POLICY_INTEGER
  sql_expect  : "130"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 131'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 131"
  sql_types   : POLICY_INTEGER
  sql_expect  : "131"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 132'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 132"
  sql_types   : POLICY_INTEGER
  sql_expect  : "132"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 133'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 133"
  sql_types   : POLICY_INTEGER
  sql_expect  : "133"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 134'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 134"
  sql_types   : POLICY_INTEGER
  sql_expect  : "134"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 135'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 135"
  sql_types   : POLICY_INTEGER
  sql_expect  : "135"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 152'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 152"
  sql_types   : POLICY_INTEGER
  sql_expect  : "152"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 153'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 153"
  sql_types   : POLICY_INTEGER
  sql_expect  : "153"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 170'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 170"
  sql_types   : POLICY_INTEGER
  sql_expect  : "170"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 171'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 171"
  sql_types   : POLICY_INTEGER
  sql_expect  : "171"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 172'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 172"
  sql_types   : POLICY_INTEGER
  sql_expect  : "172"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 173'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 173"
  sql_types   : POLICY_INTEGER
  sql_expect  : "173"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 175'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 175"
  sql_types   : POLICY_INTEGER
  sql_expect  : "175"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 176'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 176"
  sql_types   : POLICY_INTEGER
  sql_expect  : "176"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 177'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 177"
  sql_types   : POLICY_INTEGER
  sql_expect  : "177"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-011200 - SQL Server must provide audit record generation capability for organization-defined auditable events within the database - 'Event ID 178'"
  info        : "Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.

Organizations define which application components shall provide auditable events.

The DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system."
  solution    : "Create a trace that meets all auditing requirements.

The script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-53928r4_rule,STIG-ID|SQL2-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-41402"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
# Note: Variable @TRACE_ID@ replaced with "1" in field "sql_request".
  sql_request : "SELECT DISTINCT(eventid) FROM sys.FN_TRACE_GETEVENTINFO('1') WHERE eventid = 178"
  sql_types   : POLICY_INTEGER
  sql_expect  : "178"
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-014900 - SQL Server must be monitored to discover unauthorized changes to functions."
  info        : "When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.

If SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

This requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the SQL Server software libraries or configuration, such as Functions, can lead to unauthorized or compromised installations.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure a SQL Server timed job that automatically checks all system and user-defined Functions for being modified.

(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)"
  reference   : "CAT|II,CCI|CCI-001499,Rule-ID|SV-53930r4_rule,STIG-ID|SQL2-00-014900,Vuln-ID|V-41403"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-015100 - SQL Server must be monitored to discover unauthorized changes to triggers."
  info        : "When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.

If SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

This requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the SQL Server software libraries or configuration, such as Triggers, can lead to unauthorized or compromised installations.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure a SQL Server timed job that automatically checks all system and user-defined Triggers for modification.

(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)"
  reference   : "CAT|II,CCI|CCI-001499,Rule-ID|SV-53931r4_rule,STIG-ID|SQL2-00-015100,Vuln-ID|V-41404"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<report type:"WARNING">
  description : "SQL2-00-015200 - SQL Server must be monitored to discover unauthorized changes to stored procedures."
  info        : "When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.

If SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

This requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the SQL Server software libraries or configuration, such as Stored Procedures, can lead to unauthorized or compromised installations.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure a SQL Server timed job that automatically checks all system and user-defined Stored Procedures for modification.

(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)"
  reference   : "CAT|II,CCI|CCI-001499,Rule-ID|SV-53933r4_rule,STIG-ID|SQL2-00-015200,Vuln-ID|V-41406"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-015600 - Database objects must be owned by accounts authorized for ownership."
  info        : "SQL Server database ownership is a higher level privilege that grants full rights to everything in that database, including the right to grant privileges to others. SQL Server requires that the owner of a database object be a user, and only one user can be the assigned owner of a database object. This tends to minimize the risk that multiple users could gain unauthorized access, except the one individual who is the owner.

Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Unmanaged or uncontrolled ownership of databases can lead to unauthorized granting of privileges and database alterations.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Add and/or update system documentation to include any accounts authorized for object ownership and remove any account not authorized.

Reassign database ownership to authorized database owner account:
Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Databases >> right click <'database name'> >> Properties >> Files.
Select new database 'Owner':
Navigate to click on [...] >> Select new Database Owner >> Browse... >> click on box to indicate account >> <'OK'> >> <'OK'> >> <'OK'>"
  reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001499,CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-53935r2_rule,STIG-ID|SQL2-00-015600,Vuln-ID|V-41407"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name AS 'Database name', SUSER_SNAME(owner_sid) AS 'Database Owner', state_desc AS 'Database state' FROM sys.databases"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : "Manual Review Required", NULL, NULL
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-016900 - Unused database components and database objects must be removed."
  info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for applications to provide or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software demonstrations or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, yet cannot be disabled.

Applications must adhere to the principles of least functionality by providing only essential capabilities.

Unused and unnecessary SQL Server components increase the number of available attack vectors to SQL Server by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "If any database components or objects of SQL Server are required for operation of applications that will be accessing SQL Server data or configuration, include them in the system documentation. If any unused components or objects of SQL Server are installed, uninstall or remove unused components or objects."
  reference   : "CAT|II,CCI|CCI-000381,Rule-ID|SV-53937r3_rule,STIG-ID|SQL2-00-016900,Vuln-ID|V-41409"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-019300 - SQL Server must encrypt information stored in the database."
  info        : "When data is written to digital media, such as hard drives, mobile computers, external/removable hard drives, personal digital assistants, flash/thumb drives, etc., there is risk of data loss and/or compromise.

An organizational assessment of risk guides the selection of media and associated information contained on that media requiring restricted access. Organizations need to document, in policy and procedures, the media requiring restricted access, individuals authorized to access the media, and the specific measures taken to restrict access.

Fewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. In these situations, it is assumed the physical access controls where the media resides provide adequate protection.

As part of a defense-in-depth strategy, the organization considers routinely encrypting information at rest on selected secondary storage devices. The decision whether to employ cryptography is the responsibility of the information owner/steward, who exercises discretion within the framework of applicable rules, policies and law. The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information.

The strength of mechanisms is commensurate with the classification and sensitivity of the information.

Information at rest, when not encrypted, is open to compromise from attackers who have gained unauthorized access to the data files.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Use third-party tools or configure SQL Server to encrypt data stored in the database. Use only NIST-certified or NSA-approved cryptography to provide encryption.

Run the following SQL script to create a certificate:
USE <'database name'>
CREATE CERTIFICATE <'certificate name'>
   ENCRYPTION BY PASSWORD = '<'password'>'
   FROM FILE = <'path/file_name'>
   WITH SUBJECT = 'name of person creating key',
   EXPIRY_DATE = '<'expiration date: yyyymmdd'>'

Run the following SQL script to create a symmetric key and assign an existing certificate:
USE <'database name'>
CREATE SYMMETRIC KEY <'key name'>
   WITH ALGORITHM = AES_256
   ENCRYPTION BY <'certificate name'>

Set SQL Server configuration settings to encrypt databases, tables, columns, and/or data elements as required by the organization and the system owner.

Document all instances of acceptance of risk by the information owner where sensitive or classified data is not encrypted. Have the ISSO document assurance that the unencrypted sensitive or classified information is otherwise inaccessible to those who do not have need-to-know access to the data. Developers should consider using a record-specific encryption method to protect individual records. For example, by employing the session username or other individualized element as part of the encryption key, then decryption of a data element is only possible by that user or other data accessible only by that user. Data labeling can be helpful in implementation. Consider applying additional auditing of access to any unencrypted sensitive or classified data when accessed by users (with and/or without a need to know)."
  reference   : "800-171|3.13.11,800-53|SC-13,CAT|II,CCI|CCI-002262,CSCv6|13.2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-53939r5_rule,STIG-ID|SQL2-00-019300,TBA-FIISB|28.1,Vuln-ID|V-41411"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "EXEC sp_MSforeachdb 'SELECT ''?'' AS ''database'', name, algorithm_desc FROM [?].sys.symmetric_keys ORDER BY name, algorithm_desc'"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : "Manual Review Required", NULL, NULL
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-019500 - SQL Server must implement required cryptographic protections using cryptographic modules complying with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance."
  info        : "Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data.

Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.

Use of cryptography to provide confidentiality and non-repudiation is not effective unless strong methods are employed with its use. Many earlier encryption methods and modules have been broken and/or overtaken by increasing computing power. The NIST FIPS 140-2 cryptographic standards provide proven methods and strengths to employ cryptography effectively.

Detailed information on the NIST Cryptographic Module Validation Program (CMVP) is available at the following website:  http://csrc.nist.gov/groups/STM/cmvp/index.html."
  solution    : "Implement required cryptographic protections using cryptographic modules complying with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.

Ensure the database is backed up.

Run the following SQL to undo encryption and drop the existing database encryption key:
USE master;
GO
ALTER DATABASE <database name> SET ENCRYPTION OFF;
GO
USE <database name> ;
GO
DROP DATABASE ENCRYPTION KEY;
GO

Run the following SQL to drop a server certificate from the SQL Server instance:
USE master;
GO
DROP CERTIFICATE <certificate name>;
GO

If applicable, run the following SQL to drop a symmetric key:
USE <database name>;
GO
DROP SYMMETRIC KEY <key name>;
GO

Configure encryption to use approved encryption algorithms. Existing keys are not reconfigurable to use different algorithms.

Run SQL along the lines of the following to import an externally-created server certificate (see Microsoft documentation for options and syntax details):
USE master;
GO
CREATE CERTIFICATE <certificate name>
   FROM FILE = '<path\file_name>'
...
;
GO

Run the following SQL to create a database encryption key and encrypt the database:
USE <database name>;
GO
CREATE DATABASE ENCRYPTION KEY
   WITH ALGORITHM = AES_256
   ENCRYPTION BY SERVER CERTIFICATE <certificate name>;
GO
USE master;
GO
ALTER DATABASE <database name> SET ENCRYPTION ON;
GO

Note: The acceptable algorithms are: 'AES 128', 'AES 192', 'AES 256' and 'Triple DES'.

If required, run the following SQL to create a symmetric key and assign an existing certificate:
USE <database name>;
GO
CREATE SYMMETRIC KEY <key name>
   WITH ALGORITHM = AES_256
   ENCRYPTION BY CERTIFICATE <certificate name>;"
  reference   : "800-171|3.13.11,800-53|SC-13,CAT|II,CCI|CCI-002450,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,Rule-ID|SV-53940r5_rule,STIG-ID|SQL2-00-019500,Vuln-ID|V-41412"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT algorithm_desc FROM sys.symmetric_keys ORDER BY algorithm_desc"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "AES_128"||"AES_192"||"AES_256"||"Triple_DES"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-021400 - SQL Server must employ cryptographic mechanisms preventing the unauthorized disclosure of information at rest."
  info        : "This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. If the data is not encrypted, it is subject to compromise and unauthorized disclosure.

Note:  the system databases (master, msdb, model, resource and tempdb) cannot be encrypted.

The decision whether to employ cryptography is the responsibility of the information owner/steward, who exercises discretion within the framework of applicable rules, policies and law."
  solution    : "Use encryption to protect the data. To enable database encryption, create a master key, create a database encryption key, and protect it by using mechanisms tied to the master key, and then set encryption on."
  reference   : "800-171|3.13.16,800-53|SC-28(1),CAT|II,CCI|CCI-002476,CSCv6|13.2,CSF|PR.DS-1,ITSG-33|SC-28(1),Rule-ID|SV-53949r6_rule,STIG-ID|SQL2-00-021400,TBA-FIISB|28.1,Vuln-ID|V-41420"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT d.name AS [Database Name], CASE k.encryption_state WHEN 0 THEN 'No database encryption key present, no encryption' WHEN 1 THEN 'Unencrypted' WHEN 2 THEN 'Encryption in progress' WHEN 3 THEN 'Encrypted' WHEN 4 THEN 'Key change in progress' WHEN 5 THEN 'Decryption in progress' WHEN 6 THEN 'Protection change in progress' ELSE 'No database encryption key present, no encryption' END AS [Encryption State] FROM sys.databases AS d LEFT JOIN sys.dm_database_encryption_keys AS k ON d.database_id = k.database_id WHERE d.name NOT IN ('master', 'msdb', 'resource', 'tempdb', 'model') OR k.encryption_state <> 3;"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-021800 - SQL Server must prevent unauthorized and unintended information transfer via shared system resources."
  info        : "The purpose of this control is to prevent information, including encrypted representations of information, produced by the actions of a prior user/role (or the actions of a process acting on behalf of a prior user/role) from being available to any current user/role (or current process) that obtains access to a shared system resource (e.g., registers, main memory, secondary storage) after the resource has been released back to the information system. Control of information in shared resources is also referred to as object reuse.

Data used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, so copies of sensitive data are not misplaced or left in a temporary location without the proper controls.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Create and document a process for moving data from production to development/test systems and follow the process.

Modify any code used for moving data from production to development/test systems to ensure copies of production data are not left in unsecured locations."
  reference   : "CAT|II,CCI|CCI-001090,Rule-ID|SV-53950r2_rule,STIG-ID|SQL2-00-021800,Vuln-ID|V-41421"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-022000 - SQL Server must protect against or limit the effects of the organization-defined types of Denial of Service (DoS) attacks."
  info        : "Application management includes the ability to control the number of users and user sessions utilizing an application. Limiting the number of allowed users, and sessions per user, is helpful in limiting risks related to DoS attacks.

This requirement addresses concurrent session control for a single information system account and does not address concurrent sessions by a single user via multiple system accounts.

This requirement may be met via the application or by utilizing information system session control provided by a web server with specialized session management capabilities. If it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.

The organization will need to define the maximum number of concurrent sessions for SQL Server accounts by account type, by account, or a combination thereof and SQL Server shall enforce this requirement.

Unlimited concurrent connections to SQL Server could allow a successful DoS attack by exhausting connection resources."
  solution    : "Configure SQL Server number of concurrent sessions to the organization-defined maximum number of sessions by running the following script:

USE MASTER
GO

EXEC sys.sp_configure N'show advanced options', N'1'  RECONFIGURE WITH OVERRIDE
GO
EXEC sys.sp_configure N'user connections', <'maximum number of SQL Server concurrent connections'>
EXEC sys.sp_configure N'show advanced options', N'0'  RECONFIGURE WITH OVERRIDE
GO"
  reference   : "800-53|SC-5,CAT|II,CCI|CCI-002385,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e,Rule-ID|SV-53951r2_rule,STIG-ID|SQL2-00-022000,Vuln-ID|V-41422"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name, maximum FROM sys.configurations WHERE name = 'user connections'"
  sql_types   : POLICY_VARCHAR,POLICY_INTEGER
# Note: Variable @MAX_CONN@ replaced with "32767" in field "sql_expect".
  sql_expect  : "user connections",32767
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-022500 - SQL Server must check the validity of data inputs."
  info        : "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.

SQL Server needs to validate the data user's attempt to input to the application for processing. Rules for checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, acceptable values) are in place to verify inputs match specified definitions for format and content. Inputs passed to interpreters are prescreened to prevent the content from being unintentionally interpreted as commands.

A poorly designed database system can have many problems. A common issue with these types of systems is the missed opportunity to use constraints.

While this matter is of great importance to the secure operation of database management systems, the DBA in a typical installation will communicate with the application development/support staff to obtain assurance that this requirement is met.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Use triggers, constraints, foreign keys, etc. to validate data input.

Modify SQL Server to properly use the correct column data types as required in the database."
  reference   : "CAT|II,CCI|CCI-001310,Rule-ID|SV-53953r3_rule,STIG-ID|SQL2-00-022500,Vuln-ID|V-41424"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-023500 - SQL Server job/batch queues must be reviewed regularly to detect unauthorized SQL Server job submissions."
  info        : "When dealing with unauthorized SQL Server job submissions, it should be noted any unauthorized job submissions to SQL Server job/batch queues can potentially have significant effects on the overall security of the system.

If SQL Server were to allow any user to make SQL Server job/batch queue submissions, then those submissions might lead to a compromise of system integrity and/or data. This requirement is contingent upon the SQL Server job/batch queue being review regularly for unauthorized submissions.

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to submit SQL Server jobs. Job/batch queue submissions must adhere to an organization-defined job submission process.

Unmanaged changes that occur to SQL Server job/batch queues can lead to a compromised system."
  solution    : "Document procedures, within the system documentation, that detect for unauthorized SQL Server job submissions.

Develop and implement procedures to detect for unauthorized SQL Server job submissions of Stored Procedures that are automatically executed and Agent jobs that are enabled."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-6,CAT|II,CCI|CCI-000366,CN-L3|7.1.3.3(d),CSCv6|6.4,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.DP-4,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-2,HIPAA|164.308(a)(1)(ii)(D),ITSG-33|AU-6,NESA|M5.2.5,Rule-ID|SV-53925r2_rule,STIG-ID|SQL2-00-023500,SWIFT-CSCv1|6.4,Vuln-ID|V-41399"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name FROM master.sys.procedures WHERE is_auto_executed = 1"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-024100 - The Database Master Key must be encrypted by the Service Master Key where required."
  info        : "When not encrypted by the Service Master Key, system administrators or application administrators may access and use the Database Master Key to view sensitive data that they are not authorized to view. Where alternate encryption means are not feasible, encryption by the Service Master Key may be necessary. To help protect sensitive data from unauthorized access by DBAs, mitigations may be in order. Mitigations may include automatic alerts or other audit events when the Database Master Key is accessed outside of the application or by a DBA account."
  solution    : "Where possible, encrypt the Database Master Key with a password known only to the application administrator.
Where not possible, configure additional audit events or alerts to detect unauthorized access to the Database Master Key by users not authorized to view sensitive data."
  reference   : "800-171|3.13.16,800-53|SC-28(1),CAT|II,CCI|CCI-001199,CSCv6|13.2,CSF|PR.DS-1,ITSG-33|SC-28(1),Rule-ID|SV-53944r3_rule,STIG-ID|SQL2-00-024100,TBA-FIISB|28.1,Vuln-ID|V-41415"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT name FROM [master].sys.databases WHERE is_master_key_encrypted_by_server = 1 AND owner_sid <> 1 AND state = 0"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-024200 - Database Master Key passwords must not be stored in credentials within the database."
  info        : "Storage of the Database Master Key password in a database credential allows decryption of sensitive data by privileged users who may not have a need-to-know requirement to access the
data."
  solution    : "Use the stored procedure sp_control_dbmasterkey_password to remove any credentials that
store Database Master Key passwords.
From the query prompt:
EXEC SP_CONTROL_DBMASTERKEY_PASSWORD @db_name = '[database name]', @action
= N'drop'"
  reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001199,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-53945r2_rule,STIG-ID|SQL2-00-024200,SWIFT-CSCv1|2.3,Vuln-ID|V-41416"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT COUNT(credential_id) FROM [master].sys.master_key_passwords"
  sql_types   : POLICY_INTEGER
  sql_expect  : "0"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-024300 - Symmetric keys (other than the database master key) must use a DoD certificate to encrypt the key."
  info        : "Data within the database is protected by use of encryption. The symmetric keys are critical for this process. If the symmetric keys were to be compromised the data could be disclosed to unauthorized personnel."
  solution    : "Configure or alter symmetric keys to encrypt keys with certificates or authorized asymmetric keys.
From the query prompt:
ALTER SYMMETRIC KEY [key name] ADD ENCRYPTION BY CERTIFICATE [certificate name]
ALTER SYMMETRIC KEY [key name] DROP ENCRYPTION BY [password, symmetric key or asymmetric key]

The symmetric key must specify a certificate or asymmetric key for encryption."
  reference   : "800-53|IA-5(2),CAT|II,CCI|CCI-001199,CSF|PR.AC-1,ITSG-33|IA-5(2),Rule-ID|SV-53946r5_rule,STIG-ID|SQL2-00-024300,Vuln-ID|V-41417"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "SELECT s.name, k.crypt_type_desc FROM sys.symmetric_keys s, sys.key_encryptions k WHERE s.symmetric_key_id = k.key_id AND s.name <> '##MS_DatabaseMasterKey##' AND k.crypt_type IN ('ESKP', 'ESKS') AND s.principal_id <> 1 ORDER BY s.name, k.crypt_type_desc"
  sql_types   : POLICY_VARCHAR,POLICY_VARCHAR
  sql_expect  : NULL,NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-015610 - In a database owned by [sa], or by any other login having administrative privileges at the instance level, the database property TRUSTWORTHY must be OFF."
  info        : "SQL Server's fixed (built-in) server roles, especially [sysadmin], have powerful capabilities that could cause great harm if misused, so their use must be tightly controlled.

The SQL Server instance uses each database's TRUSTWORTHY property to guard against tampering that could enable unwarranted privilege escalation.  When TRUSTWORTHY is 0/False/Off, SQL Server prevents the database from accessing resources in other databases.  When TRUSTWORTHY is 1/True/On, SQL Server permits access to other databases (subject to other protections).  SQL Server sets TRUSTWORTHY OFF when it creates a new database.  SQL Server forces TRUSTWORTHY OFF, irrespective of its prior value, when an existing database is attached to it, to address the possibility that an adversary may have tampered with the database, introducing malicious code.  To set TRUSTWORTHY ON, an account with the [sysadmin] role must issue an ALTER DATABASE command.

Although SQL Server itself treats this property conservatively, application installer programs may set TRUSTWORTHY ON and leave it on.  This provides an opportunity for misuse.

When TRUSTWORTHY is ON, users of the database can take advantage of the database owner's privileges, by impersonating the owner.  This can have particularly serious consequences if the database owner is the [sa] login (which may have been renamed in accordance with SQL2-00-010200, and disabled in accordance with SQL2-00-017100, but nonetheless can be invoked in an EXECUTE AS USER = 'dbo' statement, or CREATE PROCEDURE ... WITH EXECUTE AS OWNER ...).   The [sa] login cannot be removed from the [sysadmin] role.  The user impersonating [sa] - or another [sysadmin] account - is then able to perform administrative actions across all databases under the instance, including making any himself or any other login a member of [sysadmin].

Most of the other fixed server roles could be similarly abused.

Therefore, TRUSTWORTHY must not be used on databases owned by logins that are members of the fixed server roles.  Further, if TRUSTWORTHY is to be used for any other database, the need must be documented and approved.

The system database [msdb] is an exception: it is required to be TRUSTWORTHY."
  solution    : "Set the TRUSTWORTHY property OFF; or remove the database owner from the fixed server role(s); or change the database owner.


To set the TRUSTWORTHY property OFF:
USE [master];
GO
ALTER DATABASE <name> SET TRUSTWORTHY OFF;
GO
Verify that this produced the intended result by re-running the query specified in the Check.


To determine the path or paths by which the database owner is assigned the fixed server role or roles, run this query:

USE <database name>;
GO
WITH C AS
(
SELECT
	P.name		AS [Parent Server Role],
	CAST('Fixed' AS varchar(8))
				AS [Server Role Type],
	M.name		AS [Member],
	M.type_desc	AS [Member Type],
	P.name 		AS [Root],
	1			AS [Level]
FROM
	[sys].[server_role_members] X
	INNER JOIN [sys].[server_principals] P ON P.principal_id = X.role_principal_id
	INNER JOIN [sys].[server_principals] M ON M.principal_id = X.member_principal_id
WHERE
	P.is_fixed_role = 1
UNION ALL
SELECT
	P.name		AS [Parent Server Role],
	CASE WHEN M.is_fixed_role = 1 THEN CAST('Fixed' AS varchar(8)) ELSE CAST('Custom' AS varchar(8)) END
				AS [Server Role Type],
	M.name		AS [Member],
	M.type_desc	AS [Member Type],
	C.[Root]	AS [Root],
	C.[Level] + 1	AS [Level]
FROM
	[sys].[server_role_members] X
	INNER JOIN [sys].[server_principals] P ON P.principal_id = X.role_principal_id
	INNER JOIN [sys].[server_principals] M ON M.principal_id = X.member_principal_id
	INNER JOIN C ON P.name = C.Member
)
,
B AS
(
SELECT
	C.[Member] AS [Leaf],
	C.[Root],
	C.[Parent Server Role],
	C.[Server Role Type],
	C.[Member],
	C.[Member Type],
	C.[Level]
FROM C
WHERE
	C.[Member Type] NOT LIKE '%ROLE%'
UNION ALL
SELECT
	B.[Leaf],
	C.[Root],
	C.[Parent Server Role],
	C.[Server Role Type],
	C.[Member],
	C.[Member Type],
	C.[Level]
FROM C
INNER JOIN B
	ON	C.[Member] = B.[Parent Server Role]
	AND	C.[Level] = B.[Level] - 1
	AND	C.[Root] = B.[Root]
)
SELECT
	DB_NAME()	AS [Database],
	B.[Leaf]	AS [Owner Login],
	B.[Root]	AS[Top-Level Server Role],
	B.[Parent Server Role],
	B.[Server Role Type],
	B.[Member],
	B.[Member Type],
	B.[Level]
FROM B
WHERE B.[Leaf] = (SELECT SUSER_SNAME(D.owner_sid) FROM sys.databases D WHERE D.Name = DB_NAME())
ORDER BY B.[Root], B.[Level], B.[Parent Server Role], B.[Member]
;
GO

To remove the database owner from a fixed server role or a custom server role:
USE [master];
GO
ALTER SERVER ROLE <fixed/custom server role name>
	DROP MEMBER <database owner name>;
GO
Verify that this produced the intended result by re-running the Check query.


To change the database owner:
USE [master];
GO
ALTER AUTHORIZATION ON DATABASE::<DB name> TO <new owner name>;
GO
Verify that this produced the intended result by re-running the Check query."
  reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001499,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-75233r1_rule,STIG-ID|SQL2-00-015610,SWIFT-CSCv1|2.3,Vuln-ID|V-60781"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "EXEC sp_MSforeachdb 'USE [?]; WITH FixedServerRoles(RoleName) AS(SELECT ''sysadmin'' UNION SELECT ''securityadmin'' UNION SELECT ''serveradmin'' UNION SELECT ''setupadmin'' UNION SELECT ''processadmin'' UNION SELECT ''diskadmin'' UNION SELECT ''dbcreator'' UNION SELECT ''bulkadmin'') SELECT DB_NAME() AS [Database], SUSER_SNAME(D.owner_sid) AS [Database Owner], F.RoleName AS [Fixed Server Role], CASE WHEN D.is_trustworthy_on = 1 THEN ''ON'' ELSE ''off'' END AS [Trustworthy] FROM FixedServerRoles F INNER JOIN sys.databases D ON D.Name = DB_NAME() WHERE IS_SRVROLEMEMBER(F.RoleName, SUSER_SNAME(D.owner_sid)) = 1 AND DB_NAME() <> ''msdb'' AND D.is_trustworthy_on = 1;'"
  sql_types   : POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR
  sql_expect  : NULL, NULL, NULL, NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "SQL2-00-015620 - In a database owned by a login not having administrative privileges at the instance level, the database property TRUSTWORTHY must be OFF unless required and authorized."
  info        : "SQL Server's fixed (built-in) server roles, especially [sysadmin], have powerful capabilities that could cause great harm if misused, so their use must be tightly controlled.

The SQL Server instance uses each database's TRUSTWORTHY property to guard against tampering that could enable unwarranted privilege escalation.  When TRUSTWORTHY is 0/False/Off, SQL Server prevents the database from accessing resources in other databases.  When TRUSTWORTHY is 1/True/On, SQL Server permits access to other databases (subject to other protections).  SQL Server sets TRUSTWORTHY OFF when it creates a new database.  SQL Server forces TRUSTWORTHY OFF, irrespective of its prior value, when an existing database is attached to it, to address the possibility that an adversary may have tampered with the database, introducing malicious code.  To set TRUSTWORTHY ON, an account with the [sysadmin] role must issue an ALTER DATABASE command.

Although SQL Server itself treats this property conservatively, application installer programs may set TRUSTWORTHY ON and leave it on.  This provides an opportunity for misuse.

When TRUSTWORTHY is ON, users of the database can take advantage of the database owner's privileges, by impersonating the owner.  This can have particularly serious consequences if the database owner is the [sa] login (which may have been renamed in accordance with SQL2-00-010200, and disabled in accordance with SQL2-00-017100, but nonetheless can be invoked in an EXECUTE AS USER = 'dbo' statement, or CREATE PROCEDURE ... WITH EXECUTE AS OWNER ...).   The [sa] login cannot be removed from the [sysadmin] role.  The user impersonating [sa] - or another [sysadmin] account - is then able to perform administrative actions across all databases under the instance, including making any himself or any other login a member of [sysadmin].

Most of the other fixed server roles could be similarly abused.

Therefore, TRUSTWORTHY must not be used on databases owned by logins that are members of the fixed server roles.  Further, if TRUSTWORTHY is to be used for any other database, the need must be documented and approved.

The system database [msdb] is an exception: it is required to be TRUSTWORTHY."
  solution    : "USE [master];
GO
ALTER DATABASE <name> SET TRUSTWORTHY OFF;
GO"
  reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001499,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-75113r1_rule,STIG-ID|SQL2-00-015620,SWIFT-CSCv1|2.3,Vuln-ID|V-60671"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
  sql_request : "EXEC sp_MSforeachdb 'USE [?]; SELECT DB_NAME() AS [Database], SUSER_SNAME(D.owner_sid) AS [Database Owner], CASE WHEN D.is_trustworthy_on = 1 THEN ''ON'' ELSE ''off'' END AS [Trustworthy] FROM sys.databases D WHERE D.[name] = DB_NAME() AND DB_NAME() <> ''msdb'' AND D.is_trustworthy_on = 1'"
  sql_types   : POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR
  sql_expect  : NULL, NULL, NULL
</custom_item>

<report type:"WARNING">
  description : "SQL2-00-017510 - Appropriate staff must be alerted when the amount of storage space used by the SQL Server transaction log file(s) exceeds an organization-defined value - s exceeds an organization-defined value."
  info        : "It is important for the appropriate personnel to be aware if the system is at risk of failing to record transaction log data.  The transaction log is the heart of a SQL Server database.  If it fails, processing will stop.  It must always have enough available storage space to cope with peak load.  Administrators must be warned about abnormally high space consumption soon enough to take corrective action before all space is used up.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Decide on, and document, the threshold value for alerting administrators to a shortage of storage for the transaction log.

Establish automated or manual monitoring and alerting."
  reference   : "CAT|III,CCI|CCI-000553,Rule-ID|SV-85249r2_rule,STIG-ID|SQL2-00-017510,Vuln-ID|V-70627"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MS_SQL_Server_2012_V1R20_STIG.zip"
</report>

</group_policy>
</check_type>
