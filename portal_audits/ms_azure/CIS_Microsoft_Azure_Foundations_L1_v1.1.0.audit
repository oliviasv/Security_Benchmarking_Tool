#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
#
# $Revision: 1.3 $
# $Date: 2020/08/25 $
#
# description	: CIS Microsoft Azure Foundations v1.1.0 audit
#
# NOTE			: Some queries in this .audit require site-specific data to be known to the query in order to function properly.  Please note the following
# 			queries and edit their values accordingly.
#
#<ui_metadata>
#<display_name>CIS Microsoft Azure Foundations v1.1.0 L1</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Microsoft Azure Foundations v1.1.0 L1</name>
#  <version>1.1.0</version>
#</spec>
#<labels>microsoft,azure,cloud</labels>
#</ui_metadata>

<check_type:"microsoft_azure">

<custom_item>
  description    : "1.1 Ensure that multi-factor authentication is enabled for all privileged users - List Users"
  info           : "Enable multi-factor authentication for all user credentials who have write access to Azure resources. These include roles like
 Service Co-Administrators
 Subscription Owners
 Contributors
Rationale:
Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
Impact:
Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.
Default Value:
By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|4.5,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1NS,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listUsers"
  regex          : ".+"
  not_expect     : ".+"
  json_transform : '.[]|.id as $id|.displayName as $dn|.userPrincipalName as $upn|"ID: \($id)"+" User Principal Name: \($upn)"+" Display Name: \($dn)"'
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "1.1 Ensure that multi-factor authentication is enabled for all privileged users - Role Definitions"
  info           : "Enable multi-factor authentication for all user credentials who have write access to Azure resources. These include roles like
 Service Co-Administrators
 Subscription Owners
 Contributors
Rationale:
Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
Impact:
Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.
Default Value:
By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|4.5,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1NS,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listRoleDefinitions"
  regex          : ".+"
  not_expect     : ".+"
  json_transform : '.[]|.value[]|select((.properties.roleName == "Owner") or (.properties.roleName == "Admin") or (.properties.roleName == "*contributor"))|"Name: \(.name)"+" Role Name: \(.properties.roleName)"'
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "1.1 Ensure that multi-factor authentication is enabled for all privileged users - Role Assignments"
  info           : "Enable multi-factor authentication for all user credentials who have write access to Azure resources. These include roles like
 Service Co-Administrators
 Subscription Owners
 Contributors
Rationale:
Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
Impact:
Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.
Default Value:
By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|4.5,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1NS,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listRoleAssignments"
  regex          : ".+"
  not_expect     : ".+"
  json_transform : '.[]|.value[]|"Name: \(.name)"+" Role Definition ID: \(.properties.roleDefinitionId)" + " Principal ID: \(.properties.principalId)"+" Principal Type: \(.properties.principalType)"'
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "1.3 Ensure that there are no guest users"
  info           : "Do not add guest users if not needed.
Rationale:
Azure AD is extended to include Azure AD B2B collaboration, allowing you to invite people from outside your organization to be guest users in your cloud account. Until you have a business need to provide guest access to any user, avoid creating guest users. Guest users are typically added outside your employee on-boarding/off-boarding process and could potentially be overlooked indefinitely leading to a potential vulnerability."
  solution       : "Delete the \"Guest\" users.
Impact:
None
Default Value:
By default, no guest users are created."
  reference      : "800-171|3.1.1,800-53|AC-3,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|16.8,CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,TBA-FIISB|31.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "azuread"
  regex          : 'UserType:'
  not_expect     : 'UserType: Guest$'
  json_transform : '.[]|.tenantId as $id|.users[]| "Tenant ID: \($id)" + " DisplayName: \(.displayName)" + " UserPrincipalName: \(.userPrincipalName)" + " UserType: \(.userType)"'
</custom_item>

<report type:"WARNING">
  description : "1.5 Ensure that 'Number of methods required to reset' is set to '2'"
  info        : "Ensure that two alternate forms of identification are provided before allowing a password reset.
Rationale:
Like multi-factor authentication, setting up dual identification before allowing a password reset ensures that the user identity is confirmed via two separate forms of identification. With dual identification set, an attacker would require compromising both the identity forms before he/she could maliciously reset a user's password.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Password reset
4. Go to Authentication methods
5. Set the Number of methods required to reset to 2

Impact:
None
Default Value:
By default, the \"Number of methods required to reset\" is set to \"2\"."
  reference   : "CSCv7|16.3,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.6 Ensure that 'Number of days before users are asked to re-confirm their authentication information' is not set to '0'"
  info        : "Ensure that the number of days before users are asked to re-confirm their authentication information is not set to 0.
Rationale:
If authentication re-confirmation is disabled, registered users will never be prompted to re-confirm their existing authentication information. If the authentication information for a user, such as a phone number or email changes, then the password reset information for that user reverts to the previously registered authentication information.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Password reset
4. Go to Registration
5. Set the Number of days before users are asked to re-confirm their authentication information to your organization defined frequency
Impact:
None
Default Value:
By default, the 'Number of days before users are asked to re-confirm their authentication information' is set to '180 days'."
  reference   : "CSCv7|16,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.7 Ensure that 'Notify users on password resets?' is set to 'Yes'"
  info        : "Ensure that users are notified on their primary and secondary emails on password resets.
Rationale:
User notification on password reset is a passive way of confirming password reset activity. It helps the user to recognize unauthorized password reset activities.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Password reset
4. Go to Notification
5. Set Notify users on password resets? to Yes
Impact:
None

Default Value:
By default, 'Notify users on password resets?' is set to 'Yes'."
  reference   : "CSCv7|16,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.15 Ensure that 'Restrict access to Azure AD administration portal' is set to 'Yes'"
  info        : "Restrict access to the Azure AD administration portal to administrators only.
Rationale:
The Azure AD administrative portal has sensitive data. All non-administrators should be prohibited from accessing any Azure AD data in the administration portal to avoid exposure.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to User settings
4. Set Restrict access to Azure AD administration portal to Yes
Impact:
None
Default Value:
By default, Restrict access to Azure AD administration portal is set to No."
  reference   : "CSCv7|14,CSCv7|4,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.21 Ensure that 'Enable 'All Users' group' is set to 'Yes'"
  info        : "Enable All Users group for centralized administration of all users.
Rationale:
The All Users group can be used to assign the same permissions to all the users in the directory. For example, all users in a directory can be given access to a SaaS application by assigning access for the All Users dedicated group to this application. This ensures that there is a common policy created for all users and there is no need to restrict individual permissions.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Group settings
4. Set Enable \"All Users\" group to Yes
Impact:
None

Default Value:
By default, Enable \"All Users\" group is set to No."
  reference   : "CSCv7|16,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.22 Ensure that 'Require Multi-Factor Auth to join devices' is set to 'Yes'"
  info        : "Joining devices to the active directory should require Multi-factor authentication.
Rationale:
Multi-factor authentication is recommended when adding devices to Azure AD. When set to \"Yes\", users who are adding devices from the internet must first use the second method of authentication before their device is successfully added to the directory. This ensures that rogue devices are not added to the directory for a compromised user account.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Device settings
4. Set Require Multi-Factor Auth to join devices to Yes
Impact:
None

Default Value:
By default, Require Multi-Factor Auth to join devices is set to No."
  reference   : "CSCv7|16.3,LEVEL|1NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<custom_item>
  description    : "2.2 Ensure that 'Automatic provisioning of monitoring agent' is set to 'On'"
  info           : "Enable automatic provisioning of the monitoring agent to collect security data.
Rationale:
When Automatic provisioning of monitoring agent is turned on, Azure Security Center provisions the Microsoft Monitoring Agent on all existing supported Azure virtual machines and any new ones that are created. The Microsoft Monitoring Agent scans for various security-related configurations and events such as system updates, OS vulnerabilities, endpoint protection, and provides alerts."
  solution       : "Azure Console
1. Go to Security Center
2. Click on Security Policy
3. Click On \"Edit Settings\" for each subscription
4. Click on Data Collection
5. Set Automatic provisioning of monitoring agent to On
6. Click Save
Azure Command Line Interface 2.0
Use the below command to set Automatic provisioning of monitoring agent to On.
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/autoProvisioningSettings/default?api-version=2017-08-01-preview -d@\"input.json\"'
Where input.json contains the Request body json data as mentioned below.
   {
  \"id\": \"/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/autoProvisioningSettings/default\",
  \"name\": \"default\",
  \"type\": \"Microsoft.Security/autoProvisioningSettings\",
  \"properties\": {
    \"autoProvision\": \"On\"
  }
}
Impact:
None
Default Value:
By default, Automatic provisioning of monitoring agent is set to On."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|3.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listAutoProvisioningSettings"
  regex          : "Auto Provisioning:"
  not_expect     : "Auto Provisioning: Off"
  json_transform : '.[]|.value|.id as $id|.name as $name|.type as $type|"Name: \($name)\n"+"ID: \($id)\n"+"Type: \($type\n)\n"+"Auto Provisioning: \(.properties.autoProvision)"'
</custom_item>

<custom_item>
  description    : "2.3 Ensure ASC Default policy setting 'Monitor System Updates' is not 'Disabled'"
  info           : "Enable system updates recommendations for virtual machines.
Rationale:
When this setting is enabled, it retrieves a daily list of available security and critical updates from Windows Update or Windows Server Update Services. The retrieved list depends on the service that's configured for that virtual machine and recommends that the missing updates be applied. For Linux systems, the policy uses the distro-provided package management system to determine packages that have available updates. It also checks for security and critical updates from Azure Cloud Services virtual machines."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor system updates to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, Monitor System updates is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|3.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor System Updates:"
  not_expect     : "Monitor System Updates: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor System Updates: \(.properties.parameters.systemUpdatesMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.4 Ensure ASC Default policy setting 'Monitor OS Vulnerabilities' is not 'Disabled'"
  info           : "Enable Monitor OS vulnerability recommendations for virtual machines.
Rationale:
When this setting is enabled, it analyzes operating system configurations daily to determine issues that could make the virtual machine vulnerable to attack. The policy also recommends configuration changes to address these vulnerabilities."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor os Vulnerabilities to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
Azure Security Center monitors security configurations using a set of over 150 recommended rules for hardening the OS, including rules related to firewalls, auditing, password policies, and more. Ensuring policy settings are ON and taking remediation actions for the recommendations will provide the appropriate level of security controls.
Default Value:
By default, Monitor OS Vulnerabilities is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|3.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor OS Vulnerabilities:"
  not_expect     : "Monitor OS Vulnerabilities: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor OS Vulnerabilities: \(.properties.parameters.systemConfigurationsMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.5 Ensure ASC Default policy setting 'Monitor Endpoint Protection' is not 'Disabled'"
  info           : "Enable Endpoint protection recommendations for virtual machines.
Rationale:
When this setting is enabled, it recommends endpoint protection be provisioned for all Windows virtual machines to help identify and remove viruses, spyware, and other malicious software."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor Endpoint Protection to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, Endpoint protection is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|8,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor Endpoint Protection:"
  not_expect     : "Monitor Endpoint Protection: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor Endpoint Protection: \(.properties.parameters.endpointProtectionMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.6 Ensure ASC Default policy setting 'Monitor Disk Encryption' is not 'Disabled'"
  info           : "Enable Disk encryption recommendations for virtual machines.
Rationale:
When this setting is enabled, it recommends enabling disk encryption in all virtual machines (Windows and Linux as well) to enhance data protection at rest."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor Disk Encryption to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, Disk encryption is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|14.8,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor Disk Encryption:"
  not_expect     : "Monitor Disk Encryption: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor Disk Encryption: \(.properties.parameters.diskEncryptionMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.7 Ensure ASC Default policy setting 'Monitor Network Security Groups' is not 'Disabled'"
  info           : "Enable Network security group recommendations for virtual machines.
Rationale:
When this setting is enabled, it recommends that network security groups be configured to control inbound and outbound traffic to VMs that have public endpoints. Network security groups that are configured for a subnet are inherited by all virtual machine network interfaces unless otherwise specified. In addition to checking that a network security group has been configured, this policy assesses inbound security rules to identify rules that allow incoming traffic."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor Network Security Groups to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, Network security groups is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|12,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor Network Security Groups:"
  not_expect     : "Monitor Network Security Groups: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor Network Security Groups: \(.properties.parameters.networkSecurityGroupsMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.8 Ensure ASC Default policy setting 'Monitor Web Application Firewall' is not 'Disabled'"
  info           : "Enable Web application firewall recommendations for virtual machines.
Rationale:
When this setting is enabled, it recommends that a web application firewall is provisioned on virtual machines when either of the following is true:
 Instance-level public IP (ILPIP) is used and the inbound security rules for the associated network security group are configured to allow access to port 80/443.
 Load-balanced IP is used and the associated load balancing and inbound network address translation (NAT) rules are configured to allow access to port 80/443."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor Web Application Firewall to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, Monitor Web Application Firewall is set to AuditIfNotExists."
  reference      : "800-171|3.13.1,800-53|SC-7(12),CSCv7|12,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor Web Application Firewall:"
  not_expect     : "Monitor Web Application Firewall: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor Web Application Firewall: \(.properties.parameters.webApplicationFirewallMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.9 Ensure ASC Default policy setting \"Enable Next Generation Firewall(NGFW) Monitoring\" is not \"Disabled\""
  info           : "Enable next generation firewall recommendations for virtual machines.
Rationale:
When this setting is enabled, it extends network protections beyond network security groups, which are built into Azure. Security Center will search for deployments where a next generation firewall is recommended and enable a virtual appliance to be provisioned."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Enable Next Generation Firewall(NGFW) Monitoring to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, Next generation firewall is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|11,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor NGFW:"
  not_expect     : "Monitor NGFW: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor NGFW: \(.properties.parameters.nextGenerationFirewallMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.10 Ensure ASC Default policy setting 'Monitor Vulnerability Assessment' is not 'Disabled'"
  info           : "Enable vulnerability assessment recommendations for virtual machines.
Rationale:
When this setting is enabled, it recommends a vulnerability assessment solution be installed on the VM."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor Vulnerability Assessment to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, Vulnerability Assessment is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|3.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor Vuln Assessment:"
  not_expect     : "Monitor Vuln Assessment: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor Vuln Assessment: \(.properties.parameters.vulnerabilityAssesmentMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.11 Ensure ASC Default policy setting 'Monitor Storage Blob Encryption' is not 'Disabled'"
  info           : "Enable storage encryption recommendations.
Rationale:
When this setting is enabled, any new data in Azure Blobs and Files will be encrypted."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor Storage Blob Encryption to Audit or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, Storage Encryption is set to Audit."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|13,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor Blob Encryption:"
  not_expect     : "Monitor Blob Encryption: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor Blob Encryption: \(.properties.parameters.storageEncryptionMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.13 Ensure ASC Default policy setting 'Monitor Adaptive Application Whitelisting' is not 'Disabled'"
  info           : "Enable adaptive application controls.
Rationale:
Adaptive application controls help control which applications can run on VMs located in Azure, which among other benefits helps harden those VMs against malware. The Security Center uses machine learning to analyze the processes running in the VM and helps to apply white-listing rules using this intelligence."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor Application Whitelisting to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
Enabling this recommendation involves cost implications as this feature is not available with Free Pricing Tier.
Default Value:
With Standard pricing tier, Adaptive Application Controls is set to AuditIfNotExists by default."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|2.7,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor App Whitelisting:"
  not_expect     : "Monitor App Whitelisting: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor App Whitelisting: \(.properties.parameters.adaptiveApplicationControlsMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.14 Ensure ASC Default policy setting 'Monitor SQL Auditing' is not 'Disabled'"
  info           : "Enable SQL auditing recommendations.
Rationale:
When this setting is enabled, it recommends that access auditing for the Azure Database be enabled for compliance, advanced threat detection, and for investigation purposes."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor SQL Auditing to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, SQL Auditing is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor SQL Auditing:"
  not_expect     : "Monitor SQL Auditing: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor SQL Auditing: \(.properties.parameters.sqlAuditingMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.15 Ensure ASC Default policy setting 'Monitor SQL Encryption' is not 'Disabled'"
  info           : "Enable SQL encryption recommendations.
Rationale:
When this setting is enabled, it recommends that encryption at rest be enabled for the Azure SQL Database, associated backups, and transaction log files. In the event of a data breach, it will not be readable."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor SQL Encryption to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
None
Default Value:
By default, SQL Encryption is set to AuditIfNotExists."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|14.8,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor SQL Enc:"
  not_expect     : "Monitor SQL Enc: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor SQL Enc: \(.properties.parameters.sqlEncryptionMonitoringEffect.value)"'
</custom_item>

<custom_item>
  description    : "2.16 Ensure that 'Security contact emails' is set"
  info           : "Provide a security contact email address.
Rationale:
Microsoft reaches out to the designated security contact in case its security team finds that the organization's resources are compromised. This ensures that the proper people are aware of any potential compromise in order to mitigate the risk in a timely fashion.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Azure Console
1. Go to Security Center
2. Click on Security Policy
3. Click On Edit Settings for the security policy subscription
4. Click on Email notifications
5. Set a valid email address for the security contact
6. Click Save
Azure Command Line Interface 2.0
Use the below command to set Security contact emails to On.
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@\"input.json\"'
Where input.json contains the Request body json data as mentioned below. And replace validEmailAddress with email ids csv for multiple.
    {
      \"id\": \"/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1\",
      \"name\": \"default1\",
      \"type\": \"Microsoft.Security/securityContacts\",
      \"properties\": {
        \"email\": \"<validEmailAddress>\",
        \"phone\": \"<phone_number>\",
        \"alertNotifications\": \"On\",
        \"alertsToAdmins\": \"On\"
      }
    }
Impact:
None
Default Value:
By default, Email notifications is not set."
  reference      : "800-53|SI-7(2),CSCv7|3,CSF|PR.DS-6,ITSG-33|SI-7(2),LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityContacts"
  regex          : "Security Contacts:"
  expect         : "MANUAL_REVIEW"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Security Contacts: \(.properties.email)"'
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "2.17 Ensure that security contact 'Phone number' is set"
  info           : "Provide a security contact phone number.
Rationale:
Microsoft reaches out to the designated security contact in case its security team finds that the organization's resources are compromised. This ensures that the proper people are aware of any potential compromise in order to mitigate the risk in a timely fashion.
Before taking any action, make sure that the information provided is valid, as the communication is not digitally signed.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Azure Console
1. Go to Security Center
2. Click on Security Policy
3. Click On Edit Settings for the security policy subscription
4. Click on Email notifications
5. Set a valid security contact Phone number
6. Click Save
Azure Command Line Interface 2.0
Use the below command to set security contact 'Phone number'.
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@\"input.json\"'
Where input.json contains the Request body json data as mentioned below.
And replace validEmailAddress with email ids csv for multiple and phoneNumber with valid phone number.
       {
      \"id\": \"/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1\",
      \"name\": \"default1\",
      \"type\": \"Microsoft.Security/securityContacts\",
      \"properties\": {
        \"email\": \"<validEmailAddress>\",
        \"phone\": \"<phone_number>\",
        \"alertNotifications\": \"On\",
        \"alertsToAdmins\": \"On\"
      }
    }
Impact:
None
Default Value:
By default, a security contact Phone number is not set."
  reference      : "800-53|SI-7(2),CSCv7|3,CSF|PR.DS-6,ITSG-33|SI-7(2),LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityContacts"
  regex          : "Security Contacts:"
  expect         : "MANUAL_REVIEW"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Security Contacts: \(.properties.phone)"'
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "2.18 Ensure that 'Send email notification for high severity alerts' is set to 'On'"
  info           : "Enable emailing security alerts to the security contact.
Rationale:
Enabling security alert emails ensures that security alert emails are received from Microsoft. This ensures that the right people are aware of any potential security issues and are able to mitigate the risk."
  solution       : "Azure Console
1. Go to Security Center
2. Click on Security Policy
3. Click On Edit Settings for the security policy subscription
4. Click on Email notifications
5. Set Send email notification for high severity alerts to On
6. Click Save
Azure Command Line Interface 2.0
Use the below command to set Send email notification for high severity alerts to On.
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@\"input.json\"'
Where input.json contains the Request body json data as mentioned below.
And replace validEmailAddress with email ids csv for multiple and phoneNumber with valid phone number.
       {
      \"id\": \"/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1\",
      \"name\": \"default1\",
      \"type\": \"Microsoft.Security/securityContacts\",
      \"properties\": {
        \"email\": \"<validEmailAddress>\",
        \"phone\": \"<phone_number>\",
        \"alertNotifications\": \"On\",
        \"alertsToAdmins\": \"On\"
      }
    }
Impact:
None
Default Value:
By default, Send email notification for high severity alerts is not set."
  reference      : "800-53|SI-7(2),CSCv7|3,CSF|PR.DS-6,ITSG-33|SI-7(2),LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityContacts"
  regex          : "Alert Notifications:"
  not_expect     : "Alert Notifications: off"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Alert Notifications: \(.properties.alertNotifications)"'
</custom_item>

<custom_item>
  description    : "2.19 Ensure that 'Send email also to subscription owners' is set to 'On'"
  info           : "Enable security alert emails to subscription owners.
Rationale:
Enabling security alert emails to subscription owners ensures that they receive security alert emails from Microsoft. This ensures that they are aware of any potential security issues and can mitigate the risk in a timely fashion."
  solution       : "Azure Console
1. Go to Security Center
2. Click on Security Policy
3. Click On Edit Settings for the security policy subscription
4. Click on Email notifications
5. Set Send email also to subscription owners to On
6. Click Save
Azure Command Line Interface 2.0
Use the below command to set Send email also to subscription owners to On.
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@\"input.json\"'
Where input.json contains the Request body json data as mentioned below.
And replace validEmailAddress with email ids csv for multiple and phoneNumber with valid phone number.
    {
      \"id\": \"/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1\",
      \"name\": \"default1\",
      \"type\": \"Microsoft.Security/securityContacts\",
      \"properties\": {
        \"email\": \"<validEmailAddress>\",
        \"phone\": \"<phone_number>\",
        \"alertNotifications\": \"On\",
        \"alertsToAdmins\": \"On\"
      }
    }
Impact:
None
Default Value:
By default, Send email also to subscription owners is not set."
  reference      : "800-53|SI-7(2),CSCv7|3,CSF|PR.DS-6,ITSG-33|SI-7(2),LEVEL|1S"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityContacts"
  regex          : "Alert to Admins:"
  not_expect     : "Alert to Admins: off"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Alert to Admins: \(.properties.alertsToAdmins)"'
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Storage Accounts Exist"
      request        : "listStorageAccounts"
      regex          : ".*"
      expect         : ".+"
      json_transform : '.[].value[].name'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "3.1 Ensure that 'Secure transfer required' is set to 'Enabled'"
      info           : "Enable data encryption is transit.
Rationale:
The secure transfer option enhances the security of a storage account by only allowing requests to the storage account by a secure connection. For example, when calling REST APIs to access storage accounts, the connection must use HTTPS. Any requests using HTTP will be rejected when 'secure transfer required' is enabled. When using the Azure files service, connection without encryption will fail, including scenarios using SMB 2.1, SMB 3.0 without encryption, and some flavors of the Linux SMB client. Because Azure storage doesnt support HTTPS for custom domain names, this option is not applied when using a custom domain name."
      solution       : "Azure Console
1. Go to Storage Accounts
2. For each storage account, go to Configuration
3. Set Secure transfer required to Enabled
Azure Command Line Interface 2.0
Use the below command to enable Secure transfer required for a Storage Account
az storage account update --name <storageAccountName> --resource-group <resourceGroupName> --https-only true
Impact:
None
Default Value:
By default, Secure transfer required is set to Disabled."
      reference      : "800-171|3.13.11,800-53|SC-13,CSCv7|14.4,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listStorageAccounts"
      regex          : "Secure Transfer Required:"
      not_expect     : "Secure Transfer Required: false"
      json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Secure Transfer Required: \(.properties.supportsHttpsTrafficOnly)"'
    </custom_item>

    <report type:"WARNING">
      description : "3.2 Ensure that storage account access keys are periodically regenerated"
      info        : "Regenerate storage account access keys periodically.
Rationale:
When a storage account is created, Azure generates two 512-bit storage access keys, which are used for authentication when the storage account is accessed. Rotating these keys periodically ensures that any inadvertent access or exposure does not result in these keys being compromised.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow Microsoft Azure documentation for regenerating storage account access keys.
Impact:
Regenerating access keys can affect services in Azure as well as the organization's applications that are dependent on the storage account. All clients that use the access key to access the storage account must be updated to use the new key.
Default Value:
By default, access keys are not regenerated periodically."
      reference   : "CSCv7|16,LEVEL|1NS"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"WARNING">
      description : "3.4 Ensure that shared access signature tokens expire within an hour"
      info        : "Expire shared access signature tokens within an hour.
Rationale:
A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. A shared access signature can be provided to clients who should not be trusted with the storage account key but for whom it may be necessary to delegate access to certain storage account resources. Providing a shared access signature URI to these clients allows them access to a resource for a specified period of time. This time should be set as low as possible, and preferably no longer than an hour.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "When generating shared access signature tokens, use start and end time such that it falls within an hour.
Impact:
None
Default Value:
By default, expiration for shared access signature is set to 8 hours."
      reference   : "CSCv7|16.10,LEVEL|1NS"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"WARNING">
      description : "3.5 Ensure that shared access signature tokens are allowed only over https"
      info        : "Shared access signature tokens should be allowed only over HTTPS protocol.
Rationale:
A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. A shared access signature can be provided to clients who should not be trusted with the storage account key but for whom it may be necessary to delegate access to certain storage account resources. Providing a shared access signature URI to these clients allows them access to a resource for a specified period of time. It is recommended to allow such access requests over HTTPS protocol only.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Azure Console
1. Go to Storage Accounts
2. For each storage account, go to Shared access signature
3. Set Allowed protocols to HTTPS only
Please note that at this point of time, there is no API/CLI mechanism available to programmatically conduct security assessment for this recommendation.
Impact:
None
Default Value:
By default, shared access signature tokens are allowed only over https protocol."
      reference   : "CSCv7|16.4,LEVEL|1NS"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"WARNING">
      description : "3.6 Ensure that 'Public access level' is set to Private for blob containers"
      info        : "Disable anonymous access to blob containers.
Rationale:
Anonymous, public read access to a container and its blobs can be enabled in Azure Blob storage. It grants read-only access to these resources without sharing the account key, and without requiring a shared access signature. It is recommended not to provide anonymous access to blob containers until, and unless, it is strongly desired. A shared access signature token should be used for providing controlled and timed access to blob containers.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Azure Console
First, follow Microsoft documentation and created shared access signature tokens for your blob containers. Then,
1. Go to Storage Accounts
2. For each storage account, go to Containers under BLOB SERVICE
3. For each container, click Access policy
4. Set Public access level to Private (no anonymous access)
Azure Command Line Interface 2.0
1. Identify the container name from the audit command
2. Set the permission for public access to private(off) for the above container name, using the below command
az storage container set-permission --name <containerName> --public-access off --account-name <accountName> --account-key <accountKey>
Impact:
Access using shared access signatures will have to be managed.
Default Value:
By default, Public access level is set to Private (no anonymous access) for blob containers."
      reference   : "CSCv7|16,LEVEL|1S"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </then>

  <else>
    <report type:"PASSED">
      description : "3.1 Ensure that 'Secure transfer required' is set to 'Enabled'"
      info        : "Enable data encryption is transit.
Rationale:
The secure transfer option enhances the security of a storage account by only allowing requests to the storage account by a secure connection. For example, when calling REST APIs to access storage accounts, the connection must use HTTPS. Any requests using HTTP will be rejected when 'secure transfer required' is enabled. When using the Azure files service, connection without encryption will fail, including scenarios using SMB 2.1, SMB 3.0 without encryption, and some flavors of the Linux SMB client. Because Azure storage doesnt support HTTPS for custom domain names, this option is not applied when using a custom domain name."
      solution    : "Azure Console
1. Go to Storage Accounts
2. For each storage account, go to Configuration
3. Set Secure transfer required to Enabled
Azure Command Line Interface 2.0
Use the below command to enable Secure transfer required for a Storage Account
az storage account update --name <storageAccountName> --resource-group <resourceGroupName> --https-only true
Impact:
None
Default Value:
By default, Secure transfer required is set to Disabled."
      reference   : "800-171|3.13.11,800-53|SC-13,CSCv7|14.4,CSF|PR.DS-5,ITSG-33|SC-13,LEVEL|1S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "3.2 Ensure that storage account access keys are periodically regenerated"
      info        : "Regenerate storage account access keys periodically.
Rationale:
When a storage account is created, Azure generates two 512-bit storage access keys, which are used for authentication when the storage account is accessed. Rotating these keys periodically ensures that any inadvertent access or exposure does not result in these keys being compromised.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow Microsoft Azure documentation for regenerating storage account access keys.
Impact:
Regenerating access keys can affect services in Azure as well as the organization's applications that are dependent on the storage account. All clients that use the access key to access the storage account must be updated to use the new key.
Default Value:
By default, access keys are not regenerated periodically."
      reference   : "CSCv7|16,LEVEL|1S"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "3.4 Ensure that shared access signature tokens expire within an hour"
      info        : "Expire shared access signature tokens within an hour.
Rationale:
A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. A shared access signature can be provided to clients who should not be trusted with the storage account key but for whom it may be necessary to delegate access to certain storage account resources. Providing a shared access signature URI to these clients allows them access to a resource for a specified period of time. This time should be set as low as possible, and preferably no longer than an hour.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "When generating shared access signature tokens, use start and end time such that it falls within an hour.
Impact:
None
Default Value:
By default, expiration for shared access signature is set to 8 hours."
      reference   : "CSCv7|16.10,LEVEL|1S"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "3.5 Ensure that shared access signature tokens are allowed only over https"
      info        : "Shared access signature tokens should be allowed only over HTTPS protocol.
Rationale:
A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. A shared access signature can be provided to clients who should not be trusted with the storage account key but for whom it may be necessary to delegate access to certain storage account resources. Providing a shared access signature URI to these clients allows them access to a resource for a specified period of time. It is recommended to allow such access requests over HTTPS protocol only.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Azure Console
1. Go to Storage Accounts
2. For each storage account, go to Shared access signature
3. Set Allowed protocols to HTTPS only
Please note that at this point of time, there is no API/CLI mechanism available to programmatically conduct security assessment for this recommendation.
Impact:
None
Default Value:
By default, shared access signature tokens are allowed only over https protocol."
      reference   : "CSCv7|16.4,LEVEL|1S"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "3.6 Ensure that 'Public access level' is set to Private for blob containers"
      info        : "Disable anonymous access to blob containers.
Rationale:
Anonymous, public read access to a container and its blobs can be enabled in Azure Blob storage. It grants read-only access to these resources without sharing the account key, and without requiring a shared access signature. It is recommended not to provide anonymous access to blob containers until, and unless, it is strongly desired. A shared access signature token should be used for providing controlled and timed access to blob containers.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Azure Console
First, follow Microsoft documentation and created shared access signature tokens for your blob containers. Then,
1. Go to Storage Accounts
2. For each storage account, go to Containers under BLOB SERVICE
3. For each container, click Access policy
4. Set Public access level to Private (no anonymous access)
Azure Command Line Interface 2.0
1. Identify the container name from the audit command
2. Set the permission for public access to private(off) for the above container name, using the below command
az storage container set-permission --name <containerName> --public-access off --account-name <accountName> --account-key <accountKey>
Impact:
Access using shared access signatures will have to be managed.
Default Value:
By default, Public access level is set to Private (no anonymous access) for blob containers."
      reference   : "CSCv7|16,LEVEL|1S"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Test if SQL Servers exist"
      request        : "listSQLServers"
      regex          : "SQL Server:"
      expect         : "SQL Server: .+"
      json_transform : '.[]|.subscriptionId as $id|.value[]|"SQL Server: \(.name)"'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "4.1 Ensure that 'Auditing' is set to 'On'"
      info           : "Enable auditing on SQL Servers.
Rationale:
The Azure platform allows a SQL server to be created as a service. Enabling auditing at the server level ensures that all existing and newly created databases on the SQL server instance are audited. Auditing policy applied on the SQL database does not override auditing policy and settings applied on the particular SQL server where the database is hosted.
Auditing tracks database events and writes them to an audit log in the Azure storage account. It also helps to maintain regulatory compliance, understand database activity, and gain insight into discrepancies and anomalies that could indicate business concerns or suspected security violations."
      solution       : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Auditing
4. Set Auditing to On
Azure PowerShell
Get the list of all SQL Servers
Get-AzureRmSqlServer
For each Server, enable auditing.
Set-AzureRmSqlServerAuditingPolicy -ResourceGroupName <resource group name> -ServerName <server name> -AuditType <audit type> -StorageAccountName <storage account name>
Impact:
None
Default Value:
By default, Auditing is set to Off."
      reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerBlobAuditingPolicies"
      regex          : "Auditing State:"
      not_expect     : "Auditing State: Disabled"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $sqlServerName|.SQLDBs[]|"Subscription ID: \($id)" + " ResourceGroup: \($name)" + " SQL Server: \($sqlServerName)"+" DB Name \(.name)"+" Auditing State: \(.value.properties.state)"'
    </custom_item>

    <custom_item>
      description    : "4.2 Ensure that 'AuditActionGroups' in 'auditing' policy for a SQL server is set properly"
      info           : "Configure the 'AuditActionGroups' property to appropriate groups to capture all the critical activities on the SQL Server and all the SQL databases hosted on the SQL server.
Rationale:
To capture all critical activities done on SQL Servers and databases within sql servers, auditing should be configured to capture appropriate 'AuditActionGroups'. Property AuditActionGroup should contains at least SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP, FAILED_DATABASE_AUTHENTICATION_GROUP, BATCH_COMPLETED_GROUP to ensure comprehensive audit logging for SQL servers and SQL databases hosted on SQL Server."
      solution       : "Azure Console
On Azure Console, There is no Provision to check or change AuditActionGroup property.
Azure PowerShell
To create Audit profile with prescribed 'AuditActionGroup':
Set-AzureRmSqlServerAuditingPolicy -ResourceGroupName \"<resourceGroup>\" -ServerName \"<serverName>\" -StorageAccountName \"storageAccountName\" -AuditActionGroup \"SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\", \"FAILED_DATABASE_AUTHENTICATION_GROUP\" -RetentionInDays <number >= 90>
Default Value:
When Auditing for a Sql Server is enabled using Azure Portal , AuditActionGroup property is by default set to {SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP, FAILED_DATABASE_AUTHENTICATION_GROUP, BATCH_COMPLETED_GROUP}."
      reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerBlobAuditingPolicies"
      regex          : "Audit Actions and Groups:"
      expect         : "Audit Actions and Groups: (?=.*SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)(?=.*FAILED_DATABASE_AUTHENTICATION_GROUP)(?=.*BATCH_COMPLETED_GROUP)"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $sqlServerName|.SQLDBs[]|"Subscription ID: \($id)" + " ResourceGroup: \($name)" + " SQL Server: \($sqlServerName)"+" DB Name: \(.name)"+" Audit Actions and Groups: \(.value.properties.auditActionsAndGroups)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.3 Ensure that 'Auditing' Retention is 'greater than 90 days'"
      info           : "SQL Server Audit Retention should be configured to be greater than 90 days.
Rationale:
Audit Logs can be used to check for anomalies and give insight into suspected breaches or misuse of information and access."
      solution       : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Auditing
4. Select Storage Details
5. Set Retention (days) setting greater than 90 days
6. Select OK
7. Select Save
Azure PowerShell
For each Server, set retention policy for more than or equal to 90 days
set-AzureRmSqlServerAuditing -ResourceGroupName <resource group name> -ServerName <server name> -RetentionInDays <Number of Days to retain the audit logs, should be 90days minimum>
Impact:
None
Default Value:
By default, SQL Server audit storage is disabled."
      reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSCv7|6.4,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerAuditingPolicies"
      regex          : "Retention:"
      not_expect     : 'Retention: ([0-9]|[1-8][0-9]|90)$'
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $sqlServerName|"Subscription ID: \($id)" + " ResourceGroup: \($name)" + " Server Name: \($sqlServerName)"+" Retention: \(.value.properties.retentionDays)"'
    </custom_item>

    <custom_item>
      description    : "4.8 Ensure that Azure Active Directory Admin is configured"
      info           : "Use Azure Active Directory Authentication for authentication with SQL Database.
Rationale:
Azure Active Directory authentication is a mechanism to connect to Microsoft Azure SQL Database and SQL Data Warehouse using identities in Azure Active Directory (Azure AD). With Azure AD authentication, identities of database users and other Microsoft services can be managed in one central location. Central ID management provides a single place to manage database users and simplifies permission management.
 It provides an alternative to SQL Server authentication.
 Helps stop the proliferation of user identities across database servers.
 Allows password rotation in a single place.
 Customers can manage database permissions using external (AAD) groups.
 It can eliminate storing passwords by enabling integrated Windows authentication and other forms of authentication supported by Azure Active Directory.
 Azure AD authentication uses contained database users to authenticate identities at the database level.
 Azure AD supports token-based authentication for applications connecting to SQL Database.
 Azure AD authentication supports ADFS (domain federation) or native user/password authentication for a local Azure Active Directory without domain synchronization.
 Azure AD supports connections from SQL Server Management Studio that use Active Directory Universal Authentication, which includes Multi-Factor Authentication (MFA). MFA includes strong authentication with a range of easy verification options  phone call, text message, smart cards with pin, or mobile app notification."
      solution       : "Azure Console
1. Go to SQL servers
2. For each SQL server, click on Active Directory admin
3. Click on Set admin
4. Select an admin
5. Click Save
Azure PowerShell
For each Server, set AD Admin
Set-AzureRmSqlServerActiveDirectoryAdministrator -ResourceGroupName <resource group name> -ServerName <server name> -DisplayName \"<Display name of AD account to set as DB administrator>\"
Impact:
None
Default Value:
Azure Active Directory Authentication for SQL Database/Server is not enabled by default"
      reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.2,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listSQLServerAdmins"
      regex          : "AD Admin"
      expect         : 'has an AD Admin set'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.SQLServers[]|if (.value|length == 0) then "SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " SQLServer: \(.name) does not have an AD Admin" else "SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " Server Name: \(.name) - has an AD Admin set" end'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.9 Ensure that 'Data encryption' is set to 'On' on a SQL Database"
      info           : "Enable Transparent Data Encryption on every SQL server.
Rationale:
Azure SQL Database transparent data encryption helps protect against the threat of malicious activity by performing real-time encryption and decryption of the database, associated backups, and transaction log files at rest without requiring changes to the application."
      solution       : "Azure Console
1. Go to SQL databases
2. For each DB instance
3. Click on Transparent data encryption
4. Set Data encryption to On
Azure Command Line Interface 2.0
Use the below command to enable Transparent data encryption for SQL DB instance.
az sql db tde set --resource-group <resourceGroup> --server <dbServerName> --database <dbName> --status Enabled
Impact:
None
Default Value:
By default, Data encryption is set to On."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLDBTransparentDataEncryptions"
      regex          : "Data Encryption Status:"
      expect         : 'Data Encryption Status: (Enabled|Not Applicable)'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.SQLServers[]|.name as $sname|.SQLDBs[]|.name as $sdbname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " SQLServer: \($sname)" + " SQLDBs: \($sdbname)"+ " Data Encryption Status: \(if ($sdbname) == "master" then "Not Applicable" else .value.properties.status end)"'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.1 Ensure that 'Auditing' is set to 'On'"
      info        : "Enable auditing on SQL Servers.
Rationale:
The Azure platform allows a SQL server to be created as a service. Enabling auditing at the server level ensures that all existing and newly created databases on the SQL server instance are audited. Auditing policy applied on the SQL database does not override auditing policy and settings applied on the particular SQL server where the database is hosted.
Auditing tracks database events and writes them to an audit log in the Azure storage account. It also helps to maintain regulatory compliance, understand database activity, and gain insight into discrepancies and anomalies that could indicate business concerns or suspected security violations."
      solution    : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Auditing
4. Set Auditing to On
Azure PowerShell
Get the list of all SQL Servers
Get-AzureRmSqlServer
For each Server, enable auditing.
Set-AzureRmSqlServerAuditingPolicy -ResourceGroupName <resource group name> -ServerName <server name> -AuditType <audit type> -StorageAccountName <storage account name>
Impact:
None
Default Value:
By default, Auditing is set to Off."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.2 Ensure that 'AuditActionGroups' in 'auditing' policy for a SQL server is set properly"
      info        : "Configure the 'AuditActionGroups' property to appropriate groups to capture all the critical activities on the SQL Server and all the SQL databases hosted on the SQL server.
Rationale:
To capture all critical activities done on SQL Servers and databases within sql servers, auditing should be configured to capture appropriate 'AuditActionGroups'. Property AuditActionGroup should contains at least SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP, FAILED_DATABASE_AUTHENTICATION_GROUP, BATCH_COMPLETED_GROUP to ensure comprehensive audit logging for SQL servers and SQL databases hosted on SQL Server."
      solution    : "Azure Console
On Azure Console, There is no Provision to check or change AuditActionGroup property.
Azure PowerShell
To create Audit profile with prescribed 'AuditActionGroup':
Set-AzureRmSqlServerAuditingPolicy -ResourceGroupName \"<resourceGroup>\" -ServerName \"<serverName>\" -StorageAccountName \"storageAccountName\" -AuditActionGroup \"SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\", \"FAILED_DATABASE_AUTHENTICATION_GROUP\" -RetentionInDays <number >= 90>
Default Value:
When Auditing for a Sql Server is enabled using Azure Portal , AuditActionGroup property is by default set to {SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP, FAILED_DATABASE_AUTHENTICATION_GROUP, BATCH_COMPLETED_GROUP}."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.3 Ensure that 'Auditing' Retention is 'greater than 90 days'"
      info        : "SQL Server Audit Retention should be configured to be greater than 90 days.
Rationale:
Audit Logs can be used to check for anomalies and give insight into suspected breaches or misuse of information and access."
      solution    : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Auditing
4. Select Storage Details
5. Set Retention (days) setting greater than 90 days
6. Select OK
7. Select Save
Azure PowerShell
For each Server, set retention policy for more than or equal to 90 days
set-AzureRmSqlServerAuditing -ResourceGroupName <resource group name> -ServerName <server name> -RetentionInDays <Number of Days to retain the audit logs, should be 90days minimum>
Impact:
None
Default Value:
By default, SQL Server audit storage is disabled."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CSCv7|6.4,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ITSG-33|AU-12,LEVEL|1S,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.8 Ensure that Azure Active Directory Admin is configured"
      info        : "Use Azure Active Directory Authentication for authentication with SQL Database.
Rationale:
Azure Active Directory authentication is a mechanism to connect to Microsoft Azure SQL Database and SQL Data Warehouse using identities in Azure Active Directory (Azure AD). With Azure AD authentication, identities of database users and other Microsoft services can be managed in one central location. Central ID management provides a single place to manage database users and simplifies permission management.
 It provides an alternative to SQL Server authentication.
 Helps stop the proliferation of user identities across database servers.
 Allows password rotation in a single place.
 Customers can manage database permissions using external (AAD) groups.
 It can eliminate storing passwords by enabling integrated Windows authentication and other forms of authentication supported by Azure Active Directory.
 Azure AD authentication uses contained database users to authenticate identities at the database level.
 Azure AD supports token-based authentication for applications connecting to SQL Database.
 Azure AD authentication supports ADFS (domain federation) or native user/password authentication for a local Azure Active Directory without domain synchronization.
 Azure AD supports connections from SQL Server Management Studio that use Active Directory Universal Authentication, which includes Multi-Factor Authentication (MFA). MFA includes strong authentication with a range of easy verification options  phone call, text message, smart cards with pin, or mobile app notification."
      solution    : "Azure Console
1. Go to SQL servers
2. For each SQL server, click on Active Directory admin
3. Click on Set admin
4. Select an admin
5. Click Save
Azure PowerShell
For each Server, set AD Admin
Set-AzureRmSqlServerActiveDirectoryAdministrator -ResourceGroupName <resource group name> -ServerName <server name> -DisplayName \"<Display name of AD account to set as DB administrator>\"
Impact:
None
Default Value:
Azure Active Directory Authentication for SQL Database/Server is not enabled by default"
      reference   : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CSCv7|16.2,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.9 Ensure that 'Data encryption' is set to 'On' on a SQL Database"
      info        : "Enable Transparent Data Encryption on every SQL server.
Rationale:
Azure SQL Database transparent data encryption helps protect against the threat of malicious activity by performing real-time encryption and decryption of the database, associated backups, and transaction log files at rest without requiring changes to the application."
      solution    : "Azure Console
1. Go to SQL databases
2. For each DB instance
3. Click on Transparent data encryption
4. Set Data encryption to On
Azure Command Line Interface 2.0
Use the below command to enable Transparent data encryption for SQL DB instance.
az sql db tde set --resource-group <resourceGroup> --server <dbServerName> --database <dbName> --status Enabled
Impact:
None
Default Value:
By default, Data encryption is set to On."
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "MySQL Database Server exists"
      request        : "listMYSQLServersByResourceGroup"
      regex          : ".+"
      expect         : 'MySQLServer: .+'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " MySQLServer: \(.value[].name)"'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "4.11 Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
      info           : "Enable SSL connection on MYSQL Servers.
Rationale:
SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against \"man in the middle\" attacks by encrypting the data stream between the server and application."
      solution       : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for MySQL server
3. For each database, click on Connection security
4. In SSL settings
5. Click on ENABLED for Enforce SSL connection
Azure Command Line Interface 2.0
Use the below command to set MYSQL Databases to Enforce SSL connection.
az mysql server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled"
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|14.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listMYSQLServersByResourceGroup"
      regex          : "SSLEnforcement: "
      expect         : 'SSLEnforcement: Enabled'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " MySQLServer: \(.value[].name)" + " SSLEnforcement: \(.value[].properties.sslEnforcement)"'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.11 Ensure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server"
      info        : "Enable SSL connection on MYSQL Servers.
Rationale:
SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against \"man in the middle\" attacks by encrypting the data stream between the server and application."
      solution    : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for MySQL server
3. For each database, click on Connection security
4. In SSL settings
5. Click on ENABLED for Enforce SSL connection
Azure Command Line Interface 2.0
Use the below command to set MYSQL Databases to Enforce SSL connection.
az mysql server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled"
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|14.4,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "PostgreSQL Servers exist"
      request        : "listPostgreSQLServersByResourceGroup"
      regex          : ".+"
      expect         : 'PostgreSQL: .+'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQL: \(.value[].name)"'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "4.12 Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable log_checkpoints on PostgreSQL Servers.
Rationale:
Enabling log_checkpoints helps the PostgreSQL Database to Log each checkpoint in turn generates query and error logs. However, access to transaction logs is not supported. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_checkpoints.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update log_checkpoints configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_checkpoints --value on"
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listPostgreSQLServerConfigurations"
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_checkpoints")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.13 Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
      info           : "Enable SSL connection on PostgreSQL Servers.
Rationale:
SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against \"man in the middle\" attacks by encrypting the data stream between the server and application."
      solution       : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Connection security
4. In SSL settings.
5. Click on ENABLED to Enforce SSL connection
Azure Command Line Interface 2.0
Use the below command to enforce ssl connection for PostgreSQL Database.
az postgres server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled"
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|14.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listPostgreSQLServersByResourceGroup"
      regex          : "SSLEnforcement: "
      expect         : 'SSLEnforcement: Enabled'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \(.value[].name)" + " SSLEnforcement: \(.value[].properties.sslEnforcement)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.14 Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable log_connections on PostgreSQL Servers.
Rationale:
Enabling log_connections helps PostgreSQL Database to log attempted connection to the server, as well as successful completion of client authentication. Log data can be used to identify, troubleshoot, and repair configuration errors and suboptimal performance."
      solution       : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_connections.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update log_connections configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_connections --value on
Default Value:
By default log_connections is disabled (set to off)."
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listPostgreSQLServerConfigurations"
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_connections")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.15 Ensure server parameter 'log_disconnections' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable log_disconnections on PostgreSQL Servers.
Rationale:
Enabling log_disconnections helps PostgreSQL Database to Logs end of a session, including duration, which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_disconnections.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update log_disconnections configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_disconnections --value on"
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listPostgreSQLServerConfigurations"
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_disconnections")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.16 Ensure server parameter 'log_duration' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable log_duration on PostgreSQL Servers.
Rationale:
Enabling log_duration helps the PostgreSQL Database to Logs the duration of each completed SQL statement which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_duration.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update log_duration configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_duration --value on"
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listPostgreSQLServerConfigurations"
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_duration")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.17 Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"
      info           : "Enable connection_throttling on PostgreSQL Servers.
Rationale:
Enabling connection_throttling helps the PostgreSQL Database to Set the verbosity of logged messages which in turn generates query and error logs with respect to concurrent connections, that could lead to a successful Denial of Service (DoS) attack by exhausting connection resources. A system can also fail or be degraded by an overload of legitimate users. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for connection_throttling.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update connection_throttling configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name connection_throttling --value on"
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listPostgreSQLServerConfigurations"
      regex          : "Enabled:"
      expect         : 'Enabled: on'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "connection_throttling")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Enabled: \(.properties.value)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.18 Ensure server parameter 'log_retention_days' is greater than 3 days for PostgreSQL Database Server"
      info           : "Enable log_retention_days on PostgreSQL Servers.
Rationale:
Enabling log_retention_days helps PostgreSQL Database to Sets number of days a log file is retained which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution       : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_retention_days.
5. Enter value in range 4-7 (inclusive) and save.
Azure Command Line Interface 2.0
Use the below command to update log_retention_days configuration.
 az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_retention_days --value <4-7>"
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listPostgreSQLServerConfigurations"
      regex          : "Days:"
      expect         : 'Days: [4-7]'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.PostgreSQLServers[]|.name as $pgname|.value[]|select(.name == "log_retention_days")|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " PostgreSQLServer: \($pgname)" + " Days: \(.properties.value)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.19 Ensure that Azure Active Directory Admin is configured"
      info           : "Use Azure Active Directory Authentication for authentication with SQL Database.
Rationale:
Azure Active Directory authentication is a mechanism to connect to Microsoft Azure SQL Database and SQL Data Warehouse by using identities in Azure Active Directory (Azure AD). With Azure AD authentication, identities of database users and other Microsoft services can be managed in one central location. Central ID management provides a single place to manage database users and simplifies permission management.
 It provides an alternative to SQL Server authentication.
 Helps stop the proliferation of user identities across database servers.
 Allows password rotation in a single place.
 Customers can manage database permissions using external (AAD) groups.
 It can eliminate storing passwords by enabling integrated Windows authentication and other forms of authentication supported by Azure Active Directory.
 Azure AD authentication uses contained database users to authenticate identities at the database level.
 Azure AD supports token-based authentication for applications connecting to SQL Database.
 Azure AD authentication supports ADFS (domain federation) or native user/password authentication for a local Azure Active Directory without domain synchronization.
 Azure AD supports connections from SQL Server Management Studio that use Active Directory Universal Authentication, which includes Multi-Factor Authentication (MFA). MFA includes strong authentication with a range of easy verification options: phone call, text message, smart cards with pin, or mobile app notification."
      solution       : "Azure Console
1. Go to SQL servers
2. For each SQL server, click on Active Directory admin
3. Click on Set admin
4. Select an admin
5. Click Save
Azure PowerShell
For each Server, set AD Admin
Set-AzureRmSqlServerActiveDirectoryAdministrator -ResourceGroupName <resource group name> -ServerName <server name> -DisplayName \"<Display name of AD account to set as DB administrator>\"
Impact:
None
Default Value:
Azure Active Directory Authentication for SQL Database/Server is not enabled by default"
      reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.2,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listSQLServerAdmins"
      regex          : "AD Admin"
      expect         : 'has an AD Admin set'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.SQLServers[]|if (.value|length == 0) then "SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " SQLServer: \(.name) does not have an AD Admin" else "SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " Server Name: \(.name) - has an AD Admin set" end'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.12 Ensure server parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable log_checkpoints on PostgreSQL Servers.
Rationale:
Enabling log_checkpoints helps the PostgreSQL Database to Log each checkpoint in turn generates query and error logs. However, access to transaction logs is not supported. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_checkpoints.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update log_checkpoints configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_checkpoints --value on"
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.13 Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
      info        : "Enable SSL connection on PostgreSQL Servers.
Rationale:
SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against \"man in the middle\" attacks by encrypting the data stream between the server and application."
      solution    : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Connection security
4. In SSL settings.
5. Click on ENABLED to Enforce SSL connection
Azure Command Line Interface 2.0
Use the below command to enforce ssl connection for PostgreSQL Database.
az postgres server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled"
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|14.4,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.14 Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable log_connections on PostgreSQL Servers.
Rationale:
Enabling log_connections helps PostgreSQL Database to log attempted connection to the server, as well as successful completion of client authentication. Log data can be used to identify, troubleshoot, and repair configuration errors and suboptimal performance."
      solution    : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_connections.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update log_connections configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_connections --value on
Default Value:
By default log_connections is disabled (set to off)."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.15 Ensure server parameter 'log_disconnections' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable log_disconnections on PostgreSQL Servers.
Rationale:
Enabling log_disconnections helps PostgreSQL Database to Logs end of a session, including duration, which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_disconnections.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update log_disconnections configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_disconnections --value on"
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.16 Ensure server parameter 'log_duration' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable log_duration on PostgreSQL Servers.
Rationale:
Enabling log_duration helps the PostgreSQL Database to Logs the duration of each completed SQL statement which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_duration.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update log_duration configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_duration --value on"
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.17 Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"
      info        : "Enable connection_throttling on PostgreSQL Servers.
Rationale:
Enabling connection_throttling helps the PostgreSQL Database to Set the verbosity of logged messages which in turn generates query and error logs with respect to concurrent connections, that could lead to a successful Denial of Service (DoS) attack by exhausting connection resources. A system can also fail or be degraded by an overload of legitimate users. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for connection_throttling.
5. Click ON and save.
Azure Command Line Interface 2.0
Use the below command to update connection_throttling configuration.
az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name connection_throttling --value on"
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|6.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.18 Ensure server parameter 'log_retention_days' is greater than 3 days for PostgreSQL Database Server"
      info        : "Enable log_retention_days on PostgreSQL Servers.
Rationale:
Enabling log_retention_days helps PostgreSQL Database to Sets number of days a log file is retained which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance."
      solution    : "Azure Console
1. Login to Azure Portal using https://portal.azure.com
2. Go to Azure Database for PostgreSQL server
3. For each database, click on Server parameters
4. Search for log_retention_days.
5. Enter value in range 4-7 (inclusive) and save.
Azure Command Line Interface 2.0
Use the below command to update log_retention_days configuration.
 az postgres server configuration set --resource-group <resourceGroupName> --server-name <serverName> --name log_retention_days --value <4-7>"
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.19 Ensure that Azure Active Directory Admin is configured"
      info        : "Use Azure Active Directory Authentication for authentication with SQL Database.
Rationale:
Azure Active Directory authentication is a mechanism to connect to Microsoft Azure SQL Database and SQL Data Warehouse by using identities in Azure Active Directory (Azure AD). With Azure AD authentication, identities of database users and other Microsoft services can be managed in one central location. Central ID management provides a single place to manage database users and simplifies permission management.
 It provides an alternative to SQL Server authentication.
 Helps stop the proliferation of user identities across database servers.
 Allows password rotation in a single place.
 Customers can manage database permissions using external (AAD) groups.
 It can eliminate storing passwords by enabling integrated Windows authentication and other forms of authentication supported by Azure Active Directory.
 Azure AD authentication uses contained database users to authenticate identities at the database level.
 Azure AD supports token-based authentication for applications connecting to SQL Database.
 Azure AD authentication supports ADFS (domain federation) or native user/password authentication for a local Azure Active Directory without domain synchronization.
 Azure AD supports connections from SQL Server Management Studio that use Active Directory Universal Authentication, which includes Multi-Factor Authentication (MFA). MFA includes strong authentication with a range of easy verification options: phone call, text message, smart cards with pin, or mobile app notification."
      solution    : "Azure Console
1. Go to SQL servers
2. For each SQL server, click on Active Directory admin
3. Click on Set admin
4. Select an admin
5. Click Save
Azure PowerShell
For each Server, set AD Admin
Set-AzureRmSqlServerActiveDirectoryAdministrator -ResourceGroupName <resource group name> -ServerName <server name> -DisplayName \"<Display name of AD account to set as DB administrator>\"
Impact:
None
Default Value:
Azure Active Directory Authentication for SQL Database/Server is not enabled by default"
      reference   : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CSCv7|16.2,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<custom_item>
  description    : "5.1.1 Ensure that a Log Profile exists"
  info           : "Enable log profile for exporting activity logs.
Rationale:
A log profile controls how an activity log is exported. By default, activity logs are retained only for 90 days. Log profiles should be defined so that logs can be exported and stored for a longer duration in order to analyze security activities within an Azure subscription."
  solution       : "Azure Console
1. Go to Activity log
2. Click on Export
3. Configure the setting
4. Click on Save
Azure Command Line Interface 2.0
Use the below command to create a Log Profile in Azure Monitoring.
az monitor log-profiles create --categories <space separated category values Write|Delete| Action> --days <numberofDaysForRetention> --enabled true --location <locationName> --locations <Space separated list of regions> --name <logprofileName>

Impact:
None
Default Value:
By default, log profile is not set."
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,800-53|SI-4(5),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.5,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-3,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,ITSG-33|SI-4(5),LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listLogProfiles"
  regex          : "Sub ID:"
  not_expect     : 'does not have a Log Profile'
  json_transform : '.[]| if ((.value | length) != 0) then "Sub ID: \(.subscriptionId) has a Log Profile" else "Sub ID: \(.subscriptionId) does not have a Log Profile" end'
</custom_item>

<custom_item>
  description    : "5.1.2 Ensure that Activity Log Retention is set 365 days or greater"
  info           : "Ensure activity log retention is set for 365 days or greater.
Rationale:
A log profile controls how the activity log is exported and retained. Since the average time to detect a breach is 210 days, the activity log should be retained for 365 days or more in order to have time to respond to any incidents."
  solution       : "Azure Console
1. Go to Activity log
2. Select Export
3. Set Retention (days) is set to 365 or 0
4. Select Save
Azure Command Line Interface 2.0
Use the below command to set the Activity log Retention (days) to 365 or greater.
az monitor log-profiles update --name <logProfileName> --set retentionPolicy.days=<number of days> retentionPolicy.enabled=true
Use the below command to store logs for forever (indefinitely).
az monitor log-profiles update --name <logProfileName> --set retentionPolicy.days=0 retentionPolicy.enabled=false
Note:
 If CLI command returns error by expecting location not set to null, append location=global in the command line. When log profile is set using azure portal, by default location is set to null and causes error when tried to update log profile using CLI.
Impact:
None"
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,800-53|SI-4(5),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.4,CSCv7|6.5,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-3,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,ITSG-33|SI-4(5),LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listLogProfiles"
  regex          : "Retention: "
  not_expect     : 'Retention: ([1-9]|[1-9][0-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-4])$'
  json_transform : '.[]|.subscriptionId as $id| .value[].name as $name |"Subscription ID: \($id)" + " Profile Name: \($name)" +" Retention: \(.value[].properties.retentionPolicy.days)"'
</custom_item>

<custom_item>
  description    : "5.1.3 Ensure audit profile captures all the activities"
  info           : "The log profile should be configured to export all activities from the control/management plane.
Rationale:
A log profile controls how the activity log is exported. Configuring the log profile to collect logs for the categories \"write\", \"delete\" and \"action\" ensures that all the control/management plane activities performed on the subscription are exported."
  solution       : "Azure Console
On Azure portal there is no provision to check or set categories.
Azure Command Line Interface 2.0
Use command: az monitor log-profiles update --name default in order to update existing default log profile.
Please refer to the documentation: https://docs.microsoft.com/en-us/cli/azure/monitor/log-profiles?view=azure-cli-latest#az-monitor-log-profiles-update
Default Value:
When the log profile is created using Azure Portal, by default it is configured to export categories - Write, Delete and Action. However, when the log profile is created using the command line, the user can explicitly choose which of the log categories to export."
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,800-53|SI-4(5),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-3,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,ITSG-33|SI-4(5),LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listLogProfiles"
  regex          : "Categories: "
  expect         : "Categories: \[\"Write\",\"Delete\",\"Action\"\]"
  json_transform : '.[]|.subscriptionId as $id| .value[].name as $name |"Subscription ID: \($id)" + " Profile Name: \($name)" +" Categories: \(.value[].properties.categories)"'
  match_all      : YES
</custom_item>

<custom_item>
  description    : "5.1.4 Ensure the log profile captures activity logs for all regions including global"
  info           : "Configure the log profile to export activities from all Azure supported regions/locations including global.
Rationale:
A log profile controls how the activity Log is exported.
Ensuring that logs are exported from all the Azure supported regions/locations means that logs for potentially unexpected activities occurring in otherwise unused regions are stored and made available for incident response and investigations.
Including global region/location in the log profile locations ensures all events from the control/management plane will be exported, as many events in the activity log are global events."
  solution       : "Azure Console
1. Go to Activity log
2. Select Export
3. Select Subscription
4. In Regions dropdown list, check Select all
5. Select Save
Azure Command Line Interface 2.0
Use command: az monitor log-profiles update --name default in order to update existing default log profile.
Please refer to the documentation: https://docs.microsoft.com/en-us/cli/azure/monitor/log-profiles?view=azure-cli-latest#az-monitor-log-profiles-update
Default Value:
There is no default value."
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,800-53|SI-4(5),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-3,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,ITSG-33|SI-4(5),LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listLogProfiles"
  regex          : "Regions: "
  expect         : "Regions: \[\"australiacentral\",\"australiacentral2\",\"australiaeast\",\"australiasoutheast\",\"brazilsouth\",\"canadacentral\",\"canadaeast\",\"centralindia\",\"centralus\",\"eastasia\",\"eastus\",\"eastus2\",\"francecentral\",\"francesouth\",\"japaneast\",\"japanwest\",\"koreacentral\",\"koreasouth\",\"northcentralus\",\"northeurope\",\"southafricanorth\",\"southafricawest\",\"southcentralus\",\"southindia\",\"southeastasia\",\"uksouth\",\"ukwest\",\"westcentralus\",\"westeurope\",\"westindia\",\"westus\",\"westus2\",\"global\"\]"
  json_transform : '.[]|.subscriptionId as $id| .value[].name as $name |"Subscription ID: \($id)" + " Profile Name: \($name)" +" Regions: \(.value[].properties.locations)"'
  match_all      : YES
</custom_item>

<custom_item>
  description    : "5.1.5 Ensure the storage container storing the activity logs is not publicly accessible"
  info           : "The storage account container containing the activity log export should not be publicly accessible.
Rationale:
Allowing public access to activity log content may aid an adversary in identifying weaknesses in the affected account's use or configuration.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Azure Console
1. In right column, Click service Storage Accounts to access Storage account blade
2. Click on the storage account name
3. In Section Blob Service click Containers. It will list all the containers in next blade
4. Look for a record with container named as insight-operational-logs. Click ... from right most column to open Context menu
5. Click Access Policy from Context Menu and set Public Access Level to Private (no anonymous access)
Azure Command Line Interface 2.0
az storage container set-permission --name insights-operational-logs --account-name <Storage Account Name> --public-access off
Impact:
Configuring container Access policy to private will remove access from the container for everyone except owners of the storage account. Access policy needs to be set explicitly in order to allow access to other desired users.
Default Value:
By default, public access is set to null (allowing only private access) for a container with activity log export."
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,800-53|SI-4(5),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-3,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,ITSG-33|SI-4(5),LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listLogProfiles"
  regex          : "Storage Account ID: "
  expect         : "MANUAL_REVIEW"
  json_transform : '.[]|.subscriptionId as $id| .value[].name as $name |"Subscription ID: \($id)" + " Profile Name: \($name)" +" Storage Account ID: \(.value[].properties.storageAccountId)"'
  severity       : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Key Vault Exists"
      request        : "listVaultsByResourceGroup"
      regex          : "Key vaults"
      expect         : "Key vaults exist"
      json_transform : '.[].resourceGroups[]|if ((.value | length) != 0) then "Key vaults exist" else "Key vaults do not exist" end'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "5.1.7 Ensure that logging for Azure KeyVault is 'Enabled'"
      info           : "Enable AuditEvent logging for key vault instances to ensure interactions with key vaults are logged and available.
Rationale:
Monitoring how and when key vaults are accessed, and by whom enables an audit trail of interactions with confidential information, keys and certificates managed by Azure Keyvault. Enabling logging for Key Vault saves information in an Azure storage account that the user provides. This creates a new container named insights-logs-auditevent automatically for the specified storage account, and this same storage account can be used for collecting logs for multiple key vaults."
      solution       : "Follow Microsoft Azure documentation and setup Azure Key Vault Logging.
Impact:
None
Default Value:
By default, Diagnostic AuditEvent logging is not enabled for Key Vault instances."
      reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listVaultDiagnosticSetting"
      regex          : "Logs enabled:"
      not_expect     : "Logs enabled: false"
      json_transform : '.[]  |.subscriptionId as $id|.resourceGroups[]|.name as $rgn|"Sub ID: \($id)"+ " ResourceGroup: \($rgn)" + " Vault: \(.value[].name)"+ " Vault Diag: \(.value[].value[].name)" + " Logs enabled: \(.value[].value[].properties.logs[].enabled)"'
    </custom_item>

    <custom_item>
      description    : "8.1 Ensure that the expiration date is set on all keys"
      info           : "Ensure that all keys in Azure Key Vault have an expiration time set.
Rationale:
Azure Key Vault enables users to store and use cryptographic keys within the Microsoft Azure environment. The exp (expiration time) attribute identifies the expiration time on or after which the key MUST NOT be used for a cryptographic operation. By default, keys never expire. It is thus recommended that keys be rotated in the key vault and set an explicit expiration time for all keys. This ensures that the keys cannot be used beyond their assigned lifetimes.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Azure Console
1. Go to Key vaults
2. For each Key vault, click on Keys.
3. Under the Settings section, Make sure Enabled? is set to Yes
4. Set an appropriate EXPIRATION DATE on all keys.
Azure Command Line Interface 2.0
Update the EXPIRATION DATE for the key using below command.
az keyvault key set-attributes --name <keyName> --vault-name <vaultName> --expires Y-m-d'T'H:M:S'Z'
Impact:
Keys cannot be used beyond their assigned expiration times respectively. Keys need to be rotated periodically wherever they are used.
Default Value:
By default, keys do not expire."
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|16,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listVaultsByResourceGroup"
      regex          : ".+"
      not_expect     : ".+"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[].properties != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)"+" Vault Name: \(.value[].name)"'
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "8.2 Ensure that the expiration date is set on all Secrets"
      info           : "Ensure that all Secrets in the Azure Key Vault have an expiration time set.
Rationale:
The Azure Key Vault enables users to store and keep secrets within the Microsoft Azure environment. Secrets in the Azure Key Vault are octet sequences with a maximum size of 25k bytes each. The exp (expiration time) attribute identifies the expiration time on or after which the secret MUST NOT be used. By default, secrets never expire. It is thus recommended to rotate secrets in the key vault and set an explicit expiration time for all secrets. This ensures that the secrets cannot be used beyond their assigned lifetimes.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Azure Console
1. Go to Key vaults
2. For each Key vault, click on Secrets.
3. Under the Settings section, Make sure Enabled? is set to Yes
4. Set an appropriate EXPIRATION DATE on all secrets.
Azure Command Line Interface 2.0
Use the below command to set EXPIRATION DATE on the all secrets.
az keyvault secret set-attributes --name <secretName> --vault-name <vaultName> --expires Y-m-d'T'H:M:S'Z'
Impact:
Secrets cannot be used beyond their assigned expiry times respectively. Secrets need to be rotated periodically wherever they are used.
Default Value:
By default, secrets do not expire."
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|16,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listVaultsByResourceGroup"
      regex          : ".+"
      not_expect     : ".+"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[].properties != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)"+" Vault Name: \(.value[].name)"'
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "8.4 Ensure the key vault is recoverable"
      info           : "The key vault contains object keys, secrets and certificates. Accidental unavailability of a key vault can cause immediate data loss or loss of security functions (authentication, validation, verification, non-repudiation, etc.) supported by the key vault objects.
It is recommended the key vault be made recoverable by enabling the \"Do Not Purge\" and \"Soft Delete\" functions. This is in order to prevent loss of encrypted data including storage accounts, SQL databases, and/or dependent services provided by key vault objects (Keys, Secrets, Certificates) etc., as may happen in the case of accidental deletion by a user or from disruptive activity by a malicious user.
Rationale:
There could be scenarios where users accidently run delete/purge commands on key vault or attacker/malicious user does it deliberately to cause disruption. Deleting or purging a key vault leads to immediate data loss as keys encrypting data and secrets/certificates allowing access/services will become non-accessible. There are 2 key vault properties that plays role in permanent unavailability of a key vault.
1> enableSoftDelete:
Setting this parameter to true for a key vault ensures that even if key vault is deleted, Key vault itself or its objects remain recoverable for next 90days. In this span of 90 days either key vault/objects can be recovered or purged (permanent deletion). If no action is taken, after 90 days key vault and its objects will be purged.
2> enablePurgeProtection:
enableSoftDelete only ensures that key vault is not deleted permanently and will be recoverable for 90 days from date of deletion. However, there are chances that the key vault and/or its objects are accidentally purged and hence will not be recoverable. Setting enablePurgeProtection to \"true\" ensures that the key vault and its objects cannot be purged.
Enabling both the parameters on key vaults ensures that key vaults and their objects cannot be deleted/purged permanently."
      solution       : "To enable \"Do Not Purge\" and \"Soft Delete\" for a Key Vault:
Via Azure Portal
Azure Portal does not have provision to update the respective configurations
Via Azure CLI 2.0
az resource update --id /subscriptions/xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/<resourceGroupName>/providers/Microsoft.KeyVault
/vaults/<keyVaultName> --set properties.enablePurgeProtection=true properties.enableSoftDelete=true
Impact:
Once purge-protection and soft-delete is enabled for a key vault, the action is irreversible.
Default Value:
When a new keyvault is created, both the parameters enableSoftDelete and enablePurgeProtection are set to null disabling both the features."
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|10,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listVaultsByResourceGroup"
      regex          : "Enable Soft Delete:"
      expect         : "Enable Soft Delete: true Enable Purge Protection: true"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[].properties != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)"+" Vault Name: \(.value[].name)" + " Enable Soft Delete: \(.value[].properties.enableSoftDelete)" + " Enable Purge Protection: \(.value[].properties.enablePurgeProtection)"'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "5.1.7 Ensure that logging for Azure KeyVault is 'Enabled'"
      info        : "Enable AuditEvent logging for key vault instances to ensure interactions with key vaults are logged and available.
Rationale:
Monitoring how and when key vaults are accessed, and by whom enables an audit trail of interactions with confidential information, keys and certificates managed by Azure Keyvault. Enabling logging for Key Vault saves information in an Azure storage account that the user provides. This creates a new container named insights-logs-auditevent automatically for the specified storage account, and this same storage account can be used for collecting logs for multiple key vaults."
      solution    : "Follow Microsoft Azure documentation and setup Azure Key Vault Logging.
Impact:
None
Default Value:
By default, Diagnostic AuditEvent logging is not enabled for Key Vault instances."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "8.1 Ensure that the expiration date is set on all keys"
      info        : "Ensure that all keys in Azure Key Vault have an expiration time set.
Rationale:
Azure Key Vault enables users to store and use cryptographic keys within the Microsoft Azure environment. The exp (expiration time) attribute identifies the expiration time on or after which the key MUST NOT be used for a cryptographic operation. By default, keys never expire. It is thus recommended that keys be rotated in the key vault and set an explicit expiration time for all keys. This ensures that the keys cannot be used beyond their assigned lifetimes."
      solution    : "Azure Console
1. Go to Key vaults
2. For each Key vault, click on Keys.
3. Under the Settings section, Make sure Enabled? is set to Yes
4. Set an appropriate EXPIRATION DATE on all keys.
Azure Command Line Interface 2.0
Update the EXPIRATION DATE for the key using below command.
az keyvault key set-attributes --name <keyName> --vault-name <vaultName> --expires Y-m-d'T'H:M:S'Z'
Impact:
Keys cannot be used beyond their assigned expiration times respectively. Keys need to be rotated periodically wherever they are used.
Default Value:
By default, keys do not expire."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|16,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "8.2 Ensure that the expiration date is set on all Secrets"
      info        : "Ensure that all Secrets in the Azure Key Vault have an expiration time set.
Rationale:
The Azure Key Vault enables users to store and keep secrets within the Microsoft Azure environment. Secrets in the Azure Key Vault are octet sequences with a maximum size of 25k bytes each. The exp (expiration time) attribute identifies the expiration time on or after which the secret MUST NOT be used. By default, secrets never expire. It is thus recommended to rotate secrets in the key vault and set an explicit expiration time for all secrets. This ensures that the secrets cannot be used beyond their assigned lifetimes."
      solution    : "Azure Console
1. Go to Key vaults
2. For each Key vault, click on Secrets.
3. Under the Settings section, Make sure Enabled? is set to Yes
4. Set an appropriate EXPIRATION DATE on all secrets.
Azure Command Line Interface 2.0
Use the below command to set EXPIRATION DATE on the all secrets.
az keyvault secret set-attributes --name <secretName> --vault-name <vaultName> --expires Y-m-d'T'H:M:S'Z'
Impact:
Secrets cannot be used beyond their assigned expiry times respectively. Secrets need to be rotated periodically wherever they are used.
Default Value:
By default, secrets do not expire."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|16,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "8.4 Ensure the key vault is recoverable"
      info        : "The key vault contains object keys, secrets and certificates. Accidental unavailability of a key vault can cause immediate data loss or loss of security functions (authentication, validation, verification, non-repudiation, etc.) supported by the key vault objects.
It is recommended the key vault be made recoverable by enabling the \"Do Not Purge\" and \"Soft Delete\" functions. This is in order to prevent loss of encrypted data including storage accounts, SQL databases, and/or dependent services provided by key vault objects (Keys, Secrets, Certificates) etc., as may happen in the case of accidental deletion by a user or from disruptive activity by a malicious user.
Rationale:
There could be scenarios where users accidently run delete/purge commands on key vault or attacker/malicious user does it deliberately to cause disruption. Deleting or purging a key vault leads to immediate data loss as keys encrypting data and secrets/certificates allowing access/services will become non-accessible. There are 2 key vault properties that plays role in permanent unavailability of a key vault.
1> enableSoftDelete:
Setting this parameter to true for a key vault ensures that even if key vault is deleted, Key vault itself or its objects remain recoverable for next 90days. In this span of 90 days either key vault/objects can be recovered or purged (permanent deletion). If no action is taken, after 90 days key vault and its objects will be purged.
2> enablePurgeProtection:
enableSoftDelete only ensures that key vault is not deleted permanently and will be recoverable for 90 days from date of deletion. However, there are chances that the key vault and/or its objects are accidentally purged and hence will not be recoverable. Setting enablePurgeProtection to \"true\" ensures that the key vault and its objects cannot be purged.
Enabling both the parameters on key vaults ensures that key vaults and their objects cannot be deleted/purged permanently."
      solution    : "To enable \"Do Not Purge\" and \"Soft Delete\" for a Key Vault:
Via Azure Portal
Azure Portal does not have provision to update the respective configurations
Via Azure CLI 2.0
az resource update --id /subscriptions/xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/<resourceGroupName>/providers/Microsoft.KeyVault
/vaults/<keyVaultName> --set properties.enablePurgeProtection=true properties.enableSoftDelete=true
Impact:
Once purge-protection and soft-delete is enabled for a key vault, the action is irreversible.
Default Value:
When a new keyvault is created, both the parameters enableSoftDelete and enablePurgeProtection are set to null disabling both the features."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|10,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<custom_item>
  description    : "5.2.1 Ensure that Activity Log Alert exists for Create Policy Assignment"
  info           : "Create an activity log alert for the Create Policy Assignment event.
Rationale:
Monitoring for create policy assignment events gives insight into changes done in \"azure policy - assignments\" and may reduce the time it takes to detect unsolicited changes."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Create policy assignment
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Authorization/policyAssignments/write\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.authorization/policyassignments/write" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.2 Ensure that Activity Log Alert exists for Create or Update Network Security Group"
  info           : "Create an Activity Log Alert for the \"Create\" or \"Update Network Security Group\" event.
Rationale:
Monitoring for \"Create\" or \"Update Network Security Group\" events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Create or Update Network Security Groups
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Network/networkSecurityGroups/write\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
}
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.network/networksecuritygroups/write" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.3 Ensure that Activity Log Alert exists for Delete Network Security Group"
  info           : "Create an activity log alert for the Delete Network Security Group event.
Rationale:
Monitoring for \"Delete Network Security Group\" events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Delete Network Security Groups
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Network/networkSecurityGroups/delete\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.classicnetwork/networksecuritygroups/delete" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.4 Ensure that Activity Log Alert exists for Create or Update Network Security Group Rule"
  info           : "Create an activity log alert for the Create or Update Network Security Group Rule event.
Rationale:
Monitoring for Create or Update Network Security Group Rule events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Create or Update Network Security Groups rule
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Network/networkSecurityGroups/securityRules/write\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.network/networksecuritygroups/securityrules/write" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.5 Ensure that activity log alert exists for the Delete Network Security Group Rule"
  info           : "Create an activity log alert for the Delete Network Security Group Rule event.
Rationale:
Monitoring for Delete Network Security Group Rule events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Delete Network Security Groups rule
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Network/networkSecurityGroups/securityRules/delete\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.classicnetwork/networksecuritygroups/securityrules/delete" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.6 Ensure that Activity Log Alert exists for Create or Update Security Solution"
  info           : "Create an activity log alert for the Create or Update Security Solution event.
Rationale:
Monitoring for Create or Update Security Solution events gives insight into changes to the active security solutions and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Create or Update Security Solutions
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Security/securitySolutions/write\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.security/securitysolutions/write" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.7 Ensure that Activity Log Alert exists for Delete Security Solution"
  info           : "Create an activity log alert for the Delete Security Solution event.
Rationale:
Monitoring for Delete Security Solution events gives insight into changes to the active security solutions and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Delete Security Solutions
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Security/securitySolutions/delete\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.security/securitysolutions/delete" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.8 Ensure that Activity Log Alert exists for Create or Update or Delete SQL Server Firewall Rule - delete"
  info           : "Create an activity log alert for the Create or Update or Delete SQL Server Firewall Rule event.
Rationale:
Monitoring for Create or Update or Delete SQL Server Firewall Rule events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Create or Update or Delete SQL Firewall Rule
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Sql/servers/firewallRules/write\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.sql/servers/firewallrules/delete" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.8 Ensure that Activity Log Alert exists for Create or Update or Delete SQL Server Firewall Rule - create/update"
  info           : "Create an activity log alert for the Create or Update or Delete SQL Server Firewall Rule event.
Rationale:
Monitoring for Create or Update or Delete SQL Server Firewall Rule events gives insight into network access changes and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Create or Update or Delete SQL Firewall Rule
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Sql/servers/firewallRules/write\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.sql/servers/firewallrules/write" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<custom_item>
  description    : "5.2.9 Ensure that Activity Log Alert exists for Update Security Policy"
  info           : "Create an activity log alert for the Update Security Policy event.
Rationale:
Monitoring for Update Security Policy events gives insight into changes to security policy and may reduce the time it takes to detect suspicious activity."
  solution       : "Azure Command Line Interface 2.0
Use the below command to create an Activity Log Alert for Update or Delete SQL Firewall Rule
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/<Resource_Group_To Create_Alert_In>/providers/microsoft.insights/activityLogAlerts/<Unique_Alert_Name>?api-version=2017-04-01 -d@\"input.json\"'
Where input.json contains the Request body JSON data as mentioned below.
{
  \"location\": \"Global\",
  \"tags\": {},
  \"properties\": {
    \"scopes\": [
      \"/subscriptions/<Subscription_ID>\"
    ],
    \"enabled\": true,
  \"condition\": {
    \"allOf\": [
      {
        \"containsAny\": null,
        \"equals\": \"Administrative\",
        \"field\": \"category\"
      },
      {
        \"containsAny\": null,
        \"equals\": \"Microsoft.Security/policies/write\",
        \"field\": \"operationName\"
      }
    ]
  },
    \"actions\": {
    \"actionGroups\": [
      {
        \"actionGroupId\": \"/subscriptions/<Subscription_ID>/resourceGroups/<Resource_Group_For_Alert_Group>/providers/microsoft.insights/actionGroups/<Alert_Group>\",
        \"webhookProperties\": null
      }
    ]
  },
  }
}
Configurable Parameters for command line:
<Resource_Group_To Create_Alert_In>
<Unique_Alert_Name>
Configurable Parameters for input.json:
<Subscription_ID> in scopes
<Subscription_ID> in actionGroupId
<Resource_Group_For_Alert_Group> in actionGroupId
<Alert_Group> in actionGroupId
Impact:
None
Default Value:
By default, no monitoring alerts are created."
  reference      : "800-53|SI-4(5),CSCv7|6.3,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|1S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listActivityLogAlert"
  regex          : "Sub ID: "
  not_expect     : "Sub ID: .* Does not have a Log Alert defined"
  json_transform : '.[]  |.subscriptionId as $id | if ((((select(.resourceGroups[].value[]?.properties.condition.allOf[].equals == "microsoft.security/policies/write" ).resourceGroups[].value[].name))|length) == 0) then "Sub ID: \(.id)  Does not have a Log Alert defined" else "Sub ID: \(.id) Has a Log Alert defined" end'
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Security Group Rules are present"
      request        : "listNetworkSecurityGroups"
      regex          : "Access:"
      expect         : 'Access:'
      json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Network Security Group Name: \($name)"+" Rule Name : \(.name)"  + " Access: \(.properties.access) " + " Destination Port Range: \(.properties.destinationPortRange)" + " Direction: \(.properties.direction)" + " Protocol: \(.properties.protocol)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "6.1 Ensure that RDP access is restricted from the internet"
      info           : "Disable RDP access on network security groups from the Internet.
Rationale:
The potential security problem with using RDP over the Internet is that attackers can use various brute force techniques to gain access to Azure Virtual Machines. Once the attackers gain access, they can use a virtual machine as a launch point for compromising other machines on an Azure Virtual Network or even attack networked devices outside of Azure."
      solution       : "Disable direct RDP access to your Azure Virtual Machines from the Internet. After direct RDP access from the Internet is disabled, you have other options you can use to access these virtual machines for remote management:
 Point-to-site VPN
 Site-to-site VPN
 ExpressRoute
Impact:
None
Default Value:
By default, RDP access from internet is not enabled."
      reference      : "800-171|3.13.1,800-53|SC-7(12),CSCv7|9.2,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listNetworkSecurityGroups"
      regex          : "Access:"
      not_expect     : 'Access: Allow  Destination Port Range: (3389|\*|(([0-9]|[0-9][0-9]|[0-9][0-9][0-9]|[1-2][0-9][0-9][0-9]|3[0-2][0-9][0-9]|33[0-8][0-9])-(3389|339[0-9]|3[4-9][0-9][0-9]|[4-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]))) Direction: Inbound Protocol: (TCP|\*) Source Address Prefix: (\*|0\.0\.0\.0|<nw>/0|/0|internet|any)'
      json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Network Security Group Name: \($name)"+" Rule Name : \(.name)"  + " Access: \(.properties.access) " + " Destination Port Range: \(.properties.destinationPortRange)" + " Direction: \(.properties.direction)" + " Protocol: \(.properties.protocol)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
    </custom_item>

    <custom_item>
      description    : "6.2 Ensure that SSH access is restricted from the internet"
      info           : "Disable SSH access on network security groups from the Internet.
Rationale:
The potential security problem with using SSH over the Internet is that attackers can use various brute force techniques to gain access to Azure Virtual Machines. Once the attackers gain access, they can use a virtual machine as a launch point for compromising other machines on the Azure Virtual Network or even attack networked devices outside of Azure."
      solution       : "Disable direct SSH access to your Azure Virtual Machines from the Internet. After direct SSH access from the Internet is disabled, you have other options you can use to access these virtual machines for remote management:
 Point-to-site VPN
 Site-to-site VPN
 ExpressRoute
Impact:
None
Default Value:
By default, SSH access from internet is not enabled."
      reference      : "800-171|3.13.1,800-53|SC-7(12),CSCv7|9.2,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listNetworkSecurityGroups"
      regex          : "Access:"
      not_expect     : 'Access: Allow  Destination Port Range: (22|\*|(([0-9]|1[0-9]|2[0-2])-(2[2-9][3-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-6][0-9][0-9][0-9][0-9]))) Direction: Inbound Protocol: (TCP|\*) Source Address Prefix: (\*|0\.0\.0\.0|<nw>/0|/0|internet|any)'
      json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Name : \(.name)"  + " Access: \(.properties.access) " + " Destination Port Range: \(.properties.destinationPortRange)" + " Direction: \(.properties.direction)" + " Protocol: \(.properties.protocol)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.1 Ensure that RDP access is restricted from the internet"
      info        : "Disable RDP access on network security groups from the Internet.
Rationale:
The potential security problem with using RDP over the Internet is that attackers can use various brute force techniques to gain access to Azure Virtual Machines. Once the attackers gain access, they can use a virtual machine as a launch point for compromising other machines on an Azure Virtual Network or even attack networked devices outside of Azure."
      solution    : "Disable direct RDP access to your Azure Virtual Machines from the Internet. After direct RDP access from the Internet is disabled, you have other options you can use to access these virtual machines for remote management:
 Point-to-site VPN
 Site-to-site VPN
 ExpressRoute
Impact:
None
Default Value:
By default, RDP access from internet is not enabled."
      reference   : "800-171|3.13.1,800-53|SC-7,CSCv7|9.2,ITSG-33|SC-7,LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "6.2 Ensure that SSH access is restricted from the internet"
      info        : "Disable SSH access on network security groups from the Internet.
Rationale:
The potential security problem with using SSH over the Internet is that attackers can use various brute force techniques to gain access to Azure Virtual Machines. Once the attackers gain access, they can use a virtual machine as a launch point for compromising other machines on the Azure Virtual Network or even attack networked devices outside of Azure."
      solution    : "Disable direct SSH access to your Azure Virtual Machines from the Internet. After direct SSH access from the Internet is disabled, you have other options you can use to access these virtual machines for remote management:
 Point-to-site VPN
 Site-to-site VPN
 ExpressRoute
Impact:
None
Default Value:
By default, SSH access from internet is not enabled."
      reference   : "800-171|3.13.1,800-53|SC-7,CSCv7|9.2,ITSG-33|SC-7,LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Firewall Rules exist"
      request        : "listSQLServerFirewallRules"
      regex          : "-- Start Address:"
      expect         : '-- Start Address:'
      json_transform : '.[]|.subscriptionId as $id| .resourceGroups[]|.name as $name|.SQLServers[]|.name as $servername|.value[]|.name as $fwrname| "Subscription ID: : \($id)" + " Resource Group Name: \($name)" + " Server Name: \($servername)"+"   Firewall Rule Name: \($fwrname)" + "   -- Start Address: \(.properties.startIpAddress)" + "   -- End IP Address: \(.properties.endIpAddress)"'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "6.3 Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)"
      info           : "Ensure that no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP).
Rationale:
SQL Server includes a firewall to block access to unauthorized connections. More granular IP addresses can be defined by referencing the range of addresses available from specific datacenters.
By default, for a SQL server, a Firewall exists with StartIp of 0.0.0.0 and EndIP of 0.0.0.0 allowing access to all the Azure services.
Additionally, a custom rule can be set up with StartIp of 0.0.0.0 and EndIP of 255.255.255.255 allowing access from ANY IP over the Internet.
In order to reduce the potential attack surface for a SQL server, firewall rules should be defined with more granular IP addresses by referencing the range of addresses available from specific datacenters."
      solution       : "Azure Console
1. Go to SQL servers
2. For each SQL server
3. Click on Firewall / Virtual Networks
4. Set Allow access to Azure services to `OFF'
5. Set firewall rules to limit access to only authorized connections
Azure PowerShell
Disable Default Firewall Rule Allow access to Azure services :
Remove-AzureRmSqlServerFirewallRule -FirewallRuleName \"AllowAllWindowsAzureIps\" -ResourceGroupName <resource group name> -ServerName <server name>
Remove custom Firewall rule:
Remove-AzureRmSqlServerFirewallRule -FirewallRuleName \"<firewallRuleName>\" -ResourceGroupName <resource group name> -ServerName <server name>
Set the appropriate firewall rules:
Set-AzureRmSqlServerFirewallRule -ResourceGroupName <resource group name> -ServerName <server name> -FirewallRuleName \"<Fw rule Name>\" -StartIpAddress \"<IP Address other than 0.0.0.0>\" -EndIpAddress \"<IP Address other than 0.0.0.0 or 255.255.255.255>\"
Impact:
Impact: Disabling Allow access to Azure Services will break all connections to SQL server and Hosted Databases unless custom IP specific rules are not added in Firewall Policy.
Default Value:
By default, setting Allow access to Azure Services is set to ON allowing access to all Windows Azure IP ranges."
      reference      : "800-171|3.13.1,800-53|SC-7(12),CSCv7|9.2,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listSQLServerFirewallRules"
      regex          : "-- Start Address:"
      not_expect     : '(-- Start Address: 0\.0\.0\.0|-- End IP Address: 0\.0\.0\.0)'
      json_transform : '.[]|.subscriptionId as $id| .resourceGroups[]|.name as $name|.SQLServers[]|.name as $servername|.value[]|.name as $fwrname| "Subscription ID: : \($id)" + " Resource Group Name: \($name)" + " Server Name: \($servername)"+"   Firewall Rule Name: \($fwrname)" + "   -- Start Address: \(.properties.startIpAddress)" + "   -- End IP Address: \(.properties.endIpAddress)"'
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.3 Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)"
      info        : "Ensure that no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP).
Rationale:
SQL Server includes a firewall to block access to unauthorized connections. More granular IP addresses can be defined by referencing the range of addresses available from specific datacenters.
By default, for a SQL server, a Firewall exists with StartIp of 0.0.0.0 and EndIP of 0.0.0.0 allowing access to all the Azure services.
Additionally, a custom rule can be set up with StartIp of 0.0.0.0 and EndIP of 255.255.255.255 allowing access from ANY IP over the Internet.
In order to reduce the potential attack surface for a SQL server, firewall rules should be defined with more granular IP addresses by referencing the range of addresses available from specific datacenters."
      solution    : "Azure Console
1. Go to SQL servers
2. For each SQL server
3. Click on Firewall / Virtual Networks
4. Set Allow access to Azure services to `OFF'
5. Set firewall rules to limit access to only authorized connections
Azure PowerShell
Disable Default Firewall Rule Allow access to Azure services :
Remove-AzureRmSqlServerFirewallRule -FirewallRuleName \"AllowAllWindowsAzureIps\" -ResourceGroupName <resource group name> -ServerName <server name>
Remove custom Firewall rule:
Remove-AzureRmSqlServerFirewallRule -FirewallRuleName \"<firewallRuleName>\" -ResourceGroupName <resource group name> -ServerName <server name>
Set the appropriate firewall rules:
Set-AzureRmSqlServerFirewallRule -ResourceGroupName <resource group name> -ServerName <server name> -FirewallRuleName \"<Fw rule Name>\" -StartIpAddress \"<IP Address other than 0.0.0.0>\" -EndIpAddress \"<IP Address other than 0.0.0.0 or 255.255.255.255>\"
Impact:
Impact: Disabling Allow access to Azure Services will break all connections to SQL server and Hosted Databases unless custom IP specific rules are not added in Firewall Policy.
Default Value:
By default, setting Allow access to Azure Services is set to ON allowing access to all Windows Azure IP ranges."
      reference   : "800-171|3.13.1,800-53|SC-7,CSCv7|9.2,ITSG-33|SC-7,LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<custom_item>
  description    : "6.5 Ensure that Network Watcher is 'Enabled'"
  info           : "Enable Network Watcher for Azure subscriptions.
Rationale:
Network diagnostic and visualization tools available with Network Watcher help users understand, diagnose, and gain insights to the network in Azure.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Azure Console
1. Go to Network Watcher
2. Right click on the subscription name and click on Enable network watcher in all regions
Azure Command Line Interface 2.0
Configure the Network Watcher for your subscription
az network watcher configure --locations <locations space separated list> --enabled [true] --resource-group <resourceGroupName> --tags key[=value] key[=value]
Impact:
None
Default Value:
By default, Network Watcher is disabled."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|11.2,CSCv7|12.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listNetworkWatcher"
  regex          : ".+"
  not_expect     : ".+"
  json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.value[]|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+" Network Watcher Name: \(.name)" + " Provisioning State: \(.properties.provisioningState)"'
  severity       : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Test if VMs exist"
      request        : "listVMs"
      regex          : 'VM Name:'
      expect         : 'VM Name: .+'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.value[]|select(.properties != null)|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+" VM Name: \(.name)"'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "7.1 Ensure that 'OS disk' are encrypted"
      info           : "Ensure that OS disks (boot volumes) are encrypted, where possible.
Rationale:
Encrypting the IaaS VM's OS disk (boot volume) ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads."
      solution       : "Azure Console
Follow Microsoft Azure documentation.
Azure Command Line Interface 2.0
Use the below command to enable encryption for OS Disk for the specific VM.
az vm encryption enable --name <VMName> --resource-group <resourceGroupName> --volume-type OS --aad-client-id <Client ID of AAD app> --aad-client-secret <Client Secret of AAD app> --disk-encryption-keyvault https://<vaultEndpoint>/secrets/<secretName>/<secretVersion>
Impact:
Encryption is available only on Standard tier VMs. This might cost you more.
Default Value:
By default, OS disks are not encrypted."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listVMs"
      regex          : 'OSDisk Encryption Enabled:'
      not_expect     : 'OSDisk Encryption Enabled: (null|false)'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.value[]|select(.properties.storageProfile.osDisk.encryptionSettings == null)|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+" VM Name: \(.name)" + " OSDisk Encryption Enabled: \(.properties.storageProfile.osDisk.encryptionSettings.enabled)"'
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          description    : "Do VMs with Data Disks exist"
          request        : "listVMs"
          regex          : 'SubscriptionID:'
          expect         : 'SubscriptionID:'
          json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.value[]|select(.properties.storageProfile.dataDisks[].name != null)|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+" VM Name: \(.name)"'
        </custom_item>
      </condition>

      <then>
        <custom_item>
          description    : "7.2 Ensure that 'Data disks' are encrypted"
          info           : "Ensure that data disks (non-boot volumes) are encrypted, where possible.
Rationale:
Encrypting the IaaS VM's Data disks (non-boot volume) ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution       : "Azure Console
Follow Microsoft Azure documentation.
Azure Command Line Interface 2.0
Use the below command to enable encryption for Data Disk for the specific VM.
az vm encryption enable --name <VMName> --resource-group <resourceGroupName> --volume-type DATA --aad-client-id <Client ID of AAD app> --aad-client-secret <Client Secret of AAD app> --disk-encryption-keyvault https://<vaultEndpoint>/secrets/<secretName>/<secretVersion>
Impact:
Encryption is available only on Standard tier VMs. This might cost more.
Default Value:
By default, data disks are not encrypted."
          reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|14.8,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3,TBA-FIISB|28.1"
          see_also       : "https://workbench.cisecurity.org/files/2269"
          request        : "listVMInstanceView"
          regex          : "Encryption Status :"
          expect         : "Encryption succeeded for data volumes"
          json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.VMs[]|.name as $vmname|select(.properties.storageProfile.dataDisks[].name != null)|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+" VM Name: \($vmname)" + "  Data Disk Name: \(.properties.storageProfile.dataDisks[].name)" + " Encryption Status : \(if (.value.extensions) == null then "Encryption Not Configured" else .value.extensions[].statuses[].message end)"'
          match_all      : YES
          severity       : MEDIUM
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "7.2 Ensure that 'Data disks' are encrypted"
          info        : "Ensure that data disks (non-boot volumes) are encrypted, where possible.
Rationale:
Encrypting the IaaS VM's Data disks (non-boot volume) ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads."
          solution    : "Azure Console
Follow Microsoft Azure documentation.
Azure Command Line Interface 2.0
Use the below command to enable encryption for Data Disk for the specific VM.
az vm encryption enable --name <VMName> --resource-group <resourceGroupName> --volume-type DATA --aad-client-id <Client ID of AAD app> --aad-client-secret <Client Secret of AAD app> --disk-encryption-keyvault https://<vaultEndpoint>/secrets/<secretName>/<secretVersion>
Impact:
Encryption is available only on Standard tier VMs. This might cost more.
Default Value:
By default, data disks are not encrypted."
          reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
          see_also    : "https://workbench.cisecurity.org/files/2269"
        </report>
      </else>
    </if>



    <custom_item>
      description    : "7.4 Ensure that only approved extensions are installed"
      info           : "Only install organization-approved extensions on VMs.
Rationale:
Azure virtual machine extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. These extensions run with administrative privileges and could potentially access anything on a virtual machine. The Azure Portal and community provide several such extensions. Each organization should carefully evaluate these extensions and ensure that only those that are approved for use are actually implemented.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Azure Console
1. Go to Virtual machines
2. For each virtual machine, go to Settings
3. Click on Extensions
4. If there are unapproved extensions, uninstall them.
Azure Command Line Interface 2.0
From the audit command identify the unapproved extensions, and use the below CLI command to remove an unapproved extension attached to VM.
az vm extension delete --resource-group <resourceGroupName> --vm-name <vmName> --name <extensionName>
Impact:
None
Default Value:
By default, no extensions are added to the virtual machines."
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|2.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listVMInstanceView"
      regex          : ".+"
      not_expect     : ".+"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.VMs[]|.name as $vmname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+" VM Name: \($vmname)" + " Extension Name: \(.value.extensions[].name)"'
      severity       : MEDIUM
    </custom_item>

    <report type:"WARNING">
      description : "7.5 Ensure that the latest OS Patches for all Virtual Machines are applied"
      info        : "Ensure that the latest OS patches for all virtual machines are applied.
Rationale:
Windows and Linux virtual machines should be kept updated to:
 Address a specific bug or flaw
 Improve an OS or applications general stability
 Fix a security vulnerability
The Azure Security Center retrieves a list of available security and critical updates from Windows Update or Windows Server Update Services (WSUS), depending on which service is configured on a Windows VM. The security center also checks for the latest updates in Linux systems. If a VM is missing a system update, the security center will recommend system updates be applied.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow Microsoft Azure documentation to apply security patches from the security center. Alternatively, you can employ your own patch assessment and management tool to periodically assess, report and install the required security patches for your OS.

Impact:
None
Default Value:
By default, patches are not automatically deployed."
      reference   : "CSCv7|3.4,LEVEL|1NS"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <custom_item>
      description    : "7.6 Ensure that the endpoint protection for all Virtual Machines is installed"
      info           : "Install endpoint protection for all virtual machines.
Rationale:
Installing endpoint protection systems (like Antimalware for Azure) provides for real-time protection capability that helps identify and remove viruses, spyware, and other malicious software, with configurable alerts when known malicious or unwanted software attempts to install itself or run on Azure systems.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Follow Microsoft Azure documentation to install endpoint protection from the security center. Alternatively, you can employ your own endpoint protection tool for your OS.
Impact:
This brings an additional cost to you."
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|3.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listVMInstanceView"
      regex          : ".+"
      not_expect     : ".+"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.VMs[]|.name as $vmname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+" VM Name: \($vmname)" + " Extension Name: \(.value.extensions[].name)"'
      severity       : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "7.1 Ensure that 'OS disk' are encrypted"
      info        : "Ensure that OS disks (boot volumes) are encrypted, where possible.
Rationale:
Encrypting the IaaS VM's OS disk (boot volume) ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads."
      solution    : "Azure Console
Follow Microsoft Azure documentation.
Azure Command Line Interface 2.0
Use the below command to enable encryption for OS Disk for the specific VM.
az vm encryption enable --name <VMName> --resource-group <resourceGroupName> --volume-type OS --aad-client-id <Client ID of AAD app> --aad-client-secret <Client Secret of AAD app> --disk-encryption-keyvault https://<vaultEndpoint>/secrets/<secretName>/<secretVersion>
Impact:
Encryption is available only on Standard tier VMs. This might cost you more.
Default Value:
By default, OS disks are not encrypted."
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "7.2 Ensure that 'Data disks' are encrypted"
      info        : "Ensure that data disks (non-boot volumes) are encrypted, where possible.
Rationale:
Encrypting the IaaS VM's Data disks (non-boot volume) ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads."
      solution    : "Azure Console
Follow Microsoft Azure documentation.
Azure Command Line Interface 2.0
Use the below command to enable encryption for Data Disk for the specific VM.
az vm encryption enable --name <VMName> --resource-group <resourceGroupName> --volume-type DATA --aad-client-id <Client ID of AAD app> --aad-client-secret <Client Secret of AAD app> --disk-encryption-keyvault https://<vaultEndpoint>/secrets/<secretName>/<secretVersion>
Impact:
Encryption is available only on Standard tier VMs. This might cost more.
Default Value:
By default, data disks are not encrypted."
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>


    <report type:"PASSED">
      description : "7.4 Ensure that only approved extensions are installed"
      info        : "Only install organization-approved extensions on VMs.
Rationale:
Azure virtual machine extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. These extensions run with administrative privileges and could potentially access anything on a virtual machine. The Azure Portal and community provide several such extensions. Each organization should carefully evaluate these extensions and ensure that only those that are approved for use are actually implemented.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Azure Console
1. Go to Virtual machines
2. For each virtual machine, go to Settings
3. Click on Extensions
4. If there are unapproved extensions, uninstall them.
Azure Command Line Interface 2.0
From the audit command identify the unapproved extensions, and use the below CLI command to remove an unapproved extension attached to VM.
az vm extension delete --resource-group <resourceGroupName> --vm-name <vmName> --name <extensionName>
Impact:
None
Default Value:
By default, no extensions are added to the virtual machines."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|2.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "7.5 Ensure that the latest OS Patches for all Virtual Machines are applied"
      info        : "Ensure that the latest OS patches for all virtual machines are applied.
Rationale:
Windows and Linux virtual machines should be kept updated to:
 Address a specific bug or flaw
 Improve an OS or applications general stability
 Fix a security vulnerability
The Azure Security Center retrieves a list of available security and critical updates from Windows Update or Windows Server Update Services (WSUS), depending on which service is configured on a Windows VM. The security center also checks for the latest updates in Linux systems. If a VM is missing a system update, the security center will recommend system updates be applied.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow Microsoft Azure documentation to apply security patches from the security center. Alternatively, you can employ your own patch assessment and management tool to periodically assess, report and install the required security patches for your OS.

Impact:
None
Default Value:
By default, patches are not automatically deployed."
      reference   : "CSCv7|3.4,LEVEL|1NS"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "7.6 Ensure that the endpoint protection for all Virtual Machines is installed"
      info        : "Install endpoint protection for all virtual machines.
Rationale:
Installing endpoint protection systems (like Antimalware for Azure) provides for real-time protection capability that helps identify and remove viruses, spyware, and other malicious software, with configurable alerts when known malicious or unwanted software attempts to install itself or run on Azure systems.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Follow Microsoft Azure documentation to install endpoint protection from the security center. Alternatively, you can employ your own endpoint protection tool for your OS.
Impact:
This brings an additional cost to you."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|3.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "'Unattached disks' exist"
      request        : "listDisksByResourceGroup"
      regex          : ".*"
      expect         : ".+"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.value[]|select((.properties.diskState == "Unattached") or (.managedBy == null))|.name as $diskname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+"  Unattached Disk Name: \($diskname)"'
   </custom_item>
 </condition>

<then>
    <custom_item>
      description    : "7.3 Ensure that 'Unattached disks' are encrypted"
      info           : "Ensure that unattached disks in a subscription are encrypted.
Rationale:
Encrypting the IaaS VM's disks ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads. Even if the disk is not attached to any of the VMs, there is always a risk where a compromised user account with administrative access to VM service can mount/attach these data disks which may lead to sensitive information disclosure and tampering."
      solution       : "If data stored in the disk is no longer useful, refer to Azure documentation to delete unattached data disks at:
-https://docs.microsoft.com/en-us/rest/api/compute/disks/delete
-https://docs.microsoft.com/en-us/cli/azure/disk?view=azure-cli-latest#az-disk-delete
If data stored in the disk is important, To encrypt the disk refer azure documentation at:
-https://docs.microsoft.com/en-us/rest/api/compute/disks/update#encryptionsettings
-https://docs.microsoft.com/en-us/cli/azure/disk?view=azure-cli-latest#az-disk-update
Impact:
Encryption is available only on Standard tier VMs. This might cost you more.
Default Value:
By default, data disks are not encrypted."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listDisksByResourceGroup"
      regex          : "Encryption Status :"
      not_expect     : "Encryption Not Configured"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgn|.value[]|select((.properties.diskState == "Unattached") or (.managedBy == null))|.name as $diskname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgn)"+"  Unattached Disk Name: \($diskname)" + " Encryption Status : \(if (.properties.encryptionSettingsCollection.enabled) == null then "Encryption Not Configured" else .properties.encryptionSettingsCollection.enabled end)"'
      match_all      : YES
    </custom_item>
</then>
<else>

<report type:"PASSED">
  description    : "7.3 Ensure that 'Unattached disks' are encrypted"
  info           : "Ensure that unattached disks in a subscription are encrypted.
Rationale:
Encrypting the IaaS VM's disks ensures that its entire content is fully unrecoverable without a key and thus protects the volume from unwarranted reads. Even if the disk is not attached to any of the VMs, there is always a risk where a compromised user account with administrative access to VM service can mount/attach these data disks which may lead to sensitive information disclosure and tampering."
  solution       : "If data stored in the disk is no longer useful, refer to Azure documentation to delete unattached data disks at:
-https://docs.microsoft.com/en-us/rest/api/compute/disks/delete
-https://docs.microsoft.com/en-us/cli/azure/disk?view=azure-cli-latest#az-disk-delete
If data stored in the disk is important, To encrypt the disk refer azure documentation at:
-https://docs.microsoft.com/en-us/rest/api/compute/disks/update#encryptionsettings
-https://docs.microsoft.com/en-us/cli/azure/disk?view=azure-cli-latest#az-disk-update
Impact:
Encryption is available only on Standard tier VMs. This might cost you more.
Default Value:
By default, data disks are not encrypted."
  reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|14.8,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
</report>

</else>
</if>


<if>
  <condition type:"AND">
    <custom_item>
      description    : "Kubernetes Services exist?"
      request        : "listAksManagedClusters"
      regex          : "Name: "
      expect         : " Name: .+"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[] != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)" + " Name: \(.value[].name)" '
      match_all      : YES
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "8.5 Enable role-based access control (RBAC) within Azure Kubernetes Services"
      info           : "Ensure that RBAC is enabled on all Azure Kubernetes Services Instances
Rationale:
Azure Kubernetes Services has the capability to integrate Azure Active Directory users and groups into Kubernetes RBAC controls within the AKS Kubernetes API Server. This should be utilized to enable granular access to Kubernetes resources within the AKS clusters supporting RBAC controls not just of the overarching AKS instance but also the individual resources managed within Kubernetes."
      solution       : "WARNING: This setting cannot be changed after AKS deployment, cluster will require recreation.
Impact:
If RBAC is not enabled, the granularity of permissions granted to Kubernetes resources is diminished presenting more permissions than needed to users requiring access to Kubernetes resources in AKS.
Default Value:
By default, RBAC is enabled."
      reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|14,CSCv7|4,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAksManagedClusters"
      regex          : "Enable RBAC:"
      expect         : "Enable RBAC: true"
      json_transform : '.[]|.subscriptionId as $subid|select(.resourceGroups[].value[] != null).resourceGroups[]|"SubscriptionID: \($subid)"+" ResourceGroup: \(.name)" + " Enable RBAC: \(.value[].properties.enableRBAC)" '
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "8.5 Enable role-based access control (RBAC) within Azure Kubernetes Services"
      info        : "Ensure that RBAC is enabled on all Azure Kubernetes Services Instances
Rationale:
Azure Kubernetes Services has the capability to integrate Azure Active Directory users and groups into Kubernetes RBAC controls within the AKS Kubernetes API Server. This should be utilized to enable granular access to Kubernetes resources within the AKS clusters supporting RBAC controls not just of the overarching AKS instance but also the individual resources managed within Kubernetes."
      solution    : "WARNING: This setting cannot be changed after AKS deployment, cluster will require recreation.
Impact:
If RBAC is not enabled, the granularity of permissions granted to Kubernetes resources is diminished presenting more permissions than needed to users requiring access to Kubernetes resources in AKS.
Default Value:
By default, RBAC is enabled."
      reference   : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CSCv7|14,CSCv7|4,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Web Apps exist"
      request        : "listWebApps"
      regex          : ".*"
      expect         : ".+"
      json_transform : '.[].resourceGroups[].value[].name'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "9.1 Ensure App Service Authentication is set on Azure App Service"
      info           : "Azure App Service Authentication is a feature that can prevent anonymous HTTP requests from reaching the API app, or authenticate those that have tokens before they reach the API app. If an anonymous request is received from a browser, App Service will redirect to a logon page. To handle the logon process, a choice from a set of identity providers can be made, or a custom authentication mechanism can be implemented.
Rationale:
By Enabling App Service Authentication, every incoming HTTP request passes through it before being handled by the application code. It also handles authentication of users with the specified provider (Azure Active Directory, Facebook, Google, Microsoft Account, and Twitter), validation, storing and refreshing of tokens, managing the authenticated sessions and injecting identity information into request headers."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Authentication / Authorization
5. Set App Service Authentication to On
6. Choose other parameters as per your requirement and Click on Save
Using Command Line:
To set App Service Authentication for an existing app, run the following command:
az webapp auth update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --enabled false
Impact:
When it's enabled, every incoming HTTP request passes through it before being handled by the application code. So that an extra level of authentication process will be added to HTTP requests made to the app.
Default Value:
By default, App Service Authentication is disabled when a new app is created using the command-line tool or Azure Portal console."
      reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAppConfig"
      regex          : "App Service Auth: "
      expect         : "App Service Auth: true"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $appname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($appname)"+ " App Service Auth: \(.value[].properties.siteAuthEnabled)" '
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "9.2 Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
      info           : "Azure Web Apps allows sites to run under both HTTP and HTTPS by default. Web apps can be accessed by anyone using non-secure HTTP links by default. Non-secure HTTP requests can be restricted and all HTTP requests redirected to the secure HTTPS port. It is recommended to enforce HTTPS-only traffic.
Rationale:
Enabling HTTPS-only traffic will redirect all non-secure HTTP request to HTTPS ports. HTTPS uses the SSL/TLS protocol to provide a secure connection, which is both encrypted and authenticated. So it is important to support HTTPS for the security benefits."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on SSL settings
5. Set HTTPS Only to On under Protocol Settings section
Using Command Line:
To set HTTPS-only traffic value for an existing app, run the following command:
az webapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --set httpsOnly=false
Impact:
When it is enabled, every incoming HTTP requests are redirected to the HTTPS port. It means an extra level of security will be added to the HTTP requests made to the app.
Default Value:
By default, HTTPS-only feature will be disabled when a new app is created using the command-line tool or Azure Portal console."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|7,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listWebApps"
      regex          : "HTTPS Only: "
      expect         : "HTTPS Only: true"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.value[]|.name as $appname|.properties|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($appname)"+ " HTTPS Only: \(.httpsOnly)" '
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "9.3 Ensure web app is using the latest version of TLS encryption"
      info           : "The TLS(Transport Layer Security) protocol secures transmission of data over the internet using standard encryption technology. Encryption should be set with the latest version of TLS. App service allows TLS 1.2 by default, which is the recommended TLS level by industry standards, such as PCI DSS.
Rationale:
App service currently allows the web app to set TLS versions 1.0, 1.1 and 1.2. It is highly recommended to use the latest TLS 1.2 version for web app secure connections."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on SSL settings
5. Set Minimum TLS Version to 1.2 under Protocol Settings section
Using Command Line:
To set TLS Version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --min-tls-version 1.2
Default Value:
By default, TLS Version feature will be set to 1.2 when a new app is created using the command-line tool or Azure Portal console."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|7,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAppConfig"
      regex          : "TLS Min Version: "
      expect         : "TLS Min Version: 1\.2"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.minTlsVersion as $tlsversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " TLS Min Version: \($tlsversion)" '
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "9.4 Ensure the web app has 'Client Certificates (Incoming client certificates)' set to 'On'"
      info           : "Client certificates allow for the app to request a certificate for incoming requests. Only clients that have a valid certificate will be able to reach the app.
Rationale:
The TLS mutual authentication technique in enterprise environments ensures the authenticity of clients to the server. If incoming client certificates are enabled, then only an authenticated client who has valid certificates can access the app."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on SSL settings
5. Set Incoming client certificates to On under Protocol Settings section
Using Command Line:
To set Incoming client certificates value for an existing app, run the following command:
az webapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --set clientCertEnabled=true
Default Value:
By default, incoming client certificates will be disabled when a new app is created using the command-line tool or Azure Portal console."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|14,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|1S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listWebApps"
      regex          : "Client Cert Enabled: "
      expect         : "Client Cert Enabled: true"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.value[]|.name as $waname|.properties.clientCertEnabled as $ccenabled|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " Client Cert Enabled: \($ccenabled)" '
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "9.5 Ensure that Register with Azure Active Directory is enabled on App Service"
      info           : "Managed service identity in App Service makes the app more secure by eliminating secrets from the app, such as credentials in the connection strings. When registering with Azure Active Directory in the app service, the app will connect to other Azure services securely without the need of username and passwords.
Rationale:
App Service provides a highly scalable, self-patching web hosting service in Azure. It also provides a managed identity for apps, which is a turn-key solution for securing access to Azure SQL Database and other Azure services."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Identity
5. Set Status to On
Using Command Line:
To set Register with Azure Active Directory feature for an existing app, run the following command:
az webapp identity assign --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME>"
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|16.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAppConfig"
      regex          : "Managed Identity: "
      not_expect     : "Managed Identity: null"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.managedServiceIdentityId as $managedIdent|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " Managed Identity: \($managedIdent)" '
    </custom_item>

    <custom_item>
      description    : "9.6 Ensure that '.Net Framework' version is the latest, if used as a part of the web app"
      info           : "Periodically, newer versions are released for .Net Framework software either due to security flaws or to include additional functionality. Using the latest .Net framework version for web apps is recommended in order to to take advantage of security fixes, if any, and/or new functionalities of the latest version.
Rationale:
Newer versions may contain security enhancements and additional functionality. It is recommended to use the latest software version to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Set .NET Framework version to latest version available under General settings
Using Command Line:
To see the list of supported runtimes:
az webapp list-runtimes | grep aspnet
To set latest .NET Framework version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --net-framework-version <VERSION>
Use .NET Framework as, 'v4.0' for .NET 4.6 and 'v3.0' for .NET 3.5.
Default Value:
By default, the latest .Net Framework version will be chosen when creating a new app using the command-line tool or Azure Portal console."
      reference      : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAppConfig"
      regex          : ".Net Version: "
      expect         : ".Net Version: MANUAL_REVIEW"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.netFrameworkVersion as $dotnet|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " .Net Version: \($dotnet)" '
      match_all      : YES
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "9.7 Ensure that 'PHP version' is the latest, if used to run the web app"
      info           : "Periodically newer versions are released for PHP software either due to security flaws or to include additional functionality. Using the latest PHP version for web apps is recommended in order to take advantage of security fixes, if any, and/or additional functionalities of the newer version.
Rationale:
Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Set PHP version to latest version available under General settings
NOTE: No action is required If PHP version is set to Off as PHP is not used by your web app.
Using Command Line:
To see the list of supported runtimes:
az webapp list-runtimes | grep php
To set latest PHP version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --php-version <VERSION>
Default Value:
By default, PHP 5.6 version will be used when creating a new app using the command-line tool or the Azure Portal console."
      reference      : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAppConfig"
      regex          : "PHP Version: "
      expect         : "PHP Version: MANUAL_REVIEW"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.phpVersion as $phpversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " PHP Version: \($phpversion)" '
      match_all      : YES
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "9.8 Ensure that 'Python version' is the latest, if used to run the web app"
      info           : "Periodically, newer versions are released for Python software either due to security flaws or to include additional functionality. Using the latest Python version for web apps is recommended in order to take advantage of security fixes, if any, and/or additional functionalities of the newer version.
Rationale:
Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Set Python version to latest version available under General settings
NOTE: No action is required, If Python version is set to Off as Python is not used by your web app.
Using Command Line:
To see the list of supported runtimes:
az webapp list-runtimes | grep python
To set latest Python version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --python-version <VERSION>"
      reference      : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAppConfig"
      regex          : "Python Version: "
      expect         : "Python Version: MANUAL_REVIEW"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.pythonVersion as $pythonversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " Python Version: \($pythonversion)" '
      match_all      : YES
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "9.9 Ensure that 'Java version' is the latest, if used to run the web app"
      info           : "Periodically, newer versions are released for Java software either due to security flaws or to include additional functionality. Using the latest Java version for web apps is recommended in order to take advantage of security fixes, if any, and/or new functionalities of the newer version.
Rationale:
Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Under General settings, Set Java version to latest version available
6. Set Java minor version to latest version available
7. Set Java web container to the latest version of web container available
NOTE: No action is required If Java version is set to Off as Java is not used by your web app.
Using Command Line:
To see the list of supported runtimes:
az webapp list-runtimes | grep java
To set latest Java version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --java-version '1.8' --java-container 'Tomcat' --java-container-version '<VERSION>'"
      reference      : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAppConfig"
      regex          : "Java Version: "
      expect         : "Java Version: MANUAL_REVIEW"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.javaVersion as $javaversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " Java Version: \($javaversion)" '
      match_all      : YES
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "9.10 Ensure that 'HTTP Version' is the latest, if used to run the web app"
      info           : "Periodically, newer versions are released for HTTP either due to security flaws or to include additional functionality. Using the latest HTTP version for web apps to take advantage of security fixes, if any, and/or new functionalities of the newer version.
Rationale:
Newer versions may contain security enhancements and additional functionality. Using the latest version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.
HTTP 2.0 has additional performance improvements on the head-of-line blocking problem of old HTTP version, header compression, and prioritization of requests. HTTP 2.0 no longer supports HTTP 1.1's chunked transfer encoding mechanism, as it provides its own, more efficient, mechanisms for data streaming.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Set HTTP version to 2.0 under General settings
NOTE: Most modern browsers support HTTP 2.0 protocol over TLS only, while non-encrypted traffic continues to use HTTP 1.1. To ensure that client browsers connect to your app with HTTP/2, either buy an App Service Certificate for your app's custom domain or bind a third party certificate.
Using Command Line:
To set HTTP 2.0 version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --http20-enabled true"
      reference      : "800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listAppConfig"
      regex          : "HTTP 2.0: "
      expect         : "HTTP 2.0: MANUAL_REVIEW"
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.WebApps[]|.name as $waname|.value[].properties.http20Enabled as $httpversion|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)" + " App Name: \($waname)"+ " HTTP 2.0: \($httpversion)" '
      match_all      : YES
      severity       : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "9.1 Ensure App Service Authentication is set on Azure App Service"
      info        : "Azure App Service Authentication is a feature that can prevent anonymous HTTP requests from reaching the API app, or authenticate those that have tokens before they reach the API app. If an anonymous request is received from a browser, App Service will redirect to a logon page. To handle the logon process, a choice from a set of identity providers can be made, or a custom authentication mechanism can be implemented.
Rationale:
By Enabling App Service Authentication, every incoming HTTP request passes through it before being handled by the application code. It also handles authentication of users with the specified provider (Azure Active Directory, Facebook, Google, Microsoft Account, and Twitter), validation, storing and refreshing of tokens, managing the authenticated sessions and injecting identity information into request headers."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Authentication / Authorization
5. Set App Service Authentication to On
6. Choose other parameters as per your requirement and Click on Save
Using Command Line:
To set App Service Authentication for an existing app, run the following command:
az webapp auth update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --enabled false
Impact:
When it's enabled, every incoming HTTP request passes through it before being handled by the application code. So that an extra level of authentication process will be added to HTTP requests made to the app.
Default Value:
By default, App Service Authentication is disabled when a new app is created using the command-line tool or Azure Portal console."
      reference   : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CSCv7|16,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.2 Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service"
      info        : "Azure Web Apps allows sites to run under both HTTP and HTTPS by default. Web apps can be accessed by anyone using non-secure HTTP links by default. Non-secure HTTP requests can be restricted and all HTTP requests redirected to the secure HTTPS port. It is recommended to enforce HTTPS-only traffic.
Rationale:
Enabling HTTPS-only traffic will redirect all non-secure HTTP request to HTTPS ports. HTTPS uses the SSL/TLS protocol to provide a secure connection, which is both encrypted and authenticated. So it is important to support HTTPS for the security benefits."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on SSL settings
5. Set HTTPS Only to On under Protocol Settings section
Using Command Line:
To set HTTPS-only traffic value for an existing app, run the following command:
az webapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --set httpsOnly=false
Impact:
When it is enabled, every incoming HTTP requests are redirected to the HTTPS port. It means an extra level of security will be added to the HTTP requests made to the app.
Default Value:
By default, HTTPS-only feature will be disabled when a new app is created using the command-line tool or Azure Portal console."
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|7,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.3 Ensure web app is using the latest version of TLS encryption"
      info        : "The TLS(Transport Layer Security) protocol secures transmission of data over the internet using standard encryption technology. Encryption should be set with the latest version of TLS. App service allows TLS 1.2 by default, which is the recommended TLS level by industry standards, such as PCI DSS.
Rationale:
App service currently allows the web app to set TLS versions 1.0, 1.1 and 1.2. It is highly recommended to use the latest TLS 1.2 version for web app secure connections."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on SSL settings
5. Set Minimum TLS Version to 1.2 under Protocol Settings section
Using Command Line:
To set TLS Version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --min-tls-version 1.2
Default Value:
By default, TLS Version feature will be set to 1.2 when a new app is created using the command-line tool or Azure Portal console."
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|7,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.4 Ensure the web app has 'Client Certificates (Incoming client certificates)' set to 'On'"
      info        : "Client certificates allow for the app to request a certificate for incoming requests. Only clients that have a valid certificate will be able to reach the app.
Rationale:
The TLS mutual authentication technique in enterprise environments ensures the authenticity of clients to the server. If incoming client certificates are enabled, then only an authenticated client who has valid certificates can access the app."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on SSL settings
5. Set Incoming client certificates to On under Protocol Settings section
Using Command Line:
To set Incoming client certificates value for an existing app, run the following command:
az webapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --set clientCertEnabled=true
Default Value:
By default, incoming client certificates will be disabled when a new app is created using the command-line tool or Azure Portal console."
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|14,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.5 Ensure that Register with Azure Active Directory is enabled on App Service"
      info        : "Managed service identity in App Service makes the app more secure by eliminating secrets from the app, such as credentials in the connection strings. When registering with Azure Active Directory in the app service, the app will connect to other Azure services securely without the need of username and passwords.
Rationale:
App Service provides a highly scalable, self-patching web hosting service in Azure. It also provides a managed identity for apps, which is a turn-key solution for securing access to Azure SQL Database and other Azure services."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Identity
5. Set Status to On
Using Command Line:
To set Register with Azure Active Directory feature for an existing app, run the following command:
az webapp identity assign --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME>"
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|16.2,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.6 Ensure that '.Net Framework' version is the latest, if used as a part of the web app"
      info        : "Periodically, newer versions are released for .Net Framework software either due to security flaws or to include additional functionality. Using the latest .Net framework version for web apps is recommended in order to to take advantage of security fixes, if any, and/or new functionalities of the latest version.
Rationale:
Newer versions may contain security enhancements and additional functionality. It is recommended to use the latest software version to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Set .NET Framework version to latest version available under General settings
Using Command Line:
To see the list of supported runtimes:
az webapp list-runtimes | grep aspnet
To set latest .NET Framework version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --net-framework-version <VERSION>
Use .NET Framework as, 'v4.0' for .NET 4.6 and 'v3.0' for .NET 3.5.
Default Value:
By default, the latest .Net Framework version will be chosen when creating a new app using the command-line tool or Azure Portal console."
      reference   : "800-171|3.14.1,800-53|SI-2,CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.7 Ensure that 'PHP version' is the latest, if used to run the web app"
      info        : "Periodically newer versions are released for PHP software either due to security flaws or to include additional functionality. Using the latest PHP version for web apps is recommended in order to take advantage of security fixes, if any, and/or additional functionalities of the newer version.
Rationale:
Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Set PHP version to latest version available under General settings
NOTE: No action is required If PHP version is set to Off as PHP is not used by your web app.
Using Command Line:
To see the list of supported runtimes:
az webapp list-runtimes | grep php
To set latest PHP version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --php-version <VERSION>
Default Value:
By default, PHP 5.6 version will be used when creating a new app using the command-line tool or the Azure Portal console."
      reference   : "800-171|3.14.1,800-53|SI-2,CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.8 Ensure that 'Python version' is the latest, if used to run the web app"
      info        : "Periodically, newer versions are released for Python software either due to security flaws or to include additional functionality. Using the latest Python version for web apps is recommended in order to take advantage of security fixes, if any, and/or additional functionalities of the newer version.
Rationale:
Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Set Python version to latest version available under General settings
NOTE: No action is required, If Python version is set to Off as Python is not used by your web app.
Using Command Line:
To see the list of supported runtimes:
az webapp list-runtimes | grep python
To set latest Python version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --python-version <VERSION>"
      reference   : "800-171|3.14.1,800-53|SI-2,CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.9 Ensure that 'Java version' is the latest, if used to run the web app"
      info        : "Periodically, newer versions are released for Java software either due to security flaws or to include additional functionality. Using the latest Java version for web apps is recommended in order to take advantage of security fixes, if any, and/or new functionalities of the newer version.
Rationale:
Newer versions may contain security enhancements and additional functionality. Using the latest software version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Under General settings, Set Java version to latest version available
6. Set Java minor version to latest version available
7. Set Java web container to the latest version of web container available
NOTE: No action is required If Java version is set to Off as Java is not used by your web app.
Using Command Line:
To see the list of supported runtimes:
az webapp list-runtimes | grep java
To set latest Java version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --java-version '1.8' --java-container 'Tomcat' --java-container-version '<VERSION>'"
      reference   : "800-171|3.14.1,800-53|SI-2,CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "9.10 Ensure that 'HTTP Version' is the latest, if used to run the web app"
      info        : "Periodically, newer versions are released for HTTP either due to security flaws or to include additional functionality. Using the latest HTTP version for web apps to take advantage of security fixes, if any, and/or new functionalities of the newer version.
Rationale:
Newer versions may contain security enhancements and additional functionality. Using the latest version is recommended in order to take advantage of enhancements and new capabilities. With each software installation, organizations need to determine if a given update meets their requirements and also verify the compatibility and support provided for any additional software against the update revision that is selected.
HTTP 2.0 has additional performance improvements on the head-of-line blocking problem of old HTTP version, header compression, and prioritization of requests. HTTP 2.0 no longer supports HTTP 1.1's chunked transfer encoding mechanism, as it provides its own, more efficient, mechanisms for data streaming."
      solution    : "Using Console:
1. Login to Azure Portal using https://portal.azure.com
2. Go to App Services
3. Click on each App
4. Under Setting section, Click on Application settings
5. Set HTTP version to 2.0 under General settings
NOTE: Most modern browsers support HTTP 2.0 protocol over TLS only, while non-encrypted traffic continues to use HTTP 1.1. To ensure that client browsers connect to your app with HTTP/2, either buy an App Service Certificate for your app's custom domain or bind a third party certificate.
Using Command Line:
To set HTTP 2.0 version for an existing app, run the following command:
az webapp config set --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME> --http20-enabled true"
      reference   : "800-171|3.14.1,800-53|SI-2,CSCv7|2.2,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

</check_type>
