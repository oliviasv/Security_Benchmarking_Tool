#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
#
# $Revision: 1.2 $
# $Date: 2020/08/24 $
#
# description	: CIS Microsoft Azure Foundations v1.1.0 audit
#
# NOTE			: Some queries in this .audit require site-specific data to be known to the query in order to function properly.  Please note the following
# 			queries and edit their values accordingly.
#
#<ui_metadata>
#<display_name>CIS Microsoft Azure Foundations v1.1.0 L2</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Microsoft Azure Foundations v1.1.0 L2</name>
#  <version>1.1.0</version>
#</spec>
#<labels>microsoft,azure,cloud</labels>
#<variables>
#  <variable>
#    <name>SUB_IDS</name>
#    <default>(12345|54321)</default>
#    <description>Subscriptions IDS</description>
#    <info>1.23 - Assignable Scope Subscriptions IDS</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"microsoft_azure">



<custom_item>
  description    : "1.2 Ensure that multi-factor authentication is enabled for all non-privileged users - List Users"
  info           : "Enable multi-factor authentication for all non-privileged users.
Rationale:
Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
Impact:
Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.
Default Value:
By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|2NS,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listUsers"
  regex          : ".+"
  not_expect     : ".+"
  json_transform : '.[]|.id as $id|.displayName as $dn|.userPrincipalName as $upn|"ID: \($id)"+" User Principal Name: \($upn)"+" Display Name: \($dn)"'
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "1.2 Ensure that multi-factor authentication is enabled for all non-privileged users - Role Definitions"
  info           : "Enable multi-factor authentication for all non-privileged users.
Rationale:
Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
Impact:
Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.
Default Value:
By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|2NS,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listRoleDefinitions"
  regex          : ".+"
  not_expect     : ".+"
  json_transform : '.[]|.value[]|select((.properties.roleName == "Owner") or (.properties.roleName == "Admin") or (.properties.roleName == "*contributor"))|"Name: \(.name)"+" Role Name: \(.properties.roleName)"'
  severity       : MEDIUM
</custom_item>

<custom_item>
  description    : "1.2 Ensure that multi-factor authentication is enabled for all non-privileged users - Role Assignments"
  info           : "Enable multi-factor authentication for all non-privileged users.
Rationale:
Multi-factor authentication requires an individual to present a minimum of two separate forms of authentication before access is granted. Multi-factor authentication provides additional assurance that the individual attempting to gain access is who they claim to be. With multi-factor authentication, an attacker would need to compromise at least two different authentication mechanisms, increasing the difficulty of compromise and thus reducing the risk.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Follow Microsoft Azure documentation and setup multi-factor authentication in your environment.
Impact:
Users would require two forms of authentication before any action is granted. Also, this requires an overhead for managing dual forms of authentication.
Default Value:
By default, multi-factor authentication is disabled for all users."
  reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|2NS,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listRoleAssignments"
  regex          : ".+"
  not_expect     : ".+"
  json_transform : '.[]|.value[]|"Name: \(.name)"+" Role Definition ID: \(.properties.roleDefinitionId)" + " Principal ID: \(.properties.principalId)"+" Principal Type: \(.properties.principalType)"'
  severity       : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "1.4 Ensure that 'Allow users to remember multi-factor authentication on devices they trust' is 'Disabled'"
  info        : "Do not allow users to remember multi-factor authentication on devices.
Rationale:
Remembering Multi-Factor Authentication (MFA) for devices and browsers allows users to have the option to by-pass MFA for a set number of days after performing a successful sign-in using MFA. This can enhance usability by minimizing the number of times a user may need to perform two-step verification on the same device. However, if an account or device is compromised, remembering MFA for trusted devices may affect security. Hence, it is recommended that users not be allowed to bypass MFA.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to All Users
4. Click on Multi-Factor Authentication button on the top bar
5. Click on service settings
6. Disable Allow users to remember multi-factor authentication on devices they trust
Impact:
For every login attempt, the user will be required to perform multi-factor authentication.
Default Value:
By default, \"Allow users to remember multi-factor authentication on devices they trust\" is disabled."
  reference   : "CSCv7|16.3,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.8 Ensure that 'Notify all admins when other admins reset their password?' is set to 'Yes'"
  info        : "Ensure that all administrators are notified if any other administrator resets their password.
Rationale:
Administrator accounts are sensitive. Any password reset activity notification, when sent to all administrators, ensures that all administrators can passively confirm if such a reset is a common pattern within their group. For example, if all administrators change their password every 30 days, any password reset activity before that may require administrator(s) to evaluate any unusual activity and confirm its origin.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Password reset
4. Go to Notification
5. Set Notify all admins when other admins reset their password? to Yes

Impact:
None
Default Value:
By default, 'Notify all admins when other admins reset their password?' is set to 'No'."
  reference   : "CSCv7|4,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.9 Ensure that 'Users can consent to apps accessing company data on their behalf' is set to 'No'"
  info        : "Require administrators to provide consent for the apps before use.
Rationale:
Unless Azure Active Directory is running as an identity provider for third-party applications, do not allow users to use their identity outside of the cloud environment. User profiles contain private information such as phone numbers and email addresses which could then be sold off to other third parties without requiring any further consent from the user.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to User settings
4. Set Users can consent to apps accessing company data on their behalf to No
Impact:
It might be an additional request that administrators need to fulfill quite often.
Default Value:
By default, 'Users can consent to apps accessing company data on their behalf' is set to 'Yes'."
  reference   : "CSCv7|16,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.10 Ensure that 'Users can add gallery apps to their Access Panel' is set to 'No'"
  info        : "Require administrators to provide consent for the apps before use.
Rationale:
Unless Azure Active Directory is running as an identity provider for third-party applications, do not allow users to use their identity outside of your cloud environment. User profiles contain private information such as phone numbers and email addresses which could then be sold off to other third parties without requiring any further consent from the user.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to User settings
4. Set Users can add gallery apps to their Access Panel to No
Impact:
It might be an additional request that administrators need to fulfill quite often.
Default Value:
By default, 'Users can add gallery apps to their Access Panel' is set to 'No'."
  reference   : "CSCv7|2,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.11 Ensure that 'Users can register applications' is set to 'No'"
  info        : "Require administrators to register third-party applications.
Rationale:
It is recommended to let administrator register custom-developed applications. This ensures that the application undergoes a security review before exposing active directory data to it.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to User settings
4. Set Users can register applications to No
Impact:
It might be an additional request that administrators need to fulfill quite often.
Default Value:
By default, Users can register applications is set to Yes."
  reference   : "CSCv7|2,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.12 Ensure that 'Guest user permissions are limited' is set to 'Yes'"
  info        : "Limit guest user permissions.
Rationale:
Limiting guest access ensures that guest accounts do not have permission for certain directory tasks, such as enumerating users, groups or other directory resources, and cannot be assigned to administrative roles in your directory.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to User settings
4. Set Guest users permissions are limited to Yes
Impact:
None
Default Value:
By default, Guest users permissions are limited is set to Yes."
  reference   : "CSCv7|16,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.13 Ensure that 'Members can invite' is set to 'No'"
  info        : "Restrict invitations to administrators only.
Rationale:
Restricting invitations to administrators ensures that only authorized accounts have access to cloud resources. This helps to maintain \"Need to Know\" permissions and prevents inadvertent access to data.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to User settings
4. Set Members can invite to No
Impact:
None
Default Value:
By default, Members can invite is set to Yes."
  reference   : "CSCv7|14,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.14 Ensure that 'Guests can invite' is set to 'No'"
  info        : "Restrict guest invitations.
Rationale:
Restricting invitations to administrators ensures that only authorized accounts have access to cloud resources. This helps to maintain \"Need to Know\" permissions and prevents inadvertent access to data.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to User settings
4. Set Guests can invite to No
Impact:
None
Default Value:
By default, Guests can invite is set to Yes."
  reference   : "CSCv7|14,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.16 Ensure that 'Self-service group management enabled' is set to 'No'"
  info        : "Restrict group creation to administrators only.
Rationale:
Self-service group management enables users to create and manage security groups or Office 365 groups in Azure Active Directory (Azure AD). Unless a business requires this day-to-day delegation for some users, self-service group management should be disabled.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Group settings
4. Set Self-service group management enabled to No
Impact:
None
Default Value:
By default, Self-service group management enabled is set to No."
  reference   : "CSCv7|16,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.17 Ensure that 'Users can create security groups' is set to 'No'"
  info        : "Restrict security group creation to administrators only.
Rationale:
When creating security groups is enabled, all users in the directory are allowed to create new security groups and add members to those groups. Unless a business requires this day-to-day delegation, security group creation should be restricted to administrators only.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Group settings
4. Set Users can create security groups to No
Impact:
None
Default Value:
By default, Users can create security groups is set to No."
  reference   : "CSCv7|16,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.18 Ensure that 'Users who can manage security groups' is set to 'None'"
  info        : "Restrict security group management to administrators only.
Rationale:
Restricting security group management to administrators only prohibits users from making changes to security groups. This ensures that security groups are appropriately managed and their management is not delegated to non-administrators.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Group settings
4. Set Users who can manage security groups to None
Impact:
None
Default Value:
By default, Users who can manage security groups is set to All."
  reference   : "CSCv7|16,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.19 Ensure that 'Users can create Office 365 groups' is set to 'No'"
  info        : "Restrict Office 365 group creation to administrators only.
Rationale:
Restricting Office 365 group creation to administrators only ensures that creation of Office 365 groups is controlled by the administrator. Appropriate groups should be created and managed by the administrator and group creation rights should not be delegated to any other user.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Group settings
4. Set Users can create Office 365 groups to No
Impact:
None

Default Value:
By default, Users can create Office 365 groups is set to No."
  reference   : "CSCv7|16,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<report type:"WARNING">
  description : "1.20 Ensure that 'Users who can manage Office 365 groups' is set to 'None'"
  info        : "Restrict Office 365 group management to administrators only.
Rationale:
Restricting Office 365 group management to administrators prohibits users from making changes to Office 365 groups. This ensures that Office 365 groups are appropriately managed and their management is not delegated to any other user.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Azure Console
1. Go to Azure Active Directory
2. Go to Users and group
3. Go to Group settings
4. Set Users who can manage Office 365 groups to None
Impact:
None
Default Value:
By default, Users who can manage Office 365 groups to All."
  reference   : "CSCv7|16,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2269"
</report>

<custom_item>
  description    : "1.23 Ensure that no custom subscription owner roles are created - Assignable Scope"
  info           : "Subscription ownership should not include permission to create custom owner roles. The principle of least privilege should be followed and only necessary privileges should be assigned instead of allowing full administrative access.
Rationale:
Classic subscription admin roles offer basic access management and include Account Administrator, Service Administrator, and Co-Administrators. It is recommended the least necessary permissions be given initially. Permissions can be added as needed by the account holder. This ensures the account holder cannot perform actions which were not intended."
  solution       : "Azure Command Line Interface 2.0
az role definition list
Check for entries with assignableScope of / or a subscription, and an action of *
Verify the usage and impact of removing the role identified
az role definition delete --name \"rolename\"
Impact:
None
Default Value:
By default, no custom owner roles are created."
  reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16,CSCv7|4,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|2S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listRoleDefinitions"
# Note: Variable @SUB_IDS@ replaced with "(12345|54321)" in field "not_expect".
  not_expect     : "Assignable Scopes: (/|(12345|54321))"
  json_transform : '.[]|.subscriptionId as $id|"ID: \($id)" + " Role Name: \(.value[].properties.roleName)"+" Assignable Scopes: \(.value[].properties.assignableScopes[])"'
</custom_item>

<custom_item>
  description    : "1.23 Ensure that no custom subscription owner roles are created - Action Types"
  info           : "Subscription ownership should not include permission to create custom owner roles. The principle of least privilege should be followed and only necessary privileges should be assigned instead of allowing full administrative access.
Rationale:
Classic subscription admin roles offer basic access management and include Account Administrator, Service Administrator, and Co-Administrators. It is recommended the least necessary permissions be given initially. Permissions can be added as needed by the account holder. This ensures the account holder cannot perform actions which were not intended."
  solution       : "Azure Command Line Interface 2.0
az role definition list
Check for entries with assignableScope of / or a subscription, and an action of *
Verify the usage and impact of removing the role identified
az role definition delete --name \"rolename\"
Impact:
None
Default Value:
By default, no custom owner roles are created."
  reference      : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16,CSCv7|4,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|2S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listRoleDefinitions"
  regex          : "Action Types:"
  not_expect     : "Action Types: \*$"
  json_transform : '.[]|.subscriptionId as $id|"ID: \($id)" + " Role Name: \(.value[].properties.roleName)"+" Action Types: \(.value[].properties.permissions[].actions[])"'
</custom_item>

<custom_item>
  description    : "2.1 Ensure that standard pricing tier is selected"
  info           : "The standard pricing tier enables threat detection for networks and virtual machines, providing threat intelligence, anomaly detection, and behavior analytics in the Azure Security Center.
Rationale:
Enabling the Standard pricing tier allows for greater defense-in-depth, with threat detection provided by the Microsoft Security Response Center (MSRC)."
  solution       : "Azure Console
1. Go to Azure Security Center
2. Select Security policy blade
3. Click On Edit Settings to alter the the security policy for a subscription
4. Select the Pricing tier blade
5. Select Standard
6. Select Save
Azure Command Line Interface 2.0
Use the below command to set Pricing Tier to Standard.
az account get-access-token --query \"{subscription:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X PUT -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/default?api-version=2017-08-01-preview -d@\"input.json\"'
Where input.json contains the Request body json data as mentioned below.
{
  \"id\": \"/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/pricings/default\",
  \"name\": \"default\",
  \"type\": \"Microsoft.Security/pricings\",
  \"properties\": {
    \"pricingTier\": \"Standard\"
  }
}
Impact:
Choosing the Standard pricing tier of Azure Security Center incurs an additional cost per node.
Default Value:
By default, Free pricing tier is selected."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|8,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityPolicies"
  regex          : "Pricing Tier:"
  not_expect     : "Pricing Tier: Free"
  json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Pricing Tier: \(.properties.pricingConfiguration.selectedPricingTier)"'
</custom_item>

<custom_item>
  description    : "2.12 Ensure ASC Default policy setting 'Monitor JIT Network Access' is not 'Disabled'"
  info           : "Enable JIT Network Access for virtual machines.
Rationale:
When this setting is enabled, Security Center locks down inbound traffic to the Azure VMs by creating an NSG rule. The user can select the ports on the VM where inbound traffic should be locked down. Just in time virtual machine (VM) access can be used to lock down inbound traffic to the Azure VMs, reducing exposure to attacks while providing easy access to connect to VMs when needed."
  solution       : "Azure Console
1. Navigate to Azure Policy
2. On Policy \"Overview\" blade, Click on Policy ASC Default (Subscription:Subscription_ID)
3. On \"ASC Default\" blade, Click on Edit Assignments
4. In section PARAMETERS, Set Monitor JIT Network Access to AuditIfNotExists or any other available value than Disabled
5. Click Save
Impact:
Enabling this recommendation involves cost implications as this feature is not available with Free Pricing Tier.
Default Value:
With Standard pricing tier, JIT Network Access is set to AuditIfNotExists by default."
  reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|9.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listSecurityCenterBuiltIns"
  regex          : "Monitor JIT Net Access:"
  not_expect     : "Monitor JIT Net Access: (disabled|null)"
  json_transform : '.[]|.subscriptionId as $id| .value| "Subscription ID: : \($id)" + " Monitor JIT Net Access: \(.properties.parameters.jitNetworkAccessMonitoringEffect.value)"'
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Storage Accounts Exist"
      request        : "listStorageAccounts"
      regex          : ".*"
      expect         : ".+"
      json_transform : '.[].value[].name'
    </custom_item>
  </condition>

  <then>
    <report type:"WARNING">
      description : "3.3 Ensure Storage logging is enabled for Queue service for read, write, and delete requests"
      info        : "The Storage Queue service stores messages that may be read by any client who has access to the storage account. A queue can contain an unlimited number of messages, each of which can be up to 64KB in size using version 2011-08-18 or newer. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the queues. Storage Logging log entries contain the following information about individual requests: Timing information such as start time, end-to-end latency, and server latency, authentication details , concurrency information and the sizes of the request and response messages.
Rationale:
Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.
Storage Analytics logging is not enabled by default for your storage account.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : " Go to Storage Accounts.
 Select the specific Storage Account.
 Use the Diagnostics logs (classic) blade from Monitoring (classic) section.
 Set the Status to On, if set to Off.
 Select Queue properties.
 Select Read, Write and Delete options under the Logging section to enable Storage Logging for Queue service.
Via CLI :
Use the below command to enable the Storage Logging for Queue service.
az storage logging update --account-name <storageAccountName> --account-key <storageAccountKey> --services q --log rwd --retention 90"
      reference   : "CSCv7|6.3,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <custom_item>
      description    : "3.7 Ensure default network access rule for Storage Accounts is set to deny"
      info           : "Restricting default network access helps to provide a new layer of security, since storage accounts accept connections from clients on any network. To limit access to selected networks, the default action must be changed.
Rationale:
Storage accounts should be configured to deny access to traffic from all networks (including internet traffic). Access can be granted to traffic from specific Azure Virtual networks, allowing a secure network boundary for specific applications to be built. Access can also be granted to public internet IP address ranges, to enable connections from specific internet or on-premises clients. When network rules are configured, only applications from allowed networks can access a storage account. When calling from an allowed network, applications continue to require proper authorization (a valid access key or SAS token) to access the storage account."
      solution       : "Azure Console
1. Go to Storage Accounts
2. For each storage account, Click on the settings menu called Firewalls and virtual networks.
3. Ensure that you have elected to allow access from Selected networks.
4. Add rules to allow traffic from specific network.
5. Click Save to apply your changes.
Azure Command Line Interface 2.0
Use the below command to update default-action to Deny.
az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --default-action Deny"
      reference      : "800-171|3.13.1,800-53|SC-7(12),CSCv7|16,ITSG-33|SC-7(12),LEVEL|2S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listStorageAccounts"
      regex          : "Default Action:"
      not_expect     : "Default Action: Allow"
      json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Default Action: \(.properties.networkAcls.defaultAction)"'
    </custom_item>

    <custom_item>
      description    : "3.8 Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
      info           : "Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules. These services will then use strong authentication to access the storage account. If the Allow trusted Microsoft services exception is enabled, the following services: Azure Backup, Azure Site Recovery, Azure DevTest Labs, Azure Event Grid, Azure Event Hubs, Azure Networking, Azure Monitor and Azure SQL Data Warehouse (when registered in the subscription), are granted access to the storage account.
Rationale:
Turning on firewall rules for storage account will block access to incoming requests for data, including from other Azure services. This includes using the Portal, writing logs, etc. We can re-enable functionality. The customer can get access to services like Monitor, Networking, Hubs, and Event Grid by enabling \"Trusted Microsoft Services\" through exceptions. Also, Backup and Restore of Virtual Machines using unmanaged disks in storage accounts with network rules applied is supported via creating an exception."
      solution       : "Azure Console
1. Go to Storage Accounts
2. For each storage account, Click on the settings menu called Firewalls and virtual networks.
3. Ensure that you have elected to allow access from 'Selected networks'.
4. Enable check box for Allow trusted Microsoft services to access this storage account.
5. Click Save to apply your changes.
Azure Command Line Interface 2.0
Use the below command to update trusted Microsoft services.
az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --bypass AzureServices"
      reference      : "800-171|3.13.1,800-53|SC-7(12),CSCv7|9.2,ITSG-33|SC-7(12),LEVEL|2NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listStorageAccounts"
      regex          : "Bypass:"
      not_expect     : "Bypass: (Logging, Metrics$|Metrics$|Logging$)"
      json_transform : '.[]|.subscriptionId as $id| .value[]| .name as $name| "Subscription ID: : \($id)" + " Name: \($name)" + " Bypass: \(.properties.networkAcls.bypass)"'
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "3.3 Ensure Storage logging is enabled for Queue service for read, write, and delete requests"
      info        : "The Storage Queue service stores messages that may be read by any client who has access to the storage account. A queue can contain an unlimited number of messages, each of which can be up to 64KB in size using version 2011-08-18 or newer. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the queues. Storage Logging log entries contain the following information about individual requests: Timing information such as start time, end-to-end latency, and server latency, authentication details , concurrency information and the sizes of the request and response messages.
Rationale:
Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.
Storage Analytics logging is not enabled by default for your storage account.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : " Go to Storage Accounts.
 Select the specific Storage Account.
 Use the Diagnostics logs (classic) blade from Monitoring (classic) section.
 Set the Status to On, if set to Off.
 Select Queue properties.
 Select Read, Write and Delete options under the Logging section to enable Storage Logging for Queue service.
Via CLI :
Use the below command to enable the Storage Logging for Queue service.
az storage logging update --account-name <storageAccountName> --account-key <storageAccountKey> --services q --log rwd --retention 90"
      reference   : "CSCv7|6.3,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "3.7 Ensure default network access rule for Storage Accounts is set to deny"
      info        : "Restricting default network access helps to provide a new layer of security, since storage accounts accept connections from clients on any network. To limit access to selected networks, the default action must be changed.
Rationale:
Storage accounts should be configured to deny access to traffic from all networks (including internet traffic). Access can be granted to traffic from specific Azure Virtual networks, allowing a secure network boundary for specific applications to be built. Access can also be granted to public internet IP address ranges, to enable connections from specific internet or on-premises clients. When network rules are configured, only applications from allowed networks can access a storage account. When calling from an allowed network, applications continue to require proper authorization (a valid access key or SAS token) to access the storage account."
      solution    : "Azure Console
1. Go to Storage Accounts
2. For each storage account, Click on the settings menu called Firewalls and virtual networks.
3. Ensure that you have elected to allow access from Selected networks.
4. Add rules to allow traffic from specific network.
5. Click Save to apply your changes.
Azure Command Line Interface 2.0
Use the below command to update default-action to Deny.
az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --default-action Deny"
      reference   : "800-171|3.13.1,800-53|SC-7,CSCv7|16,ITSG-33|SC-7,LEVEL|2S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "3.8 Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
      info        : "Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules. These services will then use strong authentication to access the storage account. If the Allow trusted Microsoft services exception is enabled, the following services: Azure Backup, Azure Site Recovery, Azure DevTest Labs, Azure Event Grid, Azure Event Hubs, Azure Networking, Azure Monitor and Azure SQL Data Warehouse (when registered in the subscription), are granted access to the storage account.
Rationale:
Turning on firewall rules for storage account will block access to incoming requests for data, including from other Azure services. This includes using the Portal, writing logs, etc. We can re-enable functionality. The customer can get access to services like Monitor, Networking, Hubs, and Event Grid by enabling \"Trusted Microsoft Services\" through exceptions. Also, Backup and Restore of Virtual Machines using unmanaged disks in storage accounts with network rules applied is supported via creating an exception."
      solution    : "Azure Console
1. Go to Storage Accounts
2. For each storage account, Click on the settings menu called Firewalls and virtual networks.
3. Ensure that you have elected to allow access from 'Selected networks'.
4. Enable check box for Allow trusted Microsoft services to access this storage account.
5. Click Save to apply your changes.
Azure Command Line Interface 2.0
Use the below command to update trusted Microsoft services.
az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --bypass AzureServices"
      reference   : "800-171|3.13.1,800-53|SC-7,CSCv7|9.2,ITSG-33|SC-7,LEVEL|2NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Test if SQL Servers exist"
      request        : "listSQLServers"
      regex          : "SQL Server:"
      expect         : "SQL Server: .+"
      json_transform : '.[]|.subscriptionId as $id|.value[]|"SQL Server: \(.name)"'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "4.4 Ensure that 'Advanced Data Security' on a SQL server is set to 'On'"
      info           : "Enable \"Advanced Data Security\" on critical SQL Servers.
Rationale:
SQL Server \"Advanced Data Security\" provides a new layer of security, which enables customers to detect and respond to potential threats as they occur by providing security alerts on anomalous activities. Users will receive an alert upon suspicious database activities, potential vulnerabilities, and SQL injection attacks, as well as anomalous database access patterns. SQL Server Threat Detection alerts provide details of suspicious activity and recommend action on how to investigate and mitigate the threat. Additionally, SQL server Advanced Data Security includes functionality for discovering and classifying sensitive data.
Advanced Data Security is a paid feature. It is recommended to enable the feature at least on business-critical SQL Servers."
      solution       : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Data Security
4. Set Advanced Data Security to On
Azure PowerShell
Enable Advanced Data Security for a SQL Server:
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True
Note:
 Enabling 'Advanced Data Security' from the Azure portal enables Threat Detection
 Using Powershell command Set-AzureRmSqlServerThreatDetectionPolicy enables Advanced Data Security for a SQL server
Impact:
Enabling the Advanced Data Security feature can incur additional costs for each SQL server.
Default Value:
By default, Advanced Data Security is set to Off."
      reference      : "800-53|SI-4(5),CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerSecurityAlertPolicies"
      regex          : "Threat Detection:"
      not_expect     : "Threat Detection: Disabled"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[].value| "Subscription ID: \($id)" + " Name: \($name)" + " Server Name: \(.name)"+" Threat Detection: \(.properties.state)"'
    </custom_item>

    <custom_item>
      description    : "4.5 Ensure that 'Threat Detection types' is set to 'All'"
      info           : "Enable all types of threat detection on SQL servers.
Rationale:
Enabling all threat detection types protects against SQL injection, database vulnerabilities, and any other anomalous activities."
      solution       : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Data Security
4. At section Threat Detection Settings, Set Threat Detection types to All
Azure PowerShell
For each Server, set ExcludedDetectionTypes to None:
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -ExcludedDetectionType \"None\"
Impact:
None
Default Value:
By default, Threat Detection types is not set."
      reference      : "800-53|SI-4(5),CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerSecurityAlertPolicies"
      regex          : "Disabled Threat Detection Types:"
      not_expect     : 'Disabled Threat Detection Types: \[\".+\"(,|\])'
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $servername|"Subscription ID: \($id)" + " ResourceGroup Name: \($name)" + " Server Name: \($servername)"+" Disabled Threat Detection Types: \(.value.properties.disabledAlerts)"'
    </custom_item>

    <custom_item>
      description    : "4.6 Ensure that 'Send alerts to' is set - Email Addresses"
      info           : "Provide the email address where alerts will be sent when anomalous activities are detected on SQL servers.
Rationale:
Providing the email address to receive alerts ensures that any detection of anomalous activities is reported as soon as possible, making it more likely to mitigate any potential risk sooner.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Threat Protection
4. Set Send alerts to as appropriate
Azure PowerShell
For each Server, set Send alerts to
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -NotificationRecipientsEmails  \"<Recipient Email ID>\"
Impact:
None
Default Value:
By default, Send alerts to is not set."
      reference      : "800-53|SI-4(5),CSCv7|19,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerSecurityAlertPolicies"
      regex          : ".+"
      not_expect     : ".+"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $servername|"Subscription ID: \($id)" + " ResourceGroup Name: \($name)" + " Server Name: \($servername)"+" Email Addresses: \(.value.properties.emailAddresses[])"'
      severity       : MEDIUM
    </custom_item>

    <custom_item>
      description    : "4.6 Ensure that 'Send alerts to' is set"
      info           : "Provide the email address where alerts will be sent when anomalous activities are detected on SQL servers.
Rationale:
Providing the email address to receive alerts ensures that any detection of anomalous activities is reported as soon as possible, making it more likely to mitigate any potential risk sooner.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution       : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Threat Protection
4. Set Send alerts to as appropriate
Azure PowerShell
For each Server, set Send alerts to
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -NotificationRecipientsEmails  \"<Recipient Email ID>\"
Impact:
None
Default Value:
By default, Send alerts to is not set."
      reference      : "800-53|SI-4(5),CSCv7|19,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerSecurityAlertPolicies"
      regex          : "Email Admins:"
      expect         : "Email Admins: true"
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $servername|.value|"Subscription ID: \($id)" + " ResrouceGroup Name: \($name)" + " Server Name: \($servername)"+" Email Admins: \(.properties.emailAccountAdmins)"'
      match_all      : YES
    </custom_item>

    <custom_item>
      description    : "4.7 Ensure that 'Email service and co-administrators' is 'Enabled'"
      info           : "Enable service and co-administrators to receive security alerts from the SQL server.
Rationale:
Providing the email address to receive alerts ensures that any detection of anomalous activities is reported as soon as possible, making it more likely to mitigate any potential risk sooner."
      solution       : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Data Security
4. At section Threat Detection Settings, Enable Email service and co-administrators
Azure PowerShell
For each Server, enable Email service and co-administrators
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True
Impact:
None
Default Value:
By default, Email service and co-administrators is enabled."
      reference      : "800-53|SI-4(5),CSCv7|19,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4(5),LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerSecurityAlertPolicies"
      regex          : "Email Account Admins:"
      not_expect     : 'Email Account Admins: false'
      json_transform : '.[]|.subscriptionId as $id|.resourceGroups[]| .name as $name|.SQLServers[]|.name as $servername|.value|"Subscription ID: \($id)" + " ResrouceGroup Name: \($name)" + " Server Name: \($servername)"+ " Email Account Admins: \(.properties.emailAccountAdmins)"'
    </custom_item>

    <custom_item>
      description    : "4.10 Ensure SQL server's TDE protector is encrypted with BYOK (Use your own key)"
      info           : "TDE with BYOK support provides increased transparency and control over the TDE Protector, increased security with an HSM-backed external service, and promotion of separation of duties.
With TDE, data is encrypted at rest with a symmetric key (called the database encryption key) stored in the database or data warehouse distribution. To protect this data encryption key (DEK) in the past, only a certificate that the Azure SQL Service managed could be used. Now, with BYOK support for TDE, the DEK can be protected with an asymmetric key that is stored in the Key Vault. Key Vault is a highly available and scalable cloud-based key store which offers central key management, leverages FIPS 140-2 Level 2 validated hardware security modules (HSMs), and allows separation of management of keys and data, for additional security.
Based on business needs or criticality of data/databases hosted a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (BYOK).
Rationale:
Bring Your Own Key (BYOK) support for Transparent Data Encryption (TDE) allows user control of TDE encryption keys and restricts who can access them and when. Azure Key Vault, Azures cloud-based external key management system is the first key management service where TDE has integrated support for BYOK. With BYOK, the database encryption key is protected by an asymmetric key stored in the Key Vault. The asymmetric key is set at the server level and inherited by all databases under that server. This feature is currently in preview and we do not recommend using it for production workloads until we declare General Availability."
      solution       : "Azure Console:
Go to SQL servers
For the desired server instance
1. Click On Transparent data encryption
2. Set Use your own key to YES
3. Browse through your key vaults to Select an existing key or create a new key in Key Vault.
4. Check Make selected key the default TDE protector
Azure CLI:
Use the below command to encrypt SQL server's TDE protector with BYOK
az sql server tde-key >> Set --resource-group <resourceName> --server <dbServerName> --server-key-type {AzureKeyVault} [--kid <keyIdentifier>]```
Impact:
Once TDE protector is encrypted with BYOK, it transfers entire responsibility of respective key management on you and hence you should be more careful about doing any operations on the particular key in order to keep data from corresponding SQL server and Databases hosted accessible.

Default Value:
By Default, Microsoft managed TDE protector is enabled for a SQL server. By default option 'Use your own key' is set to 'ON'."
      reference      : "800-171|3.13.16,800-53|SC-28(1),CSCv7|16.4,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|2S,TBA-FIISB|28.1"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "getSQLServerEncryptionProtector"
      regex          : "Kind:"
      expect         : 'Kind: azurekeyvault Key Type: AzureKeyVault URI: .+'
      json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.SQLServers[]|.name as $sname|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+ " SQLServer: \($sname)" + " Kind: \(.value[].kind)" + " Key Type: \(.value[].properties.serverKeyType)" + " URI: \(.value[].properties.uri)"'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.4 Ensure that 'Advanced Data Security' on a SQL server is set to 'On'"
      info        : "Enable \"Advanced Data Security\" on critical SQL Servers.
Rationale:
SQL Server \"Advanced Data Security\" provides a new layer of security, which enables customers to detect and respond to potential threats as they occur by providing security alerts on anomalous activities. Users will receive an alert upon suspicious database activities, potential vulnerabilities, and SQL injection attacks, as well as anomalous database access patterns. SQL Server Threat Detection alerts provide details of suspicious activity and recommend action on how to investigate and mitigate the threat. Additionally, SQL server Advanced Data Security includes functionality for discovering and classifying sensitive data.
Advanced Data Security is a paid feature. It is recommended to enable the feature at least on business-critical SQL Servers."
      solution    : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Data Security
4. Set Advanced Data Security to On
Azure PowerShell
Enable Advanced Data Security for a SQL Server:
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True
Note:
 Enabling 'Advanced Data Security' from the Azure portal enables Threat Detection
 Using Powershell command Set-AzureRmSqlServerThreatDetectionPolicy enables Advanced Data Security for a SQL server
Impact:
Enabling the Advanced Data Security feature can incur additional costs for each SQL server.
Default Value:
By default, Advanced Data Security is set to Off."
      reference   : "800-53|SI-4,CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4,LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.5 Ensure that 'Threat Detection types' is set to 'All'"
      info        : "Enable all types of threat detection on SQL servers.
Rationale:
Enabling all threat detection types protects against SQL injection, database vulnerabilities, and any other anomalous activities."
      solution    : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Data Security
4. At section Threat Detection Settings, Set Threat Detection types to All
Azure PowerShell
For each Server, set ExcludedDetectionTypes to None:
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -ExcludedDetectionType \"None\"
Impact:
None
Default Value:
By default, Threat Detection types is not set."
      reference   : "800-53|SI-4,CSCv7|3.1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4,LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.6 Ensure that 'Send alerts to' is set"
      info        : "Provide the email address where alerts will be sent when anomalous activities are detected on SQL servers.
Rationale:
Providing the email address to receive alerts ensures that any detection of anomalous activities is reported as soon as possible, making it more likely to mitigate any potential risk sooner."
      solution    : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Threat Protection
4. Set Send alerts to as appropriate
Azure PowerShell
For each Server, set Send alerts to
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -NotificationRecipientsEmails  \"<Recipient Email ID>\"
Impact:
None
Default Value:
By default, Send alerts to is not set."
      reference   : "800-53|SI-4,CSCv7|19,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4,LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.7 Ensure that 'Email service and co-administrators' is 'Enabled'"
      info        : "Enable service and co-administrators to receive security alerts from the SQL server.
Rationale:
Providing the email address to receive alerts ensures that any detection of anomalous activities is reported as soon as possible, making it more likely to mitigate any potential risk sooner."
      solution    : "Azure Console
1. Go to SQL servers
2. For each server instance
3. Click on Advanced Data Security
4. At section Threat Detection Settings, Enable Email service and co-administrators
Azure PowerShell
For each Server, enable Email service and co-administrators
Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName <resource group name> -ServerName <server name> -EmailAdmins $True
Impact:
None
Default Value:
By default, Email service and co-administrators is enabled."
      reference   : "800-53|SI-4,CSCv7|19,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,ITSG-33|SI-4,LEVEL|2S,SWIFT-CSCv1|6.4,TBA-FIISB|45.2.5"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>

    <report type:"PASSED">
      description : "4.10 Ensure SQL server's TDE protector is encrypted with BYOK (Use your own key)"
      info        : "TDE with BYOK support provides increased transparency and control over the TDE Protector, increased security with an HSM-backed external service, and promotion of separation of duties.
With TDE, data is encrypted at rest with a symmetric key (called the database encryption key) stored in the database or data warehouse distribution. To protect this data encryption key (DEK) in the past, only a certificate that the Azure SQL Service managed could be used. Now, with BYOK support for TDE, the DEK can be protected with an asymmetric key that is stored in the Key Vault. Key Vault is a highly available and scalable cloud-based key store which offers central key management, leverages FIPS 140-2 Level 2 validated hardware security modules (HSMs), and allows separation of management of keys and data, for additional security.
Based on business needs or criticality of data/databases hosted a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (BYOK).
Rationale:
Bring Your Own Key (BYOK) support for Transparent Data Encryption (TDE) allows user control of TDE encryption keys and restricts who can access them and when. Azure Key Vault, Azures cloud-based external key management system is the first key management service where TDE has integrated support for BYOK. With BYOK, the database encryption key is protected by an asymmetric key stored in the Key Vault. The asymmetric key is set at the server level and inherited by all databases under that server. This feature is currently in preview and we do not recommend using it for production workloads until we declare General Availability."
      solution    : "Azure Console:
Go to SQL servers
For the desired server instance
1. Click On Transparent data encryption
2. Set Use your own key to YES
3. Browse through your key vaults to Select an existing key or create a new key in Key Vault.
4. Check Make selected key the default TDE protector
Azure CLI:
Use the below command to encrypt SQL server's TDE protector with BYOK
az sql server tde-key >> Set --resource-group <resourceName> --server <dbServerName> --server-key-type {AzureKeyVault} [--kid <keyIdentifier>]```
Impact:
Once TDE protector is encrypted with BYOK, it transfers entire responsibility of respective key management on you and hence you should be more careful about doing any operations on the particular key in order to keep data from corresponding SQL server and Databases hosted accessible.

Default Value:
By Default, Microsoft managed TDE protector is enabled for a SQL server. By default option 'Use your own key' is set to 'ON'."
      reference   : "800-171|3.13.16,800-53|SC-28,CSCv7|16.4,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|2S,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<custom_item>
  description    : "5.1.6 Ensure the storage account containing the container with activity logs is encrypted with BYOK (Use Your Own Key)"
  info           : "The storage account with the activity log export container is configured to use BYOK (Use Your Own Key).
Rationale:
Configuring the storage account with the activity log export container to use BYOK (Use Your Own Key) provides additional confidentiality controls on log data as a given user must have read permission on the corresponding storage account and must be granted decrypt permission by the CMK.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Azure Console
1. In right column, Click service Storage Accounts to access Storage account blade
2. Click on the storage account name
3. In Section SETTINGS click Encryption. It will show Storage service encryption configuration pane.
4. Check Use your own key which will expand Encryption Key Settings
5. Use option Enter key URI or Select from Key Vault to set up encryption with your own key
Azure Command Line Interface 2.0
az storage account update --name <name of the storage account> --resource-group <resource group for a storage account> --encryption-key-source=Microsoft.Keyvault --encryption-key-vault <Key Valut URI> --encryption-key-name <KeyName> --encryption-key-version <Key Version>
Default Value:
By default, for a storage account keySource is set to Microsoft.Storage allowing encryption with vendor Managed key and not the BYOK (Use Your Own Key)."
  reference      : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,800-53|SI-4(5),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|DE.DP-2,CSF|ID.RA-1,CSF|PR.IP-8,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-3,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,ITSG-33|SI-4(5),LEVEL|2S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,TBA-FIISB|45.2.5"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listLogProfiles"
  regex          : "Storage Account ID: "
  expect         : "MANUAL_REVIEW"
  json_transform : '.[]|.subscriptionId as $id| .value[].name as $name |"Subscription ID: \($id)" + " Profile Name: \($name)" +" Storage Account ID: \(.value[].properties.storageAccountId)"'
  severity       : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      description    : "Security Group Rules are present"
      request        : "listNetworkSecurityGroups"
      regex          : "Access:"
      expect         : 'Access:'
      json_transform : '.[]|.subscriptionId as $id|.value[]|.name as $name| .properties.securityRules[]|"Network Security Group Name: \($name)"+" Rule Name : \(.name)"  + " Access: \(.properties.access) " + " Destination Port Range: \(.properties.destinationPortRange)" + " Direction: \(.properties.direction)" + " Protocol: \(.properties.protocol)" + " Source Address Prefix: \(.properties.sourceAddressPrefix)"'
    </custom_item>
  </condition>

  <then>
    <custom_item>
      description    : "6.4 Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"
      info           : "Network Security Group Flow Logs should be enabled and the retention period is set to greater than or equal to 90 days.
Rationale:
Flow logs enable capturing information about IP traffic flowing in and out of network security groups. Logs can be used to check for anomalies and give insight into suspected breaches."
      solution       : "Azure Console
1. Go to Network Watcher
2. Select NSG flow logs blade in the Logs section
3. Select each Network Security Group from the list
4. Ensure Status is set to On
5. Ensure Retention (days) setting greater than 90 days
6. Select your storage account in the Storage account field
7. Select Save
Azure Command Line Interface 2.0
Enable the NSG flow logs and set the Retention (days) to greater than or equal to 90 days.
az network watcher flow-log configure --nsg <NameorID of the Network Security Group> --enabled true --resource-group <resourceGroupName> --retention 91 --storage-account <NameorID of the storage account to save flow logs>
Impact:
None
Default Value:
By default, Network Security Group Flow Logs are disabled."
      reference      : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also       : "https://workbench.cisecurity.org/files/2269"
      request        : "listNetworkWatcher"
      regex          : "Retention"
      expect         : 'Retention: (9[1-9]|[1-9][0-9][0-9]+) Enabled: true'
      json_transform : '.[]|.subscriptionId as $id| .resourceGroups[]|.name as $name|.value[]|.name as $nwname|.properties.flowLogs[].properties.retentionPolicy.days as $days|.properties.flowLogs[].properties.retentionPolicy.enabled as $enabled|"Subscription: \($id) " + "Resource Group: \($name)" + " Network Watcher: \($nwname)"+" Retention: \($days)"+ " Enabled: \($enabled)"'
      match_all      : YES
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.4 Ensure that Network Security Group Flow Log retention period is 'greater than 90 days'"
      info        : "Network Security Group Flow Logs should be enabled and the retention period is set to greater than or equal to 90 days.
Rationale:
Flow logs enable capturing information about IP traffic flowing in and out of network security groups. Logs can be used to check for anomalies and give insight into suspected breaches."
      solution    : "Azure Console
1. Go to Network Watcher
2. Select NSG flow logs blade in the Logs section
3. Select each Network Security Group from the list
4. Ensure Status is set to On
5. Ensure Retention (days) setting greater than 90 days
6. Select your storage account in the Storage account field
7. Select Save
Azure Command Line Interface 2.0
Enable the NSG flow logs and set the Retention (days) to greater than or equal to 90 days.
az network watcher flow-log configure --nsg <NameorID of the Network Security Group> --enabled true --resource-group <resourceGroupName> --retention 91 --storage-account <NameorID of the storage account to save flow logs>
Impact:
None
Default Value:
By default, Network Security Group Flow Logs are disabled."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2269"
    </report>
  </else>
</if>

<custom_item>
  description    : "8.3 Ensure that Resource Locks are set for mission critical Azure resources"
  info           : "Resource Manager Locks provide a way for administrators to lock down Azure resources to prevent deletion of, or modifications to, a resource. These locks sit outside of the Role Based Access Controls (RBAC) hierarchy and, when applied, will place restrictions on the resource for all users. These are very useful when there is have an important resource in a subscription that users should not be able to delete or change and can help prevent accidental and malicious changes or deletion.
Rationale:
As an administrator, it may be necessary to lock a subscription, resource group, or resource to prevent other users in the organization from accidentally deleting or modifying critical resources. The lock level can be set to to CanNotDelete or ReadOnly to achieve this purpose.
 CanNotDelete means authorized users can still read and modify a resource, but they can't delete the resource.
 ReadOnly means authorized users can read a resource, but they can't delete or update the resource. Applying this lock is similar to restricting all authorized users to the permissions granted by the Reader role.
 NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution       : "Azure Console
1. Navigate to the specific Azure Resource or Resource Group
2. For each of the mission critical resource, click on Locks
3. Click Add
4. Give the lock a name and a description, then select the type, CanNotDelete or ReadOnly as appropriate
Azure Command Line Interface 2.0
To lock a resource, provide the name of the resource, its resource type, and its resource group name.
az lock create --name <LockName> --lock-type <CanNotDelete/Read-only> --resource-group <resourceGroupName> --resource-name <resourceName> --resource-type <resourceType>
Default Value:
By default, no locks are set."
  reference      : "800-171|3.1.7,800-53|AC-6(10),CSCv7|14,CSF|PR.AC-4,LEVEL|2NS"
  see_also       : "https://workbench.cisecurity.org/files/2269"
  request        : "listManagementLocksByResourceGroup"
  regex          : ".+"
  not_expect     : ".+"
  json_transform : '.[]|.subscriptionId as $subid|.resourceGroups[]|.name as $rgname|.value[]|"SubscriptionID: \($subid)"+" ResourceGroup: \($rgname)"+" Lock Name: \(.name)" + " Lock Type: \(.properties.level)"'
  severity       : MEDIUM
</custom_item>

</check_type>
