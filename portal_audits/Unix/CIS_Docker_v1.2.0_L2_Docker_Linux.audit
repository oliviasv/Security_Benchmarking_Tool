#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.2 $
# $Date: 2020/07/14 $
#
# description : This document implements the security configuration as recommended by the
#               CIS Docker Benchmark v1.2.0
#
#<ui_metadata>
#<display_name>CIS Docker v1.2.0 L2 Docker Linux</display_name>
#<spec>
#  <type>CIS</type>
#  <name>CIS Docker L2 Docker Linux</name>
#  <version>1.2.0</version>
#  <link>https://workbench.cisecurity.org/files/2433</link>
#</spec>
#<labels>unix,cis,docker,agent</labels>
#<benchmark_refs>LEVEL,CSCv6,CSCv7</benchmark_refs>
#<variables>
#  <variable>
#    <name>AUTH_PLUGIN_ID</name>
#    <default>1234</default>
#    <description>AUTH Plugin ID</description>
#    <info>ID of authorization plugin.</info>
#  </variable>
#  <variable>
#    <name>MANAGEMENT_ADDRESS</name>
#    <default>172.17.0.[1-9]</default>
#    <description>Management Plane Address</description>
#    <info>IP address for Management Plane traffic.</info>
#  </variable>
#  <variable>
#    <name>SECCOMP_PROFILE</name>
#    <default>none</default>
#    <description>Seccomp Profile Path</description>
#    <info>A profile with a reduced set of system calls reduces the total kernel surface exposed to the application and therefore improves application security.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Check if this is a Docker Vessel/Host"
      cmd         : "/usr/bin/docker info"
      expect      : "Containers"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_Docker_v1.2.0_L2_Docker_Linux.audit from CIS Docker Benchmark v1.2.0"
    </report>

    <custom_item>
      type        : FILE_CHECK
      description : "2.8 Enable user namespace support - /etc/subuid"
      info        : "You should enable user namespace support in Docker daemon to utilize container user to host user re-mapping. This recommendation is beneficial where the containers you are using do not have an explicit container user defined in the container image. If the container images that you are using have a pre-defined non-root user, this recommendation may be skipped as this feature is still in its infancy, and might result in unpredictable issues or difficulty in configuration.

Rationale:

The Linux kernel 'user namespace' support within the Docker daemon provides additional security for the Docker host system. It allows a container to have a unique range of user and group IDs which are outside the traditional user and group range utilized by the host system.

For example, the root user can have the expected administrative privileges inside the container but can effectively be mapped to an unprivileged UID on the host system."
      solution    : "Please consult the Docker documentation for various ways in which this can be configured depending upon your requirements. Your steps might also vary based on platform - For example, on Red Hat, sub-UIDs and sub-GIDs mapping creation do not work automatically. You might have to create your own mapping.
The high-level steps are as below:
Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.

touch /etc/subuid /etc/subgid

Step 2: Start the docker daemon with --userns-remap flag

dockerd --userns-remap=default

Impact:

User namespace remapping is incompatible with a number of Docker features and also currently breaks some of its functionalities. Reference the Docker documentation and included links for details.

Default Value:

By default, user namespace is not remapped. Consideration should be given to implementing this in line with the requirements of the applications being used and the organization's security policy."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      file        : "/etc/subuid"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "2.8 Enable user namespace support - /etc/subgid"
      info        : "You should enable user namespace support in Docker daemon to utilize container user to host user re-mapping. This recommendation is beneficial where the containers you are using do not have an explicit container user defined in the container image. If the container images that you are using have a pre-defined non-root user, this recommendation may be skipped as this feature is still in its infancy, and might result in unpredictable issues or difficulty in configuration.

Rationale:

The Linux kernel 'user namespace' support within the Docker daemon provides additional security for the Docker host system. It allows a container to have a unique range of user and group IDs which are outside the traditional user and group range utilized by the host system.

For example, the root user can have the expected administrative privileges inside the container but can effectively be mapped to an unprivileged UID on the host system."
      solution    : "Please consult the Docker documentation for various ways in which this can be configured depending upon your requirements. Your steps might also vary based on platform - For example, on Red Hat, sub-UIDs and sub-GIDs mapping creation do not work automatically. You might have to create your own mapping.
The high-level steps are as below:
Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.

touch /etc/subuid /etc/subgid

Step 2: Start the docker daemon with --userns-remap flag

dockerd --userns-remap=default

Impact:

User namespace remapping is incompatible with a number of Docker features and also currently breaks some of its functionalities. Reference the Docker documentation and included links for details.

Default Value:

By default, user namespace is not remapped. Consideration should be given to implementing this in line with the requirements of the applications being used and the organization's security policy."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      file        : "/etc/subgid"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "2.8 Enable user namespace support - SecurityOptions"
      info        : "You should enable user namespace support in Docker daemon to utilize container user to host user re-mapping. This recommendation is beneficial where the containers you are using do not have an explicit container user defined in the container image. If the container images that you are using have a pre-defined non-root user, this recommendation may be skipped as this feature is still in its infancy, and might result in unpredictable issues or difficulty in configuration.

Rationale:

The Linux kernel 'user namespace' support within the Docker daemon provides additional security for the Docker host system. It allows a container to have a unique range of user and group IDs which are outside the traditional user and group range utilized by the host system.

For example, the root user can have the expected administrative privileges inside the container but can effectively be mapped to an unprivileged UID on the host system."
      solution    : "Please consult the Docker documentation for various ways in which this can be configured depending upon your requirements. Your steps might also vary based on platform - For example, on Red Hat, sub-UIDs and sub-GIDs mapping creation do not work automatically. You might have to create your own mapping.
The high-level steps are as below:
Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.

touch /etc/subuid /etc/subgid

Step 2: Start the docker daemon with --userns-remap flag

dockerd --userns-remap=default

Impact:

User namespace remapping is incompatible with a number of Docker features and also currently breaks some of its functionalities. Reference the Docker documentation and included links for details.

Default Value:

By default, user namespace is not remapped. Consideration should be given to implementing this in line with the requirements of the applications being used and the organization's security policy."
      reference   : "800-53|SC-39,CSCv6|18,LEVEL|2S"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "docker info --format '{{ .SecurityOptions }}'"
      expect      : "name=userns"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "2.9 Ensure the default cgroup usage has been confirmed - dockerd"
      info        : "The --cgroup-parent option allows you to set the default cgroup parent to use for all containers. If there is no specific usage requirement for this, the setting should be left at its default.

Rationale:

System administrators typically define cgroups under which containers are supposed to run. Even if cgroups are not explicitly defined by the system administrators, containers run under docker cgroup by default.

It is possible to attach to a different cgroup other than the one which is the default, however this type of usage should be monitored and confirmed because attaching to a different cgroup other than the one that is a default, it could be possible to share resources unevenly causing resource utilization problems on the host."
      solution    : "The default setting is in line with good security practice and can be left in situ. If you wish to specifically set a non-default cgroup, pass the --cgroup-parent parameter to the Docker daemon when starting it.
For example,

dockerd --cgroup-parent=/foobar

Impact:

None.

Default Value:

By default, docker daemon uses /docker for fs cgroup driver and system.slice for systemd cgroup driver."
      reference   : "800-53|SC-39,CSCv6|18,LEVEL|2S"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "ps -ef | grep dockerd | grep -v grep"
      expect      : "^((?!--cgroup-parent=*).)*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "2.9 Ensure the default cgroup usage has been confirmed - daemon.json"
      info        : "The --cgroup-parent option allows you to set the default cgroup parent to use for all containers. If there is no specific usage requirement for this, the setting should be left at its default.

Rationale:

System administrators typically define cgroups under which containers are supposed to run. Even if cgroups are not explicitly defined by the system administrators, containers run under docker cgroup by default.

It is possible to attach to a different cgroup other than the one which is the default, however this type of usage should be monitored and confirmed because attaching to a different cgroup other than the one that is a default, it could be possible to share resources unevenly causing resource utilization problems on the host."
      solution    : "The default setting is in line with good security practice and can be left in situ. If you wish to specifically set a non-default cgroup, pass the --cgroup-parent parameter to the Docker daemon when starting it.
For example,

dockerd --cgroup-parent=/foobar

Impact:

None.

Default Value:

By default, docker daemon uses /docker for fs cgroup driver and system.slice for systemd cgroup driver."
      reference   : "800-53|SC-39,CSCv6|18,LEVEL|2S"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      file        : "/etc/docker/daemon.json"
      regex       : "['\"]*cgroup-parent['\"]*[\\s]*:"
      expect      : "['\"]*cgroup-parent['\"]*[\\s]*:"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "2.10 Ensure base device size is not changed until needed - dockerd"
      info        : "Under certain circumstances, you might need containers larger than 10G. Where this applies you should carefully choose the base device size.

Rationale:

The base device size can be increased on daemon restart. Increasing the base device size allows all future images and containers to be of the new base device size. A user can use this option to expand the base device size, however shrinking is not permitted. This value affects the system wide 'base' empty filesystem that may already be initialized and therefore inherited by pulled images.

Although the file system does not allocate the increased size as long as it is empty, more space will be allocated for extra images. This may cause a denial of service condition if the allocated partition becomes full."
      solution    : "Do not set --storage-opt dm.basesize until needed.

Impact:

None.

Default Value:

The default base device size is 10G."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "ps -ef | grep dockerd | grep -v grep"
      expect      : "^((?!dm.basesize*).)*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "2.10 Ensure base device size is not changed until needed - daemon.json"
      info        : "Under certain circumstances, you might need containers larger than 10G. Where this applies you should carefully choose the base device size.

Rationale:

The base device size can be increased on daemon restart. Increasing the base device size allows all future images and containers to be of the new base device size. A user can use this option to expand the base device size, however shrinking is not permitted. This value affects the system wide 'base' empty filesystem that may already be initialized and therefore inherited by pulled images.

Although the file system does not allocate the increased size as long as it is empty, more space will be allocated for extra images. This may cause a denial of service condition if the allocated partition becomes full."
      solution    : "Do not set --storage-opt dm.basesize until needed.

Impact:

None.

Default Value:

The default base device size is 10G."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      file        : "/etc/docker/daemon.json"
      regex       : "['\"]*dm.basesize['\"]*"
      expect      : "['\"]*dm.basesize['\"]*"
    </custom_item>

    <if>
      <condition type:"OR">
        <custom_item>
          type        : CMD_EXEC
          description : "2.11 Ensure that authorization for Docker client commands is enabled - dockerd"
          cmd         : "ps -ef | grep dockerd | grep -v grep"
# Note: Variable @AUTH_PLUGIN_ID@ replaced with "1234" in field "expect".
          expect      : "--authorization-plugin=1234"
        </custom_item>

        <custom_item>
          type           : FILE_CONTENT_CHECK
          description    : "2.11 Ensure that authorization for Docker client commands is enabled - daemon.json"
          file           : "/etc/docker/daemon.json"
          regex          : ".*"
# Note: Variable @AUTH_PLUGIN_ID@ replaced with "1234" in field "expect".
          expect         : "1234"
          json_transform : ".[\"authorization-plugin\"]"
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "2.11 Ensure that authorization for Docker client commands is enabled"
          info        : "You should use native Docker authorization plugins or a third party authorization mechanism with the Docker daemon to manage access to Docker client commands.

Rationale:

Docker's out-of-the-box authorization model is currently 'all or nothing'. This means that any user with permission to access the Docker daemon can run any Docker client command. The same is true for remote users accessing Docker's API to contact the daemon. If you require greater access control, you can create authorization plugins and add them to your Docker daemon configuration. Using an authorization plugin, a Docker administrator can configure granular access policies for managing access to the Docker daemon.

Third party integrations of Docker may implement their own authorization models to require authorization with the Docker daemon outside of docker's native authorization plugin (i.e. Kubernetes, Cloud Foundry, Openshift)."
          solution    : "Step 1: Install/Create an authorization plugin.
Step 2: Configure the authorization policy as desired.
Step 3: Start the docker daemon as below:

dockerd --authorization-plugin=<PLUGIN_ID>

Impact:

Each Docker command needs to pass through the authorization plugin mechanism. This may have a performance impact.

It may be possible to use alternative mechanisms that do not have this performance hit.

Default Value:

By default, authorization plugins are not set up."
          reference   : "CSCv6|16,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2433"
        </report>
      </then>

      <else>
        <report type:"FAILED">
          description : "2.11 Ensure that authorization for Docker client commands is enabled"
          info        : "You should use native Docker authorization plugins or a third party authorization mechanism with the Docker daemon to manage access to Docker client commands.

Rationale:

Docker's out-of-the-box authorization model is currently 'all or nothing'. This means that any user with permission to access the Docker daemon can run any Docker client command. The same is true for remote users accessing Docker's API to contact the daemon. If you require greater access control, you can create authorization plugins and add them to your Docker daemon configuration. Using an authorization plugin, a Docker administrator can configure granular access policies for managing access to the Docker daemon.

Third party integrations of Docker may implement their own authorization models to require authorization with the Docker daemon outside of docker's native authorization plugin (i.e. Kubernetes, Cloud Foundry, Openshift)."
          solution    : "Step 1: Install/Create an authorization plugin.
Step 2: Configure the authorization policy as desired.
Step 3: Start the docker daemon as below:

dockerd --authorization-plugin=<PLUGIN_ID>

Impact:

Each Docker command needs to pass through the authorization plugin mechanism. This may have a performance impact.

It may be possible to use alternative mechanisms that do not have this performance hit.

Default Value:

By default, authorization plugins are not set up."
          reference   : "CSCv6|16,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2433"
        </report>
      </else>
    </if>

    <custom_item>
      type        : CMD_EXEC
      description : "2.12 Ensure centralized and remote logging is configured"
      info        : "Docker supports various logging mechanisms. A preferable method for storing logs is one that supports centralized and remote management.

Rationale:

Centralized and remote logging ensures that all important log records are safe even in the event of a major data availability issue . Docker supports various logging methods and you should use the one that best corresponds to your IT security policy."
      solution    : "Step 1: Set up the desired log driver following its documentation.
Step 2: Start the docker daemon using that logging driver.
For example:

dockerd --log-driver=syslog --log-opt syslog-address=tcp://192.xxx.xxx.xxx

Impact:

None.

Default Value:

By default, container logs are maintained as json files"
      reference   : "800-171|3.3.8,800-53|AU-9(2),CN-L3|8.1.3.5(d),CN-L3|8.1.4.3(c),CSCv6|6.6,CSCv7|6.6,CSCv7|6.8,CSF|PR.PT-1,ITSG-33|AU-9(2),LEVEL|2S,NESA|M5.2.3,NESA|M5.5.2,NIAv2|SS13e"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "docker info --format '{{ .LoggingDriver }}'"
      expect      : "syslog"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "2.15 Ensure that a daemon-wide custom seccomp profile is applied if appropriate"
      info        : "You can choose to apply a custom seccomp profile at a daemon-wide level if needed with this overriding Docker's default seccomp profile.

Rationale:

A large number of system calls are exposed to every userland process with many of them not utilized during the entire lifetime of the process. Many applications do not need all these system calls and therefore benefit by having each system call currently in use reviewed in line with organizational security policy. A reduced set of system calls reduces the total kernel surface exposed to the application and therefore improves application security.

A custom seccomp profile can be applied instead of Docker's default seccomp profile. Alternatively, if Docker's default profile is adequate for your environment, you can choose to ignore this recommendation."
      solution    : "By default, Docker's default seccomp profile is applied. If this is adequate for your environment, no action is necessary. Alternatively, if you choose to apply your own seccomp profile, use the --seccomp-profile flag at daemon start or put it in the daemon runtime parameters file.

dockerd --seccomp-profile </path/to/seccomp/profile>

Impact:

A misconfigured seccomp profile could possibly interrupt your container environment. Docker-default blocked calls have been carefully scrutinized and address some critical vulnerabilities/issues within container environments (for example, kernel key ring calls). You should therefore exercise extreme care if you choose to override the default settings.

Default Value:

By default, Docker applies a default seccomp profile."
      reference   : "800-53|SC-39,CSCv6|18,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "docker info --format '{{ .SecurityOptions }}'"
# Note: Variable @SECCOMP_PROFILE@ replaced with "none" in field "expect".
      expect      : "name=seccomp,profile=none"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "4.5 Ensure Content trust for Docker is Enabled"
      info        : "Content trust is disabled by default and should be enabled in line with organizational security policy.

Rationale:

Content trust provides the ability to use digital signatures for data sent to and received from remote Docker registries. These signatures allow client-side verification of the identity and the publisher of specific image tags and ensures the provenance of container images."
      solution    : "To enable content trust in a bash shell, you should enter the following command:

export DOCKER_CONTENT_TRUST=1

Alternatively, you could set this environment variable in your profile file so that content trust in enabled on every login.

Impact:

In an environment where DOCKER_CONTENT_TRUST is set, you are required to follow trust procedures whilst working with the image related commands - build, create, pull, pushand run. You can use the --disable-content-trust flag to run individual operations on tagged images without content trust on an as needed basis, but this defeats the purpose of enabling content trust and therefore should be avoided wherever possible.

Note: Content trust is currently only available for users of the public Docker Hub. It is currently not available for the Docker Trusted Registry or for private registries.

Default Value:

By default, content trust is disabled."
      reference   : "800-53|SI-7(6),CSCv6|18,CSF|PR.DS-6,LEVEL|2S,SWIFT-CSCv1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "echo $DOCKER_CONTENT_TRUST"
      expect      : "1"
    </custom_item>

    <report type:"WARNING">
      description : "4.8 Ensure setuid and setgid permissions are removed"
      info        : "Removing setuid and setgid permissions in the images can prevent privilege escalation attacks within containers.

Rationale:

setuid and setgid permissions can be used for privilege escalation. Whilst these permissions can on occasion be legitimately needed, you should consider removing them from packages which do not need them. This should be reviewed for each image.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile:

RUN find / -perm /6000 -type f -exec chmod a-s {} \; || true

Impact:

The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.

Default Value:

Not Applicable"
      reference   : "CSCv6|5.1,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2433"
    </report>

    <report type:"WARNING">
      description : "4.11 Ensure only verified packages are are installed"
      info        : "You should verify the authenticity of packages before installing them into images.

Rationale:

Verifying authenticity of software packages is essential for building a secure container image. Packages with no known provenance could potentially be malicious or have vulnerabilities that could be exploited.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages.

Impact:

None

Default Value:

Not Applicable"
      reference   : "CSCv6|18.1,CSCv7|18.3,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2433"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "5.2 Ensure that, if applicable, SELinux security options are set"
      info        : "SELinux is an effective and easy-to-use Linux application security system. It is available by default on some distributions such as Red Hat and Fedora.

Rationale:

SELinux provides a Mandatory Access Control (MAC) system that greatly augments the default Discretionary Access Control (DAC) model. You can therefore add an extra layer of safety to your containers by enabling SELinux on your Linux host."
      solution    : "If SELinux is applicable for your Linux OS, you should use it.

Set the SELinux State.

Set the SELinux Policy.

Create or import a SELinux policy template for Docker containers.

Start Docker in daemon mode with SELinux enabled. For example:

docker daemon --selinux-enabled

Start your Docker container using the security options. For example,

docker run --interactive --tty --security-opt label=level:TopSecret centos /bin/bash

Impact:

Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.

Default Value:

By default, no SELinux security options are applied on containers."
      reference   : "800-53|SC-39,CSCv6|14.4,CSCv7|14.6,LEVEL|2S"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{ .HostConfig.SecurityOpt }}'"
      expect      : "^((?!SecurityOpt=<no value>*).)*$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "5.22 Ensure that docker exec commands are not used with the privileged option"
      info        : "You should not use docker exec with the --privileged option.

Rationale:

Using the --privileged option in docker exec commands gives extended Linux capabilities to the command. This could potentially be an insecure practice, particularly when you are running containers with reduced capabilities or with enhanced restrictions."
      solution    : "You should not use the --privileged option in docker exec commands.

Impact:

If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.

Default Value:

By default, the docker exec command runs without the --privileged option."
      reference   : "800-53|AC-6(4),CSCv6|5.1,CSF|PR.AC-4,ITSG-33|AC-6(4),LEVEL|2S"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "ausearch -k docker | grep exec | grep privileged | awk '{ print } END { if (NR==0) print \"none\" }'"
      expect      : "none"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "5.23 Ensure that docker exec commands are not used with the user=root option"
      info        : "You should not use docker exec with the --user=root option.

Rationale:

Using the --user=root option in a docker exec command, executes it within the container as the root user. This could potentially be insecure, particularly when you are running containers with reduced capabilities or enhanced restrictions.

For example, if your container is running as a tomcat user (or any other non-root user), it would be possible to run a command through docker exec as rootwith the --user=root option. This could potentially be dangerous."
      solution    : "You should not use the --user=root option in docker exec commands.

Impact:

None.

Default Value:

By default, the docker exec command runs without the --user option."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "ausearch -k docker | grep exec | grep user | awk '{ print } END { if (NR==0) print \"none\" }'"
      expect      : "none"
    </custom_item>

    <report type:"WARNING">
      description : "5.29 Ensure that Docker's default bridge 'docker0' is not used"
      info        : "You should not use Docker's default bridge docker0. Instead you should use Docker's user-defined networks for container networking.

Rationale:

Docker connects virtual interfaces created in bridge mode to a common bridge called docker0. This default networking model is vulnerable to ARP spoofing and MAC flooding attacks as there is no filtering applied to it.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network.

Impact:

User-defined networks need to be configured and managed in line with organizational security policy.

Default Value:

By default, Docker runs containers within the default docker0 bridge."
      reference   : "CSCv6|9,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2433"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "7.5 Ensure that Docker's secret management commands are used for managing secrets in a swarm cluster"
      info        : "You should use Docker's in-built secret management command for control of secrets.

Rationale:

Docker has various commands for managing secrets in a swarm cluster.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "You should follow the docker secret documentation and use it to manage secrets effectively.

Impact:

None

Default Value:

Not Applicable"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|18,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "docker secret ls"
      expect      : "MANUAL_REVIEW"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.6 Ensure that swarm manager is run in auto-lock mode"
      info        : "You should review whether you wish to run Docker swarm manager in auto-lock mode.

Rationale:

When Docker restarts, both the TLS key used to encrypt communication among swarm nodes, and the key used to encrypt and decrypt Raft logs on disk, are loaded into each manager node's memory. You could protect the mutual TLS encryption key and the key used to encrypt and decrypt Raft logs at rest. This protection could be enabled by initializing the swarm with the --autolock flag.

With --autolockenabled, when Docker restarts, you must unlock the swarm first, using a key encryption key generated by Docker when the swarm was initialized.

This has benefits in a high security environment, however these should be balanced against the support issues caused by the swarm not starting automatically if, for example the host were to experience an outage."
      solution    : "If you are initializing a swarm, use the command below.

docker swarm init --autolock

If you want to set --autolock on an existing swarm manager node, use the following command.

docker swarm update --autolock

Impact:

A swarm in auto-lock mode will not recover from a restart without manual intervention from an administrator to enter the unlock key. This may not always be desirable, and should be reviewed at a policy level.

Default Value:

By default, the swarm manager does not run in auto-lock mode."
      reference   : "800-171|3.1.1,800-53|AC-3,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.2,CSCv7|14.4,CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "docker info --format '{{ .Swarm.Cluster.Spec.EncryptionConfig.AutoLockManagers }}'"
      expect      : "true"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.8 Ensure that node certificates are rotated as appropriate"
      info        : "You should rotate swarm node certificates in line with your organizational security policy.

Rationale:

Docker Swarm uses TLS for clustering operations between its nodes. Certificate rotation ensures that in an event such as a compromised node or key, it is difficult to impersonate a node. By default, node certificates are rotated every 90 days, but you should rotate them more often or as appropriate in your environment."
      solution    : "You should run the command to set the desired expiry time on the node certificate.
For example:

docker swarm update --cert-expiry 48h

Impact:

None

Default Value:

By default, node certificates are rotated automatically every 90 days."
      reference   : "800-171|3.13.10,800-53|SC-12,CSCv6|14.2,CSCv7|14.4,ISO/IEC-27001|A.10.1.2,ITSG-33|SC-12,LEVEL|2NS,NESA|T7.4.1,NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "docker info | grep 'Expiry Duration'"
      expect      : "Expiry Duration: [1]?[1-9]^ months"
    </custom_item>

    <report type:"WARNING">
      description : "7.9 Ensure that CA certificates are rotated as appropriate"
      info        : "You should rotate root CA certificates as appropriate.

Rationale:

Docker Swarm uses TLS for clustering operations between its nodes. Certificate rotation ensures that in an event such as a compromised node or key, it is difficult to impersonate a node. Node certificates depend upon root CA certificates. For operational security, it is important to rotate these frequently. Currently, root CA certificates are not rotated automatically and you should therefore establish a process for rotating them in line with your organizational security policy.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "You should run the command below to rotate a certificate.

docker swarm ca --rotate

Impact:

None

Default Value:

By default, root CA certificates are not rotated."
      reference   : "CSCv6|14.2,CSCv7|14.4,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2433"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "7.10 Ensure that management plane traffic is separated from data plane traffic"
      info        : "You should separate management plane traffic from data plane traffic.

Rationale:

Separating management plane traffic from data plane traffic ensures that these types of traffic are segregated from each other. These traffic flows can then be individually monitored and tied to different traffic control policies and monitoring. This also ensures that the management plane is always reachable even if there is a great deal of traffic on the data plane."
      solution    : "You should initialize the swarm with dedicated interfaces for management and data planes respectively.
For example,

docker swarm init --advertise-addr=192.168.0.1 --data-path-addr=17.1.0.3

Impact:

This requires two network interfaces per node.

Default Value:

By default, data plane traffic is not separated from management plane traffic."
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),CN-L3|8.1.10.6(h),CSCv6|18,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(13),LEVEL|2NS,NIAv2|GS7d,SWIFT-CSCv1|3.1"
      see_also    : "https://workbench.cisecurity.org/files/2433"
      cmd         : "docker node inspect --format '{{ .Status.Addr }}' self"
# Note: Variable @MANAGEMENT_ADDRESS@ replaced with "172.17.0.[1-9]" in field "expect".
      expect      : "172.17.0.[1-9]"
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_Docker_v1.2.0_L2_Docker_Linux.audit from CIS Docker Benchmark v1.2.0"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
    </report>
  </else>
</if>

</check_type>
