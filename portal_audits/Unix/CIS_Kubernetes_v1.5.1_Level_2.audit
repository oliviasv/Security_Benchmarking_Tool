#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2020/07/14 $
#
# description : This document implements the security configuration as recommended by the
#               CIS Kubernetes Benchmark v1.5.1
#
#<ui_metadata>
#<display_name>CIS Kubernetes Benchmark v1.5.1 L2</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Kubernetes L2</name>
#  <version>1.5.1</version>
#  <link>https://workbench.cisecurity.org/files/2662</link>
#</spec>
#<labels>unix,agent</labels>
#<benchmark_refs>LEVEL,CSCv6,CSCv7</benchmark_refs>
#<variables>
#  <variable>
#    <name>APISERVER_FILE</name>
#    <default>/etc/kubernetes/manifests/kube-apiserver.yaml</default>
#    <description>API Server Config File</description>
#    <info>The apiserver file controls various parameters that set the behavior of the API server.</info>
#  </variable>
#  <variable>
#    <name>KUBECONFIG</name>
#    <default>/etc/kubernetes/admin.conf</default>
#    <description>Path to the kubectl config</description>
#    <info>The kubeconfig file controls various parameters for connecting to the API server.</info>
#  </variable>
#  <variable>
#    <name>KUBELET_CONFIG_FILE</name>
#    <default>/var/lib/kubelet/config.yaml</default>
#    <description>Kubelet Config File</description>
#    <info>The kubelet config file controls various parameters that set the behavior of the kubelet service.</info>
#  </variable>
#  <variable>
#    <name>AUDIT_POLICY_FILE</name>
#    <default>/etc/kubernetes/kubernetes-audit-policy.yml</default>
#    <description>Path to the kubernetes audit file</description>
#    <info>The audit policy file controls various parameters that set the audit logging policy.</info>
#  </variable>
#  <variable>
#    <name>EVENT_QPS</name>
#    <default>0</default>
#    <description>Event QPS rate</description>
#    <info>The Event QPS can be used to limit the rate at which events are gathered.</info>
#  </variable>
#  <variable>
#    <name>KUBECTL_PATH</name>
#    <default>/usr/bin</default>
#    <description>Path to the kubectl binary</description>
#    <info>This is the directory where the kubectl binary is located.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<custom_item>
  system      : "Linux"
  type        : PROCESS_CHECK
  description : "CIS_Kubernetes_v1.5.1_Level_2.audit from CIS Kubernetes Benchmark v1.5.1"
  info        : "NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2662"
  name        : "kubelet"
  status      : ON
  severity    : MEDIUM
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      system      : "Linux"
      type        : PROCESS_CHECK
      description : "Check if kubelet is running"
      name        : "kubelet"
      status      : ON
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "Check if this is a Docker Vessel/Host"
      cmd         : "/usr/bin/docker info"
      expect      : "Containers"
    </custom_item>
  </condition>

  <then>
    <if>
      <condition type:"AND">
        <custom_item>
          system      : "Linux"
          type        : PROCESS_CHECK
          description : "Check if Controller Manager is running"
          name        : "kube-controller"
          status      : ON
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.3.6 Ensure that the RotateKubeletServerCertificate argument is set to true"
          info          : "Enable kubelet server certificate rotation on controller-manager.

Rationale:

RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad.

Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself."
          solution      : "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.

--feature-gates=RotateKubeletServerCertificate=true

Impact:

None

Default Value:

By default, RotateKubeletServerCertificate is not set.

References:

https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#approval-controller

https://github.com/kubernetes/features/issues/267

https://github.com/kubernetes/kubernetes/pull/45059

https://kubernetes.io/docs/admin/kube-controller-manager/"
          reference     : "800-53|CM-3(6),CSCv6|14.2,CSCv7|14.4,CSF|PR.IP-1,CSF|PR.IP-3,ISO/IEC-27001|A.10.1.1,LEVEL|2S"
          see_also      : "https://workbench.cisecurity.org/files/2662"
          cmd           : "ps -ef | grep kube-controller-manager | grep -v grep"
          expect        : "--feature-gates=[A-z,=]*RotateKubeletServerCertificate=true[A-z,=]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if API Server is running"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "etcd[2]?[\\s]"
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <report type:"WARNING">
          description : "2.7 Ensure that a unique Certificate Authority is used for etcd"
          info        : "Use a different certificate authority for etcd from the one used for Kubernetes.

Rationale:

etcd is a highly available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. Its access should be restricted to specifically designated clients and peers only.

Authentication to etcd is based on whether the certificate presented was issued by a trusted certificate authority. There is no checking of certificate attributes such as common name or subject alternative name. As such, if any attackers were able to gain access to any certificate issued by the trusted certificate authority, they would be able to gain full access to the etcd database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Follow the etcd documentation and create a dedicated certificate authority setup for the etcd service.
Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and set the below parameter.

--trusted-ca-file=</path/to/ca-file>

Impact:

Additional management of the certificates and keys for the dedicated certificate authority will be required.

Default Value:

By default, no etcd certificate is created and used.

References:

https://coreos.com/etcd/docs/latest/op-guide/security.html"
          reference   : "CSCv6|9,CSCv7|9,LEVEL|2NS"
          see_also    : "https://workbench.cisecurity.org/files/2662"
        </report>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.1 Client certificate authentication should not be used for users"
          info          : "Kubernetes provides the option to use client certificates for user authentication. However as there is no way to revoke these certificates when a user leaves an organization or loses their credential, they are not suitable for this purpose.

It is not possible to fully disable client certificate use within a cluster as it is used for component to component authentication.

Rationale:

With any authentication mechanism the ability to revoke credentials if they are compromised or no longer required, is a key control. Kubernetes client certificate authentication does not allow for this due to a lack of support for certificate revocation.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution      : "Alternative mechanisms provided by Kubernetes such as the use of OIDC should be implemented in place of client certificates.

Impact:

External mechanisms for authentication generally require additional software to be deployed.

Default Value:

Client certificate authentication is enabled by default.

Notes:

The lack of certificate revocation was flagged up as a high risk issue in the recent Kubernetes security audit. Without this feature, client certificate authentication is not suitable for end users."
          reference     : "800-171|3.5.2,800-53|IA-5,CSCv7|14.8,CSF|PR.AC-1,ITSG-33|IA-5,LEVEL|2NS,NESA|T5.2.3"
          see_also      : "https://workbench.cisecurity.org/files/2662"
          cmd           : "ps -ef | grep kube-apiserver | grep -v grep"
          expect        : "^((?!--client-ca-file).)*$"
          dont_echo_cmd : YES
          severity      : MEDIUM
        </custom_item>

        <if>
          <condition type:"AND">
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "3.2.2 Ensure that the audit policy covers key security concerns"
              cmd           : "ps -ef | grep kube-apiserver | grep -v grep"
# Note: Variable @AUDIT_POLICY_FILE@ replaced with "/etc/kubernetes/kubernetes-audit-policy.yml" in field "expect".
              expect        : "--audit-policy-file=/etc/kubernetes/kubernetes-audit-policy.yml([\\s]|$)"
              dont_echo_cmd : YES
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "3.2.2 Ensure that the audit policy covers key security concerns"
              info        : "Ensure that the audit policy created for the cluster covers key security concerns.

Rationale:

Security audit logs should cover access and modification of key resources in the cluster, to enable them to form an effective part of a security environment.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution    : "Consider modification of the audit policy in use on the cluster to include these items, at a minimum.

Impact:

Increasing audit logging will consume resources on the nodes or other log destination.

Default Value:

By default Kubernetes clusters do not log audit information.

References:

https://github.com/k8scop/k8s-security-dashboard/blob/master/configs/kubernetes/adv-audit.yaml

https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#audit-policy

https://github.com/falcosecurity/falco/blob/master/examples/k8s_audit_config/audit-policy.yaml

https://github.com/kubernetes/kubernetes/blob/master/cluster/gce/gci/configure-helper.sh#L735"
              reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-2,CN-L3|8.1.4.3(a),CSCv6|14.6,CSCv7|14.9,CSF|PR.PT-1,ITSG-33|AU-2,LEVEL|2NS,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|AM7,NIAv2|SS30,NIAv2|VL8,SWIFT-CSCv1|6.4"
              see_also    : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @AUDIT_POLICY_FILE@ replaced with "/etc/kubernetes/kubernetes-audit-policy.yml" in field "file".
              file        : "/etc/kubernetes/kubernetes-audit-policy.yml"
              regex       : ".*"
              expect      : "$MANUAL_REVIEW^"
              severity    : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "3.2.2 Ensure that the audit policy covers key security concerns"
              info          : "Ensure that the audit policy created for the cluster covers key security concerns.

Rationale:

Security audit logs should cover access and modification of key resources in the cluster, to enable them to form an effective part of a security environment."
              solution      : "Consider modification of the audit policy in use on the cluster to include these items, at a minimum.

Impact:

Increasing audit logging will consume resources on the nodes or other log destination.

Default Value:

By default Kubernetes clusters do not log audit information.

References:

https://github.com/k8scop/k8s-security-dashboard/blob/master/configs/kubernetes/adv-audit.yaml

https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#audit-policy

https://github.com/falcosecurity/falco/blob/master/examples/k8s_audit_config/audit-policy.yaml

https://github.com/kubernetes/kubernetes/blob/master/cluster/gce/gci/configure-helper.sh#L735"
              reference     : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|14.6,CSCv7|14.9,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|2NS,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
              see_also      : "https://workbench.cisecurity.org/files/2662"
              cmd           : "ps -ef | grep kube-apiserver | grep -v grep"
# Note: Variable @AUDIT_POLICY_FILE@ replaced with "/etc/kubernetes/kubernetes-audit-policy.yml" in field "expect".
              expect        : "--audit-policy-file=/etc/kubernetes/kubernetes-audit-policy.yml([\\s]|$)"
              dont_echo_cmd : YES
            </custom_item>
          </else>
        </if>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.2.9 Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture"
          cmd         : "ps -ef | grep kubelet | grep -v grep"
          expect      : "--event-qps="
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "4.2.9 Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture"
          info          : "Security relevant information should be captured. The --event-qps flag on the Kubelet can be used to limit the rate at which events are gathered. Setting this too low could result in relevant events not being logged, however the unlimited setting of 0 could result in a denial of service on the kubelet.

Rationale:

It is important to capture all events and not restrict event creation. Events are an important source of security information and analytics that ensure that your environment is consistently monitored using the event data."
          solution      : "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Setting this parameter to 0 could result in a denial of service condition due to excessive events being created. The cluster's event processing and storage systems should be scaled to handle expected event loads.

Default Value:

By default, --event-qps argument is set to 5.

References:

https://kubernetes.io/docs/admin/kubelet/

https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/apis/kubeletconfig/v1beta1/types.go"
          reference     : "800-171|3.4.2,800-53|SC-5,CSCv6|6,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|2NS,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/2662"
          cmd           : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @EVENT_QPS@ replaced with "0" in field "expect".
          expect        : "--event-qps=0([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>

      <else>
        <if>
          <condition type:"AND">
            <custom_item>
              system      : "Linux"
              type        : CMD_EXEC
              description : "Check if Kubelet config file is used"
              cmd         : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "expect".
              expect      : "--config=/var/lib/kubelet/config.yaml([\\s]|$)"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system      : "Linux"
              type        : FILE_CONTENT_CHECK
              description : "4.2.9 Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture"
              info        : "Security relevant information should be captured. The --event-qps flag on the Kubelet can be used to limit the rate at which events are gathered. Setting this too low could result in relevant events not being logged, however the unlimited setting of 0 could result in a denial of service on the kubelet.

Rationale:

It is important to capture all events and not restrict event creation. Events are an important source of security information and analytics that ensure that your environment is consistently monitored using the event data."
              solution    : "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Setting this parameter to 0 could result in a denial of service condition due to excessive events being created. The cluster's event processing and storage systems should be scaled to handle expected event loads.

Default Value:

By default, --event-qps argument is set to 5.

References:

https://kubernetes.io/docs/admin/kubelet/

https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/apis/kubeletconfig/v1beta1/types.go"
              reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|6,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also    : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBELET_CONFIG_FILE@ replaced with "/var/lib/kubelet/config.yaml" in field "file".
              file        : "/var/lib/kubelet/config.yaml"
              regex       : "^[\\s]*eventRecordQPS[\\s]*:"
# Note: Variable @EVENT_QPS@ replaced with "0" in field "expect".
              expect      : "^[\\s]*eventRecordQPS[\\s]*:[\\s]*0([\\s]|$)"
            </custom_item>
          </then>

          <else>
            <report type:"FAILED">
              description : "4.2.9 Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture"
              info        : "Security relevant information should be captured. The --event-qps flag on the Kubelet can be used to limit the rate at which events are gathered. Setting this too low could result in relevant events not being logged, however the unlimited setting of 0 could result in a denial of service on the kubelet.

Rationale:

It is important to capture all events and not restrict event creation. Events are an important source of security information and analytics that ensure that your environment is consistently monitored using the event data.

NOTE: Nessus has not found the event-qps argument."
              solution    : "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.
If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
Based on your system, restart the kubelet service. For example:

systemctl daemon-reload
systemctl restart kubelet.service

Impact:

Setting this parameter to 0 could result in a denial of service condition due to excessive events being created. The cluster's event processing and storage systems should be scaled to handle expected event loads.

Default Value:

By default, --event-qps argument is set to 5.

References:

https://kubernetes.io/docs/admin/kubelet/

https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/apis/kubeletconfig/v1beta1/types.go"
              reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|6,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also    : "https://workbench.cisecurity.org/files/2662"
            </report>
          </else>
        </if>
      </else>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if kubectl exists"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "file".
          file        : "/usr/bin/kubectl"
        </custom_item>
      </condition>

      <then>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.2.6 Minimize the admission of root containers"
              info          : "Do not generally permit containers to be run as the root user.

Rationale:

Containers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout.

Ideally, all containers should run as a defined non-UID 0 user.

There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container.

If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP."
              solution      : "Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of UIDs not including 0.

Impact:

Pods with containers which run as the root user will not be permitted.

Default Value:

By default, PodSecurityPolicies are not defined.

References:

https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies"
              reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
              cmd           : "/usr/bin/kubectl get psp --kubeconfig /etc/kubernetes/admin.conf -o=custom-columns=name:.metadata.name,rule:.spec.runAsUser.rule,min:.spec.runAsUser.ranges.min"
              expect        : "^.*[\\s](MustRunAs[\\s]+[1-9][0-9]*|MustRunAsNonRoot[\\s]+<none>)$"
              dont_echo_cmd : YES
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.2.6 Minimize the admission of root containers"
              info          : "Do not generally permit containers to be run as the root user.

Rationale:

Containers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout.

Ideally, all containers should run as a defined non-UID 0 user.

There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container.

If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP."
              solution      : "Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of UIDs not including 0.

Impact:

Pods with containers which run as the root user will not be permitted.

Default Value:

By default, PodSecurityPolicies are not defined.

References:

https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies"
              reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get psp -o=custom-columns=name:.metadata.name,rule:.spec.runAsUser.rule,min:.spec.runAsUser.ranges.min"
              expect        : "^.*[\\s](MustRunAs[\\s]+[1-9][0-9]*|MustRunAsNonRoot[\\s]+<none>)$"
              dont_echo_cmd : YES
            </custom_item>
          </else>
        </if>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.2.9 Minimize the admission of containers with capabilities assigned"
              info          : "Do not generally permit containers with capabilities

Rationale:

Containers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user.

In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Review the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.

Impact:

Pods with containers require capabilities to operate will not be permitted.

Default Value:

By default, PodSecurityPolicies are not defined.

References:

https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies

https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/"
              reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
              cmd           : "/usr/bin/kubectl get psp --kubeconfig /etc/kubernetes/admin.conf -o=custom-columns=name:.metadata.name,requiredDropCapabilities:.spec.requiredDropCapabilities"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.2.9 Minimize the admission of containers with capabilities assigned"
              info          : "Do not generally permit containers with capabilities

Rationale:

Containers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user.

In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Review the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.

Impact:

Pods with containers require capabilities to operate will not be permitted.

Default Value:

By default, PodSecurityPolicies are not defined.

References:

https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies

https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/"
              reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get psp -o=custom-columns=name:.metadata.name,requiredDropCapabilities:.spec.requiredDropCapabilities"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.3.2 Ensure that all Namespaces have Network Policies defined"
              info          : "Use network policies to isolate traffic in your cluster network.

Rationale:

Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints.

Network Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow the documentation and create NetworkPolicy objects as you need them.

Impact:

Once network policies are in use within a given namespace, traffic not explicitly allowed by a network policy will be denied. As such it is important to ensure that, when introducing network policies, legitimate traffic is not blocked.

Default Value:

By default, network policies are not created.

References:

https://kubernetes.io/docs/concepts/services-networking/networkpolicies/

https://octetz.com/posts/k8s-network-policy-apis

https://kubernetes.io/docs/tasks/configure-pod-container/declare-network-policy/"
              reference     : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(21),CSCv6|14.1,CSCv7|14.1,CSCv7|14.2,CSF|PR.AC-5,CSF|PR.DS-5,LEVEL|2S,NESA|T4.5.3,NIAv2|VL6"
              see_also      : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
              cmd           : "/usr/bin/kubectl get networkpolicy --namespace=kube-system --kubeconfig /etc/kubernetes/admin.conf"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.3.2 Ensure that all Namespaces have Network Policies defined"
              info          : "Use network policies to isolate traffic in your cluster network.

Rationale:

Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints.

Network Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow the documentation and create NetworkPolicy objects as you need them.

Impact:

Once network policies are in use within a given namespace, traffic not explicitly allowed by a network policy will be denied. As such it is important to ensure that, when introducing network policies, legitimate traffic is not blocked.

Default Value:

By default, network policies are not created.

References:

https://kubernetes.io/docs/concepts/services-networking/networkpolicies/

https://octetz.com/posts/k8s-network-policy-apis

https://kubernetes.io/docs/tasks/configure-pod-container/declare-network-policy/"
              reference     : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(21),CSCv6|14.1,CSCv7|14.1,CSCv7|14.2,CSF|PR.AC-5,CSF|PR.DS-5,LEVEL|2S,NESA|T4.5.3,NIAv2|VL6"
              see_also      : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get networkpolicy --namespace=kube-system"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>
      </then>
    </if>

    <report type:"WARNING">
      description : "5.4.2 Consider external secret storage"
      info        : "Consider the use of an external secrets storage and management system, instead of using Kubernetes Secrets directly, if you have more complex secret management needs. Ensure the solution requires authentication to access secrets, has auditing of access to and use of secrets, and encrypts secrets. Some solutions also make it easier to rotate secrets.

Rationale:

Kubernetes supports secrets as first-class objects, but care needs to be taken to ensure that access to secrets is carefully limited. Using an external secrets provider can ease the management of access to secrets, especially where secrests are used across both Kubernetes and non-Kubernetes environments.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Refer to the secrets management options offered by your cloud provider or a third-party secrets management solution.

Impact:

None

Default Value:

By default, no external secret management is configured."
      reference   : "CSCv7|14.8,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2662"
    </report>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "5.7.2 Ensure that the seccomp profile is set to docker/default in your pod definitions"
      info        : "Enable docker/default seccomp profile in your pod definitions.

Rationale:

Seccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container."
      solution    : "Seccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing '--feature-gates=AllAlpha=true' argument.
Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to '--feature-gates=AllAlpha=true'

KUBE_API_ARGS='--feature-gates=AllAlpha=true'

Based on your system, restart the kube-apiserver service. For example:

systemctl restart kube-apiserver.service

Use annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:

apiVersion: v1
kind: Pod
metadata:
  name: trustworthy-pod
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: docker/default
spec:
  containers:
    - name: trustworthy-container
      image: sotrustworthy:latest

Impact:

If the docker/default seccomp profile is too restrictive for you, you would have to create/manage your own seccomp profiles. Also, you need to enable all alpha features for this to work. There is no individual switch to turn on this feature.

Default Value:

By default, seccomp profile is set to unconfined which means that no seccomp profiles are enabled.

References:

https://github.com/kubernetes/kubernetes/issues/39845

https://github.com/kubernetes/kubernetes/pull/21790

https://github.com/kubernetes/community/blob/master/contributors/design-proposals/seccomp.md#examples

https://docs.docker.com/engine/security/seccomp/"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @APISERVER_FILE@ replaced with "/etc/kubernetes/manifests/kube-apiserver.yaml" in field "file".
      file        : "/etc/kubernetes/manifests/kube-apiserver.yaml"
      regex       : "seccomp"
      expect      : "seccomp.security.alpha.kubernetes.io/pod[\\s]*:[\\s]*docker/default"
    </custom_item>

    <report type:"WARNING">
      description : "5.7.3 Apply Security Context to Your Pods and Containers"
      info        : "Apply Security Context to Your Pods and Containers

Rationale:

A security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.

Impact:

If you incorrectly apply security contexts, you may have trouble running the pods.

Default Value:

By default, no security contexts are automatically applied to pods.

References:

https://kubernetes.io/docs/concepts/policy/security-context/

https://learn.cisecurity.org/benchmarks"
      reference   : "CSCv6|3,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2662"
    </report>

    <report type:"WARNING">
      description : "5.5.1 Configure Image Provenance using ImagePolicyWebhook admission controller"
      info        : "Configure Image Provenance for your deployment.

Rationale:

Kubernetes supports plugging in provenance rules to accept or reject the images in your deployments. You could configure such rules to ensure that only approved images are deployed in the cluster.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Follow the Kubernetes documentation and setup image provenance.

Impact:

You need to regularly maintain your provenance configuration based on container image updates.

Default Value:

By default, image provenance is not set.

References:

https://kubernetes.io/docs/admin/admission-controllers/#imagepolicywebhook

https://github.com/kubernetes/community/blob/master/contributors/design-proposals/image-provenance.md

https://hub.docker.com/r/dnurmi/anchore-toolbox/

https://github.com/kubernetes/kubernetes/issues/22888"
      reference   : "CSCv6|18,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2662"
    </report>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if kubectl exists"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "file".
          file        : "/usr/bin/kubectl"
        </custom_item>
      </condition>

      <then>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "file".
              file        : "/etc/kubernetes/admin.conf"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.7.4 The default namespace should not be used"
              info          : "Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.

Rationale:

Resources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.

Impact:

None

Default Value:

Unless a namespace is specific on object creation, the default namespace will be used"
              reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|2S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also      : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
# Note: Variable @KUBECONFIG@ replaced with "/etc/kubernetes/admin.conf" in field "cmd".
              cmd           : "/usr/bin/kubectl get all --kubeconfig /etc/kubernetes/admin.conf"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "5.7.4 The default namespace should not be used"
              info          : "Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.

Rationale:

Resources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.

Impact:

None

Default Value:

Unless a namespace is specific on object creation, the default namespace will be used"
              reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|2S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
              see_also      : "https://workbench.cisecurity.org/files/2662"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/bin" in field "cmd".
              cmd           : "/usr/bin/kubectl get all"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>
      </then>
    </if>
  </then>
</if>

</check_type>
