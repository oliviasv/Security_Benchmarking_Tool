#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.7 $
# $Date: 2020/07/14 $
#
# description : This document implements the security configuration as recommended by the
#               CIS Kubernetes Benchmark v1.1.0
#
#               https://workbench.cisecurity.org/files/1738
#
#<ui_metadata>
#<display_name>CIS Kubernetes 1.7.0 Benchmark v1.1.0 L1</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Kubernetes 1.7.0 L1</name>
#  <version>1.1.0</version>
#  <link>https://workbench.cisecurity.org/files/1738</link>
#</spec>
#<labels>kubernetes,kubernetes_1.7.0,agent,unix</labels>
#<benchmark_refs>LEVEL,CSCv6</benchmark_refs>
#<variables>
#  <variable>
#    <name>APISERVER_FILE</name>
#    <default>/etc/kubernetes/apiserver</default>
#    <description>API Server Config File</description>
#    <info>The apiserver file controls various parameters that set the behavior of the API server.</info>
#  </variable>
#  <variable>
#    <name>AUDIT_LOG_MAXAGE</name>
#    <default>30</default>
#    <description>Audit Log Maximum Age</description>
#    <info>The maximum number of days to retain old audit log files based on the timestamp encoded in their filename.</info>
#  </variable>
#  <variable>
#    <name>AUDIT_LOG_MAXBACKUP</name>
#    <default>10</default>
#    <description>Audit Log Maximum Backups</description>
#    <info>The maximum number of old audit log files to retain.</info>
#  </variable>
#  <variable>
#    <name>AUDIT_LOG_MAXSIZE</name>
#    <default>100</default>
#    <description>Audit Log Maximum Size</description>
#    <info>The maximum size in megabytes of the audit log file before it gets rotated.</info>
#  </variable>
#  <variable>
#    <name>AUDIT_LOG_PATH</name>
#    <default>/var/log/apiserver/audit.log</default>
#    <description>Audit Log Path</description>
#    <info>All requests coming to the apiserver will be logged to this file.  '-' means standard out.</info>
#  </variable>
#  <variable>
#    <name>CERT_FILE</name>
#    <default>/etc/kubernetes/pki/etcd.crt</default>
#    <description>Etcd Certificate File</description>
#    <info>Certificate used for SSL/TLS connections to etcd.</info>
#  </variable>
#  <variable>
#    <name>CLIENT_CA_FILE</name>
#    <default>/etc/kubernetes/pki/ca.crt</default>
#    <description>Client CA File</description>
#    <info>Any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.</info>
#  </variable>
#  <variable>
#    <name>CONFIG_FILE</name>
#    <default>/etc/kubernetes/config</default>
#    <description>Worker Node Config File</description>
#    <info>The config file controls various parameters that set the behavior of various components of the worker node.</info>
#  </variable>
#  <variable>
#    <name>ETCD_CAFILE</name>
#    <default>/etc/kubernetes/pki/etcd-ca.crt</default>
#    <description>Etcd Certificate Authority File</description>
#    <info>SSL Certificate Authority file used to secure etcd communication.</info>
#  </variable>
#  <variable>
#    <name>ETCD_CERTFILE</name>
#    <default>/etc/kubernetes/pki/etcd.crt</default>
#    <description>Etcd Certification File</description>
#    <info>SSL certification file used to secure etcd communication.</info>
#  </variable>
#  <variable>
#    <name>ETCD_CONF_FILE</name>
#    <default>/etc/kubernetes/manifests/etcd.yaml</default>
#    <description>Etcd Configuration File</description>
#    <info>The etcd.conf file controls various parameters that set the behavior of the etcd service in the master node.</info>
#  </variable>
#  <variable>
#    <name>ETCD_DATA_DIR</name>
#    <default>/var/lib/etcd</default>
#    <description>Etcd Data Directory</description>
#    <info>False</info>
#  </variable>
#  <variable>
#    <name>ETCD_KEYFILE</name>
#    <default>/etc/kubernetes/pki/etcd.key</default>
#    <description>Etcd Key File</description>
#    <info>SSL key file used to secure etcd communication.</info>
#  </variable>
#  <variable>
#    <name>EXPERIMENTAL_ENCRYPTION_PROVIDER_CONFIG</name>
#    <default>/etc/kubernetes/encryption</default>
#    <description>Experimental Encryption Provider Config File</description>
#    <info>The file containing configuration for encryption providers to be used for storing secrets in etcd</info>
#  </variable>
#  <variable>
#    <name>FLANNELD_FILE</name>
#    <default>/etc/cni/net.d/10-flannel.conf</default>
#    <description>Flanneld Configuration File</description>
#    <info>False</info>
#  </variable>
#  <variable>
#    <name>KEY_FILE</name>
#    <default>/etc/kubernetes/pki/etcd.key</default>
#    <description>Key File</description>
#    <info>Key for the certificate</info>
#  </variable>
#  <variable>
#    <name>KUBECTL_PATH</name>
#    <default>/usr/local/bin</default>
#    <description>Path to the kubectl binary</description>
#    <info>This is the directory where the kubectl binary is located.</info>
#  </variable>
#  <variable>
#    <name>KUBELET_CERTIFICATE_AUTHORITY</name>
#    <default>/etc/kubernetes/pki/apiserver-kubelet-ca.crt</default>
#    <description>Kubelet Certification Authority File</description>
#    <info>Path to a cert file for the certificate authority.</info>
#  </variable>
#  <variable>
#    <name>KUBELET_CLIENT_CERTIFICATE</name>
#    <default>/etc/kubernetes/pki/apiserver-kubelet-client.crt</default>
#    <description>Kubelet Client Certificate File</description>
#    <info>Path to a client cert file for TLS.</info>
#  </variable>
#  <variable>
#    <name>KUBELET_CLIENT_KEY</name>
#    <default>/etc/kubernetes/pki/apiserver-kubelet-client.key</default>
#    <description>Kubelet Client Key File</description>
#    <info>Path to a client key file for TLS.</info>
#  </variable>
#  <variable>
#    <name>KUBELET_FILE</name>
#    <default>/etc/kubernetes/kubelet</default>
#    <description>Kubelet Config File</description>
#    <info>The kubelet file controls various parameters that set the behavior of the kubelet service in the worker node.</info>
#  </variable>
#  <variable>
#    <name>PEER_CERT_FILE</name>
#    <default>/etc/kubernetes/pki/etcd-peer.crt</default>
#    <description>Peer Certificate File</description>
#    <info>Path to the peer server TLS cert file.</info>
#  </variable>
#  <variable>
#    <name>PEER_KEY_FILE</name>
#    <default>/etc/kubernetes/pki/etcd-peer.key</default>
#    <description>Peer Key File</description>
#    <info>Path to the peer server TLS key file.</info>
#  </variable>
#  <variable>
#    <name>PROXY_FILE</name>
#    <default>/etc/kubernetes/proxy</default>
#    <description>Proxy File</description>
#    <info>The proxy file controls various parameters that set the behavior of the kube-proxy service in the worker node.</info>
#  </variable>
#  <variable>
#    <name>ROOT_CA_FILE</name>
#    <default>/etc/kubernetes/pki/ca.crt</default>
#    <description>Root Certificate Authority File</description>
#    <info>The root certificate authority will be included in service account's token secret.</info>
#  </variable>
#  <variable>
#    <name>SCHEDULER_FILE</name>
#    <default>/etc/kubernetes/scheduler</default>
#    <description>Scheduler Config File</description>
#    <info>The scheduler file controls various parameters that set the behavior of the kube-scheduler service in the master node.</info>
#  </variable>
#  <variable>
#    <name>SERVICE_ACCOUNT_KEY_FILE</name>
#    <default>/etc/kubernetes/pki/sa.pub</default>
#    <description>Service Accout Key File</description>
#    <info>File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify ServiceAccount tokens.</info>
#  </variable>
#  <variable>
#    <name>SERVICE_ACCOUNT_PRIVATE_KEY_FILE</name>
#    <default>/etc/kubernetes/pki/sa.key</default>
#    <description>Service Account Private Key File</description>
#    <info>Filename containing a PEM-encoded private RSA or ECDSA key used to sign service account tokens.</info>
#  </variable>
#  <variable>
#    <name>TERMINATED_POD_GC_THRESHOLD</name>
#    <default>12500</default>
#    <description>Terminated Pod Garbage Collection Threshold</description>
#    <info>Number of terminated pods that can exist before the terminated pod garbage collector starts deleting terminated pods.</info>
#  </variable>
#  <variable>
#    <name>TLS_CERT_FILE</name>
#    <default>/etc/kubernetes/pki/apiserver.crt</default>
#    <description>TLS Certificate File</description>
#    <info>File containing the default x509 Certificate for HTTPS.</info>
#  </variable>
#  <variable>
#    <name>TLS_PRIVATE_KEY_FILE</name>
#    <default>/etc/kubernetes/pki/apiserver.key</default>
#    <description>TLS Private Key File</description>
#    <info>File containing the default x509 private key matching --tls-cert-file.</info>
#  </variable>
#  <variable>
#    <name>WAL_DIR</name>
#    <default>/var/lib/etcd/wal</default>
#    <description>Write Ahead Log Directory</description>
#    <info>Location where etcd will write the write ahead log files to the specified directory instead of data directory.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CHKCONFIG
      description : "Check if kubelet is enabled"
      service     : "kubelet"
      levels      : "2345"
      status      : ON
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "Check if this is a Docker Vessel/Host"
      cmd         : "/usr/bin/docker info"
      expect      : "Containers"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_Kubernetes_v1.1.0_Level_1.audit from CIS Kubernetes Benchmark v1.1.0"
    </report>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if API Server is running"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "apiserver "
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.1 Ensure that the --allow-privileged argument is set to false"
          info          : "Do not allow privileged containers.

Rationale:

The privileged container has all the system capabilities, and it also lifts all the limitations enforced by the device cgroup controller. In other words, the container can then do almost everything that the host can do. This flag exists to allow special use-cases, like running Docker within Docker and hence should be avoided for production workloads."
          solution      : "Edit the `/etc/kubernetes/config` file on the master node and set the `KUBE_ALLOW_PRIV` parameter to `'--allow-privileged=false'`: `KUBE_ALLOW_PRIV='--allow-privileged=false'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

You will not be able to run any privileged containers.

Note: A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Care should be taken in ensuring that the use of such plugins is minimized and in particular any use of privileged containers outside of the kube-system namespace should be scrutinized. Where possible, review the rights required by such plugins to determine if a more fine grained permission set can be applied."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|5,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--allow-privileged=false"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.2 Ensure that the --anonymous-auth argument is set to false"
          info          : "Disable anonymous requests to the API server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the API server. You should rely on authentication to authorize access and disallow anonymous requests."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--anonymous-auth=false'`: `KUBE_API_ARGS='--anonymous-auth=false'`

Based on your system, restart the `kube-apiserver` service. For example, `systemctl restart kube-apiserver.service`

Impact:

Anonymous requests will be rejected."
          reference     : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--anonymous-auth=false"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.3 Ensure that the --basic-auth-file argument is not set"
          info          : "Do not use basic authentication.

Rationale:

Basic authentication uses plaintext credentials for authentication. Currently, the basic authentication credentials last indefinitely, and the password cannot be changed without restarting API server. The basic authentication is currently supported for convenience. Hence, basic authentication should not be used."
          solution      : "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the `/etc/kubernetes/apiserver` file on the master node and remove the `'--basic-auth-file='` argument from the `KUBE_API_ARGS` parameter. Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

You will have to configure and use alternate authentication mechanisms such as tokens and certificates. Username and password for basic authentication could no more be used."
          reference     : "800-171|3.5.10,800-53|IA-5(1),CSCv6|16.14,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,SWIFT-CSCv1|4.1,TBA-FIISB|26.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "^((?!--basic-auth-file).)*$"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.4 Ensure that the --insecure-allow-any-token argument is not set"
          info          : "Do not allow any insecure tokens

Rationale:

Accepting insecure tokens would allow any token without actually authenticating anything. User information is parsed from the token and connections are allowed."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and remove the `--insecure-allow-any-token` argument from the `KUBE_API_ARGS` parameter. Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|16,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "^((?!--insecure-allow-any-token).)*$"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.5 Ensure that the --kubelet-https argument is set to true"
          info          : "Use https for kubelet connections.

Rationale:

Connections from apiserver to kubelets could potentially carry sensitive data such as secrets and keys. It is thus important to use in-transit encryption for any communication between the apiserver and kubelets."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and remove the `--kubelet-https` argument from the `KUBE_API_ARGS` parameter. Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

You require TLS to be configured on apiserver as well as kubelets."
          reference     : "800-171|3.13.8,800-53|SC-8(1),CSCv6|14.2,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "(--kubelet-https=true|^((?!--kubelet-https).)*$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.6 Ensure that the --insecure-bind-address argument is not set"
          info          : "Do not bind to non-loopback insecure addresses.

Rationale:

If you bind the apiserver to an insecure address, basically anyone who could connect to it over the insecure port, would have unauthenticated and unencrypted access to your master node. The apiserver doesn't do any authentication checking for insecure binds and neither the insecure traffic is encrypted. Hence, you should not bind the apiserver to an insecure address."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and remove the `--insecure-bind-address` argument from the `KUBE_API_ADDRESS` parameter. Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "(--insecure-bind-address=127.0.0.1|^((?!--insecure-bind-address).)*$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.7 Ensure that the --insecure-port argument is set to 0"
          info          : "Do not bind to insecure port.

Rationale:

Setting up the apiserver to serve on an insecure port would allow unauthenticated and unencrypted access to your master node. It is assumed that firewall rules are set up such that this port is not reachable from outside of the cluster. But, as a defense in depth measure, you should not use an insecure port."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set `--insecure-port=0` in the `KUBE_API_PORT` parameter. Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

All components that use the API must connect via the secured port, authenticate themselves, and be authorized to use the API. This includes: - kube-controller-manager - kube-proxy - kube-scheduler - kubelets"
          reference     : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--insecure-port=0([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.8 Ensure that the --secure-port argument is not set to 0"
          info          : "Do not disable the secure port.

Rationale:

The secure port is used to serve https with authentication and authorization. If you disable it, no https traffic is served and all traffic is served unencrypted."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and either remove the `--secure-port` argument from the `KUBE_API_ARGS` parameter or set it to a different desired port. Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

You need to set the apiserver up with the right TLS certificates."
          reference     : "800-171|3.13.8,800-53|SC-8(1),CSCv6|14.2,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "(--secure-port=[1-9]|^((?!--secure-port).)*$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.9 Ensure that the --profiling argument is set to false"
          info          : "Disable profiling, if not needed.

Rationale:

Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--profiling=false'`: `KUBE_API_ARGS='--profiling=false'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

Profiling information would not be available."
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--profiling=false"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.10 Ensure that the --repair-malformed-updates argument is set to false"
          info          : "Disable fixing of malformed updates.

Rationale:

The apiserver will potentially attempt to fix the update requests to pass the validation even if the requests are malformed. Malformed requests are one of the potential ways to interact with a service without legitimate information. Such requests could potentially be used to sabotage apiserver responses."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--repair-malformed-updates=false'`: `KUBE_API_ARGS='--repair-malformed-updates=false'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

Malformed requests from clients would be rejected."
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--repair-malformed-updates=false"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.11 Ensure that the admission control policy is not set to AlwaysAdmit"
          info          : "Do not allow all requests.

Rationale:

Setting admission control policy to `AlwaysAdmit` allows all requests and do not filter any requests."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_ADMISSION_CONTROL` parameter to a value that does not include `AlwaysAdmit`. Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

Only requests explicitly allowed by the admissions control policy would be served."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--admission-control=((?!AlwaysAdmit).)*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.12 Ensure that the admission control policy is set to AlwaysPullImages"
          info          : "Always pull images.

Rationale:

Setting admission control policy to `AlwaysPullImages` forces every new pod to pull the required images every time. In a multitenant cluster users can be assured that their private images can only be used by those who have the credentials to pull them. Without this admisssion control policy, once an image has been pulled to a node, any pod from any user can use it simply by knowing the image's name, without any authorization check against the image ownership. When this plug-in is enabled, images are always pulled prior to starting containers, which means valid credentials are required."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_ADMISSION_CONTROL` parameter to `'--admission-control=...,AlwaysPullImages,...'`: `KUBE_ADMISSION_CONTROL='--admission-control=...,AlwaysPullImages,...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

Credentials would be required to pull the private images every time. Also, in trusted environments, this might increases load on network, registry, and decreases speed."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--admission-control=[A-z,]*AlwaysPullImages[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.13 Ensure that the admission control policy is set to DenyEscalatingExec"
          info          : "Deny execution of `exec` and `attach` commands in privileged pods.

Rationale:

Setting admission control policy to `DenyEscalatingExec` denies `exec` and `attach` commands to pods that run with escalated privileges that allow host access. This includes pods that run as privileged, have access to the host IPC namespace, and have access to the host PID namespace."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_ADMISSION_CONTROL` parameter to `'--admission-control=...,DenyEscalatingExec,...'`: `KUBE_ADMISSION_CONTROL='--admission-control=...,DenyEscalatingExec,...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

`exec` and `attach` commands will not work in privileged pods."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--admission-control=[A-z,]*DenyEscalatingExec[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.14 Ensure that the admission control policy is set to SecurityContextDeny"
          info          : "Restrict pod level SecurityContext customization. Instead of using a customized SecurityContext for your pods, use a Pod Security Policy (PSP), which is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access.

Rationale:

Setting admission control policy to `SecurityContextDeny` denies the pod level SecurityContext customization. Any attempts to customize the SecurityContexts that are not explicitly defined in the Pod Security Policy (PSP) are blocked. This ensures that all the pods adhere to the PSP defined by your organization and you have a uniform pod level security posture."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_ADMISSION_CONTROL` parameter to `'--admission-control=...,SecurityContextDeny,...'`: `KUBE_ADMISSION_CONTROL='--admission-control=...,SecurityContextDeny,...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|5.1,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--admission-control=[A-z,]*SecurityContextDeny[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.15 Ensure that the admission control policy is set to NamespaceLifecycle"
          info          : "Reject creating objects in a namespace that is undergoing termination.

Rationale:

Setting admission control policy to `NamespaceLifecycle` ensures that objects cannot be created in non-existent namespaces, and that namespaces undergoing termination are not used for creating the new objects. This is recommended to enforce the integrity of the namespace termination process and also for the availability of the newer objects."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_ADMISSION_CONTROL` parameter to `'--admission-control=NamespaceLifecycle,...'`: `KUBE_ADMISSION_CONTROL='--admission-control=NamespaceLifecycle,...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--admission-control=[A-z,]*NamespaceLifecycle[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.16 Ensure that the --audit-log-path argument is set as appropriate"
          info          : "Enable auditing on kubernetes apiserver and set the desired audit log path as appropriate.

    Rationale:

    Auditing Kubernetes apiserver provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators or other components of the system. Even though currently, Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by setting an appropriate audit log path."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--audit-log-path='`: `KUBE_API_ARGS='--audit-log-path=/var/log/apiserver/audit.log'`

    Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

    Impact:

    None"
          reference     : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @AUDIT_LOG_PATH@ replaced with "/var/log/apiserver/audit.log" in field "expect".
          expect        : "--audit-log-path=/var/log/apiserver/audit.log([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.17 Ensure that the --audit-log-maxage argument is set to 30 or as appropriate"
          info          : "Retain the logs for at least 30 days or as appropriate.

Rationale:

Retaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--audit-log-maxage=30'`: `KUBE_API_ARGS='--audit-log-maxage=30'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-53|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @AUDIT_LOG_MAXAGE@ replaced with "30" in field "expect".
          expect        : "--audit-log-maxage=30([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.18 Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate"
          info          : "Retain 10 or an appropriate number of old log files.

Rationale:

Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. For example, if you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--audit-log-maxbackup=10'`: `KUBE_API_ARGS='--audit-log-maxbackup=10'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-53|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @AUDIT_LOG_MAXBACKUP@ replaced with "10" in field "expect".
          expect        : "--audit-log-maxbackup=10([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.19 Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate"
          info          : "Rotate log files on reaching 100 MB or as appropriate.

Rationale:

Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. If you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--audit-log-maxsize=100'`: `KUBE_API_ARGS='--audit-log-maxsize=100'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-53|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @AUDIT_LOG_MAXSIZE@ replaced with "100" in field "expect".
          expect        : "--audit-log-maxsize=100([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.20 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
          info          : "Do not always authorize all requests.

Rationale:

The apiserver, by default, allows all requests. You should restrict this behavior to only allow the authorization modes that you explicitly use in your environment. For example, if you don't use REST APIs in your environment, it is a good security best practice to switch off that capability."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to values other than `--authorization-mode=AlwaysAllow`. One such example could be as below: `KUBE_API_ARGS='--authorization-mode=RBAC'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

Only authorized requests will be served."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|9.1,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--authorization-mode=((?!AlwaysAllow).)*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.21 Ensure that the --token-auth-file parameter is not set"
          info          : "Do not use token based authentication.

Rationale:

The token-based authentication utilizes static tokens to authenticate requests to the apiserver. The tokens are stored in clear-text in a file on the apiserver, and cannot be revoked or rotated without restarting the apiserver. Hence, do not use static token-based authentication."
          solution      : "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the `/etc/kubernetes/apiserver` file on the master node and remove the `'--token-auth-file='` argument from the `KUBE_API_ARGS` parameter. Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

You will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used."
          reference     : "800-171|3.5.10,800-53|IA-5(1),CSCv6|16.14,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,SWIFT-CSCv1|4.1,TBA-FIISB|26.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "^((?!--token-auth-file).)*$"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.22 Ensure that the --kubelet-certificate-authority argument is set as appropriate"
          info          : "Verify kubelet's certificate before establishing connection.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks."
          solution      : "Follow the Kubernetes documentation and setup the TLS connection between the apiserver and kubelets. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--kubelet-certificate-authority='`: `KUBE_API_ARGS='--kubelet-certificate-authority='`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

You require TLS to be configured on apiserver as well as kubelets."
          reference     : "800-53|IA-5(2),CSCv6|3.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @KUBELET_CERTIFICATE_AUTHORITY@ replaced with "/etc/kubernetes/pki/apiserver-kubelet-ca.crt" in field "expect".
          expect        : "--kubelet-certificate-authority=/etc/kubernetes/pki/apiserver-kubelet-ca.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.23 Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate - kubelet-client-certificate"
          info          : "Enable certificate based kubelet authentication.

Rationale:

The apiserver, by default, does not authenticate itself to the kubelet's HTTPS endpoints. The requests from the apiserver are treated anonymously. You should set up certificate-based kubelet authentication to ensure that the apiserver authenticates itself to kubelets when submitting requests."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and kubelets. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--kubelet-client-certificate='` and `'--kubelet-client-key='`: `KUBE_API_ARGS='--kubelet-client-certificate= --kubelet-client-key='`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

You require TLS to be configured on apiserver as well as kubelets."
          reference     : "800-53|IA-5(2),CSCv6|3.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @KUBELET_CLIENT_CERTIFICATE@ replaced with "/etc/kubernetes/pki/apiserver-kubelet-client.crt" in field "expect".
          expect        : "--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.23 Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate - kubelet-client-key"
          info          : "Enable certificate based kubelet authentication.

Rationale:

The apiserver, by default, does not authenticate itself to the kubelet's HTTPS endpoints. The requests from the apiserver are treated anonymously. You should set up certificate-based kubelet authentication to ensure that the apiserver authenticates itself to kubelets when submitting requests."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and kubelets. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--kubelet-client-certificate='` and `'--kubelet-client-key='`: `KUBE_API_ARGS='--kubelet-client-certificate= --kubelet-client-key='`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

You require TLS to be configured on apiserver as well as kubelets."
          reference     : "800-53|IA-5(2),CSCv6|3.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @KUBELET_CLIENT_KEY@ replaced with "/etc/kubernetes/pki/apiserver-kubelet-client.key" in field "expect".
          expect        : "--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.24 Ensure that the --service-account-lookup argument is set to true"
          info          : "Validate service account before validating token.

Rationale:

By default, the apiserver only verifies that the authentication token is valid. However, it does not validate that the service account token mentioned in the request is actually present in etcd. This allows using a service account token even after the corresponding service account is deleted. This is an example of time of check to time of use security issue."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--service-account-lookup=true'`: `KUBE_API_ARGS='--service-account-lookup=true'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-53|IA-5(13),CSCv6|16,CSF|PR.AC-1,LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--service-account-lookup=true"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.25 Ensure that the admission control policy is set to PodSecurityPolicy"
          info          : "Reject creating pods that do not match Pod Security Policies.

Rationale:

A Pod Security Policy is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access. The `PodSecurityPolicy` objects define a set of conditions that a pod must run with in order to be accepted into the system. Pod Security Policies are comprised of settings and strategies that control the security features a pod has access to and hence this must be used to control pod access permissions."
          solution      : "Follow the documentation and create Pod Security Policy objects as per your environment. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_ADMISSION_CONTROL` parameter to `'--admission-control=...,PodSecurityPolicy,...'`: `KUBE_ADMISSION_CONTROL='--admission-control=...,PodSecurityPolicy,...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

The policy objects must be created and granted before pod creation would be allowed."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--admission-control=[A-z,]*PodSecurityPolicy[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.26 Ensure that the --service-account-key-file argument is set as appropriate"
          info          : "Explicitly set a service account public key file for service accounts on the apiserver.

Rationale:

By default, if no `--service-account-key-file` is specified to the apiserver, it uses the private key from the TLS serving certificate to verify service account tokens. To ensure that the keys for service account tokens could be rotated as needed, a separate public/private key pair should be used for signing service account tokens. Hence, the public key should be specified to the apiserver with `--service-account-key-file`."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--service-account-key-file='`: `KUBE_API_ARGS='--service-account-key-file='`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

The corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy."
          reference     : "800-53|IA-5(2),CSCv6|3,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @SERVICE_ACCOUNT_KEY_FILE@ replaced with "/etc/kubernetes/pki/sa.pub" in field "expect".
          expect        : "--service-account-key-file=/etc/kubernetes/pki/sa.pub([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.27 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate - etcd-certfile"
          info          : "etcd should be configured to make use of TLS encryption for client connections.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a client certificate and key."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to include `'--etcd-certfile='` and `'--etcd-keyfile='`: `KUBE_API_ARGS='... --etcd-certfile= --etcd-keyfile= ...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

TLS and client certificate authentication must be configured for etcd."
          reference     : "800-53|IA-5(2),CSCv6|9,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @ETCD_CERTFILE@ replaced with "/etc/kubernetes/pki/etcd.crt" in field "expect".
          expect        : "--etcd-certfile=/etc/kubernetes/pki/etcd.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.27 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate - etcd-keyfile"
          info          : "etcd should be configured to make use of TLS encryption for client connections.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a client certificate and key."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to include `'--etcd-certfile='` and `'--etcd-keyfile='`: `KUBE_API_ARGS='... --etcd-certfile= --etcd-keyfile= ...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

TLS and client certificate authentication must be configured for etcd."
          reference     : "800-53|IA-5(2),CSCv6|9,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @ETCD_KEYFILE@ replaced with "/etc/kubernetes/pki/etcd.key" in field "expect".
          expect        : "--etcd-keyfile=/etc/kubernetes/pki/etcd.key([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.28 Ensure that the admission control policy is set to ServiceAccount"
          info          : "Automate service accounts management.

Rationale:

When you create a pod, if you do not specify a service account, it is automatically assigned the `default` service account in the same namespace. You should create your own service account and let the API server manage its security tokens."
          solution      : "Follow the documentation and create `ServiceAccount` objects as per your environment. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_ADMISSION_CONTROL` parameter to `'--admission-control=...,ServiceAccount,...'`: `KUBE_ADMISSION_CONTROL='--admission-control=...,ServiceAccount,...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

The `ServiceAccount` objects must be created and granted before pod creation would be allowed."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|16,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--admission-control=[A-z,]*ServiceAccount[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.29 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-cert-file"
          info          : "Setup TLS connection on the API server.

Rationale:

API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to include `'--tls-cert-file='` and `'--tls-private-key-file='`: `KUBE_API_ARGS='--tls-cert-file= --tls-private-key-file= '`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @TLS_CERT_FILE@ replaced with "/etc/kubernetes/pki/apiserver.crt" in field "expect".
          expect        : "--tls-cert-file=/etc/kubernetes/pki/apiserver.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.29 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-private-key-file"
          info          : "Setup TLS connection on the API server.

Rationale:

API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to include `'--tls-cert-file='` and `'--tls-private-key-file='`: `KUBE_API_ARGS='--tls-cert-file= --tls-private-key-file= '`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @TLS_PRIVATE_KEY_FILE@ replaced with "/etc/kubernetes/pki/apiserver.key" in field "expect".
          expect        : "--tls-private-key-file=/etc/kubernetes/pki/apiserver.key([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.30 Ensure that the --client-ca-file argument is set as appropriate"
          info          : "Setup TLS connection on the API server.

Rationale:

API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic. If `--client-ca-file` argument is set, any request presenting a client certificate signed by one of the authorities in the `client-ca-file` is authenticated with an identity corresponding to the CommonName of the client certificate."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to include `'--client-ca-file='`: `KUBE_API_ARGS='--client-ca-file='`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @CLIENT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "expect".
          expect        : "--client-ca-file=/etc/kubernetes/pki/ca.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.31 Ensure that the --etcd-cafile argument is set as appropriate"
          info          : "etcd should be configured to make use of TLS encryption for client connections.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a SSL Certificate Authority file."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to include `'--etcd-cafile='`: `KUBE_API_ARGS='--etcd-cafile='`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

TLS and client certificate authentication must be configured for etcd."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @ETCD_CAFILE@ replaced with "/etc/kubernetes/pki/etcd-ca.crt" in field "expect".
          expect        : "--etcd-cafile=/etc/kubernetes/pki/etcd-ca.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.32 Ensure that the --authorization-mode argument is set to Node"
          info          : "Restrict kubelet nodes to reading only objects associated with them.

Rationale:

The `Node` authorization mode only allows kubelets to read `Secret`, `ConfigMap`, `PersistentVolume`, and `PersistentVolumeClaim` objects associated with their nodes."
          solution      : "Edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to a value to include `--authorization-mode=Node`. One such example could be as below: `KUBE_API_ARGS='--authorization-mode=Node,RBAC'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|9.1,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--authorization-mode=[A-z,]*Node[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.33 Ensure that the admission control policy is set to NodeRestriction"
          info          : "Limit the `Node` and `Pod` objects that a kubelet could modify.

Rationale:

Using the `NodeRestriction` plug-in ensures that the kubelet is restricted to the `Node` and `Pod` objects that it could modify as defined. Such kubelets will only be allowed to modify their own `Node` API object, and only modify `Pod` API objects that are bound to their node."
          solution      : "Follow the Kubernetes documentation and configure `NodeRestriction` plug-in on kubelets. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_ADMISSION_CONTROL` parameter to `'--admission-control=...,NodeRestriction,...'`: `KUBE_ADMISSION_CONTROL='--admission-control=...,NodeRestriction,...'`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "--admission-control=[A-z,]*NodeRestriction[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.1.34 Ensure that the --experimental-encryption-provider-config argument is set as appropriate"
          info          : "Encrypt etcd key-value store.

Rationale:

etcd is a highly available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted at rest to avoid any disclosures."
          solution      : "Follow the Kubernetes documentation and configure a `EncryptionConfig` file. Then, edit the `/etc/kubernetes/apiserver` file on the master node and set the `KUBE_API_ARGS` parameter to `'--experimental-encryption-provider-config='`: `KUBE_API_ARGS='--experimental-encryption-provider-config='`

Based on your system, restart the `kube-apiserver` service. For example: `systemctl restart kube-apiserver.service`

Impact:

None"
          reference     : "800-171|3.13.16,800-53|SC-28,CSCv6|14.5,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
# Note: Variable @EXPERIMENTAL_ENCRYPTION_PROVIDER_CONFIG@ replaced with "/etc/kubernetes/encryption" in field "expect".
          expect        : "--experimental-encryption-provider-config=/etc/kubernetes/encryption([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK_NOT
          description : "1.1.35 Ensure that the encryption provider is set to aescbc"
          info        : "Use `aescbc` encryption provider.

Rationale:

`aescbc` is currently the strongest encryption provider, It should be preferred over other providers."
          solution    : "Follow the Kubernetes documentation and configure a `EncryptionConfig` file. In this file, choose `aescbc` as the encryption provider. For example,

kind: EncryptionConfig
apiVersion: v1
resources:
- resources:
  - secrets
    providers:
    - aescbc:
      keys:
      - name: key1
        secret:

Impact:

None"
          reference   : "800-171|3.13.16,800-53|SC-28,CSCv6|14.5,CSF|PR.DS-1,ITSG-33|SC-28,LEVEL|1S,TBA-FIISB|28.1"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @EXPERIMENTAL_ENCRYPTION_PROVIDER_CONFIG@ replaced with "/etc/kubernetes/encryption" in field "file".
          file        : "/etc/kubernetes/encryption"
          regex       : "^[\\s]*-[\\s]*(secretbox|aesgcm)[\\s]*:"
          expect      : "^[\\s]*-[\\s]*(secretbox|aesgcm)[\\s]*:"
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if Scheduler is running"
          cmd           : "ps -ef | grep 'scheduler ' | grep -v grep"
          expect        : "scheduler "
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.2.1 Ensure that the --profiling argument is set to false"
          info          : "Disable profiling, if not needed.

Rationale:

Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface."
          solution      : "Edit the `/etc/kubernetes/scheduler` file on the master node and set the `KUBE_SCHEDULER_ARGS` parameter to `'--profiling=false'`: `KUBE_SCHEDULER_ARGS='--profiling=false'`

Based on your system, restart the `kube-scheduler` service. For example: `systemctl restart kube-scheduler.service`

Impact:

Profiling information would not be available."
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'scheduler ' | grep -v grep"
          expect        : "--profiling=false"
          dont_echo_cmd : YES
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if Controller Manager is running"
          cmd           : "ps -ef | grep 'controller-manager ' | grep -v grep"
          expect        : "controller-manager "
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.3.1 Ensure that the --terminated-pod-gc-threshold argument is set as appropriate"
          info          : "Activate garbage collector on pod termination, as appropriate.

Rationale:

Garbage collection is important to ensure sufficient resource availability and avoiding degraded performance and availability. In the worst case, the system might crash or just be unusable for a long period of time. The current setting for garbage collection is 12,500 terminated pods which might be too high for your system to sustain. Based on your system resources and tests, choose an appropriate threshold value to activate garbage collection."
          solution      : "Edit the `/etc/kubernetes/controller-manager` file on the master node and set the `KUBE_CONTROLLER_MANAGER_ARGS` parameter to `'--terminated-pod-gc-threshold='`: `KUBE_CONTROLLER_MANAGER_ARGS='--terminated-pod-gc-threshold=10'`

Based on your system, restart the `kube-controller-manager` service. For example: `systemctl restart kube-controller-manager.service`

Impact:

None"
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'controller-manager ' | grep -v grep"
# Note: Variable @TERMINATED_POD_GC_THRESHOLD@ replaced with "12500" in field "expect".
          expect        : "--terminated-pod-gc-threshold=12500([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.3.2 Ensure that the --profiling argument is set to false"
          info          : "Disable profiling, if not needed.

Rationale:

Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface."
          solution      : "Edit the `/etc/kubernetes/controller-manager` file on the master node and set the `KUBE_CONTROLLER_MANAGER_ARGS` parameter to `'--profiling=false'`: `KUBE_CONTROLLER_MANAGER_ARGS='--profiling=false'`

Based on your system, restart the `kube-controller-manager` service. For example: `systemctl restart kube-controller-manager.service`

Impact:

Profiling information would not be available."
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'controller-manager ' | grep -v grep"
          expect        : "--profiling=false"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.3.3 Ensure that the --use-service-account-credentials argument is set to true"
          info          : "Use individual service account credentials for each controller.

Rationale:

The controller manager creates a service account per controller in the `kube-system` namespace, generates a credential for it, and builds a dedicated API client with that service account credential for each controller loop to use. Setting the `--use-service-account-credentials` to `true` runs each control loop within the controller manager using a separate service account credential. When used in combination with RBAC, this ensures that the control loops run with the minimum permissions required to perform their intended tasks."
          solution      : "Edit the `/etc/kubernetes/controller-manager` file on the master node and set the `KUBE_CONTROLLER_MANAGER_ARGS` parameter to `--use-service-account-credentials=true`: `KUBE_CONTROLLER_MANAGER_ARGS='--use-service-account-credentials=true'`

Based on your system, restart the `kube-controller-manager` service. For example: `systemctl restart kube-controller-manager.service`

Impact:

Whatever authorizer is configured for the cluster, it must grant sufficient permissions to the service accounts to perform their intended tasks. When using the RBAC authorizer, those roles are created and bound to the appropriate service accounts in the `kube-system` namespace automatically with default roles and rolebindings that are auto-reconciled on startup. If using other authorization methods (ABAC, Webhook, etc), the cluster deployer is responsible for granting appropriate permissions to the service accounts (the required permissions can be seen by inspecting the `controller-roles.yaml` and `controller-role-bindings.yaml` files for the RBAC roles."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'controller-manager ' | grep -v grep"
          expect        : "--use-service-account-credentials=true"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.3.4 Ensure that the --service-account-private-key-file argument is set as appropriate"
          info          : "Explicitly set a service account private key file for service accounts on the controller manager.

Rationale:

To ensure that keys for service account tokens can be rotated as needed, a separate public/private key pair should be used for signing service account tokens. The private key should be specified to the controller manager with `--service-account-private-key-file` as appropriate."
          solution      : "Edit the `/etc/kubernetes/controller-manager` file on the master node and set the `KUBE_CONTROLLER_MANAGER_ARGS` parameter to `--service-account-private-key-file=`: `KUBE_CONTROLLER_MANAGER_ARGS='--service-account-private-key-file='`

Based on your system, restart the `kube-controller-manager` service. For example: `systemctl restart kube-controller-manager.service`

Impact:

You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy."
          reference     : "800-53|IA-5(2),CSCv6|14,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'controller-manager ' | grep -v grep"
# Note: Variable @SERVICE_ACCOUNT_PRIVATE_KEY_FILE@ replaced with "/etc/kubernetes/pki/sa.key" in field "expect".
          expect        : "--service-account-private-key-file=/etc/kubernetes/pki/sa.key([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.3.5 Ensure that the --root-ca-file argument is set as appropriate"
          info          : "Allow pods to verify the API server's serving certificate before establishing connections.

Rationale:

Processes running within pods that need to contact the API server must verify the API server's serving certificate. Failing to do so could be a subject to man-in-the-middle attacks. Providing the root certificate for the API server's serving certificate to the controller manager with the `--root-ca-file` argument allows the controller manager to inject the trusted bundle into pods so that they can verify TLS connections to the API server."
          solution      : "Edit the `/etc/kubernetes/controller-manager` file on the master node and set the `KUBE_CONTROLLER_MANAGER_ARGS` parameter to include `--root-ca-file=`: `KUBE_CONTROLLER_MANAGER_ARGS='--root-ca-file='`

Based on your system, restart the `kube-controller-manager` service. For example: `systemctl restart kube-controller-manager.service`

Impact:

You need to setup and maintain root certificate authority file."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'controller-manager ' | grep -v grep"
# Note: Variable @ROOT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "expect".
          expect        : "--root-ca-file=/etc/kubernetes/pki/ca.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.3.7 Ensure that the RotateKubeletServerCertificate argument is set to true"
          info          : "Enable kubelet server certificate rotation on controller-manager.

Rationale:

`RotateKubeletServerCertificate` causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself."
          solution      : "Edit the `/etc/kubernetes/controller-manager` file on the master node and set the `KUBE_CONTROLLER_MANAGER_ARGS` parameter to a value to include `'--feature-gates=RotateKubeletServerCertificate=true'`. `KUBE_CONTROLLER_MANAGER_ARGS='--feature-gates=RotateKubeletServerCertificate=true'`

Based on your system, restart the `kube-controller-manager` service. For example: `systemctl restart kube-controller-manager.service`

Impact:

None"
          reference     : "800-53|IA-5(1),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,SWIFT-CSCv1|4.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep 'controller-manager ' | grep -v grep"
          expect        : "RotateKubeletServerCertificate=true"
          dont_echo_cmd : YES
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if API Server is running"
          cmd           : "ps -ef | grep 'apiserver ' | grep -v grep"
          expect        : "apiserver "
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.1 Ensure that the apiserver file permissions are set to 644 or more restrictive"
          info        : "Ensure that the `apiserver` file has permissions of `644` or more restrictive.

Rationale:

The `apiserver` file controls various parameters that set the behavior of the API server. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
          solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chmod 644 /etc/kubernetes/apiserver`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @APISERVER_FILE@ replaced with "/etc/kubernetes/apiserver" in field "file".
          file        : "/etc/kubernetes/apiserver"
          mask        : "133"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.2 Ensure that the apiserver file ownership is set to root:root"
          info        : "Ensure that the `apiserver` file ownership is set to `root:root`.

Rationale:

The `apiserver` file controls various parameters that set the behavior of the API server. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
          solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chown root:root /etc/kubernetes/apiserver`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @APISERVER_FILE@ replaced with "/etc/kubernetes/apiserver" in field "file".
          file        : "/etc/kubernetes/apiserver"
          owner       : "root"
          group       : "root"
        </custom_item>
      </then>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "1.4.3 Ensure that the config file permissions are set to 644 or more restrictive"
      info        : "Ensure that the `config` file has permissions of `644` or more restrictive.

Rationale:

The `config` file controls various parameters that set the behavior of various components of the master node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
      solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chmod 644 /etc/kubernetes/config`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @CONFIG_FILE@ replaced with "/etc/kubernetes/config" in field "file".
      file        : "/etc/kubernetes/config"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "1.4.4 Ensure that the config file ownership is set to root:root"
      info        : "Ensure that the `config` file ownership is set to `root:root`.

Rationale:

The `config` file controls various parameters that set the behavior of various components of the master node. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
      solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chown root:root /etc/kubernetes/config`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @CONFIG_FILE@ replaced with "/etc/kubernetes/config" in field "file".
      file        : "/etc/kubernetes/config"
      owner       : "root"
      group       : "root"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if Scheduler is running"
          cmd           : "ps -ef | grep 'scheduler ' | grep -v grep"
          expect        : "scheduler "
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.5 Ensure that the scheduler file permissions are set to 644 or more restrictive"
          info        : "Ensure that the `scheduler` file has permissions of `644` or more restrictive.

Rationale:

The `scheduler` file controls various parameters that set the behavior of the `kube-scheduler` service in the master node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
          solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chmod 644 /etc/kubernetes/scheduler`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @SCHEDULER_FILE@ replaced with "/etc/kubernetes/scheduler" in field "file".
          file        : "/etc/kubernetes/scheduler"
          mask        : "133"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.6 Ensure that the scheduler file ownership is set to root:root"
          info        : "Ensure that the `scheduler` file ownership is set to `root:root`.

Rationale:

The `scheduler` file controls various parameters that set the behavior of the `kube-scheduler` service in the master node. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
          solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chown root:root /etc/kubernetes/scheduler`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @SCHEDULER_FILE@ replaced with "/etc/kubernetes/scheduler" in field "file".
          file        : "/etc/kubernetes/scheduler"
          owner       : "root"
          group       : "root"
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if etcd is running"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "etcd "
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.7 Ensure that the etcd.conf file permissions are set to 644 or more restrictive"
          info        : "Ensure that the `etcd.conf` file has permissions of `644` or more restrictive.

Rationale:

The `etcd.conf` file controls various parameters that set the behavior of the `etcd` service in the master node. etcd is a highly-available key value store which Kubernetes uses for persistent storage of all of its REST API object. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
          solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chmod 644 /etc/etcd/etcd.conf`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @ETCD_CONF_FILE@ replaced with "/etc/kubernetes/manifests/etcd.yaml" in field "file".
          file        : "/etc/kubernetes/manifests/etcd.yaml"
          mask        : "133"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.8 Ensure that the etcd.conf file ownership is set to root:root"
          info        : "Ensure that the `etcd.conf` file ownership is set to `root:root`.

Rationale:

The `etcd.conf` file controls various parameters that set the behavior of the `etcd` service in the master node. etcd is a highly-available key value store which Kubernetes uses for persistent storage of all of its REST API object. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
          solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chown root:root /etc/etcd/etcd.conf`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @ETCD_CONF_FILE@ replaced with "/etc/kubernetes/manifests/etcd.yaml" in field "file".
          file        : "/etc/kubernetes/manifests/etcd.yaml"
          owner       : "root"
          group       : "root"
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if flanneld file exists"
# Note: Variable @FLANNELD_FILE@ replaced with "/etc/cni/net.d/10-flannel.conf" in field "file".
          file        : "/etc/cni/net.d/10-flannel.conf"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.9 Ensure that the flanneld file permissions are set to 644 or more restrictive"
          info        : "Ensure that the `flanneld` file has permissions of `644` or more restrictive.

Rationale:

The `flanneld` file controls various parameters that set the behavior of the `flanneld` service in the master node. Flannel is one of the various options for a simple overlay network. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
          solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chmod 644 /etc/sysconfig/flanneld`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @FLANNELD_FILE@ replaced with "/etc/cni/net.d/10-flannel.conf" in field "file".
          file        : "/etc/cni/net.d/10-flannel.conf"
          mask        : "133"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.10 Ensure that the flanneld file ownership is set to root:root"
          info        : "Ensure that the `flanneld` file ownership is set to `root:root`.

Rationale:

The `flanneld` file controls various parameters that set the behavior of the `flanneld` service in the master node. Flannel is one of the various options for a simple overlay network. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
          solution    : "Run the below command (based on the file location on your system) on the master node. For example, `chown root:root /etc/sysconfig/flanneld`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @FLANNELD_FILE@ replaced with "/etc/cni/net.d/10-flannel.conf" in field "file".
          file        : "/etc/cni/net.d/10-flannel.conf"
          owner       : "root"
          group       : "root"
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if etcd is running"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "etcd "
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.11 Ensure that the etcd data directory permissions are set to 700 or more restrictive"
          info        : "Ensure that the etcd data directory has permissions of `700` or more restrictive.

Rationale:

etcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should not be readable or writable by any group members or the world."
          solution    : "On the etcd server node, get the etcd data directory, passed as an argument `--data-dir`, from the below command: `ps -ef | grep etcd`

Run the below command (based on the etcd data directory found above). For example, `chmod 700 /var/lib/etcd/default.etcd`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @ETCD_DATA_DIR@ replaced with "/var/lib/etcd" in field "file".
          file        : "/var/lib/etcd"
          mask        : "077"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CHECK
          description : "1.4.12 Ensure that the etcd data directory ownership is set to etcd:etcd"
          info        : "Ensure that the etcd data directory ownership is set to `etcd:etcd`.

Rationale:

etcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should be owned by `etcd:etcd`."
          solution    : "On the etcd server node, get the etcd data directory, passed as an argument `--data-dir`, from the below command: `ps -ef | grep etcd` Run the below command (based on the etcd data directory found above). For example, `chown etcd:etcd /var/lib/etcd/default.etcd`

Impact:

None"
          reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @ETCD_DATA_DIR@ replaced with "/var/lib/etcd" in field "file".
          file        : "/var/lib/etcd"
          owner       : "etcd"
          group       : "etcd"
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if etcd is running"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "etcd "
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.1 Ensure that the --cert-file and --key-file arguments are set as appropriate - cert-file"
          info          : "Configure TLS encryption for the etcd service.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit."
          solution      : "Follow the etcd service documentation and configure TLS encryption.

Impact:

Client connections only over TLS would be served."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
# Note: Variable @CERT_FILE@ replaced with "/etc/kubernetes/pki/etcd.crt" in field "expect".
          expect        : "--cert-file=/etc/kubernetes/pki/etcd.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.1 Ensure that the --cert-file and --key-file arguments are set as appropriate - key-file"
          info          : "Configure TLS encryption for the etcd service.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit."
          solution      : "Follow the etcd service documentation and configure TLS encryption.

Impact:

Client connections only over TLS would be served."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
# Note: Variable @KEY_FILE@ replaced with "/etc/kubernetes/pki/etcd.key" in field "expect".
          expect        : "--key-file=/etc/kubernetes/pki/etcd.key([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.2 Ensure that the --client-cert-auth argument is set to true"
          info          : "Enable client authentication on etcd service.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service."
          solution      : "Edit the etcd envrironment file (for example, `/etc/etcd/etcd.conf`) on the etcd server node and set the `ETCD_CLIENT_CERT_AUTH` parameter to `'true'`: `ETCD_CLIENT_CERT_AUTH='true'`

Edit the etcd startup file (for example, `/etc/systemd/system/multi-user.target.wants/etcd.service`) and configure the startup parameter for `--client-cert-auth` and set it to `\'${ETCD_CLIENT_CERT_AUTH}\'`: `ExecStart=/bin/bash -c 'GOMAXPROCS=$(nproc) /usr/bin/etcd --name=\'${ETCD_NAME}\' --data-dir=\'${ETCD_DATA_DIR}\' --listen-client-urls=\'${ETCD_LISTEN_CLIENT_URLS}\' --client-cert-auth=\'${ETCD_CLIENT_CERT_AUTH}\''`

Based on your system, reload the daemon and restart the `etcd` service. For example, `systemctl daemon-reload systemctl restart etcd.service`

Impact:

All clients attempting to access the etcd server will require a valid client certificate."
          reference     : "800-53|IA-5(2),CSCv6|14,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "--client-cert-auth=true"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.3 Ensure that the --auto-tls argument is not set to true"
          info          : "Do not use self-signed certificates for TLS.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service."
          solution      : "Edit the etcd environment file (for example, `/etc/etcd/etcd.conf`) on the etcd server node and comment out the `ETCD_AUTO_TLS` parameter. `#ETCD_AUTO_TLS='true'`

Edit the etcd startup file (for example, `/etc/systemd/system/multi-user.target.wants/etcd.service`) and remove the startup parameter for `--auto-tls`. Based on your system, reload the daemon and restart the `etcd` service. For example, `systemctl daemon-reload systemctl restart etcd.service`

Impact:

Clients will not be able to use self-signed certificates for TLS."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "^((?!--auto-tls=true).)*$"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.4 Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate - peer-cert-file"
          info          : "etcd should be configured to make use of TLS encryption for peer connections.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit and also amongst peers in the etcd clusters."
          solution      : "Follow the etcd service documentation and configure peer TLS encryption as appropriate for your etcd cluster.

Impact:

etcd cluster peers would need to set up TLS for their communication."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
# Note: Variable @PEER_CERT_FILE@ replaced with "/etc/kubernetes/pki/etcd-peer.crt" in field "expect".
          expect        : "--peer-cert-file=/etc/kubernetes/pki/etcd-peer.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.4 Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate - peer-key-file"
          info          : "etcd should be configured to make use of TLS encryption for peer connections.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit and also amongst peers in the etcd clusters.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution      : "Follow the etcd service documentation and configure peer TLS encryption as appropriate for your etcd cluster.

Impact:

etcd cluster peers would need to set up TLS for their communication."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
# Note: Variable @PEER_KEY_FILE@ replaced with "/etc/kubernetes/pki/etcd-peer.key" in field "expect".
          expect        : "--peer-key-file=/etc/kubernetes/pki/etcd-peer.key([\\s]|$)"
          dont_echo_cmd : YES
          severity      : MEDIUM
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.5 Ensure that the --peer-client-cert-auth argument is set to true"
          info          : "etcd should be configured for peer authentication.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster.

Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution      : "Edit the etcd environment file (for example, `/etc/etcd/etcd.conf`) on the etcd server node and set the `ETCD_PEER_CLIENT_CERT_AUTH` parameter to `'true'`: `ETCD_PEER_CLIENT_CERT_AUTH='true'`

Edit the etcd startup file (for example, `/etc/systemd/system/multi-user.target.wants/etcd.service`) and configure the startup parameter for `--peer-client-cert-auth` and set it to `\'${ETCD_PEER_CLIENT_CERT_AUTH}\'`: `ExecStart=/bin/bash -c 'GOMAXPROCS=$(nproc) /usr/bin/etcd --name=\'${ETCD_NAME}\' --data-dir=\'${ETCD_DATA_DIR}\' --listen-client-urls=\'${ETCD_LISTEN_CLIENT_URLS}\' --peer-client-cert-auth=\'${ETCD_PEER_CLIENT_CERT_AUTH}\''`

Based on your system, reload the daemon and restart the etcd service. For example, `systemctl daemon-reload systemctl restart etcd.service`

Impact:

All peers attempting to communicate with the etcd server will require a valid client certificate for authentication."
          reference     : "800-53|IA-5(2),CSCv6|14.4,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "--peer-client-cert-auth=true"
          dont_echo_cmd : YES
          severity      : MEDIUM
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.6 Ensure that the --peer-auto-tls argument is not set to true"
          info          : "Do not use automatically generated self-signed certificates for TLS connections between peers.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster. Hence, do not use self-signed certificates for authentication."
          solution      : "Edit the etcd environment file (for example, `/etc/etcd/etcd.conf`) on the etcd server node and comment out the `ETCD_PEER_AUTO_TLS` parameter: `#ETCD_PEER_AUTO_TLS='true'`

Edit the etcd startup file (for example, `/etc/systemd/system/multi-user.target.wants/etcd.service`) and remove the startup parameter for `--peer-auto-tls`. Based on your system, reload the daemon and restart the etcd service. For example, `systemctl daemon-reload systemctl restart etcd.service`

Impact:

All peers attempting to communicate with the etcd server will require a valid client certificate for authentication."
          reference     : "800-53|IA-5(2),CSCv6|14,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "^((?!--peer-auto-tls=true).)*$"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.7 Ensure that the --wal-dir argument is set as appropriate"
          info          : "Store etcd logs separately from etcd data.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be mixed with log data. Keeping the log data separate from the etcd data also ensures that those two types of data could individually be safeguarded. Also, you could use a centralized and remote log directory for persistent logging. Additionally, this separation also helps to avoid IO competition between logging and other IO operations."
          solution      : "Edit the etcd environment file (for example, `/etc/etcd/etcd.conf`) on the etcd server node and set the `ETCD_WAL_DIR` parameter as appropriate: `ETCD_WAL_DIR=''`

Edit the etcd startup file (for example, `/etc/systemd/system/multi-user.target.wants/etcd.service`) and configure the startup parameter for `--wal-dir` and set it to `\'${ETCD_WAL_DIR}\'`: `ExecStart=/bin/bash -c 'GOMAXPROCS=$(nproc) /usr/bin/etcd --name=\'${ETCD_NAME}\' --data-dir=\'${ETCD_DATA_DIR}\' --listen-client-urls=\'${ETCD_LISTEN_CLIENT_URLS}\' --wal-dir=\'${ETCD_WAL_DIR}\''`

Based on your system, reload the daemon and restart the etcd service. For example, `systemctl daemon-reload systemctl restart etcd.service`

Impact:

None"
          reference     : "800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv6|14,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
# Note: Variable @WAL_DIR@ replaced with "/var/lib/etcd/wal" in field "expect".
          expect        : "--wal-dir=/var/lib/etcd/wal([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.5.8 Ensure that the --max-wals argument is set to 0"
          info          : "Do not auto rotate logs.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. You should avoid automatic log rotation and instead safeguard the logs in a centralized repository or through a separate log management system."
          solution      : "Edit the etcd environment file (for example, `/etc/etcd/etcd.conf`) on the etcd server node and set the `ETCD_MAX_WALS` parameter to `0`: `ETCD_MAX_WALS='0'`

Edit the etcd startup file (for example, `/etc/systemd/system/multi-user.target.wants/etcd.service`) and configure the startup parameter for `--max-wals` and set it to `\'${ETCD_MAX_WALS}\'`: `ExecStart=/bin/bash -c 'GOMAXPROCS=$(nproc) /usr/bin/etcd --name=\'${ETCD_NAME}\' --data-dir=\'${ETCD_DATA_DIR}\' --listen-client-urls=\'${ETCD_LISTEN_CLIENT_URLS}\' --max-walsr=\'${ETCD_MAX_WALS}\''`

Based on your system, reload the daemon and restart the etcd service. For example, `systemctl daemon-reload systemctl restart etcd.service`

Impact:

You will have to manage log rotation and archiving."
          reference     : "800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv6|6,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "--max-wals=0([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if kubectl exists"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/local/bin" in field "file".
          file        : "/usr/local/bin/kubectl"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.6.1 Ensure that the cluster-admin role is only used where required"
          info          : "The RBAC role `cluster-admin` provides wide-ranging powers over the environment and should be used only where and when needed.

Rationale:

Kubernetes provides a set of default roles where RBAC is used. Some of these roles such as `cluster-admin` provide wide-ranging privileges which should only be applied where absolutely necessary. Roles such as `cluster-admin` allow super-user access to perform any action on any resource. When used in a `ClusterRoleBinding`, it gives full control over every resource in the cluster and in all namespaces. When used in a `RoleBinding`, it gives full control over every resource in the rolebinding's namespace, including the namespace itself.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution      : "Remove any unneeded `clusterrolebindings`: `kubectl delete clusterrolebinding [name]`

Impact:

Care should be taken before removing any `clusterrolebindings` from the environment to ensure they were not required for operation of the cluster. Specifically, modifications should not be made to `clusterrolebindings` with the `system:` prefix as they are required for the operation of system components."
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/local/bin" in field "cmd".
          cmd           : "/usr/local/bin/kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name"
          expect        : "MANUAL_REVIEW"
          dont_echo_cmd : YES
          severity      : MEDIUM
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.6.2 Create Pod Security Policies for your cluster"
          info          : "Create and enforce Pod Security Policies for your cluster.

Rationale:

A Pod Security Policy is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access. The `PodSecurityPolicy` objects define a set of conditions that a pod must run with in order to be accepted into the system. Pod Security Policies are comprised of settings and strategies that control the security features a pod has access to and hence this must be used to control pod access permissions.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution      : "Follow the documentation and create and enforce Pod Security Policies for your cluster. Additionally, you could refer the 'CIS Security Benchmark for Docker' and follow the suggested Pod Security Policies for your environment.

Impact:

Pods must align with the Pod Security Policies enforced on the cluster."
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1NS,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/local/bin" in field "cmd".
          cmd           : "/usr/local/bin/kubectl get psp"
          expect        : "MANUAL_REVIEW"
          dont_echo_cmd : YES
          severity      : MEDIUM
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "1.6.3 Create administrative boundaries between resources using namespaces"
          info          : "Use namespaces to isolate your Kubernetes objects.

Rationale:

Limiting the scope of user permissions can reduce the impact of mistakes or malicious activities. A Kubernetes namespace allows you to partition created resources into logically named groups. Resources created in one namespace can be hidden from other namespaces. By default, each resource created by a user in Kubernetes cluster runs in a default namespace, called `default`. You can create additional namespaces and attach resources and users to them. You can use Kubernetes Authorization plugins to create policies that segregate access to namespace resources between different users.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution      : "Follow the documentation and create namespaces for objects in your deployment as you need them.

Impact:

You need to switch between namespaces for administration."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1NS,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @KUBECTL_PATH@ replaced with "/usr/local/bin" in field "cmd".
          cmd           : "/usr/local/bin/kubectl get namespaces"
          expect        : "MANUAL_REVIEW"
          dont_echo_cmd : YES
          severity      : MEDIUM
        </custom_item>
      </then>

      <else>
        <report type:"WARNING">
          description : "1.6.1 Ensure that the cluster-admin role is only used where required"
          info        : "The RBAC role `cluster-admin` provides wide-ranging powers over the environment and should be used only where and when needed.

Rationale:

Kubernetes provides a set of default roles where RBAC is used. Some of these roles such as `cluster-admin` provide wide-ranging privileges which should only be applied where absolutely necessary. Roles such as `cluster-admin` allow super-user access to perform any action on any resource. When used in a `ClusterRoleBinding`, it gives full control over every resource in the cluster and in all namespaces. When used in a `RoleBinding`, it gives full control over every resource in the rolebinding's namespace, including the namespace itself.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Remove any unneeded `clusterrolebindings`: `kubectl delete clusterrolebinding [name]`

Impact:

Care should be taken before removing any `clusterrolebindings` from the environment to ensure they were not required for operation of the cluster. Specifically, modifications should not be made to `clusterrolebindings` with the `system:` prefix as they are required for the operation of system components."
          reference   : "CSCv6|5.1,LEVEL|1NS"
          see_also    : "https://workbench.cisecurity.org/files/1738"
        </report>

        <report type:"WARNING">
          description : "1.6.2 Create Pod Security Policies for your cluster"
          info        : "Create and enforce Pod Security Policies for your cluster.

Rationale:

A Pod Security Policy is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access. The `PodSecurityPolicy` objects define a set of conditions that a pod must run with in order to be accepted into the system. Pod Security Policies are comprised of settings and strategies that control the security features a pod has access to and hence this must be used to control pod access permissions.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Follow the documentation and create and enforce Pod Security Policies for your cluster. Additionally, you could refer the 'CIS Security Benchmark for Docker' and follow the suggested Pod Security Policies for your environment.

Impact:

Pods must align with the Pod Security Policies enforced on the cluster."
          reference   : "CSCv6|3,LEVEL|1NS"
          see_also    : "https://workbench.cisecurity.org/files/1738"
        </report>

        <report type:"WARNING">
          description : "1.6.3 Create administrative boundaries between resources using namespaces"
          info        : "Use namespaces to isolate your Kubernetes objects.

Rationale:

Limiting the scope of user permissions can reduce the impact of mistakes or malicious activities. A Kubernetes namespace allows you to partition created resources into logically named groups. Resources created in one namespace can be hidden from other namespaces. By default, each resource created by a user in Kubernetes cluster runs in a default namespace, called `default`. You can create additional namespaces and attach resources and users to them. You can use Kubernetes Authorization plugins to create policies that segregate access to namespace resources between different users.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Follow the documentation and create namespaces for objects in your deployment as you need them.

Impact:

You need to switch between namespaces for administration."
          reference   : "CSCv6|14,LEVEL|1NS"
          see_also    : "https://workbench.cisecurity.org/files/1738"
        </report>
      </else>
    </if>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.1 Ensure that the --allow-privileged argument is set to false"
      info          : "Do not allow privileged containers.

Rationale:

The privileged container has all the system capabilities, and it also lifts all the limitations enforced by the device cgroup controller. In other words, the container can then do almost everything that the host can do. This flag exists to allow special use-cases, like running Docker within Docker and hence should be avoided for production workloads."
      solution      : "Edit the `/etc/kubernetes/config` file on each node and set the `KUBE_ALLOW_PRIV` parameter to `'--allow-privileged=false'`: `KUBE_ALLOW_PRIV='--allow-privileged=false'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

You will not be able to run any privileged containers.

Note: A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Care should be taken in ensuring that the use of such plugins is minimized and in particular any use of privileged containers outside of the kube-system namespace should be scrutinized. Where possible, review the rights required by such plugins to determine if a more fine grained permission set can be applied."
      reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|5.1,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--allow-privileged=false"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.2 Ensure that the --anonymous-auth argument is set to false"
      info          : "Disable anonymous requests to the Kubelet server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--anonymous-auth=false'`: `KUBELET_ARGS='--anonymous-auth=false'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

Anonymous requests will be rejected."
      reference     : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--anonymous-auth=false"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.3 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
      info          : "Do not allow all requests. Enable explicit authorization.

Rationale:

Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--authorization-mode=Webhook'`: `KUBELET_ARGS='--authorization-mode=Webhook'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

Unauthorized requests will be denied."
      reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--authorization-mode=((?!AlwaysAllow).)*([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.4 Ensure that the --client-ca-file argument is set as appropriate"
      info          : "Enable Kubelet authentication using certificates.

Rationale:

The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests."
      solution      : "Follow the Kubernetes documentation and setup the TLS connection between the apiserver and kubelets. Then, edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--client-ca-file='`: `KUBELET_ARGS='--client-ca-file='`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

You require TLS to be configured on apiserver as well as kubelets."
      reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @CLIENT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "expect".
      expect        : "--client-ca-file=/etc/kubernetes/pki/ca.crt([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.5 Ensure that the --read-only-port argument is set to 0"
      info          : "Disable the read-only port.

Rationale:

The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--read-only-port=0'`: `KUBELET_ARGS='--read-only-port=0'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API."
      reference     : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--read-only-port=0([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.6 Ensure that the --streaming-connection-idle-timeout argument is not set to 0"
      info          : "Do not disable timeouts on streaming connections.

Rationale:

Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports.

Note: By default, `--streaming-connection-idle-timeout` is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--streaming-connection-idle-timeout='`: `KUBELET_ARGS='--streaming-connection-idle-timeout=5m'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

Long-lived connections could be interrupted."
      reference     : "800-53|SC-5,CSCv6|9,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|1S,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--streaming-connection-idle-timeout=[^0]"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.7 Ensure that the --protect-kernel-defaults argument is set to true"
      info          : "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.

Rationale:

Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--protect-kernel-defaults=true'`: `KUBELET_ARGS='--protect-kernel-defaults=true'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

You would have to re-tune kernel parameters to match kubelet parameters."
      reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--protect-kernel-defaults=true"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.8 Ensure that the --make-iptables-util-chains argument is set to true"
      info          : "Allow Kubelet to manage iptables.

Rationale:

Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and remove the `--make-iptables-util-chains` argument from the `KUBELET_ARGS` parameter. Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts."
      reference     : "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),CN-L3|7.1.2.2(c),CSCv6|9,CSF|PR.PT-4,ITSG-33|SC-7(5),LEVEL|1S,NIAv2|GS7b,NIAv2|NS25"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--make-iptables-util-chains=true"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.9 Ensure that the --keep-terminated-pod-volumes argument is set to false"
      info          : "Unmount volumes from the nodes on pod termination.

Rationale:

On pod termination, you should unmount the volumes. Those volumes might have sensitive data that might be exposed if kept mounted on the node without any use. Additionally, such mounted volumes could be modified and later could be mounted on pods. Also, if you retain all mounted volumes for a long time, it might exhaust system resources and you might not be able to mount any more volumes on new pods."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--keep-terminated-pod-volumes=false'`: `KUBELET_ARGS='--keep-terminated-pod-volumes=false'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

Volumes will not be available for debugging."
      reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--keep-terminated-pod-volumes=false"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.10 Ensure that the --hostname-override argument is not set"
      info          : "Do not override node hostnames.

Rationale:

Overriding hostnames could potentially break TLS setup between the kubelet and the apiserver. Additionally, with overridden hostnames, it becomes increasingly difficult to associate logs with a particular node and process them for security analytics. Hence, you should setup your kubelet nodes with resolvable FQDNs and avoid overriding the hostnames with IPs."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_HOSTNAME` parameter to `''`: `KUBELET_HOSTNAME=''`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

Node hostnames should have resolvable FQDNs."
      reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|3,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "^((?!--hostname-override).)*$"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.11 Ensure that the --event-qps argument is set to 0"
      info          : "Do not limit event creation.

Rationale:

It is important to capture all events and not restrict event creation. Events are an important source of security information and analytics that ensure that your environment is consistently monitored using the event data."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--event-qps=0'`: `KUBELET_ARGS='--event-qps=0'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

You might need to scale up your event storage and processing capabilitles."
      reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|6,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--event-qps=0([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.12 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-cert-file"
      info          : "Setup TLS connection on the Kubelets.

Rationale:

Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic."
      solution      : "Follow the Kubernetes documentation and set up the TLS connection on the Kubelet. Then, edit the `/etc/kubernetes/kubelet` file on the master node and set the `KUBELET_ARGS` parameter to include `'--tls-cert-file='` and `'--tls-private-key-file='`: `KUBELET_ARGS='--tls-cert-file= --tls-private-key-file='`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment."
      reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @TLS_CERT_FILE@ replaced with "/etc/kubernetes/pki/apiserver.crt" in field "expect".
      expect        : "--tls-cert-file=/etc/kubernetes/pki/apiserver.crt([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.12 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-private-key-file"
      info          : "Setup TLS connection on the Kubelets.

Rationale:

Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic."
      solution      : "Follow the Kubernetes documentation and set up the TLS connection on the Kubelet. Then, edit the `/etc/kubernetes/kubelet` file on the master node and set the `KUBELET_ARGS` parameter to include `'--tls-cert-file='` and `'--tls-private-key-file='`: `KUBELET_ARGS='--tls-cert-file= --tls-private-key-file='`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment."
      reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
# Note: Variable @TLS_PRIVATE_KEY_FILE@ replaced with "/etc/kubernetes/pki/apiserver.key" in field "expect".
      expect        : "--tls-private-key-file=/etc/kubernetes/pki/apiserver.key([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.13 Ensure that the --cadvisor-port argument is set to 0"
      info          : "Disable cAdvisor.

Rationale:

cAdvisor provides potentially sensitive data and there's currently no way to block access to it using anything other than iptables. It does not require authentication/authorization to connect to the cAdvisor port. Hence, you should disable the port."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to `'--cadvisor-port=0'`: `KUBELET_ARGS='--cadvisor-port=0'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

cAdvisor will not be available directly. You need to work with `/metrics` endpoint on the API server."
      reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|9.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "--cadvisor-port=0([\\s]|$)"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.14 Ensure that the RotateKubeletClientCertificate argument is set to true"
      info          : "Enable kubelet client certificate rotation.

Rationale:

`RotateKubeletClientCertificate` causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to a value to include `'--feature-gates=RotateKubeletClientCertificate=true'`. `KUBELET_ARGS='--feature-gates=RotateKubeletClientCertificate=true'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

None"
      reference     : "800-53|IA-5(1),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,SWIFT-CSCv1|4.1"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "RotateKubeletClientCertificate=true"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "2.1.15 Ensure that the RotateKubeletServerCertificate argument is set to true"
      info          : "Enable kubelet server certificate rotation.

Rationale:

`RotateKubeletServerCertificate` causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself."
      solution      : "Edit the `/etc/kubernetes/kubelet` file on each node and set the `KUBELET_ARGS` parameter to a value to include `'--feature-gates=RotateKubeletServerCertificate=true'`: `KUBELET_ARGS='--feature-gates=RotateKubeletServerCertificate=true'`

Based on your system, restart the `kubelet` service. For example: `systemctl restart kubelet.service`

Impact:

None"
      reference     : "800-53|IA-5(1),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,SWIFT-CSCv1|4.1"
      see_also      : "https://workbench.cisecurity.org/files/1738"
      cmd           : "ps -ef | grep kubelet | grep -v grep"
      expect        : "RotateKubeletServerCertificate=true"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "2.2.1 Ensure that the config file permissions are set to 644 or more restrictive"
      info        : "Ensure that the `config` file has permissions of `644` or more restrictive.

Rationale:

The `config` file controls various parameters that set the behavior of various components of the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example, `chmod 644 /etc/kubernetes/config`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @CONFIG_FILE@ replaced with "/etc/kubernetes/config" in field "file".
      file        : "/etc/kubernetes/config"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "2.2.2 Ensure that the config file ownership is set to root:root"
      info        : "Ensure that the `config` file ownership is set to `root:root`.

Rationale:

The `config` file controls various parameters that set the behavior of various components of the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example, `chown root:root /etc/kubernetes/config`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @CONFIG_FILE@ replaced with "/etc/kubernetes/config" in field "file".
      file        : "/etc/kubernetes/config"
      owner       : "root"
      group       : "root"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "2.2.3 Ensure that the kubelet file permissions are set to 644 or more restrictive"
      info        : "Ensure that the `kubelet` file has permissions of `644` or more restrictive.

Rationale:

The `kubelet` file controls various parameters that set the behavior of the `kubelet` service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example, `chmod 644 /etc/kubernetes/kubelet`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @KUBELET_FILE@ replaced with "/etc/kubernetes/kubelet" in field "file".
      file        : "/etc/kubernetes/kubelet"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "2.2.4 Ensure that the kubelet file ownership is set to root:root"
      info        : "Ensure that the `kubelet` file ownership is set to `root:root`.

Rationale:

The `kubelet` file controls various parameters that set the behavior of the `kubelet` service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example, `chown root:root /etc/kubernetes/kubelet`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @KUBELET_FILE@ replaced with "/etc/kubernetes/kubelet" in field "file".
      file        : "/etc/kubernetes/kubelet"
      owner       : "root"
      group       : "root"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "2.2.5 Ensure that the proxy file permissions are set to 644 or more restrictive"
      info        : "Ensure that the `proxy` file has permissions of `644` or more restrictive.

Rationale:

The `proxy` file controls various parameters that set the behavior of the `kube-proxy` service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example, `chmod 644 /etc/kubernetes/proxy`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @PROXY_FILE@ replaced with "/etc/kubernetes/proxy" in field "file".
      file        : "/etc/kubernetes/proxy"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "2.2.6 Ensure that the proxy file ownership is set to root:root"
      info        : "Ensure that the `proxy` file ownership is set to `root:root`.

Rationale:

The `proxy` file controls various parameters that set the behavior of the `kube-proxy` service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
      solution    : "Run the below command (based on the file location on your system) on the each worker node. For example, `chown root:root /etc/kubernetes/proxy`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @PROXY_FILE@ replaced with "/etc/kubernetes/proxy" in field "file".
      file        : "/etc/kubernetes/proxy"
      owner       : "root"
      group       : "root"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "2.2.7 Ensure that the certificate authorities file permissions are set to 644 or more restrictive"
      info        : "Ensure that the certificate authorities file has permissions of `644` or more restrictive.

Rationale:

The certificate authorities file controls the authorities used to validate API requests. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system."
      solution    : "Run the following command to modify the file permissions of the `--client-ca-file` `chmod 644`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14.4,CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @CLIENT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "file".
      file        : "/etc/kubernetes/pki/ca.crt"
      mask        : "133"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CHECK
      description : "2.2.8 Ensure that the client certificate authorities file ownership is set to root:root"
      info        : "Ensure that the certificate authorities file ownership is set to root:root.

Rationale:

The certificate authorities file controls the authorities used to validate API requests. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`."
      solution    : "Run the following command to modify the ownership of the `--client-ca-file`. `chown root:root`

Impact:

None"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1738"
# Note: Variable @CLIENT_CA_FILE@ replaced with "/etc/kubernetes/pki/ca.crt" in field "file".
      file        : "/etc/kubernetes/pki/ca.crt"
      owner       : "root"
      group       : "root"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if Federation API Server is running"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "federation-apiserver"
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.1 Ensure that the --anonymous-auth argument is set to false"
          info          : "Disable anonymous requests to the federation API server.

Rationale:

When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the federation API server. You should rely on authentication to authorize access and disallow anonymous requests."
          solution      : "Edit the deployment specs and set `--anonymous-auth=false`. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

Anonymous requests will be rejected."
          reference     : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|14,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "--anonymous-auth=false"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.2 Ensure that the --basic-auth-file argument is not set"
          info          : "Do not use basic authentication.

Rationale:

Basic authentication uses plaintext credentials for authentication. Currently, the basic authentication credentials last indefinitely, and the password cannot be changed without restarting the federation API server. The basic authentication is currently supported for convenience. Hence, basic authentication should not be used."
          solution      : "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the deployment specs and remove `'--basic-auth-file='`. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

You will have to configure and use alternate authentication mechanisms such as tokens and certificates. Username and password for basic authentication could no more be used."
          reference     : "800-171|3.5.10,800-53|IA-5(1),CSCv6|16.14,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,SWIFT-CSCv1|4.1,TBA-FIISB|26.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "^((?!--basic-auth-file).)*$"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.3 Ensure that the --insecure-allow-any-token argument is not set"
          info          : "Do not allow any insecure tokens.

Rationale:

Accepting insecure tokens would allow any token without actually authenticating anything. User information is parsed from the token and connections are allowed."
          solution      : "Edit the deployment specs and remove `--insecure-allow-any-token`. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|16,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "^((?!--insecure-allow-any-token).)*$"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.4 Ensure that the --insecure-bind-address argument is not set"
          info          : "Do not bind to insecure addresses.

Rationale:

If you bind the federation apiserver to an insecure address, basically anyone who could connect to it over the insecure port, would have unauthenticated and unencrypted access to it. The federation apiserver doesn't do any authentication checking for insecure binds and neither the insecure traffic is encrypted. Hence, you should not bind the federation apiserver to an insecure address."
          solution      : "Edit the deployment specs and remove `--insecure-bind-address`. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "(--insecure-bind-address=127.0.0.1|^((?!--insecure-bind-address).)*$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.5 Ensure that the --insecure-port argument is set to 0"
          info          : "Do not bind to insecure port.

Rationale:

Setting up the federation apiserver to serve on an insecure port would allow unauthenticated and unencrypted access to it. It is assumed that firewall rules are set up such that this port is not reachable from outside of the cluster. But, as a defense in depth measure, you should not use an insecure port."
          solution      : "Edit the deployment specs and set `--insecure-port=0`. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "--insecure-port=0([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.6 Ensure that the --secure-port argument is not set to 0"
          info          : "Do not disable the secure port.

Rationale:

The secure port is used to serve https with authentication and authorization. If you disable it, no https traffic is served and all traffic is served unencrypted."
          solution      : "Edit the deployment specs and set the `--secure-port` argument to the desired port. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

You need to set the federation apiserver up with the right TLS certificates."
          reference     : "800-171|3.13.8,800-53|SC-8(1),CSCv6|14.2,CSF|PR.DS-2,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|SC-8(1),LEVEL|1S,NESA|T7.4.1,NIAv2|NS5d,NIAv2|NS6b,SWIFT-CSCv1|2.1,TBA-FIISB|29.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "(--secure-port=[1-9]|^((?!--secure-port).)*$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.7 Ensure that the --profiling argument is set to false"
          info          : "Disable profiling, if not needed.

Rationale:

Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface."
          solution      : "Edit the deployment specs and set `'--profiling=false'`: `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

Profiling information would not be available."
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "--profiling=false"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.8 Ensure that the admission control policy is not set to AlwaysAdmit"
          info          : "Do not allow all requests.

Rationale:

Setting admission control policy to `AlwaysAdmit` allows all requests and do not filter any requests."
          solution      : "Edit the deployment specs and set `--admission-control` argument to a value that does not include `AlwaysAdmit`. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

Only requests explicitly allowed by the admissions control policy would be served."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "--admission-control=((?!AlwaysAdmit).)*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.9 Ensure that the admission control policy is set to NamespaceLifecycle"
          info          : "Reject creating objects in a namespace that is undergoing termination.

Rationale:

Setting admission control policy to `NamespaceLifecycle` ensures that the namespaces undergoing termination are not used for creating the new objects. This is recommended to enforce the integrity of the namespace termination process and also for the availability of the newer objects."
          solution      : "Edit the deployment specs and set `--admission-control` argument to a value that includes `NamespaceLifecycle`. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|14,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "--admission-control=[A-z,]*NamespaceLifecycle[A-z,]*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.10 Ensure that the --audit-log-path argument is set as appropriate"
          info          : "Enable auditing on kubernetes federation apiserver and set the desired audit log path as appropriate.

Rationale:

Auditing Kubernetes federation apiserver provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators or other components of the system. Even though currently, Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by setting an appropriate audit log path."
          solution      : "Edit the deployment specs and set `--audit-log-path` argument as appropriate. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv6|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @AUDIT_LOG_PATH@ replaced with "/var/log/apiserver/audit.log" in field "expect".
          expect        : "--audit-log-path=/var/log/apiserver/audit.log([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.11 Ensure that the --audit-log-maxage argument is set to 30 or as appropriate"
          info          : "Retain the logs for at least 30 days or as appropriate.

Rationale:

Retaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements."
          solution      : "Edit the deployment specs and set `--audit-log-maxage` to `30` or as appropriate. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-53|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @AUDIT_LOG_MAXAGE@ replaced with "30" in field "expect".
          expect        : "--audit-log-maxage=30([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.12 Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate"
          info          : "Retain 10 or an appropriate number of old log files.

Rationale:

Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. For example, if you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis."
          solution      : "Edit the deployment specs and set `--audit-log-maxbackup` to `10` or as appropriate. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-53|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @AUDIT_LOG_MAXBACKUP@ replaced with "10" in field "expect".
          expect        : "--audit-log-maxbackup=10([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.13 Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate"
          info          : "Rotate log files on reaching 100 MB or as appropriate.

Rationale:

Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. If you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis."
          solution      : "Edit the deployment specs and set `--audit-log-maxsize=100` to `100` or as appropriate. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-53|AU-4,CSCv6|6.3,CSF|PR.DS-4,CSF|PR.PT-1,ITSG-33|AU-4,LEVEL|1S,NESA|T3.3.1,NESA|T3.6.2"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @AUDIT_LOG_MAXSIZE@ replaced with "100" in field "expect".
          expect        : "--audit-log-maxsize=100([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.14 Ensure that the --authorization-mode argument is not set to AlwaysAllow"
          info          : "Do not always authorize all requests.

Rationale:

The federation apiserver, by default, allows all requests. You should restrict this behavior to only allow the authorization modes that you explicitly use in your environment. For example, if you don't use REST APIs in your environment, it is a good security best practice to switch-off that capability."
          solution      : "Edit the deployment specs and set `--authorization-mode` argument to a value other than `AlwaysAllow` `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

Only authorized requests will be served."
          reference     : "800-171|3.1.5,800-53|AC-6,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.10.6(a),CN-L3|8.1.4.2(d),CSCv6|9.1,CSF|PR.AC-4,CSF|PR.DS-5,ITSG-33|AC-6,LEVEL|1S,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "--authorization-mode=((?!AlwaysAllow).)*([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.15 Ensure that the --token-auth-file parameter is not set"
          info          : "Do not use token based authentication.

Rationale:

The token-based authentication utilizes static tokens to authenticate requests to the federation apiserver. The tokens are stored in clear-text in a file on the federation apiserver, and cannot be revoked or rotated without restarting the federation apiserver. Hence, do not use static token-based authentication."
          solution      : "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the deployment specs and remove the `--token-auth-file=` argument. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

You will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used."
          reference     : "800-171|3.5.10,800-53|IA-5(1),CSCv6|16.14,CSF|PR.AC-1,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|CY6,SWIFT-CSCv1|4.1,TBA-FIISB|26.1"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "^((?!--token-auth-file).)*$"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.16 Ensure that the --service-account-lookup argument is set to true"
          info          : "Validate service account before validating token.

Rationale:

By default, the apiserver only verifies that the authentication token is valid. However, it does not validate that the service account token mentioned in the request is actually present in etcd. This allows using a service account token even after the corresponding service account is deleted. This is an example of time of check to time of use security issue."
          solution      : "Edit the deployment specs and set `'--service-account-lookup=true'`. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

None"
          reference     : "800-53|IA-5(13),CSCv6|16,CSF|PR.AC-1,LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
          expect        : "--service-account-lookup=true"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.17 Ensure that the --service-account-key-file argument is set as appropriate"
          info          : "Explicitly set a service account public key file for service accounts on the federation apiserver.

Rationale:

By default, if no `--service-account-key-file` is specified to the federation apiserver, it uses the private key from the TLS serving certificate to verify the account tokens. To ensure that the keys for service account tokens could be rotated as needed, a separate public/private key pair should be used for signing service account tokens. Hence, the public key should be specified to the apiserver with `--service-account-key-file`."
          solution      : "Edit the deployment specs and set `--service-account-key-file` argument as appropriate. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

The corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy."
          reference     : "800-53|IA-5(2),CSCv6|3,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @SERVICE_ACCOUNT_KEY_FILE@ replaced with "/etc/kubernetes/pki/sa.pub" in field "expect".
          expect        : "--service-account-key-file=/etc/kubernetes/pki/sa.pub([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.18 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate - etcd-certfile"
          info          : "etcd should be configured to make use of TLS encryption for client connections.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the federation API server to identify itself to the etcd server using a client certificate and key."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection between the federation apiserver and etcd. Then, edit the deployment specs and set `'--etcd-certfile='` and `'--etcd-keyfile='` arguments. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

TLS and client certificate authentication must be configured for etcd."
          reference     : "800-53|IA-5(2),CSCv6|9,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @ETCD_CERTFILE@ replaced with "/etc/kubernetes/pki/etcd.crt" in field "expect".
          expect        : "--etcd-certfile=/etc/kubernetes/pki/etcd.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.18 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate - etcd-keyfile"
          info          : "etcd should be configured to make use of TLS encryption for client connections.

Rationale:

etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the federation API server to identify itself to the etcd server using a client certificate and key."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection between the federation apiserver and etcd. Then, edit the deployment specs and set `'--etcd-certfile='` and `'--etcd-keyfile='` arguments. `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

TLS and client certificate authentication must be configured for etcd."
          reference     : "800-53|IA-5(2),CSCv6|9,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @ETCD_KEYFILE@ replaced with "/etc/kubernetes/pki/etcd.key" in field "expect".
          expect        : "--etcd-keyfile=/etc/kubernetes/pki/etcd.key([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.19 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-cert-file"
          info          : "Setup TLS connection on the federation API server.

Rationale:

Federation API server communication contains sensitive parameters that should remain encrypted in transit. Configure the federation API server to serve only HTTPS traffic."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection on the federation apiserver. Then, edit the deployment specs and set `'--tls-cert-file='` and `'--tls-private-key-file='`: `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @TLS_CERT_FILE@ replaced with "/etc/kubernetes/pki/apiserver.crt" in field "expect".
          expect        : "--tls-cert-file=/etc/kubernetes/pki/apiserver.crt([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>

        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.1.19 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate - tls-private-key-file"
          info          : "Setup TLS connection on the federation API server.

Rationale:

Federation API server communication contains sensitive parameters that should remain encrypted in transit. Configure the federation API server to serve only HTTPS traffic."
          solution      : "Follow the Kubernetes documentation and set up the TLS connection on the federation apiserver. Then, edit the deployment specs and set `'--tls-cert-file='` and `'--tls-private-key-file='`: `kubectl edit deployments federation-apiserver-deployment --namespace=federation-system`

Impact:

TLS and client certificate authentication must be configured for your Kubernetes cluster deployment."
          reference     : "800-53|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,ITSG-33|IA-5(2),LEVEL|1S"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-apiserver | grep -v grep"
# Note: Variable @TLS_PRIVATE_KEY_FILE@ replaced with "/etc/kubernetes/pki/apiserver.key" in field "expect".
          expect        : "--tls-private-key-file=/etc/kubernetes/pki/apiserver.key([\\s]|$)"
          dont_echo_cmd : YES
        </custom_item>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "Check if Federation Controller Manager is running"
          cmd           : "ps -ef | grep federation-controller-manager | grep -v grep"
          expect        : "federation-controller-manager"
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system        : "Linux"
          type          : CMD_EXEC
          description   : "3.2.1 Ensure that the --profiling argument is set to false"
          info          : "Disable profiling, if not needed.

Rationale:

Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface."
          solution      : "Edit the deployment specs and set `'--profiling=false'`: `kubectl edit deployments federation-controller-manager-deployment --namespace=federation-system`

Impact:

Profiling information would not be available."
          reference     : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv6|14,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
          see_also      : "https://workbench.cisecurity.org/files/1738"
          cmd           : "ps -ef | grep federation-controller-manager | grep -v grep"
          expect        : "--profiling=false"
          dont_echo_cmd : YES
        </custom_item>
      </then>
    </if>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_Kubernetes_v1.1.0_Level_1.audit from CIS Kubernetes Benchmark v1.1.0"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/files/1738"
    </report>
  </else>
</if>

</check_type>
