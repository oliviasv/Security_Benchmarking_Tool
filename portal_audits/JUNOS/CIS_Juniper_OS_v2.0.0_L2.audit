#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2020/04/15 $
#
# Description: CIS Juniper OS Benchmark v2.0.0 Level 2
#              https://workbench.cisecurity.org/files/2278
#
#<ui_metadata>
#<display_name>CIS Juniper OS Benchmark v2.0.0 L2</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Juniper OS Benchmark L2</name>
#  <version>2.0.0</version>
#</spec>
#<labels>juniper,cis,junos</labels>
#<benchmark_refs>LEVEL,CSCv6,CSCv7</benchmark_refs>
#<variables>
#  <variable>
#    <name>SNMP_OOB_INTERFACE</name>
#    <default>fxp0</default>
#    <description>OOB interface for SNMP traffic</description>
#    <info>The restricted interface SNMP traffic must use.</info>
#  </variable>
#  <variable>
#    <name>JWEB_OOB_INTERFACE</name>
#    <default>fxp0</default>
#    <description>OOB interface for JWeb traffic</description>
#    <info>The restricted interface JWeb traffic must use.</info>
#  </variable>
#  <variable>
#    <name>XNM_RATE_LIMIT</name>
#    <default>10</default>
#    <description>XNM Rate Limit</description>
#    <info>The rate of new connections to the XNM service</info>
#  </variable>
#  <variable>
#    <name>XNM_CONNECTION_LIMIT</name>
#    <default>10</default>
#    <description>XNM Connection Limit</description>
#    <info>The number of concurrent connections to the XNM service</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Juniper">

<custom_item>
  type        : CONFIG_CHECK
  description : "2.1 Ensure firewall filter is set for inbound traffic to the Routing Engine"
  info        : "Traffic to the Routing Engine should be filtered.

Rationale:
JUNOS routers can provide a wide range of services to the network and, as with any computer system, the more services that are offered and the more hosts to which they are available, the wider attack surface is offered to a potential attacker.
To protect the router from attack a Firewall Filter should be applied to all inbound traffic to the Routing Engine which limits the hosts able to connect to the router and the services on which they are permitted to connect.
Permitted traffic should be logged in most cases, although for some protocols this may produce excessive load on the router so the impact of logging should be considered before it is applied.
If applied to the lo0 interface the filter will apply to all traffic sent to the Routing Engine. See Require Inbound Firewall Filter on Loopback Interface (Level 2, Not Scorable) for details of how to apply the filter.
Where the router processes IPv6 traffic a filter will be required for family inet6 in addition to the family inet filter example shown below.
NOTE : The Firewall Filter applies to ALL traffic sent to the Routing Engine, including traffic sent to the routers interface addresses. Ensure your firewall filter allows all of the Routing, Management and other protocols which are required for normal operation prior to applying the filter.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To create a firewall filter enter the following command from the [edit firewall] hierarchy.
[edit firewall]
user@host#edit family inet
[edit firewall family inet]
user@host#edit filter <filter name>
[edit firewall family inet filter <filter name>]
user@host#edit term <term name>
[edit firewall family inet filter <filter name> term <term name>]
user@host#set from <match conditions>
user@host#set then <action>
The following example filter allows SSH from 192.168.1.0/24 and OSPF from 10.0.0.0/8 while (implicitly) denying all other traffic:
firewall {
      family inet {
            filter ProtectRE {
                  term AllowOSPF {
                        from {
                             protocol ospf;
                             source-address 10.0.0.0/8;
                        }
                        then {
                             accept;
                        }
                  }
                  term AllowSSH {
                        from {
                             protocol tcp;
                             source-address 192.168.1.0/24;
                             destination-port ssh;
                        }
                        then {
                             accept;
                             log;
                             syslog;
                        }
                  }
            }
      }
}

Default Value:
No firewall filters are configured by default."
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|12.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|2NS,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set firewall .+"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "2.2 Ensure RE firewall filter contains explicit term for SSH (when SSH is used)"
  info        : "Routing Engine Firewall Filter should restrict SSH sources

Rationale:
Firewall filters are built up of one or more terms, which are evaluated in order until either one is matched (at which point the terms then action is taken) or the final term has been evaluated, at which point the default action is to discard the packet.
SSH is one of the main services for remote administration of the router and, as a result, presents a tempting target for attackers. To protect the router, you should only allow authorized management hosts, ideally on an internal network segment, to connect using SSH.
Permitted SSH connections should be logged to the local routing engine and to SYSLOG, allowing a record of connections to be kept and potential attacks to be detected.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To create a firewall filter term enter the following command from the [edit firewall family <family> filter <filter name>] hierarchy.
[edit firewall family inet filter <filter name>]
user@host#edit term <term name>

[edit firewall family inet filter <filter name> term <term name>]
user@host#set from source-address <authorized address or subnet>
user@host#set from source-address <authorized address or subnet 2>
user@host#set from protocol tcp
user@host#set from destination-port ssh
user@host#set then accept
user@host#set then syslog
user@host#set then log

Default Value:
No firewall filters are configured by default."
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|11.7,CSCv7|12.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|2NS,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set firewall .+"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "2.3 Ensure RE firewall filter includes explicit term for SNMP (when SNMP is used)"
  info        : "Routing Engine Firewall Filter should restrict SNMP sources

Rationale:
Firewall filters are built up of one or more terms, which are evaluated in order until either one is matched (at which point the terms then action is taken) or the final term has been evaluated, at which point the default action is to discard the packet.
SNMP provides detailed information about the router and may allow changes to the routers configuration, making SNMP a prime target for an attacker. To protect the router, you should only allow authorized management hosts, ideally on an internal network segment, to connect using SNMP.
Permitted SNMP connections should be logged to the local routing engine and to SYSLOG, allowing a record of connections to be kept and potential attacks to be detected.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To create a firewall filter term enter the following command from the [edit firewall family <family> filter <filter name>] hierarchy.
[edit firewall family inet filter <filter name>]
user@host#edit term <term name>

[edit firewall family inet filter <filter name> term <term name>]
user@host#set from source-address <authorized address or subnet>
user@host#set from source-address <authorized address or subnet 2>
user@host#set from protocol udp
user@host#set from destination-port snmp
user@host#set then accept
user@host#set then syslog
user@host#set then log

Default Value:
No firewall filters are configured by default."
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|11.7,CSCv7|12.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|2NS,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set firewall .+"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "2.4 Ensure internal sources are blocked on external networks"
  info        : "Deny traffic with an internal source or reserved IP address from external source.

Rationale:
An attacker may attempt to bypass security controls and Intrusion Detection Systems (IDS) by using the source address of a trusted (generally internal) host, a technique known as spoofing. Packets arriving on external networks should never have a source address from your internal network ranges, especially where the internal networks use RFC1918 private address space or invalid addresses. Any traffic with an internal source arriving on an external interface is certain to be an attack and should be blocked. A Firewall Filter should be applied to all external network interfaces and include a term to deny internal address ranges. The discard method is used to block the packet silently, with no message sent back to the source. This traffic should also be logged to the local routing engine and SYSLOG, allowing attacks to be detected and record kept.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To create a firewall filter term enter the following command from the [edit firewall family <family> filter <filter name>] hierarchy.

[edit firewall family inet filter <filter name>]
user@host#edit term <term name>

[edit firewall family inet filter <filter name> term <term name>]
user@host#set from source-address 127.0.0.0/8
user@host#set from source-address 10.0.0.0/8
user@host#set from source-address 0.0.0.0/32
user@host#set from source-address 172.16.0.0/12
user@host#set from source-address 192.168.0.0/16
user@host#set from source-address 192.0.2.0/24
user@host#set from source-address 169.254.0.0/16
user@host#set from source-address 198.18.0.0/15
user@host#set from source-address 198.51.100.0/24
user@host#set from source-address 203.0.113.0/24
user@host#set from source-address 224.0.0.0/8
user@host#set from source-address 255.255.255.255/32
user@host#set from source-address
user@host#set then discard
user@host#set then syslog
user@host#set then log

NOTE - At least one further term must be included in this firewall filter to allow legitimate traffic.

Default Value:
No firewall filters are configured by default."
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|12.2,CSCv7|12.3,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|2NS,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set firewall .+"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "2.5 Ensure firewall filters contain explicit deny and log term"
  info        : "Filters should include a final Deny and Log term.

Rationale:
Firewall filters are built up of one or more terms, which are evaluated in order until either one is matched (at which point the terms then action is taken) or the final term has been evaluated, at which point the default action is to discard the packet.
It is important to log packets which are denied by the firewall filter, these may indicate an attempted attack or could suggest a problem in the network or with the firewall filter itself.
A term should be added to the end of the each firewall filter which logs the packet header information and blocks the packet. The discard method is used to block the packet silently, with no message sent back to the source, denying the attacker information and limiting resource usage on the router.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To create a firewall filter term enter the following command from the [edit firewall family <family> filter <filter name>] hierarchy.
[edit firewall family inet filter <filter name>]
user@host#set term <term name> then discard
user@host#set term <term name> then syslog
user@host#set term <term name> then log

Default Value:
No firewall filters are configured by default."
  reference   : "800-171|3.13.1,800-171|3.13.6,800-53|SC-7(5),CN-L3|7.1.2.2(c),CSCv7|9.4,CSF|PR.PT-4,ITSG-33|SC-7(5),LEVEL|2NS,NIAv2|GS7b,NIAv2|NS25"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set firewall .+ (discard|syslog|log)"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "3.5 Ensure proxy-arp is disabled"
  info        : "Do not use Proxy ARP.

Rationale:
Address Resolution Protocol (ARP) provides resolution between IP and MAC Addresses (or other Network and Link Layer addresses on none IP networks) within a Layer 2 network.
Proxy ARP is a service where a device connected to one network (in this case the JUNOS router) answers ARP Requests which are addressed to a host on another network, replying with its own MAC Address and forwarding the traffic on to the intended host.
Sometimes used for extending broadcast domains across WAN links, in most cases Proxy ARP on enterprise networks is used to enable communication for hosts with mis-configured subnet masks, a situation which should no longer be a common problem.
Proxy ARP effectively breaks the LAN Security Perimeter, extending a network across multiple Layer 2 segments. Using Proxy ARP can also allow other security controls such as PVLAN to be bypassed."
  solution    : "To disable Proxy ARP enter the following command from the [edit interfaces <interface name> unit <unit number>] hierarchy:
[edit interfaces <interface name> unit <unit number>]
user@host#delete proxy-arp

Default Value:
Proxy ARP is disabled by default on most JUNOS routers."
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|12,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set interfaces .+"
  not_expect  : "proxy-arp"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "3.8 Ensure Loopback interface address is set"
  info        : "Configure a Loopback address.

Rationale:
When a router needs to initiate connections to remote hosts, for example for SYSLOG or NTP, it will use the nearest interface for the packets source address. This can cause issues due to the possible variation in source, potentially causing packets to be denied by intervening firewalls or handled incorrectly by the receiving host.
To prevent these problems the router should be configured with a Loopback interface and any services should be bound to this address."
  solution    : "To create a loopback interface enter the following command from the [edit interfaces] hierarchy:
[edit interfaces]
user@host#set lo0 unit 0 family inet address <ip address>

Default Value:
No Loopback Address is configured by default."
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|11,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set interfaces .+"
  expect      : "set interfaces lo[0-9]+ .+ inet address .+"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "3.10 Ensure inbound firewall filter is set for Loopback interface"
  info        : "A Firewall Filter should be applied to lo0.

Rationale:
JUNOS routers can provide a wide range of services to the network and, as with any computer system, the more services that are offered and the more hosts they are available to, the wider attack surface is offered to a potential attacker.
To protect the router from attack a Firewall Filter should be applied to all inbound traffic to the Routing Engine which limits the hosts able to connect to the router and the services on which they are permitted to connect.
If applied to the lo0interface the filter will apply to all traffic sent to the Routing Engine rather than to traffic traversing the router. Where IPv6 traffic is also handled by the router a firewall filter will also need to be applied for family inet 6.
See the Firewall section for details of how to configure Firewall Filters.
NOTE : The Firewall Filter applies to ALL traffic sent to the Routing Engine, including traffic sent to the routers interface addresses. Ensure your firewall filter allows all of the Routing, Management and other protocols which are required for normal operation prior to applying the filter."
  solution    : "To apply a firewall filter to the loopback interface enter the following command from the [edit interfaces] hierarchy:
[edit interfaces]
user@host#set lo0 unit 0 family inet filter input <filter name>

Default Value:
No firewall filters are configured by default."
  reference   : "800-171|3.13.1,800-53|SC-7(11),CSCv7|9.1,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|2S,NIAv2|GS7c,TBA-FIISB|31.3"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set interfaces lo[0-9]+"
  expect      : "set interfaces lo[0-9]+ .+ inet filter input .+"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type            : CONFIG_CHECK
      description     : "Check for dialer interfaces"
      regex           : "set interfaces dl[0-9]"
      number_of_lines : "^([1-9]|[1-9][0-9]+)$"
    </custom_item>

    <custom_item>
      type            : CONFIG_CHECK
      description     : "Check for no 3G/LTE dialer interfaces"
      regex           : ".*backup-options interface dl.*"
      number_of_lines : "^0$"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type            : CONFIG_CHECK
      description     : "3.1.3 Forbid Dial in Access"
      info            : "Dial in access should not be used on sensitive routers.

  Rationale:
  Some JUNOS routers support the use of a dial in modem connection for Telnet/SSH administration of the router from a remote connection over the telephone network.
  This can provide a useful out of band management channel, allowing access to a customer router at a remote site when the primary circuit has failed for example, but also creates a new route for attack, allowing a malicious user to bypass firewalls and other defenses.
  Even when the phone number for the modem is kept secret, attackers may still discover it through war dialing, possibly narrowing targets by researching the number ranges used by your organization.
  For sensitive routers, such as those in a PCI DSS Cardholder Data Environment, the protective measures available for dial in access are insufficient and no dial in access should be used. If not required for other services the modem should be physically removed from the router."
      solution        : "If you have configured a dialer interface to accept incoming calls, you should disable it using the following commands from the [edit interfaces] hierarchy (where n indicates the interface number);
  [edit interfaces]
  user@host#delete interface dl <n>"
      reference       : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|11.5,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3"
      see_also        : "https://workbench.cisecurity.org/files/2278"
      regex           : "set interfaces dl[0-9]"
      number_of_lines : "0"
      check_option    : CAN_BE_NULL
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "3.1.3 Forbid Dial in Access"
      info        : "Dial in access should not be used on sensitive routers.

Rationale:
Some JUNOS routers support the use of a dial in modem connection for Telnet/SSH administration of the router from a remote connection over the telephone network.
This can provide a useful out of band management channel, allowing access to a customer router at a remote site when the primary circuit has failed for example, but also creates a new route for attack, allowing a malicious user to bypass firewalls and other defenses.
Even when the phone number for the modem is kept secret, attackers may still discover it through war dialing, possibly narrowing targets by researching the number ranges used by your organization.
For sensitive routers, such as those in a PCI DSS Cardholder Data Environment, the protective measures available for dial in access are insufficient and no dial in access should be used. If not required for other services the modem should be physically removed from the router.

NOTE: A dialer interface was not found. This check is not applicable."
      reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CSCv7|11.5,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<custom_item>
  type            : CONFIG_CHECK
  description     : "3.2.1 Ensure VRRP authentication-key is set"
  info            : "VRRP authentication should be used where other security mechanisms are not in place.

Rationale:
VRRP provides resilience for a routers interfaces, allowing another router to act as backup in the event of a partial or complete failure of the primary router and increasing the availability network resources as well as resilience to DoS attack.
Routers configured to share a Virtual IP Address using VRRP communicate their status to their peer on a regular basis using a multicast packet, allowing a Master for the VIP to be elected. It is the Master that deals with packets destined for the VIP address.
If no authentication is used an attacker could potentially disrupt the VRRP Master Election process, causing neither router to handle packets destined for the VIP and resulting a DoS.
An authentication key can be configured for all VRRP Groups used on the device to help protect against this."
  solution        : "If you have configured VRRP on one or more interfaces you should configure authentication using the following commands from the [edit interfaces <interface name> unit <unit number> family inet address <ip address>] hierarchy;
[edit interfaces `<interface name> unit <unit number> family inet address <ip address>`]
user@host#set vrrp-group <group number> authentication-key <key>

Default Value:
VRRP is not configured by default"
  reference       : "800-53|IA-3,CSCv7|11,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3,TBA-FIISB|27.1"
  see_also        : "https://workbench.cisecurity.org/files/2278"
  regex           : "set interfaces .+ vrrp-group .+ authentication-key"
  number_of_lines : "^[0-9]+$"
</custom_item>

<custom_item>
  type            : SHOW_CONFIG_CHECK
  description     : "3.2.2 Ensure authentication-type is set to MD5"
  info            : "Any VRRP authentication should use MD5 HMAC

Rationale:
VRRP provides resilience for a routers interfaces, allowing another router to act as backup in the event of a partial or complete failure of the primary router and increasing the availability network resources as well as resilience to DoS attack.
Routers configured to share a Virtual IP Address using VRRP communicate their status to their peer on a regular basis using a multicast packet, allowing a Master for the VIP to be elected. It is the Master that deals with packets destined for the VIP address.
If no authentication is used an attacker could potentially disrupt the VRRP Master Election process, causing neither router to handle packets destined for the VIP and resulting a DoS.
VRRP supports simple authentication and MD5. Simple authentication transmits the password in plain text so should not be used. MD5 authentication uses a Keyed Hash Authentication Message Code (HMAC), a techniques which uses a key combined with a cryptographic hash algorithm to verify the authenticity and integrity of the received packet."
  solution        : "If you have configured VRRP on one or more interfaces you can configure authentication using MD5-HMAC with the following commands from the [edit interfaces <interface name> unit <unit number> family inet address <ip address>] hierarchy;
[edit interfaces <interface name> unit  <unit number> family inet address <ip address>]
user@host#set vrrp-group <group number> authentication-type md5

Default Value:
VRRP authentication is not enabled by default"
  reference       : "800-53|IA-3,CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3,TBA-FIISB|27.1"
  see_also        : "https://workbench.cisecurity.org/files/2278"
  hierarchy       : "detail"
  match           : "Authentication type: md5"
  number_of_lines : "^([1-9]|[1-9][0-9]+)$"
  property        : "vrrp"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for BGP"
      expect      : "set protocols bgp .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "4.1.2 Ensure peer authentication is set to IPSEC SA"
      info        : "BGP Neighbors should be strongly authenticated.

    Rationale:
    Where it is deployed, BGP routing is vital for normal operation of an organization's network infrastructure. Correct route information is required for routers to correctly direct traffic through the network.
    An attacker posing as one of the target routers BGP neighbors may inject incorrect information into the route table resulting in DoS attack or loss of confidential data through a Man in the Middle attack. As well as MD5 hash based authentication, JUNOS routers can also authenticate BGP neighbors using IPSEC Security Associations. This allows more robust authentication mechanisms to be used and is recommended as an alternative to MD5 HMAC in high security environments.
    Although M, T and MX series devices normally require a Services PIC or DPC installed to use IPSEC tunnels, no additional hardware is required for IPSEC SA based authentication of BGP neighbors. As with MD5 HMAC, IPSEC SA based Authentication can be configured Globally, at the Group Level or at the Neighbor Level, with more specific settings overriding less specific settings.
    Because IPSEC SA Authentication is intended for use in high security environments, it is recommended that different parameters are configured for each neighbor, particularly where eBGP is used.

    NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "To setup IPSEC SA based authentication, first configure a Security Association at the [edit security ipsec] hierarchy;

    [edit security ipsec]
    edit security-association <SA name>
    set description <description>
    set mode transport
    set manual direction bidirectional protocol ah
    set manual direction bidirectional authentication algorithm <authentication method>
    set manual direction bidirectional authentication key <key>
    The SA must be bi-directional and must be configured with the same parameters on all neighbors reachable on the intended interface. Note that only Authenticated Header is configured in this example which provides mutual authentication but does not encrypt BGP protocol messages in transit.
    To configure IPSEC SA based authentication globally for BGP, issue the following command from the [edit protocols bgp] hierarchy;

    [edit protocols bgp]
    user@host#set ipsec-sa
    To configure IPSEC SA based authentication for a group, issue the following command from the [edit protocols bgp group <group name>] hierarchy;

    [edit protocols bgp group <group name>]
    user@host#set ipsec-sa <SA name>
    To configure IPSEC SA based authentication for a neighbor, issue the following command from the [edit protocols bgp group <group name> neighbor <neighbor ip address>] hierarchy;

    [edit protocols bgp group <group name> neighbor <neighbor ip address>]
    user@host#set ipsec-sa <SA name>

    Default Value:
    No BGP routing is configured by default."
      reference   : "800-53|IA-3,CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2NS,NESA|T5.4.3,TBA-FIISB|27.1"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set protocols bgp .+ ipsec-sa"
      severity    : MEDIUM
    </custom_item>

    <report type:"WARNING">
      description : "4.1.4 Ensure Bogon Filtering is set (where EBGP is used)"
      info        : "Bogon prefixes should be filtered when using eBGP.

    Rationale:
    Bogon Networks are those IP Address blocks which should never appear on the Internet. Examples include loopback addresses, RFC1918 private addresses and IP blocks which have not yet been assigned by the IANA (Internet Assigned Numbers Authority) to one of the RIRs (Regional Internet Registries). If traffic arrives at your network edge from a Bogon network, the traffic is almost certainly malicious and should be filtered. Studies have shown instances where as much as 60% of DoS attack traffic is being sourced from Bogon or Martian (a subset which includes RFC1918 and RFC3330 networks) addresses.
    As a rule Bogon traffic should also be filtered from leaving the network as it may be malicious or represent a possible information leak. Either way, return traffic would not get back. Bogon information can be obtained from a number of sources such as:
    - IANA - Obtain the current IPv4 assignments list, anything that is shown as Unallocated or Reserved is a Bogon.
    - Team Cymru provides, what is effectively, the definitive Bogon list in a range of formats and through a BGP Route Server project.
    - RIPE NCC also provides lists of Unallocated, Martian and combined Bogon space.
    An important point to remember about Bogon filtering is that the addresses that make up Bogon space change. Unallocated addresses get allocated, reserved networks may be re-purposed, etc. If you keep your Bogon filters static, you may accidently block valid traffic from these addresses. Ensure you have a procedure to keep your Bogon lists up to date!

    NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "JUNOS offers a variety of options for filtering Bogons and Martians, which is why this item is not scored. Some of the more common options are discussed below.
    1 - The Martian Table Most Martian space (but not all, else you would not be able to use your router on private networks) is blocked using the Martian Routing Table, which is discussed elsewhere in this Benchmark and configured under the [edit routing-options martians] hierarchy. Route updates for prefixes in this special table are ignored, so adding Bogons here will prevent them being learned through any routing protocol.
    2 - Ingress Prefix Filtering Ingress Filtering should be used on eBGP sessions to prevent your own prefixes being advertised back to your network or, in the case of ISP networks, customer networks advertising prefixes other than those allocated to them.
    The other filtering types are covered previously. Prefix lists are configured under the [edit policy-options] hierarchy, but are discussed here as they are applied under the [edit protocols bgp <group name>] hierarchy. First configure a policy:
    [edit policy-options]
    user@host#edit policy-statement <policy name> term <term name>
    [edit policy-options policy-statement <policy name> <term name>]
    user@host#set from route-filter <network>/<mask> <exact | orlonger | prefix-length-range <start>-<end>> reject
    The last stage should be repeated for each prefix required, but as several options are shown, a couple of examples are given below:
    [edit policy-options <policy name> <term name>]
    user@host#set from route-filter 0.0.0.0/0 exact reject
    user@host#set from route-filter 10.0.0.0/8 orlonger reject
    user@host#set from route-filter 0.0.0.0/0 prefix-length-range /29-/32 reject
    The first line in the example rejects a default route advertised to the router and only that route. The second line will filter any route from the 10.0.0.0/8 range, for instance 10.1.1.0/24 or 10.2.0.0/16. The final line is a little more complex, this will reject any route with a mask length of /29, /30, /31 or /32 (generally eBGP routes should be summarized into larger prefixes than this). Having defined a policy, we need to apply it.
    As with most other BGP configuration options, you can apply the policy at Global, Group or Neighbor levels as suites your needs. In this example we will apply the policy to a group containing all our eBGP peers:

    [edit protocols bgp group <group name>]
    user@host#set import <policy name/s>
    3 - Peering with a Bogon Route Server As far as I am aware, the idea of using a BGP Peering session to a Route Server for updates on Bogon networks was hatched by Team Cymru and they offer a free, public Bogon Route Server, which you can peer with to keep you Bogon list up to date. The theory works equally well by peering to a route server of your own, allowing a greater degree of control over your Bogon list updates for your organization if desired. First a static route is created and configured to discard traffic. An address that is reserved for Test or Example networks is used, you may need to allow this /32 prefix in the Martian Table:

    [edit routing-options]
    user@host#set static route 192.0.2.1/32 discard no-readvertise retain
    An import policy should be set to match prefixes from the route servers AS and the Community (if used) for Bogon updates, setting the next hop to 192.0.2.1 and accepting the route.

    [edit policy-options]
    user@host#edit policy-statement <policy name> term <term name>
    [edit policy-options policy-statement <policy name> term <term name>]
    user@host#set from protocol bgp as-path <peer AS> community <community>
    user@host#set then next-hop 192.0.2.1
    Finally the BGP Peering and Group is configured with the import policy above and not to export. In addition security options covered in other recommendations should be used:

    [edit protocols bgp <group name>]
    user@host#set type external description 'bogon route servers'
    user@host#set import <policy name>
    user@host#set peer-as <AS of Route Server>
    user@host#set neighbor <neighbors IP>
    user@host#set local-address <local IP to use for peering>

    Default Value:
    Most Martians are filtered by default, most Bogons are not."
      reference   : "CSCv7|12,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.1.2 Ensure peer authentication is set to IPSEC SA"
      info        : "BGP Neighbors should be strongly authenticated.

  Rationale:
  Where it is deployed, BGP routing is vital for normal operation of an organization's network infrastructure. Correct route information is required for routers to correctly direct traffic through the network.
  An attacker posing as one of the target routers BGP neighbors may inject incorrect information into the route table resulting in DoS attack or loss of confidential data through a Man in the Middle attack. As well as MD5 hash based authentication, JUNOS routers can also authenticate BGP neighbors using IPSEC Security Associations. This allows more robust authentication mechanisms to be used and is recommended as an alternative to MD5 HMAC in high security environments.
  Although M, T and MX series devices normally require a Services PIC or DPC installed to use IPSEC tunnels, no additional hardware is required for IPSEC SA based authentication of BGP neighbors. As with MD5 HMAC, IPSEC SA based Authentication can be configured Globally, at the Group Level or at the Neighbor Level, with more specific settings overriding less specific settings.
  Because IPSEC SA Authentication is intended for use in high security environments, it is recommended that different parameters are configured for each neighbor, particularly where eBGP is used.

  NOTE: BGP does not appear to be configured on the target. This check is not applicable."
      reference   : "800-53|IA-3,CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2NS,NESA|T5.4.3,TBA-FIISB|27.1"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>

    <report type:"PASSED">
      description : "4.1.4 Ensure Bogon Filtering is set (where EBGP is used)"
      info        : "Bogon prefixes should be filtered when using eBGP.

    Rationale:
    Bogon Networks are those IP Address blocks which should never appear on the Internet. Examples include loopback addresses, RFC1918 private addresses and IP blocks which have not yet been assigned by the IANA (Internet Assigned Numbers Authority) to one of the RIRs (Regional Internet Registries). If traffic arrives at your network edge from a Bogon network, the traffic is almost certainly malicious and should be filtered. Studies have shown instances where as much as 60% of DoS attack traffic is being sourced from Bogon or Martian (a subset which includes RFC1918 and RFC3330 networks) addresses.
    As a rule Bogon traffic should also be filtered from leaving the network as it may be malicious or represent a possible information leak. Either way, return traffic would not get back. Bogon information can be obtained from a number of sources such as:
    - IANA - Obtain the current IPv4 assignments list, anything that is shown as Unallocated or Reserved is a Bogon.
    - Team Cymru provides, what is effectively, the definitive Bogon list in a range of formats and through a BGP Route Server project.
    - RIPE NCC also provides lists of Unallocated, Martian and combined Bogon space.
    An important point to remember about Bogon filtering is that the addresses that make up Bogon space change. Unallocated addresses get allocated, reserved networks may be re-purposed, etc. If you keep your Bogon filters static, you may accidently block valid traffic from these addresses. Ensure you have a procedure to keep your Bogon lists up to date!

    NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      reference   : "CSCv7|12,LEVEL|2NS"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for IS-IS"
      expect      : "set protocols isis .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type            : SHOW_CONFIG_CHECK
      description     : "4.2.2 Ensure IS-IS neighbor authentication is set to SHA1"
      info            : "IS-IS Neighbors should be authenticated with stronger SHA1 HMAC mechanism, where supported.

    Rationale:
    Where it is deployed, IS-IS routing is vital for normal operation of an organization's network infrastructure. Correct route information is required for routers to correctly direct traffic through the network. An attacker posing as one of the target routers IS-IS neighbors may inject incorrect information into the route table resulting in DoS attack or loss of confidential data through a Man in the Middle attack.
    On Juniper routers (as well as routers from some other manufacturers such as Cisco or Brocade) it is possible to authenticate neighbors using an SHA1 digest of elements in PDU combined with a sequence number to protect against Replay attacks.
    SHA1 provides a stronger algorithm than the older MD5 standard, but is not so widely supported on none Juniper platforms so should only be deployed once you are certain that all of the devices with which IS-IS Adjacencies will be formed support SHA1-HMAC authentication.
    SHA1 authentication is configured differently than either Simple (which sends the password cleartext and should never be used) or MD5 authentication methods. Instead of configuring the key directly at the IS-IS protocol, area or interface level, support for SHA1 authentication is added via the Hitless Key Rollover extensions. This provides the added benefit of introducing mechanisms to coordinate regular changes to authentication keys and make changes to authentication settings without the need to reset IS-IS adjacencies."
      solution        : "If you have deployed IS-IS in your network you should consider configuring Hitless Key Rollover with SHA1 authentication for all neighbors at each IS-IS Level configured.
    First a key-chain must be configured. The same key-chain may be used for multiple levels or separate key-chains used for each level (or even for individual interfaces where required). From the [edit security authentication-key-chains] hierarchy issue the following commands:
    [edit security authentication-key-chains]
    user@host#set key-chain <name> key <key number> secret '<secret key>'
    user@host#set key-chain <name> key <key number> start-time '<yyyy-mm-dd.hh:mm:ss>'
    user@host#set key-chain <name> key <key number> algorithm hmac-sha-1
    user@host#set key-chain <name> key <key number> options isis-enhanced
    The start-time must be provided for all keys and provides the mechanism for controlled key rollover. Keys with a start time in the future can be configured across all of the devices in advance, when the time is reached all of the devices will hitlessly rollover to the new keys without disruption to IS-IS Adjacencies.
    Next the key should be set for all Levels at which SHA1 HMAC authentication will be used. From the [edit protocols isis] hierarchy, issue the following command:
    [edit protocols isis]
    user@host#set level <level> authentication-key-chain <name>
    Where a different key is required for a specific area or interface, the key-chain used at the Level can be overridden on a per interface per level basis using the following command from the `[edit protocols isis]' hierarchy:
    [edit protocols isis]
    user@host#set interface <interface name> level <level> hello-authentication-key-chain <name>

    NOTE - Only the setting of the authentication-key-chain on a per level basis is included in the audit procedure for scoring this recommendation, the per interface override is included as additional information only.

    Default Value:
    No IS-IS routing is configured by default."
      reference       : "CSCv7|16.4,LEVEL|2S"
      see_also        : "https://workbench.cisecurity.org/files/2278"
      except          : "hmac-sha-1"
      hierarchy       : "security authentication-key-chains"
      match           : "algorithm"
      number_of_lines : "^0$"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.2.2 Ensure IS-IS neighbor authentication is set to SHA1"
      info        : "IS-IS Neighbors should be authenticated with stronger SHA1 HMAC mechanism, where supported.

  Rationale:
  Where it is deployed, IS-IS routing is vital for normal operation of an organization's network infrastructure. Correct route information is required for routers to correctly direct traffic through the network. An attacker posing as one of the target routers IS-IS neighbors may inject incorrect information into the route table resulting in DoS attack or loss of confidential data through a Man in the Middle attack.
  On Juniper routers (as well as routers from some other manufacturers such as Cisco or Brocade) it is possible to authenticate neighbors using an SHA1 digest of elements in PDU combined with a sequence number to protect against Replay attacks.
  SHA1 provides a stronger algorithm than the older MD5 standard, but is not so widely supported on none Juniper platforms so should only be deployed once you are certain that all of the devices with which IS-IS Adjacencies will be formed support SHA1-HMAC authentication.
  SHA1 authentication is configured differently than either Simple (which sends the password cleartext and should never be used) or MD5 authentication methods. Instead of configuring the key directly at the IS-IS protocol, area or interface level, support for SHA1 authentication is added via the Hitless Key Rollover extensions. This provides the added benefit of introducing mechanisms to coordinate regular changes to authentication keys and make changes to authentication settings without the need to reset IS-IS adjacencies.

  NOTE: IS-IS does not appear to be configured on the target. This check is not applicable."
      reference   : "CSCv7|16.4,LEVEL|2S"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for OSPF"
      expect      : "set protocols ospf .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "4.3.2 Ensure OSPF authentication is set to IPSEC SA with SHA"
      info        : "OSPF Neighbors should be strongly authenticated.

    Rationale:
    Where it is deployed, OSPF routing is vital for normal operation of an organization's network infrastructure. Correct route information is required for routers to correctly direct traffic through the network.
    An attacker posing as one of the target routers OSPF neighbors may inject incorrect information into the route table resulting in DoS attack or loss of confidential data through a Man in the Middle attack.
    In addition to MD5 hash based authentication, JUNOS routers can also authenticate OSPF neighbors using IPSEC Security Associations. This allows more robust authentication mechanisms to be used and is recommended as an alternative to MD5 HMAC in high security environments. Support for IPSEC based authentication with other vendors is not universal, so ensure all of your devices are able to support this method before proceeding.
    A Manual IPSEC Security Association is formed between neighbors, using Authenticated Header (IP Protocol 51) with the stronger HMAC-SHA1 or HMAC-SHA2 (SHA2 is not available on all platforms) methods to ensure that the updates were sent by trusted neighbors and were not changed in transit. Only AH is used to avoid the added overhead required to encrypt and decrypt the packets contents which ESP would entail. It is possible to use ESP in place of AH if encryption of routing information across an untrusted segment is required, but this can have a significant performance cost.
    In 'dual stack' IPv4/IPv6 environments running both OSPFv2 for IPv4 routing and OSPFv3 for IPv6, it is common to use a single SA on a segment to provide authentication both protocols.

    NOTE - Although M, T and MX series devices normally require a Services PIC or DPC installed to provide IPSEC VPNs, no additional hardware is required for IPSEC SA based authentication of OSPF neighbors."
      solution    : "To setup IPSEC SA based authentication, first configure a Security Association at the [edit security ipsec] hierarchy;
    [edit security ipsec]
    edit security-association <SA name>
    set description <description>
    set mode transport
    set manual direction bidirectional protocol ah
    set manual direction bidirectional algorithm hmac-sha1-96
    set manual direction bidirectional authentication key <key>
    The SA must be bi-directional and must be configured with the same parameters on all neighbors reachable on the intended interface.
    Note that only Authenticated Header is configured in this example which provides mutual authentication but does not encrypt OSPF protocol messages in transit.
    Next configure IPSEC SA based authentication for one or more interfaces which OSPF will be run over from the [edit protocols ospf] hierarchy;
    [edit protocols ospf]
    user@host#set area <area number> interface <interface number> ipsec-sa <SA name>

    Default Value:
    No OSPF routing is configured by default."
      reference   : "800-53|IA-3(1),CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3(1),LEVEL|2S,NESA|T5.4.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set protocols ospf security ipsec security association .+"
      not_expect  : "md5"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.3.2 Ensure OSPF authentication is set to IPSEC SA with SHA"
      info        : "OSPF Neighbors should be strongly authenticated.

  Rationale:
  Where it is deployed, OSPF routing is vital for normal operation of an organization's network infrastructure. Correct route information is required for routers to correctly direct traffic through the network.
  An attacker posing as one of the target routers OSPF neighbors may inject incorrect information into the route table resulting in DoS attack or loss of confidential data through a Man in the Middle attack.
  In addition to MD5 hash based authentication, JUNOS routers can also authenticate OSPF neighbors using IPSEC Security Associations. This allows more robust authentication mechanisms to be used and is recommended as an alternative to MD5 HMAC in high security environments. Support for IPSEC based authentication with other vendors is not universal, so ensure all of your devices are able to support this method before proceeding.
  A Manual IPSEC Security Association is formed between neighbors, using Authenticated Header (IP Protocol 51) with the stronger HMAC-SHA1 or HMAC-SHA2 (SHA2 is not available on all platforms) methods to ensure that the updates were sent by trusted neighbors and were not changed in transit. Only AH is used to avoid the added overhead required to encrypt and decrypt the packets contents which ESP would entail. It is possible to use ESP in place of AH if encryption of routing information across an untrusted segment is required, but this can have a significant performance cost.
  In 'dual stack' IPv4/IPv6 environments running both OSPFv2 for IPv4 routing and OSPFv3 for IPv6, it is common to use a single SA on a segment to provide authentication both protocols.

  NOTE - Although M, T and MX series devices normally require a Services PIC or DPC installed to provide IPSEC VPNs, no additional hardware is required for IPSEC SA based authentication of OSPF neighbors.

  NOTE: OSPF does not appear to be configured on the target. This check is not applicable."
      reference   : "800-53|IA-3,CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for BFD"
      regex       : ".*bfd-live.*"
      expect      : ".*bfd-live.*"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "4.6.1 Ensure BFD Authentication is Set"
      info        : "BFD Peers should be authenticated.

  Rationale:
  Bidirectional Forwarding Detection (BFD) is a Forwarding Plane feature which allows more rapid detection of a failed neighbor then can be achieved through a routing protocols' normal detection mechanisms, providing faster reconvergence.
  If no authentication was used an attacker may replay or spoof BFD messages to destabilize a network and/or prevent proper reconvergence resulting in a Denial of Service. Several authentication mechanisms are supported for BFD ranging from plain text password, which should not be used, to meticulously keyed SHA1.
  The latter provides the strongest hashing algorithm and best replay protection, with the sequence number being updated on each packet, and it is this mechanism that should be used in most cases.
  However, if None Stop Routing (NSR) features are required; meticulously keyed SHA1 or MD5 should not be used as the BFD Sessions using these algorithms may fail when switching to the Backup Routing Engine.
  Both BFD peers must be configured with the same keys and method, otherwise the BFD link may be declared down resulting in a reconvergence. Because it is not possible to configure both ends of an existing BFD link simultaneously you may need to use Loose Authentication Checking as a transitional step by configuring the loose-check option.

  NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "If you have deployed BFD, authentication can be configured by issuing the following commands.
  First set the authentication algorithm and keychain from the appropriate [.* bfd-liveness-detection] hierarchy, in this example we are configuring BFD Authentication for OSPF Neighbors on Interface Ge-0/0/0.0:
  [edit protocols ospf interface ge-0/0/0.0 bfd-liveness-detection]
  user@host#set authentication algorithm <algorithm>
  user@host#set authentication key-chain <key-chain>
  Where:
  - <algorithm> is either keyed-md5, keyed-sha-1, meticulous-keyed-md5or meticulous-keyed-sha-1, which is preferred but is not compatible with NSR and other failover options.
  - <key-chain> is the name of a configured key-chain (see below).
  If a Key Chain is not already defined, you should create one by issuing the following command at the [edit security authentication-key-chains] hierarchy:
  [edit security authentication-key-chains]
  user@host#set key-chain <key-chain> key <key number> secret <key>
  Where:
  - <key-chain> is the name of the key-chain already configured for the BFD session
  - <key number> is the number to identify this key, used for key rollover
  - <key> is the Shared Secret Key
  The <algorithm> and <key> must be the same on all devices which will use the BFD session being configured.
  If the BFD Session is already in use, setting Authentication on one side before the other will cause the BFD Session (and the associated routes or adjacencies) to be declared down resulting in loss of traffic. To aide in rollout of BFD Authentication, JUNOS Devices can operate in a 'Loos Authentication Check' mode, whereby they will send Authentication information, but will not reject unauthenticated messages.
  This should be used in transition only and can be configured with the following command from the same [.* bfd-liveness-detection] hierarchy:
  [edit protocols ospf interface ge-0/0/0.0 bfd-liveness-detection]
  user@host#set authentication loose-check
  BFD may be configured at a wide variety of configuration hierarchies, for different Protocols, Routing Instances or even for Static Routes. The bfd-liveness-detection hierarchy is the same at each level it is used, so the Remediation Process is the same and should be applied at each hierarchy indicated in the Audit Procedure.

  Impact:
  BFD Authentication must be configured to use the same Key and Algorithm on all neighbors/peers with which the session will be used. A mismatch will result in the BFD session failing and related routes being declared unreachable.
  BFD Authentication with meticulous-keyed-sha-1 and meticulous-keyed-md5 algorithms should not be used in conjunction with NSR and GRES. Fail over between Routing Engines will cause Authentication to fail.

  Default Value:
  No BFD is configured by default."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|11,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : ".*bfd-live.*authentication.*"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CONFIG_CHECK
      description : "4.6.2 Ensure BFD Authentication is Not Set to Loose-Check"
      info        : "BFD Peers should be authenticated.

  Rationale:
  Bidirectional Forwarding Detection (BFD) is a Forwarding Plane feature which allows more rapid detection of a failed neighbor then can be achieved through a routing protocols' normal detection mechanisms, providing faster reconvergence.
  If no authentication was used an attacker may replay or spoof BFD messages to destabilize a network and/or prevent proper reconvergence resulting in a Denial of Service.
  JUNOS supports a Loose Authentication Check mechanism, which is intended for use when transitioning from unauthenticated BFD to authenticated BFD implementations or when changing Shared Secret Keys.
  When Loose Authentication Checking is enabled, the JUNOS Device will produce authenticated BFD packets, but will not check the authentication of packets it receives from its peer. When enabled the JUNOS Device is effectively as unprotected as when authentication is not configured at all.
  BFD Sessions should never be configured with the authentication loose-check option in a production network, with the exception of short transition periods while updating/replacing keys."
      solution    : "If you have deployed BFD with Loose Authentication Checking, it can be disabled by issuing the appropriate [.* bfd-liveness-detection] hierarchy, in this example we are configuring BFD Authentication for BGP:
  [edit protocols bgp bfd-liveness-detection]
  user@host# delete authentication loose-check
  BFD may be configured at a wide variety of configuration hierarchies, for different Protocols, Routing Instances or even for Static Routes. The bfd-liveness-detection hierarchy is the same at each level it is used, so the Remediation Process is the same and should be applied at each hierarchy indicated in the Audit Procedure.

  Impact:
  BFD Authentication must be configured to use the same Key and Algorithm on all neighbors/peers with which the session will be used. A mismatch will result in the BFD session failing and related routes being declared unreachable.
  BFD Authentication with meticulous-keyed-sha-1 and meticulous-keyed-md5 algorithms should not be used in conjunction with NSR and GRES. Fail over between Routing Engines will cause Authentication to fail.

  Default Value:
  No BFD is configured by default"
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|11,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : ".*bfd-live.*authentication.*"
      not_expect  : "loose"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.6.1 Ensure BFD Authentication is Set"
      info        : "BFD Peers should be authenticated.

  Rationale:
  Bidirectional Forwarding Detection (BFD) is a Forwarding Plane feature which allows more rapid detection of a failed neighbor then can be achieved through a routing protocols' normal detection mechanisms, providing faster reconvergence.
  If no authentication was used an attacker may replay or spoof BFD messages to destabilize a network and/or prevent proper reconvergence resulting in a Denial of Service. Several authentication mechanisms are supported for BFD ranging from plain text password, which should not be used, to meticulously keyed SHA1.
  The latter provides the strongest hashing algorithm and best replay protection, with the sequence number being updated on each packet, and it is this mechanism that should be used in most cases.
  However, if None Stop Routing (NSR) features are required; meticulously keyed SHA1 or MD5 should not be used as the BFD Sessions using these algorithms may fail when switching to the Backup Routing Engine.
  Both BFD peers must be configured with the same keys and method, otherwise the BFD link may be declared down resulting in a reconvergence. Because it is not possible to configure both ends of an existing BFD link simultaneously you may need to use Loose Authentication Checking as a transitional step by configuring the loose-check option.

  NOTE: BFD does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|11,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>

    <report type:"PASSED">
      description : "4.6.2 Ensure BFD Authentication is Not Set to Loose-Check"
      info        : "BFD Peers should be authenticated.

  Rationale:
  Bidirectional Forwarding Detection (BFD) is a Forwarding Plane feature which allows more rapid detection of a failed neighbor then can be achieved through a routing protocols' normal detection mechanisms, providing faster reconvergence.
  If no authentication was used an attacker may replay or spoof BFD messages to destabilize a network and/or prevent proper reconvergence resulting in a Denial of Service.
  JUNOS supports a Loose Authentication Check mechanism, which is intended for use when transitioning from unauthenticated BFD to authenticated BFD implementations or when changing Shared Secret Keys.
  When Loose Authentication Checking is enabled, the JUNOS Device will produce authenticated BFD packets, but will not check the authentication of packets it receives from its peer. When enabled the JUNOS Device is effectively as unprotected as when authentication is not configured at all.
  BFD Sessions should never be configured with the authentication loose-check option in a production network, with the exception of short transition periods while updating/replacing keys.

  NOTE: BFD does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|11,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for LDP"
      expect      : "set protocols ldp .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "4.7.2 Ensure authentication is set to AES-CMAC"
      info        : "LDP peers should be strongly authenticated.

    Rationale:
    Where it is deployed, LDP is vital for normal operation of an MPLS network. LDP is used to determine Label mapping and populate the routers Forwarding Information Base (FIB). An attacker posing as one of the target routers LDP peers may attempt to inject incorrect label information or exploit a vulnerability in the routers LDP implementation to cause an information disclosure or denial of service.
    On Juniper routers (as well as routers from some other vendors) it is possible to authenticate LDP sessions using a Cipher-based Message Authentication Code method with the AES encryption algorithm.
    AES-128-CMAC-96 is significantly more robust than the MD5-HMAC method, which has traditionally been used for LDP session authentication, and should be used wherever both LSRs support it (such as in an all Juniper deployment).
    Where support for AES-128-CMAC-96 is not available; SHA1-HMAC, while not as strong as the AES method, should be strongly preferred over MD5-HMAC which is considerably weaker.
    Strong LDP Session Authentication is configured on a per session-group basis, allowing you to easily support different algorithms with different groups if necessary."
      solution    : "If you have deployed LDP in your network you should use strong authentication for all neighbors.
    Both AES-CMAC and SHA1-HMAC authentication require a keychain to be configured on the device under the [edit security authentication-key-chains] hierarchy with at least one key which has a start time in the past.
    [edit security authentication-key-chains]
    user@host#set key-chain <name> key <key number> start-time <YYYY-MM-DD.HH:MM>
    user@host#set key-chain <name> key <key number> secret <secret key>
    The chosen algorithm and keychain should then be configured for all session groups from the [edit protocols ldp] hierarchy:
    [edit protocols ldp]
    user@host#set session-group <Destination IP Address or IP/Mask> authentication-algorithm aes-128-cmac-96
    user@host#set session-group <Destination IP Address or IP/Mask> authentication-key-chain <name>
    or for SHA1 :
    [edit protocols ldp]
    user@host#set session-group <Destination IP Address or IP/Mask> authentication-algorithm hmac-sha-1-96
    user@host#set session-group <Destination IP Address or IP/Mask> authentication-key-chain <name>

    Default Value:
    LDP is not configured by default.
    When LDP is configured with an authentication-key, MD5 is the default authentication-algorithm."
      reference   : "800-53|IA-3(1),CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3(1),LEVEL|2S,NESA|T5.4.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set protocols ldp session-group .+"
      expect      : "set protocols ldp session-group .+ authentication-algorithm (aes-128-cmac-96|hmac-sha-1-96)"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.7.2 Ensure authentication is set to AES-CMAC"
      info        : "LDP peers should be strongly authenticated.

    Rationale:
    Where it is deployed, LDP is vital for normal operation of an MPLS network. LDP is used to determine Label mapping and populate the routers Forwarding Information Base (FIB). An attacker posing as one of the target routers LDP peers may attempt to inject incorrect label information or exploit a vulnerability in the routers LDP implementation to cause an information disclosure or denial of service.
    On Juniper routers (as well as routers from some other vendors) it is possible to authenticate LDP sessions using a Cipher-based Message Authentication Code method with the AES encryption algorithm.
    AES-128-CMAC-96 is significantly more robust than the MD5-HMAC method, which has traditionally been used for LDP session authentication, and should be used wherever both LSRs support it (such as in an all Juniper deployment).
    Where support for AES-128-CMAC-96 is not available; SHA1-HMAC, while not as strong as the AES method, should be strongly preferred over MD5-HMAC which is considerably weaker.
    Strong LDP Session Authentication is configured on a per session-group basis, allowing you to easily support different algorithms with different groups if necessary.

    NOTE: LDP does not appear to be configured on the target. This check is not applicable."
      reference   : "800-53|IA-3,CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type            : CONFIG_CHECK
      description     : "Check for IPv6 configured on any interface"
      regex           : "set interfaces .+ inet6 address .+"
      number_of_lines : "^([1-9]|[1-9][0-9])+$"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type            : CONFIG_CHECK
      description     : "4.9.1 Ensure Secure Neighbor Discovery is configured"
      info            : "NDP should be protected.

    Rationale:
    One of the primary functions of NDP is to resolve Network Layer (IP) addresses to Link Layer (eg Ethernet) addresses, a function performed in IPv4 by ARP. An attacker who has access to the broadcast segment may abuse NDP or ARP to trick hosts into sending the attacker traffic destined for someone else, a technique known as ARP Poisoning.
    To protect IPv6 networks against this, and other attacks against NDP functions, Secure Neighbor Discovery (SEND) should be deployed where preventing access to the broadcast segment may not be possible or in sensitive environments with a requirement for increased protection.
    Support for SEND was added to JUNOS in version 9.3. SEND utilizes public/private RSA key pairs to produce Cryptographically Generated Addresses (as defined in RFC3972), which ensures that the claimed source of an NDP message is the owner of the claimed address."
      solution        : "If you have deployed IPv6 you can configure SEND by issuing the following commands from the [edit protocols neighbor-discovery] hierarchy: If you have not already done so, you will need to generate or install an RSA key pair, to generate a new pair enter the following command:
    user@host>request pki generate-key-pair <name> <ca-profile>
    Next, set the security level to define how unsecure NDP messages should be handled. If only a subset of devices will be configured to use SEND, then use the default option. If all nodes on the segment require protection, which is recommended, use the secure-messages-only option:
    [edit protocols neighbor-discovery]
    user@host#set secure security-level secure-messages-only
    Finally, specify the key pair and details you generated/installed earlier:
    [edit protocols neighbor-discovery]
    user@host#set secure cryptographic-address key-pair <name>
    user@host#set secure cryptographic-address key-length <length>
    For more details on configuring Public/Private Key Pairs in JUNOS please refer to: Generating a Public-Private Key Pair, JUNOS Software Security Configuration Guide, Juniper Networks

    Default Value:
    SEND is not configured by default."
      reference       : "800-53|IA-3(1),CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3(1),LEVEL|2S,NESA|T5.4.3"
      see_also        : "https://workbench.cisecurity.org/files/2278"
      regex           : "set protocols neighbor-discovery secure cryptographic-address .+"
      number_of_lines : "^2$"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "4.9.1 Ensure Secure Neighbor Discovery is configured"
      info        : "NDP should be protected.

  Rationale:
  One of the primary functions of NDP is to resolve Network Layer (IP) addresses to Link Layer (eg Ethernet) addresses, a function performed in IPv4 by ARP. An attacker who has access to the broadcast segment may abuse NDP or ARP to trick hosts into sending the attacker traffic destined for someone else, a technique known as ARP Poisoning.
  To protect IPv6 networks against this, and other attacks against NDP functions, Secure Neighbor Discovery (SEND) should be deployed where preventing access to the broadcast segment may not be possible or in sensitive environments with a requirement for increased protection.
  Support for SEND was added to JUNOS in version 9.3. SEND utilizes public/private RSA key pairs to produce Cryptographically Generated Addresses (as defined in RFC3972), which ensures that the claimed source of an NDP message is the owner of the claimed address.

  NOTE: IPv6 does not appear to be configured on the target. This check is not applicable."
      reference   : "800-53|IA-3,CSCv7|16.4,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for SNMP"
      expect      : "set snmp .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "5.5 Ensure SNMP Write Access is not set"
      info        : "Do not allow Read-Write SNMP access.

    Rationale:
    SNMP can be used to read and write configuration information from a router using your Network Management Systems; however the inherently insecure design of the older SNMP V1, V2 and V2C standards, which do not use encryption to protect community strings, make their use for setting configuration an open invitation to an attacker.
    Even the more recent SNMPv3, which introduces encryption, authentication and message integrity checking, does not provide support for centralized authentication, account lockout or other basic security measures applied to other methods to access the router. This leaves the router vulnerable to brute force attack. The use of UDP as the transport mechanism in SNMP also makes spoofing the source of an SNMP request far simpler, easing brute force or flooding attacks."
      solution    : "If you have deployed SNMP below Version 3 on your router with Read-Write access, delete the associated community using the following command under the [edit snmp] hierarchy;
    [edit snmp]
    user@host#delete community <community>
    Alternatively you can set the communities authorization level to Read Only with the following command from the [edit snmp <community>] hierarchy;
    [edit snmp]
    user@host#set community <community> authorization read-only
    If you have deployed SNMP Version 3 on your router with Write access, delete the write view using the following command under the [edit snmp v3 vacm access] hierarchy;
    [edit snmp v3 vacm access]
    user@host#delete group <group name> default-context-prefix security-model <security model> security-level <security level> write-view
    Complete the sections in <> with the details configured for your group/s. This command will leave any read or notify views for the group in place. If only a write-view is configured, the group can be deleted instead.

    Default Value:
    No SNMP communities are set by default on most platforms."
      reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set snmp .+"
      not_expect  : "set snmp .+ (read-write|write-view)"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "5.5 Ensure SNMP Write Access is not set"
      info        : "Do not allow Read-Write SNMP access.

  Rationale:
  SNMP can be used to read and write configuration information from a router using your Network Management Systems; however the inherently insecure design of the older SNMP V1, V2 and V2C standards, which do not use encryption to protect community strings, make their use for setting configuration an open invitation to an attacker.
  Even the more recent SNMPv3, which introduces encryption, authentication and message integrity checking, does not provide support for centralized authentication, account lockout or other basic security measures applied to other methods to access the router. This leaves the router vulnerable to brute force attack. The use of UDP as the transport mechanism in SNMP also makes spoofing the source of an SNMP request far simpler, easing brute force or flooding attacks.

  NOTE: SNMP does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.4.2,800-53|CM-6,CSCv7|4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for SNMPv3"
      expect      : "set snmp v3 .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "5.6 Ensure AES128 is set for all SNMPv3 users"
      info        : "Do not allow plaintext SNMPv3 access.

    Rationale:
    SNMPv3 provides much improved security over previous versions by offering options for Authentication and Encryption of messages.
    When configuring a user for SNMPv3 you have the option of using a range of encryption schemes, or no encryption at all, to protect messages in transit. The strongest scheme available is AES128 and this should be configured for all SNMPv3 'users' on all sensitive devices."
      solution    : "For each SNMPv3 user created on your router add privacy options by issuing the following command from the [edit snmp v3 usm local-engine] hierarchy;
    [edit snmp v3 usm local-engine]
    user@host#set user <username> privacy-aes128 privacy-password <password>

    Default Value:
    No SNMP is configured by default on most platforms."
      reference   : "800-171|3.1.13,800-53|AC-17(2),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.4.1(c),CSCv7|14.4,CSF|PR.AC-3,CSF|PR.PT-4,ITSG-33|AC-17(2),LEVEL|2S,NESA|T5.4.2,NIAv2|AM37,SWIFT-CSCv1|2.6"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set snmp v3 .+ user .+"
      not_expect  : "set snmp v3 .+ user .+ privacy-(3des|des|none) .+"
    </custom_item>

    <custom_item>
      type        : CONFIG_CHECK
      description : "5.7 Ensure SHA1 is set for SNMPv3 authentication"
      info        : "Do not allow unauthenticated SNMPv3 access.

    Rationale:
    SNMPv3 provides much improved security over previous versions by offering options for Authentication and Encryption of messages. Authentication in SNMPv3 is performed using Keyed-Hash Message Authentication Code or HMAC. This technique uses a cryptographic hash function in combination with a secret key to authenticate and ensure the integrity of a given message.
    JUNOS supports the MD5 and SHA1 hash functions for use in SNMPv3 authentication. MD5 is an older protocol which has shown significant vulnerability in recent years, so the more recent and more trusted SHA1 should be used."
      solution    : "For each SNMPv3 user created on your router add privacy options by issuing the following command from the [edit snmp v3 usm local-engine] hierarchy;
    [edit snmp v3 usm local-engine]
    user@host#set user <username> authentication-sha authentication-password <password>

    Default Value:
    No SNMP communities are set by default on most platforms."
      reference   : "800-171|3.1.13,800-53|AC-17(2),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.4.1(c),CSCv7|16.4,CSF|PR.AC-3,CSF|PR.PT-4,ITSG-33|AC-17(2),LEVEL|2S,NESA|T5.4.2,NIAv2|AM37,SWIFT-CSCv1|2.6"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set snmp v3 .+ user .+"
      not_expect  : "set snmp v3 .+ user .+ authentication-(md5|none) .+"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "5.6 Ensure AES128 is set for all SNMPv3 users"
      info        : "Do not allow plaintext SNMPv3 access.

  Rationale:
  SNMPv3 provides much improved security over previous versions by offering options for Authentication and Encryption of messages.
  When configuring a user for SNMPv3 you have the option of using a range of encryption schemes, or no encryption at all, to protect messages in transit. The strongest scheme available is AES128 and this should be configured for all SNMPv3 'users' on all sensitive devices.

  NOTE: SNMPv3 does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.1.13,800-53|AC-17,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CSCv7|14.4,CSF|PR.AC-3,CSF|PR.PT-4,ITSG-33|AC-17,LEVEL|2S,NESA|T5.4.2,NIAv2|AM37,SWIFT-CSCv1|2.6"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>

    <report type:"PASSED">
      description : "5.7 Ensure SHA1 is set for SNMPv3 authentication"
      info        : "Do not allow unauthenticated SNMPv3 access.

  Rationale:
  SNMPv3 provides much improved security over previous versions by offering options for Authentication and Encryption of messages. Authentication in SNMPv3 is performed using Keyed-Hash Message Authentication Code or HMAC. This technique uses a cryptographic hash function in combination with a secret key to authenticate and ensure the integrity of a given message.
  JUNOS supports the MD5 and SHA1 hash functions for use in SNMPv3 authentication. MD5 is an older protocol which has shown significant vulnerability in recent years, so the more recent and more trusted SHA1 should be used.

  NOTE: SNMPv3 does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.1.13,800-53|AC-17,CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CSCv7|16.4,CSF|PR.AC-3,CSF|PR.PT-4,ITSG-33|AC-17,LEVEL|2S,NESA|T5.4.2,NIAv2|AM37,SWIFT-CSCv1|2.6"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for SNMP"
      expect      : "set snmp .+"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "5.9 Ensure SNMP is set to OOB management only"
      info        : "SNMP should only be configured on Out of Band management interfaces.

    Rationale:
    By default the SNMP service will listen for incoming connections on all interfaces which have an IP Address configured, exposing SNMP to users on all networks through which the router is reachable.
    In higher security environments management services, such as SNMPv3, should be restricted such as to only be reachable through the Out of Band management port which is available on most JUNOS platforms.
    The name of the Out of Band Management port varies considerably between platforms, typically:
    - fxp[0-9] on most routing platforms and SRX firewalls
    - me[0-9] on most EX and some QFX switches
    - em[0-9] on some EX and QFX switches
    - jmgmt0 on NFX platforms"
      solution    : "To restrict SNMP to required interfaces issue the following command from the [edit snmp] hierarchy;
    [edit snmp]
    user@host#set interface <interface or interface list>
    To delete an existing interface from the list issue the following command from the [edit snmp] hierachy;
    [edit snmp]
    user@host#delete interface <interface>

    Default Value:
    By default SNMP, when configured, is accessible over all configured interfaces."
      reference   : "800-171|3.13.1,800-53|SC-7(15),CSCv7|11.7,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(15),LEVEL|2S,NESA|T4.5.3,NIAv2|NS5c,NIAv2|NS6a"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set snmp interface .+"
# Note: Variable @SNMP_OOB_INTERFACE@ replaced with "fxp0" in field "expect".
      expect      : "set snmp interface (fxp|me|em|jmgt0|fxp0)"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "5.9 Ensure SNMP is set to OOB management only"
      info        : "SNMP should only be configured on Out of Band management interfaces.

    Rationale:
    By default the SNMP service will listen for incoming connections on all interfaces which have an IP Address configured, exposing SNMP to users on all networks through which the router is reachable.
    In higher security environments management services, such as SNMPv3, should be restricted such as to only be reachable through the Out of Band management port which is available on most JUNOS platforms.
    The name of the Out of Band Management port varies considerably between platforms, typically:
    - fxp[0-9] on most routing platforms and SRX firewalls
    - me[0-9] on most EX and some QFX switches
    - em[0-9] on some EX and QFX switches
    - jmgmt0 on NFX platforms

    NOTE: SNMP does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.13.1,800-53|SC-7,CSCv7|11.7,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7,LEVEL|2S,NESA|T4.5.3,NIAv2|NS5c,NIAv2|NS6a"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.7.2 Ensure NTP Boot-Server is set"
  info        : "At least one server should be configured for the router to update its time on boot.

Rationale:
When the router boots or when a new Routing Engine is installed its time may have drifted or be set beyond the maximum amount where periodic updates can return it to the correct time, resulting in the correct time never being set.
To prevent this situation; a Boot Server should be set from which the JUNOS device will obtain its time as it loads.
Because the ntpdateutility, which contacts the Boot Server, runs prior to many of the other core demons, such as rpd, the Boot Server should be reachable from the device's management interface (fxp0 on most routers, 'em0' or 'me0' on some other platforms) without any Routing Protocol learned routes or Tunnels being available. For this reason, the Boot Server is often a different NTP server to that used during normal operation, potentially just being the management interface of another router in the same management subnet."
  solution    : "To configure an NTP Boot Server, enter the following command from the [edit system ntp] hierarchy;
[edit system ntp]
user@host#set ntp boot-server <Server IP>

Default Value:
By default Juniper routers do not have NTP configured."
  reference   : "800-171|3.3.7,800-53|AU-8(1),CSCv7|6.1,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.4,ITSG-33|AU-8(1),LEVEL|2S,NESA|T3.6.7,NIAv2|NS44,NIAv2|NS45,NIAv2|NS46,NIAv2|NS47"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system ntp .+"
  expect      : "set system ntp boot-server .+"
</custom_item>

<custom_item>
  type            : CONFIG_CHECK
  description     : "6.7.4 Ensure Authentication Keys are used for all NTP Servers"
  info            : "Authentication keys should be set for NTP Servers

Rationale:
Having established the need for NTP, it is essential to ensure that the devices time is not manipulated by an attacker as this could allow DoS to services relying on accurate time as well as replay attacks and other malicious activity.
NTP Version 3 introduced Authentication mechanisms for NTP messages using a Keyed Hash based Message Authentication Check (HMAC), where a hash of the message ensures both that the message is authentic and that it was not changed in transit. All JUNOS platforms support HMAC with NTP Versions 3 and 4 using MD5 and some platforms also support the more robust SHA1 and SHA2-256 algorithms.

NOTE - Both the keys and the algorithm must match on all NTP peers being configured."
  solution        : "Keys are configured on a key ring and identified by an ID number. To add a key enter the following command from the [edit system ntp] hierarchy;
[edit system ntp]
user@host#set authentication-key <Key ID> type <algorithm> value <Key>
The <Key ID> is an arbitrary 32-bit non-zero integer used to identify this key locally on the device. The may be set to MD5 (the default), SHA1 or SHA2-256 (with SHA1 and SHA2 only being supported on some devices).
Next, for each server, configure the key to be used:
[edit system ntp]
user@host#set server key <Key ID>
Finally configure the key as trusted so that the router will accept NTP traffic encrypted using it. This mechanism provides an easy method to retire keys in the event of compromise. Enter following command from the [edit system ntp] hierarchy;
[edit system ntp]
user@host#set trusted-key <Key ID>
The <Key ID> which is trusted can be one key or several keys by enclosing the list in square brackets or repeating the command.

Impact:
If keys or algorithms do not match on NTP Servers and Client devices NTP will not be able to update and this could impact Logging, Authentication, Encryption/VPN or other services which rely on consistent time.

Default Value:
NTP is not configured by default"
  reference       : "800-171|3.3.7,800-53|AU-8(1),CSCv7|6.1,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.4,ITSG-33|AU-8(1),LEVEL|2S,NESA|T3.6.7,NIAv2|NS44,NIAv2|NS45,NIAv2|NS46,NIAv2|NS47,PCI-DSSv3.1|10.4,PCI-DSSv3.2|10.4,TBA-FIISB|27.1"
  see_also        : "https://workbench.cisecurity.org/files/2278"
  regex           : "set system ntp server key .+"
  number_of_lines : "^([2-9]|[1-9][0-9]+)$"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.7.5 Ensure Different Authentication Keys for each NTP Server"
  info        : "Different authentication keys should be set for each NTP Server

Rationale:
As discussed in the previous requirement, authentication keys should be set to allow the router to verify the Server's identity and that data has not been altered in transit.
In high security environments, prevent the compromise of a single server or key undermining your NTP infrastructure by using different keys for each NTP Server configured.
This is significant additional configuration, but does increase the difficulty for an attacker who would now need to compromise multiple keys or servers and also allows any compromise to be quickly responded to, with the affected server immediately removed from production and re-keyed while the network continues to use the remaining server/s.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Keys are configured on a key ring and identified by an ID number. To add a key enter the following commands from the [edit system ntp] hierarchy:
[edit system ntp]
user@host#set authentication-key <Key ID> type <algorithm> value <Key>
user@host#set trusted-key <Key ID>
Set the keys for all configured NTP servers using the following commands under the [edit system ntp] hierarchy:
[edit system ntp]
user@host#set server <Servers IP> key <key ID>
If this device is operating as an NTP Server and has clients which use different keys or algorithms, these can be set with the peer option:
[edit system ntp]
user@host#set peer <Peers IP> key <key ID>

NOTE - The Key ID must also be listed in the trusted-key list to be accepted.

Default Value:
NTP is not configured by default."
  reference   : "800-53|IA-3,CSCv7|6.1,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3,TBA-FIISB|27.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system ntp .+"
  expect      : "set system ntp authentication-key .+"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.7.6 Ensure Strong Authentication Methods are used for NTP Authentication"
  info        : "Strong authentication methods should be set for NTP Servers

Rationale:
Having established the need for NTP, it is essential to ensure that the devices time is not manipulated by an attacker as this could allow DoS to services relying on accurate time as well as replay attacks and other malicious activity.
NTP Version 3 introduced Authentication mechanisms for NTP messages using a Keyed Hash based Message Authentication Check (HMAC), where a hash of the message ensures both that the message is authentic and that it was not changed in transit. All JUNOS platforms support HMAC with NTP Versions 3 and 4 using MD5 and some platforms also support the more robust SHA1 and SHA2-256 algorithms.
Message Digest 5 (MD5) is an older hashing mechanism dating back to the early 90's. Since 2004 an increasing number of collision vulnerabilities have been shown in MD5 and the algorithm is no longer considered suitable for authentication and integrity protection of sensitive material or X.509 certificates.
While not supported across all devices, some JUNOS devices now support use of SHA1 and SHA2-256 HMAC for NTP message authentication and these should be considered for deployment where available and the security of network segments used to reach NTP Servers is of concern.

NOTE - Both the keys and the algorithm must match on all NTP peers being configured.
Where some peers do not support the more advanced algorithms or do not require the additional protections use the server or peer (if you are configuring a JUNOS device to act as the NTP Server) option to set individual keys and algorithms on a per peer basis."
  solution    : "Keys are configured on a key ring and identified by an ID number. To add a key enter the following command from the [edit system ntp] hierarchy;
[edit system ntp]
user@host#set authentication-key <Key ID> type <algorithm> value <Key>
<Key ID> is an arbitrary 32-bit non-zero integer used to identify this key locally on the device. The <algorithm> can be set to MD5 (the default), SHA1 or SHA2-256 (with SHA1 and SHA2 only being supported on some devices) - for Strong Authentication Methods you should use sha1 or sha2-256 only.
Finally configure the key as trusted so that the router will accept NTP traffic encrypted using it. This mechanism provides an easy method to retire keys in the event of compromise. Enter following command from the [edit system ntp] hierarchy;
[edit system ntp]
user@host#set trusted-key <Key ID>
The <Key ID> which is trusted can be one key or several keys by enclosing the list in square brackets or repeating the command.

NOTE - Keys can also be set on a per server or per peer or broadcast basis (if this device is also acting as an NTP Server), but the key must also be trusted here.

Impact:
If keys or algorithms do not match on NTP Servers and Client devices NTP will not be able to update and this could impact Logging, Authentication, Encryption/VPN or other services which rely on consistent time.

Default Value:
NTP is not configured by default"
  reference   : "800-53|IA-3,CSCv6|11.4,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3,TBA-FIISB|27.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system ntp .+"
  expect      : "set system ntp authentication-key .+ type (sha1|sha2-256) .+"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.14 Ensure Configuration File Encryption is Set"
  info        : "Configuration files should be encrypted.

Rationale:
On many JUNOS platforms the configuration files are stored on a removal flash file system.
A malicious user with even momentary physical access to the router could readily remove the flash card, gaining access to the device's configuration which is likely to contain extremely sensitive details.
Exposure to this type of attack increased in Branch Office or Customer Premises Equipment (CPE) installations or where devices are transported by third parties post configuration.
To prevent an attacker accessing the configuration files from flash, JUNOS Devices offer a facility to encrypt the /config and /var/db/config directories using AES or DES algorithms.

NOTE - Export restrictions mean that AES is not available in all regions."
  solution    : "To enable Configuration File Encryption, you must first set an encryption key by issuing the following command from Operational Mode:
user@host>request system set-encryption-key
You will be prompted to enter and then verify the key.
The preferred encryption algorithm may be specified by adding the algorithm option, or left as default. If the device is running the US/Domestic version of JUNOS the default algorithm will be AES. Devices running the Export version of JUNOS will default to the weaker DES standard and cannot be configured to support AES.
Optionally, the unique option may be specified. This will cause JUNOS to combine the device's Serial Number as part of the Encryption Key, making the configuration unloadable on any other JUNOS device, even with the key set at the prompt.
Once a key has been set the following command should be issued from the [edit system] hierarchy:
[edit system]
user@host# set encrypt-configuration-files
The encryption will not be carried out until the configuration is committed.

Impact:
The configuration files will be encrypted on storage and the JUNOS Device will use the key stored in its EEPROM to decrypt the configuration file at boot.
Adding the unique option will cause the JUNOS Device to combine the device Serial Number with the entered key when creating the Encryption Key, meaning that the configuration can only be loaded by this JUNOS Device - even with the key being configured.

Default Value:
Configuration file encryption is disabled by default."
  reference   : "800-171|3.13.16,800-53|SC-28(1),CSCv7|11,CSF|PR.DS-1,ITSG-33|SC-28(1),LEVEL|2S,TBA-FIISB|28.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system .+"
  expect      : "set system encrypt-configuration-files"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.15 Ensure Multicast Echo is Set to Disabled"
  info        : "The Routing Engine should ignore Echo Requests sent to Multicast addresses.

Rationale:
An attacker may use multicast Echo Requests (pings) during recognizance of a network to obtain a list of network systems and what services they may be offering.
An example of this would be sending a ping to 224.0.0.18, hoping to discover routers in the network running VRRP.
In most environments it is not necessary for the Routing Engine to respond to Multicast Echo Requests to function correctly; however in some cases this will be required, such as for troubleshooting in environments with Multicast Routing support. Only disable this functionality if you are certain you do not need it."
  solution    : "To ignore multicast Echo Requests, issue the following command from the [edit system] hierarchy;
[edit system]
user@host#set no-multicast-echo

Impact:
The JUNOD Device will not respond to ICMP Echo Requests (pings) sent to Multicast Addresses used by the device.

Default Value:
By default JUNOS Devices respond to multicast Echo Requests for multicast groups it is a member of."
  reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|9.2,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|2S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system .+"
  expect      : "set system no-multicast-echo"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.18 Ensure Time-Zone is Set to UTC"
  info        : "All devices should use the UTC time zone.

Rationale:
When a network comprises of hosts across multiple countries or states, the use of local time zones can make analysis of log events confusing and error prone, particularly when localized 'Daylight Savings Time' or equivalent changes occur, affecting one area but not another.
To prevent confusion Coordinated Universal Time (UTC) should be used for all routers to allow consistent logging timestamps. UTC can be considered equivalent to GMT+0 for the purposes of setting time zones (it is actually GMT with added leap seconds defined by atomic clocks at the US Naval Observatory).
By having all Servers and Network Devices utilizing the same time-zone for logging; correlation and co-ordination is greatly simplified and Incident Response time is decreased."
  solution    : "To configure the Time Zone, issue the following command from the [edit system] hierarchy;
[edit system]
user@host#set time-zone UTC

Impact:
System time, for example viewed with the show system uptime command, and timestamps in log messages will be given in UTC.

Default Value:
By default the time-zone is set to UTC."
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system time-zone.+"
  expect      : "set system time-zone UTC"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.20 Ensure Default Address Selection is Set"
  info        : "The primary address configured on the loopback should be used as the source in all JUNOS generated packets.

Rationale:
To ensure a consistent source address for traffic from the JUNOS Device, the Loopback address should be configured as the default source address for traffic generated by the Routing Engine. By default the primary address on the Routed or Management Interface from which the traffic will be sent will be used.
When configured, packets for NTP, SNMP Traps, SSH, SYSLOG and other protocols initiated by the router will all use the Loopback address for the packets source unless explicitly configured to use a different address at a more specific hierarchy. This predictable source address makes it easier to configure strict Firewall filters on neighboring network devices."
  solution    : "To set the default source address to the loopback interface enter the following command from the [edit system] hierarchy:
[edit system]
user@host#set default-address-selection
Ensure that a loopback address has been configured for the device from the [edit interfaces lo0] hierarchy.

Impact:
The Primary Address configured on the device's loopback interface will be used as the source for all system generated traffic, unless a different address is specified elsewhere.

Default Value:
No Loopback Address is configured by default and the source address for system generated traffic will be that of the Routed or Management interface nearest the destination."
  reference   : "800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|11,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system .+"
  expect      : "set system default-address-selection"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.1.4 Recommend Accounting of Interactive Commands (where External AAA is used)"
  info        : "Where External AAA is used, Interactive Command Accounting Events should be sent to either TACACS+ or RADIUS.

Rationale:
To protect any asset, including a Juniper router, you have to have a record of who logged in or attempted to login as well as who made changes to the configuration and when. For additional security you should also keep records of all commands issued, who issued them and when.
This is not possible in all deployments due to the additional load, network traffic and storage requirements. For most scenarios the high resource use is outweighed by the benefits that the command history provides, particularly in responding to an incident or fault.
JUNOS can log these events to RADIUS and/or TACACS+ servers to allow reliable, centralized records to be kept for all of the devices in your network."
  solution    : "Configure Accounting of Logins and Configuration Changes by entering the following commands under the [edit system accounting] hierarchy;
[edit system accounting]
user@host#set events [change-log interactive-commands login]
The interactive-commands should be selected at a minimum, although in many cases you may also wish to add change-log and login accounting."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|2S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system accounting events .+"
  expect      : "set system accounting events .*interactive-commands.*"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.2.1 Ensure Archive on Commit"
  info        : "The routers configuration should be archived whenever changes are committed.

Rationale:
Before changes made to a JUNOS router are applied they must be committed. Archiving the configuration to an external server on every commit creates a complete history of all changes allowing an effective 'post mortem' to be carried out following any breach and aiding recovery to security and other incidents.
The archive can also be used to alert administrators of unauthorized changes and identify what was changed by utilizing hashes or diff in scripts or systems like Tripwire."
  solution    : "To enable Archival on commit issue the following commands from the [edit system] hierarchy;
[edit system]
user@host#set archival configuration transfer-on-commit

Default Value:
Archival is not configured by default."
  reference   : "800-171|3.8.9,800-53|CP-9,CSCv7|10.4,CSF|PR.IP-4,ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,LEVEL|2S,NESA|M5.2.3,NESA|T2.2.4"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system archival .+"
  expect      : "set system archival configuration transfer-on-commit"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.2.2 Ensure at least one SCP Archive Site is configured"
  info        : "Configuration archival should use only secure transport over SCP.

Rationale:
Archiving the configuration to an external server creates a history of changes allowing an effective 'post mortem' to be carried out following any breach and aiding recovery to security and other incidents.
The archive can also be used to alert administrators of unauthorized changes and identify what was changed by utilizing hashes or diff in scripts or systems like Tripwire.
At least one Secure Copy (SCP) Archive Site should be configured on the router. No other transport methods should be used."
  solution    : "To enable a Secure Copy Archival Site on commit issue the following commands from the [edit system] hierarchy;
[edit system]
user@host#set archival configuration archive-site <SCP URL> password <password>

Default Value:
Archival is not configured by default"
  reference   : "800-171|3.8.9,800-53|CP-9,CSCv7|10.1,CSF|PR.IP-4,ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,LEVEL|2S,NESA|M5.2.3,NESA|T2.2.4"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system archival .+"
  expect      : "set system archival configuration archive-site .+ password .+"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.5.1 Ensure ICMPv4 rate-limit is Set"
  info        : "ICMPv4 traffic should be rate limited to protect the devices resources.

Rationale:
Many Denial of Service attacks against network devices will attempt to overwhelm the target's processing, memory or bandwidth by barraging the router with malicious ICMP traffic which may be easily spoofed or generated in significant volumes.
Some administrators simply block all ICMP traffic; however this can cause many problems such as the inability of hosts to perform Path MTU Discovery and preventing debugging through common tools such as Ping (ICMP Echo). Loss of these important ICMP functions can adversely affect the reliability or functionality of the network. By limiting the rate at which ICMP traffic can be sent or received by the Routing Engine, it is possible to limit the impact of many DoS attacks without losing the important functionality that ICMP provides to the network.
The limits are set using two parameters. The first, packet-rate, defines the number of ICMPv4 (of any type) packets allowed per second. Traffic below this rate will be allowed. Traffic above this rate will also be permitted so long as tokens remain in the 'token bucket' associated with the policer. Each packet above the configured packet-rate uses one token until the bucket is empty, at which point all ICMPv4 traffic will be denied. The second parameter, bucket-size, defines the rate at which the token bucket is refilled, controlling the amount by which burst traffic will be permitted..
By default, once configured, the packet-rate will be 1000 packets per second with a bucket-size of 5 seconds. This should be sufficient on most platforms to prevent serious DoS attacks, whilst being high enough not to interfere with normal operation.
The administrator should set the limits based on the normal level of ICMPv4 traffic that is handled by the router. Failure to do this could cause the router to become unreliable in some cases.
This requirement deals only with ICMPv4 Exception Traffic to or from the Routing Engine (the Control Plane of a JUNOS device) and has no effect on ICMPv4 Transit Traffic traversing the device."
  solution    : "ICMPv4 Rate Limiting can be configured by issuing the following commands from the [edit system internet-options] hierarchy.
[edit system internet-options]
user@host#set icmpv4-rate-limit bucket-size <bucket> packet-limit <limit>
Where:
- <bucket> is the size of the Rate Limit Bucket, in seconds (if not specified, defaults to 5 seconds)
- <limit> is the rate at which packets are added to the bucket, in packets per second (if not specified, defaults to 1000pps)

Impact:
If all accumulated packets in the bucket are used, rate limiting will drop all further ICMPv4 traffic to/from the RE until new packets have been added to the bucket at the rate defined by <limit>

Default Value:
By default icmpv4-rate-limit is not configured.
Once configured the bucket-size defaults to 5 seconds and the packet-limit defaults to 1000 packets per second."
  reference   : "800-53|SC-5,CSCv7|11,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|2S,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system internet-options .+"
  expect      : "set system internet-options icmpv4-rate-limit"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type            : CONFIG_CHECK
      description     : "Check for IPv6 configured on any interface"
      regex           : "set interfaces .+ inet6 address .+"
      number_of_lines : "^([1-9]|[1-9][0-9])+$"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "6.5.2 Ensure ICMPv6 rate-limit is Set"
      info        : "ICMPv6 traffic should be rate limited to protect the devices resources.

    Rationale:
    Many Denial of Service attacks against network devices will attempt to overwhelm the target's processing, memory or bandwidth by barraging the router with malicious ICMP traffic which may be easily spoofed or generated in significant volumes.
    Some administrators simply block all ICMP traffic; however this can cause many problems such as the inability of hosts to perform Path MTU Discovery and preventing debugging through common tools such as Ping (ICMP Echo). Loss of these important ICMP functions can adversely affect the reliability or functionality of the network. By limiting the rate at which ICMP traffic can be sent or received by the Routing Engine, it is possible to limit the impact of many DoS attacks without losing the important functionality that ICMP provides to the network.
    The limits are set using two parameters. The first, packet-rate, defines the number of ICMPv6 (of any type) packets allowed per second. Traffic below this rate will be allowed. Traffic above this rate will also be permitted so long as tokens remain in the 'token bucket' associated with the policer. Each packet above the configured packet-rate uses one token until the bucket is empty, at which point all ICMPv6 traffic will be denied. The second parameter, bucket-size, defines the rate at which the token bucket is refilled, controlling the amount by which burst traffic will be permitted..
    By default, once configured, the packet-rate will be 1000 packets per second with a bucket-size of 5 seconds. This should be sufficient on most platforms to prevent serious DoS attacks, whilst being high enough not to interfere with normal operation.
    The administrator should set the limits based on the normal level of ICMPv6 traffic that is handled by the router. Failure to do this could cause the router to become unreliable in some cases.
    This requirement deals only with ICMPv6 Exception Traffic to or from the Routing Engine (the Control Plane of a JUNOS device) and has no effect on ICMPv6 Transit Traffic traversing the device."
      solution    : "ICMPv6 Rate Limiting can be configured by issuing the following commands from the [edit system internet-options] hierarchy.
    [edit system internet-options]
    user@host#set icmpv6-rate-limit bucket <bucket> limit <limit>
    Where:
    - is the size of the Rate Limit Bucket, in seconds (if not specified, defaults to 5 seconds)
    - is the rate at which packets are added to the bucket, in packets per second (if not specified, defaults to 1000pps)

    Impact:
    If all accumulated packets in the bucket are used, rate limiting will drop all further ICMPv6 traffic to/from the RE until new packets have been added to the bucket at the rate defined by

    Default Value:
    By default icmpv6-rate-limit is not configured.
    Once configured the bucket-size defaults to 5 seconds and the packet-limit defaults to 1000 packets per second"
      reference   : "800-53|SC-5,CSCv7|11,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|2S,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set system internet-options .+"
      expect      : "set system internet-options icmpv6-rate-limit"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.5.2 Ensure ICMPv6 rate-limit is Set"
      info        : "ICMPv6 traffic should be rate limited to protect the devices resources.

  Rationale:
  Many Denial of Service attacks against network devices will attempt to overwhelm the target's processing, memory or bandwidth by barraging the router with malicious ICMP traffic which may be easily spoofed or generated in significant volumes.
  Some administrators simply block all ICMP traffic; however this can cause many problems such as the inability of hosts to perform Path MTU Discovery and preventing debugging through common tools such as Ping (ICMP Echo). Loss of these important ICMP functions can adversely affect the reliability or functionality of the network. By limiting the rate at which ICMP traffic can be sent or received by the Routing Engine, it is possible to limit the impact of many DoS attacks without losing the important functionality that ICMP provides to the network.
  The limits are set using two parameters. The first, packet-rate, defines the number of ICMPv6 (of any type) packets allowed per second. Traffic below this rate will be allowed. Traffic above this rate will also be permitted so long as tokens remain in the 'token bucket' associated with the policer. Each packet above the configured packet-rate uses one token until the bucket is empty, at which point all ICMPv6 traffic will be denied. The second parameter, bucket-size, defines the rate at which the token bucket is refilled, controlling the amount by which burst traffic will be permitted..
  By default, once configured, the packet-rate will be 1000 packets per second with a bucket-size of 5 seconds. This should be sufficient on most platforms to prevent serious DoS attacks, whilst being high enough not to interfere with normal operation.
  The administrator should set the limits based on the normal level of ICMPv6 traffic that is handled by the router. Failure to do this could cause the router to become unreliable in some cases.
  This requirement deals only with ICMPv6 Exception Traffic to or from the Routing Engine (the Control Plane of a JUNOS device) and has no effect on ICMPv6 Transit Traffic traversing the device.

  NOTE: IPv6 does not appear to be configured on the target. This check is not applicable."
      reference   : "800-53|SC-5,CSCv7|11,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|2S,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.6.7 Ensure Remote Login Class for Authorization through External AAA - login class"
  info        : "External AAA servers should be utilized to provide Authorization via a single 'Remote' template account.

Rationale:
JUNOS routers ship with 4 Predefined Login Classes for user Authorization, these are:
- super-user
- read-only
- operator
- unauthorized
These classes provide basic Authorization, restricting what users in each class can or cannot do, to allow organizations to get a router up and running, but do not provide fine grained control needed by all but very smallest organizations.
The built in classes also do not meet the other recommendations in this section. For example, the super-user class (which is the only built in class with read/write permissions) also has permission to start a Unix Shell and does not have an Idle Session Timeout.
Because of these limitations it is recommended that Custom Login Classes be defined following the principle of least privilege, where each class of users is granted only those permissions needed to complete their job role.
However, defining and maintaining Custom Login Classes locally on each router, switch, firewall or other network device can quickly become difficult and error prone in a larger environment.
For larger networks JUNOS provides for extremely fine grained access control rules to be defined on an External AAA server running either RADIUS or TACACS+ through the use of Vendor Specific Attributes which map to the same permissions that can be set locally for a class.
Vendor Specific Attributes (or VSAs) are standards based extensions to the RADIUS and TACACS+ protocols and are supported on most implementations by defining an appropriate dictionary.
When performing Authorization using External RADIUS or TACACS+ services, it is recommended that a single 'remote' user is configured on the device and mapped to a 'remote' class with minimal permissions set. The user should be named 'remote' where possible, as this name is reserved by JUNOS as the account to which users are mapped when authenticated through External AAA and for whom the Juniper-Local-User-Name VSA is not set.
When a user is authenticated by RADIUS or TACACS+ the server can return a number of VSAs including:
- Juniper-Local-User-Name - Maps the user to a local user 'template account', if this is not specified the single 'remote' user account is used.
- Juniper-User-Permissions - Allows the server to set the same permissions as would be set in a login class locally. These permission are added to those of the remote user's configured class.
- Juniper-Allow-Commands - Uses an Extended Regular Expression to grant Operational Mode commands in addition to those allowed by the user's class.
- Juniper-Deny-Commands - Uses an Extended Regular Expression to deny Operational Mode commands which would otherwise be allowed by the user's class.
- Juniper-Allow-Configuration - As with the Allow Commands, but to grant Configuration Mode commands not normally allowed by the user's class.
- Juniper-Deny-Configuration - As with Deny Commands, but to deny Configuration Mode commands which would otherwise be allowed by the user's class.

NOTE - This is not a complete list of all attributes and uses the RADIUS VSA naming convention. Equivalent TACACS+ VSAs match the above but with slightly different naming.
By combining the use of the above VSAs from either a RADIUS or TACACS+ server, it is possible to define granular access control equivalent to that which can be set using locally configured Login Classes, but without the need to configure and maintain consistent, granular AAA policy across all devices.
Where devices are primarily managed via Software Defined Networking or other centralized management and/or automation platforms rather than through the CLI or other local interfaces, then this may be sufficient to meet requirements for centralized AAA and/or allow for effective management of local template accounts without using external AAA."
  solution    : "To create a new class you can issue the following commands from the [edit system login] hierarchy. In this example, we create a new class named 'remote', granting only view permissions, and assign the remote user to the new class. More detailed permissions will be added to these permissions
[edit system login]
user@host#set class remote permissions [ view ]
(this class should also have Idle timeouts and other options set in line with other recommendations in this section).
To change the class for a user account, use the following command under the [edit system login] hierarchy:
[edit system login]
user@host#set user remote class remote
A full discussion of RADIUS or TACACS+ configuration and options is beyond the scope of this guide, but a simple example of using a TACACS.net server running on Windows with AD integration for a remote user is shown below.
This example is taken from an anonymized real world deployment, so also includes sections to allow access to different groups of TACACS+ Clients and permissions for Cisco IOS and Netscreen devices. The most relevant section is the <Service> for service=junos-exec, where the VSAs for TACACS+ Clients running JUNOS are defined, but the entire Authorization for this Class is given for context.
<Authorization>
<!--CIS Example remote user Authorization from TACACS.net Authorization.xml-->
	<UserGroups>
	<!-- The UserGroup is defined elsewhere - in this case it maps to an Active Directory Group call GRP-NETOPS -->
        	<UserGroup>GRP-NETOPS</UserGroup>
     	</UserGroups>
	<ClientGroups>
	<!--Defines the Groups of devices this usergroup can login to -->
		<ClientGroup>CORE-NET</ClientGroup>
		<ClientGroup>ACCESS-NET</ClientGroup>
		<ClientGroup>FIREWALLS</ClientGroup>
	</ClientGroups>
	<Shell>
	<!--note that the login and exit commands are always permitted.  (used for Cisco and Netscreen devices) -->
		<Permit>show.*</Permit>
		<Permit>terminal.*</Permit>
    	    	<Permit>get.*</Permit>
		<Deny>.*</Deny>
        </Shell>
	<Services>
		<Service>
		<!-- JUNOS VSAs to set additional user permissions -->
          		<Set>service=junos-exec</Set>
          		<Set>local-user-name=remote</Set> <!--This will be mapped to a template user on JUNOS devices with 'remote' class permissions -->
        		<Set>allow-commands=show.*</Set> <!-- Additional permission (above remote class set above) to allow all 'show' operational commands -->
			<Set>user-permissions=view-configuration</Set> <!-- Grants additional permission to view the full config (no secrets)-->
			<Set>user-permissions=network</Set> <!-- Grants access to the network for SSH, Ping, etc -->
		</Service>
        </Services>
        <AutoExec>
        <!--Set the Priv lvl to 15 for Cisco devices, ignored by JUNOS devices -->
        	<Set>priv-lvl=15</Set>
        </AutoExec>
</Authorization>

Impact:
Careful configuration of permissions following the least privilege principle is essential for secure and reliable management of the network.
When configuring remote AAA, it is recommended that a local Emergency Access Account also be configured to allow management of the device in the event that AAA services are unavailable.

Default Value:
By default all users are, in effect, members of the super-user class."
  reference   : "800-171|3.1.1,800-53|AC-2(7),CSCv7|16.2,CSF|PR.AC-1,CSF|PR.AC-4,ITSG-33|AC-2(7),LEVEL|2S,NESA|M5.3.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system login class .+"
  not_expect  : "(superuser|super-user|read-only|operator|unauthorized)"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.6.7 Ensure Remote Login Class for Authorization through External AAA - remote class"
  info        : "External AAA servers should be utilized to provide Authorization via a single 'Remote' template account.

Rationale:
JUNOS routers ship with 4 Predefined Login Classes for user Authorization, these are:
- super-user
- read-only
- operator
- unauthorized
These classes provide basic Authorization, restricting what users in each class can or cannot do, to allow organizations to get a router up and running, but do not provide fine grained control needed by all but very smallest organizations.
The built in classes also do not meet the other recommendations in this section. For example, the super-user class (which is the only built in class with read/write permissions) also has permission to start a Unix Shell and does not have an Idle Session Timeout.
Because of these limitations it is recommended that Custom Login Classes be defined following the principle of least privilege, where each class of users is granted only those permissions needed to complete their job role.
However, defining and maintaining Custom Login Classes locally on each router, switch, firewall or other network device can quickly become difficult and error prone in a larger environment.
For larger networks JUNOS provides for extremely fine grained access control rules to be defined on an External AAA server running either RADIUS or TACACS+ through the use of Vendor Specific Attributes which map to the same permissions that can be set locally for a class.
Vendor Specific Attributes (or VSAs) are standards based extensions to the RADIUS and TACACS+ protocols and are supported on most implementations by defining an appropriate dictionary.
When performing Authorization using External RADIUS or TACACS+ services, it is recommended that a single 'remote' user is configured on the device and mapped to a 'remote' class with minimal permissions set. The user should be named 'remote' where possible, as this name is reserved by JUNOS as the account to which users are mapped when authenticated through External AAA and for whom the Juniper-Local-User-Name VSA is not set.
When a user is authenticated by RADIUS or TACACS+ the server can return a number of VSAs including:
- Juniper-Local-User-Name - Maps the user to a local user 'template account', if this is not specified the single 'remote' user account is used.
- Juniper-User-Permissions - Allows the server to set the same permissions as would be set in a login class locally. These permission are added to those of the remote user's configured class.
- Juniper-Allow-Commands - Uses an Extended Regular Expression to grant Operational Mode commands in addition to those allowed by the user's class.
- Juniper-Deny-Commands - Uses an Extended Regular Expression to deny Operational Mode commands which would otherwise be allowed by the user's class.
- Juniper-Allow-Configuration - As with the Allow Commands, but to grant Configuration Mode commands not normally allowed by the user's class.
- Juniper-Deny-Configuration - As with Deny Commands, but to deny Configuration Mode commands which would otherwise be allowed by the user's class.

NOTE - This is not a complete list of all attributes and uses the RADIUS VSA naming convention. Equivalent TACACS+ VSAs match the above but with slightly different naming.
By combining the use of the above VSAs from either a RADIUS or TACACS+ server, it is possible to define granular access control equivalent to that which can be set using locally configured Login Classes, but without the need to configure and maintain consistent, granular AAA policy across all devices.
Where devices are primarily managed via Software Defined Networking or other centralized management and/or automation platforms rather than through the CLI or other local interfaces, then this may be sufficient to meet requirements for centralized AAA and/or allow for effective management of local template accounts without using external AAA."
  solution    : "To create a new class you can issue the following commands from the [edit system login] hierarchy. In this example, we create a new class named 'remote', granting only view permissions, and assign the remote user to the new class. More detailed permissions will be added to these permissions
[edit system login]
user@host#set class remote permissions [ view ]
(this class should also have Idle timeouts and other options set in line with other recommendations in this section).
To change the class for a user account, use the following command under the [edit system login] hierarchy:
[edit system login]
user@host#set user remote class remote
A full discussion of RADIUS or TACACS+ configuration and options is beyond the scope of this guide, but a simple example of using a TACACS.net server running on Windows with AD integration for a remote user is shown below.
This example is taken from an anonymized real world deployment, so also includes sections to allow access to different groups of TACACS+ Clients and permissions for Cisco IOS and Netscreen devices. The most relevant section is the <Service> for service=junos-exec, where the VSAs for TACACS+ Clients running JUNOS are defined, but the entire Authorization for this Class is given for context.
<Authorization>
<!--CIS Example remote user Authorization from TACACS.net Authorization.xml-->
	<UserGroups>
	<!-- The UserGroup is defined elsewhere - in this case it maps to an Active Directory Group call GRP-NETOPS -->
        	<UserGroup>GRP-NETOPS</UserGroup>
     	</UserGroups>
	<ClientGroups>
	<!--Defines the Groups of devices this usergroup can login to -->
		<ClientGroup>CORE-NET</ClientGroup>
		<ClientGroup>ACCESS-NET</ClientGroup>
		<ClientGroup>FIREWALLS</ClientGroup>
	</ClientGroups>
	<Shell>
	<!--note that the login and exit commands are always permitted.  (used for Cisco and Netscreen devices) -->
		<Permit>show.*</Permit>
		<Permit>terminal.*</Permit>
    	    	<Permit>get.*</Permit>
		<Deny>.*</Deny>
        </Shell>
	<Services>
		<Service>
		<!-- JUNOS VSAs to set additional user permissions -->
          		<Set>service=junos-exec</Set>
          		<Set>local-user-name=remote</Set> <!--This will be mapped to a template user on JUNOS devices with 'remote' class permissions -->
        		<Set>allow-commands=show.*</Set> <!-- Additional permission (above remote class set above) to allow all 'show' operational commands -->
			<Set>user-permissions=view-configuration</Set> <!-- Grants additional permission to view the full config (no secrets)-->
			<Set>user-permissions=network</Set> <!-- Grants access to the network for SSH, Ping, etc -->
		</Service>
        </Services>
        <AutoExec>
        <!--Set the Priv lvl to 15 for Cisco devices, ignored by JUNOS devices -->
        	<Set>priv-lvl=15</Set>
        </AutoExec>
</Authorization>

Impact:
Careful configuration of permissions following the least privilege principle is essential for secure and reliable management of the network.
When configuring remote AAA, it is recommended that a local Emergency Access Account also be configured to allow management of the device in the event that AAA services are unavailable.

Default Value:
By default all users are, in effect, members of the super-user class."
  reference   : "800-171|3.1.5,800-53|AC-6(1),CSCv7|16.2,CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),LEVEL|2S,NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,SWIFT-CSCv1|5.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system login user .+"
  not_expect  : "set system login user remote class remote"
</custom_item>

<report type:"WARNING">
  description : "6.6.14 Ensure Multi-Factor is used with External AAA"
  info        : "Multi-factor Authentication should be used for management sessions

Rationale:
Even with the password complexity restrictions and use of External AAA servers for centralized control of user Authentication, login with usernames and passwords is commonly exploited through Phishing, Brute Force or other methods.
Multi-Factor Authentication (sometimes called Two-Factor Authentication or 2FA) provides a significant additional layer of security for management sessions by requiring a username, password and some further method/s to all be provided to login.
The additional factor may use an X.509 'SSL' Certificate, a Time Based One Time Password (TOTP), a physical security token, a Fingerprint or may use some other method or even combination of these methods.
In all the cases above, the additional factor provides a significant additional challenge to an attacker looking to successfully pose as the user and compromise the network.
Multi-Factor authentication is widely supported by most External AAA services, either using paid for services like RSA SecureID or free platforms like Google Authenticator, so is included here as a general recommendation relating to AAA and login. However, because the Multi-Factor Authentication is implemented on the AAA Server, it is not possible to include an audit action or include this as a scored recommendation.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Impact:
As with any AAA service, Multi-Factor Authentication should be carefully tested and you should ensure you maintain a local password as a backup method to ensure you are not locked out of your network while implementing such a service.

Default Value:
No External AAA or Multi-Factor Authentication is used by default."
  reference   : "CSCv7|11.5,LEVEL|2NS"
  see_also    : "https://workbench.cisecurity.org/files/2278"
</report>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.10.1.7 Ensure Only Suite B Ciphers are set for SSH - weak ciphers"
  info        : "SSH should be configured with Ciphers based on the Suite B Standard

Rationale:
SSH (Secure Shell) is the defacto standard protocol used for remote administration of network devices and Unix servers, providing an encrypted and authenticated alternative to Telnet. However, this ubiquity and requirement to support a wide range of clients and deployment scenarios, as well as SSH's age, mean SSH needs to support a variety of Ciphers of varying strengths.
By default, for the widest range of client compatibility, JUNOS supports SSH Ciphers using older Encryption Algorithms such as Blowfish or RC4 which are no longer considered suitable for use to protect sensitive services like SSH.
SSH is a vital tool for administering most JUNOS devices, providing privileged access and potentially transporting sensitive information including passwords. It is recommended that SSH sessions be protected by restricting JUNOS to using Ciphers recommended in the National Security Agency Suite B Standard.
Suite B standards for Cryptographic functions are developed and distributed by the US National Security Agency as part of Cryptographic Modernization Programme for protection of US Government data, both unclassified and classified (to Secret). Suite B standards for SSH are set out in RFC6239 and restrict Ciphers to AES-128 and AES-256 in Galois Counter Mode only.
When AES is used in Galois Counter Mode (AEAD_AES_128/256_GCM) for Confidentiality (Ciphers), it is also used to provide Integrity (replacing any Message Authentication Codes (MACs) which may be configured). For more details, please see RFC5647.

NOTE - The OpenSSH implementation used in JUNOS is not fully compliant with Suite B SSH set out in RFC6239, but these standards have been used as guidance for setting the more restrictive Level 2 recommendation."
  solution    : "To remove a single insecure cipher, issue the following command from the [edit system services ssh] hierarchy;
[edit system services ssh]
user@host#delete ciphers <cipher suite name>
If multiple insecure Ciphers were set, it will generally be easier to delete all the Cipher restrictions with the following command:
[edit system services ssh]
user@host#delete ciphers
Once all insecure Ciphers have been removed, add one or more of the AES-GCM ciphers.
[edit system services ssh]
user@host#set ciphers [ aes128-gcm@openssh.com aes256-gcm@openssh.com ]

Impact:
Some SSH Clients or other management applications or automation platforms utilizing SSH may not support the stronger ciphers used in Suite B, so may be unable to connect.
Ensure that all applications are fully tested before deploying this recommendation in a production environment.

Default Value:
For most platforms SSH access is enabled by default but ciphers are not restricted.
Not all platforms or versions of JUNOS support AES in Galois/Counter Mode."
  reference   : "800-171|3.13.10,800-53|SC-12,CSCv7|11.5,ISO/IEC-27001|A.10.1.2,ITSG-33|SC-12,LEVEL|2S,NESA|T7.4.1,NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system services ssh .+"
  not_expect  : "set system services ssh ciphers .*(cbc|ctr|arcfour|chacha).*"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.10.1.7 Ensure Only Suite B Ciphers are set for SSH - ciphers restriction"
  info        : "SSH should be configured with Ciphers based on the Suite B Standard

Rationale:
SSH (Secure Shell) is the defacto standard protocol used for remote administration of network devices and Unix servers, providing an encrypted and authenticated alternative to Telnet. However, this ubiquity and requirement to support a wide range of clients and deployment scenarios, as well as SSH's age, mean SSH needs to support a variety of Ciphers of varying strengths.
By default, for the widest range of client compatibility, JUNOS supports SSH Ciphers using older Encryption Algorithms such as Blowfish or RC4 which are no longer considered suitable for use to protect sensitive services like SSH.
SSH is a vital tool for administering most JUNOS devices, providing privileged access and potentially transporting sensitive information including passwords. It is recommended that SSH sessions be protected by restricting JUNOS to using Ciphers recommended in the National Security Agency Suite B Standard.
Suite B standards for Cryptographic functions are developed and distributed by the US National Security Agency as part of Cryptographic Modernization Programme for protection of US Government data, both unclassified and classified (to Secret). Suite B standards for SSH are set out in RFC6239 and restrict Ciphers to AES-128 and AES-256 in Galois Counter Mode only.
When AES is used in Galois Counter Mode (AEAD_AES_128/256_GCM) for Confidentiality (Ciphers), it is also used to provide Integrity (replacing any Message Authentication Codes (MACs) which may be configured). For more details, please see RFC5647.

NOTE - The OpenSSH implementation used in JUNOS is not fully compliant with Suite B SSH set out in RFC6239, but these standards have been used as guidance for setting the more restrictive Level 2 recommendation."
  solution    : "To remove a single insecure cipher, issue the following command from the [edit system services ssh] hierarchy;
[edit system services ssh]
user@host#delete ciphers <cipher suite name>
If multiple insecure Ciphers were set, it will generally be easier to delete all the Cipher restrictions with the following command:
[edit system services ssh]
user@host#delete ciphers
Once all insecure Ciphers have been removed, add one or more of the AES-GCM ciphers.
[edit system services ssh]
user@host#set ciphers [ aes128-gcm@openssh.com aes256-gcm@openssh.com ]

Impact:
Some SSH Clients or other management applications or automation platforms utilizing SSH may not support the stronger ciphers used in Suite B, so may be unable to connect.
Ensure that all applications are fully tested before deploying this recommendation in a production environment.

Default Value:
For most platforms SSH access is enabled by default but ciphers are not restricted.
Not all platforms or versions of JUNOS support AES in Galois/Counter Mode."
  reference   : "800-171|3.13.11,800-53|SC-13,CSCv7|11.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|2S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system services ssh .+"
  expect      : "set system services ssh ciphers .+"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.10.1.10 Ensure Only Suite B Key Exchange Methods are set for SSH - weak key-exchange"
  info        : "SSH should be configured to use only Suite B key exchange algorithms.

Rationale:
SSH (Secure Shell) is the defacto standard protocol used for remote administration of network devices and Unix servers, providing an encrypted and authenticated alternative to Telnet. However, this ubiquity and requirement to support a wide range of clients and deployment scenarios, as well as SSH's age, mean SSH needs to support a variety of Ciphers of varying strengths.
By default, for the widest range of client compatibility, JUNOS supports SSH Key Exchange using older algorithms and methods such as Diffie-Hellman Group 1 with SHA1.
SSH is a vital tool for administering most JUNOS devices, providing privileged access and potentially transporting sensitive information including passwords. It is recommended that SSH sessions be protected by restricting JUNOS to using stronger Key Exchange methods recommended in the National Security Agency Suite B Standard.
Suite B standards for Cryptographic functions are developed and distributed by the US National Security Agency as part of Cryptographic Modernization Program for protection of US Government data, both unclassified and classified (to Secret). Suite B standards for SSH are set out in RFC6239 and restrict Key Exchange to Elliptic Curve Diffie Hellman with NIST P Values and SHA2 only.

NOTE - The OpenSSH implementation used in JUNOS is not fully compliant with Suite B SSH set out in RFC6239, but these standards have been used as guidance for setting the more restrictive Level 2 recommendation."
  solution    : "To remove a single non-Suite B Key Exchange method, issue the following command from the [edit system services ssh] hierarchy;
[edit system services ssh]
user@host# delete key-exchange <mac name>
If multiple insecure Key Exchange methods were set, it will generally be easier to delete all the Key Exchange method restrictions with the following command:
[edit system services ssh]
user@host# delete key-exchange
Once all insecure methods have been removed, add one or more stronger Key Exchange methods (in this example all Suite B methods available on most JUNOS devices are set in a single command)
[edit system services ssh]
user@host# set key-exchange [ ecdh-sha2-nistp256 ecdh-sha2-nistp384  ecdh-sha2-nistp512 ]

NOTE - The ecdh-sha2-nistp512 Key Exchange method is not cited specifically in RFC6239, but is acceptable in addition/in place of the other NIST Elliptic Curve Diffie Hellman exchange methods for the purposes of this recommendation.
Finally, single Key Exchange methods or a smaller selection of these more secure methods may be selected on the user's discretion.
[edit system services ssh]
user@host# set key-exchange <method>

Impact:
Some SSH Clients or other management applications or automation platforms utilizing SSH may not support the stronger Key Exchange Methods used in Suite B, so may be unable to connect.
Ensure that all applications are fully tested before deploying this recommendation in a production environment.

Default Value:
For most platforms SSH access is enabled by default but key exchange methods are not restricted.
On FIPS releases the curve25519-sha256, dh-group1-sha1, group-exchange-sha & group-exchange-sha2 methods are not supported."
  reference   : "800-171|3.13.10,800-53|SC-12,CSCv7|11.5,ISO/IEC-27001|A.10.1.2,ITSG-33|SC-12,LEVEL|2S,NESA|T7.4.1,NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system services ssh .+"
  not_expect  : "set system services ssh key-exchange .*(curve25519|dh-group|group-exchange).*"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.10.1.10 Ensure Only Suite B Key Exchange Methods are set for SSH - key-exchange restriction"
  info        : "SSH should be configured to use only Suite B key exchange algorithms.

Rationale:
SSH (Secure Shell) is the defacto standard protocol used for remote administration of network devices and Unix servers, providing an encrypted and authenticated alternative to Telnet. However, this ubiquity and requirement to support a wide range of clients and deployment scenarios, as well as SSH's age, mean SSH needs to support a variety of Ciphers of varying strengths.
By default, for the widest range of client compatibility, JUNOS supports SSH Key Exchange using older algorithms and methods such as Diffie-Hellman Group 1 with SHA1.
SSH is a vital tool for administering most JUNOS devices, providing privileged access and potentially transporting sensitive information including passwords. It is recommended that SSH sessions be protected by restricting JUNOS to using stronger Key Exchange methods recommended in the National Security Agency Suite B Standard.
Suite B standards for Cryptographic functions are developed and distributed by the US National Security Agency as part of Cryptographic Modernization Program for protection of US Government data, both unclassified and classified (to Secret). Suite B standards for SSH are set out in RFC6239 and restrict Key Exchange to Elliptic Curve Diffie Hellman with NIST P Values and SHA2 only.

NOTE - The OpenSSH implementation used in JUNOS is not fully compliant with Suite B SSH set out in RFC6239, but these standards have been used as guidance for setting the more restrictive Level 2 recommendation."
  solution    : "To remove a single non-Suite B Key Exchange method, issue the following command from the [edit system services ssh] hierarchy;
[edit system services ssh]
user@host# delete key-exchange <mac name>
If multiple insecure Key Exchange methods were set, it will generally be easier to delete all the Key Exchange method restrictions with the following command:
[edit system services ssh]
user@host# delete key-exchange
Once all insecure methods have been removed, add one or more stronger Key Exchange methods (in this example all Suite B methods available on most JUNOS devices are set in a single command)
[edit system services ssh]
user@host# set key-exchange [ ecdh-sha2-nistp256 ecdh-sha2-nistp384  ecdh-sha2-nistp512 ]

NOTE - The ecdh-sha2-nistp512 Key Exchange method is not cited specifically in RFC6239, but is acceptable in addition/in place of the other NIST Elliptic Curve Diffie Hellman exchange methods for the purposes of this recommendation.
Finally, single Key Exchange methods or a smaller selection of these more secure methods may be selected on the user's discretion.
[edit system services ssh]
user@host# set key-exchange <method>

Impact:
Some SSH Clients or other management applications or automation platforms utilizing SSH may not support the stronger Key Exchange Methods used in Suite B, so may be unable to connect.
Ensure that all applications are fully tested before deploying this recommendation in a production environment.

Default Value:
For most platforms SSH access is enabled by default but key exchange methods are not restricted.
On FIPS releases the curve25519-sha256, dh-group1-sha1, group-exchange-sha & group-exchange-sha2 methods are not supported."
  reference   : "800-171|3.13.11,800-53|SC-13,CSCv7|11.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|2S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system services ssh .+"
  expect      : "set system services ssh key-exchange .+"
</custom_item>

<custom_item>
  type            : CONFIG_CHECK
  description     : "6.10.1.12 Ensure Only Suite B Based Key Signing Algorithms are set for SSH - DSA keys"
  info            : "SSH should be configured with Suite B based key signing algorithms

Rationale:
SSH (Secure Shell) is the defacto standard protocol used for remote administration of network devices and Unix servers, providing an encrypted and authenticated alternative to Telnet. However, this ubiquity and requirement to support a wide range of clients and deployment scenarios, as well as SSH's age, mean SSH needs to support a variety of Ciphers of varying strengths.
By default, for the widest range of client compatibility, JUNOS supports SSH Key Signing methods using older algorithms and methods such as 1024 bit DSA keys.
SSH is a vital tool for administering most JUNOS devices, providing privileged access and potentially transporting sensitive information including passwords. It is recommended that SSH sessions be protected by restricting JUNOS to using stronger Key Signing methods based on National Security Agency Suite B Standards, while weaker signing methods are explicitly disabled.
Suite B standards for Cryptographic functions are developed and distributed by the US National Security Agency as part of Cryptographic Modernization Programme for protection of US Government data, both unclassified and classified (to Secret). Suite B standards for SSH are set out in RFC6239 and restrict Key Signing to x509v3-ecdsa-sha2-nistp256 or x509v3-ecdsa-sha2-nistp384 only.

NOTE - The OpenSSH implementation used in JUNOS is not fully compliant with Suite B SSH set out in RFC6239, but these standards have been used as guidance for setting the more restrictive Level 2 recommendation. In particular, at time of writing, JUNOS does not support SSH Authentication through the use of X.509 Certificates - so it is not possible to be fully compliant with the Suite B recommendations, however ECDSA based Key Signing is supported, including with the NIST P 256bit and 384bit P Values, for Public Keys."
  solution        : "To explicitly disable DSA, RSA and ED25519 signatures, type the following commands at the [edit system services ssh] hierarchy:
[edit system services ssh]
user@host#show hostkey-algorithm no-ssh-dss
user@host#show hostkey-algorithm no-ssh-rsa
user@host#show hostkey-algorithm no-ssh-ed25519
Enable ECDSA for SSH Public Keys using the following commands:
[edit system services ssh]
user@host#show hostkey-algorithm ssh-ecdsa

Impact:
Some SSH Clients or other management applications or automation platforms utilizing SSH may not support the stronger ECDSA Key Signing standard, so may be unable to connect.
Ensure that all applications are fully tested before deploying this recommendation in a production environment.

Default Value:
For most platforms SSH-ECDSA, SSH-ED25519, SSH-DSS (1024 bit DSA keys) and SSH-RSA are permitted by default.
SSH-DSS is not supported on JUNOS in FIPS Mode, so cannot be enabled in FIPS mode."
  reference       : "800-171|3.13.11,800-53|SC-13,CSCv7|11.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|2S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also        : "https://workbench.cisecurity.org/files/2278"
  regex           : "set system services ssh hostkey-algorithm no-ssh-(dss|rsa|ed25519)"
  number_of_lines : "^3$"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.10.1.12 Ensure Only Suite B Based Key Signing Algorithms are set for SSH - ECDSA Key"
  info        : "SSH should be configured with Suite B based key signing algorithms

Rationale:
SSH (Secure Shell) is the defacto standard protocol used for remote administration of network devices and Unix servers, providing an encrypted and authenticated alternative to Telnet. However, this ubiquity and requirement to support a wide range of clients and deployment scenarios, as well as SSH's age, mean SSH needs to support a variety of Ciphers of varying strengths.
By default, for the widest range of client compatibility, JUNOS supports SSH Key Signing methods using older algorithms and methods such as 1024 bit DSA keys.
SSH is a vital tool for administering most JUNOS devices, providing privileged access and potentially transporting sensitive information including passwords. It is recommended that SSH sessions be protected by restricting JUNOS to using stronger Key Signing methods based on National Security Agency Suite B Standards, while weaker signing methods are explicitly disabled.
Suite B standards for Cryptographic functions are developed and distributed by the US National Security Agency as part of Cryptographic Modernization Programme for protection of US Government data, both unclassified and classified (to Secret). Suite B standards for SSH are set out in RFC6239 and restrict Key Signing to x509v3-ecdsa-sha2-nistp256 or x509v3-ecdsa-sha2-nistp384 only.

NOTE - The OpenSSH implementation used in JUNOS is not fully compliant with Suite B SSH set out in RFC6239, but these standards have been used as guidance for setting the more restrictive Level 2 recommendation. In particular, at time of writing, JUNOS does not support SSH Authentication through the use of X.509 Certificates - so it is not possible to be fully compliant with the Suite B recommendations, however ECDSA based Key Signing is supported, including with the NIST P 256bit and 384bit P Values, for Public Keys."
  solution    : "To explicitly disable DSA, RSA and ED25519 signatures, type the following commands at the [edit system services ssh] hierarchy:
[edit system services ssh]
user@host#show hostkey-algorithm no-ssh-dss
user@host#show hostkey-algorithm no-ssh-rsa
user@host#show hostkey-algorithm no-ssh-ed25519
Enable ECDSA for SSH Public Keys using the following commands:
[edit system services ssh]
user@host#show hostkey-algorithm ssh-ecdsa

Impact:
Some SSH Clients or other management applications or automation platforms utilizing SSH may not support the stronger ECDSA Key Signing standard, so may be unable to connect.
Ensure that all applications are fully tested before deploying this recommendation in a production environment.

Default Value:
For most platforms SSH-ECDSA, SSH-ED25519, SSH-DSS (1024 bit DSA keys) and SSH-RSA are permitted by default.
SSH-DSS is not supported on JUNOS in FIPS Mode, so cannot be enabled in FIPS mode."
  reference   : "800-171|3.13.11,800-53|SC-13,CSCv7|11.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|2S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system services ssh .+"
  expect      : "set system services ssh hostkey-algorithm ssh-ecdsa"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.10.1.13 Ensure SSH Key Authentication is Disabled"
  info        : "SSH Key based Authentication should be disabled (if not used for automation)

Rationale:
Due to the sensitive nature of SSH, potentially allowing full management of the targeted device, protecting SSH access using strong authentication methods is essential to the security of the device.
One method which is supported in SSH for stronger authentication is the use of Public/Private Encryption Key Pairs in place of a more traditional login prompt for a Username and Password. Instead, an administrator uploads the user's Public key to the JUNOS (or other) device to be managed.
When the user connects, they will use their Private key to encrypt some session specific data. The JUNOS device can verify the Users identity by decrypting that data using the Public key configured previously and comparing it to an expected result. If the results match, then the user must have access to the Private key, so is considered valid.
Unfortunately using SSH Keys to authenticate User Logins to JUNOS devices introduce a number of security issues:
- Public Keys may only be configured locally on each JUNOS device
- Public Keys are used instead of centralized AAA using TACACS+ or RADIUS as covered in Recommendation 6.8.1 Ensure External AAA Server is set
- The use of SSH Keys means only a single Authentication Factor (the keys) can be used, preventing the use of Multi Factor Authentication as covered in 6.6.14 Ensure Multi-Factor is used with External AAA
- JUNOS does not provide any method to automate rollover or locking of keys. If keys are compromised/lost, they must be changed on every JUNOS device on which they are configured.
- Some SSH implementation support the use of X.509 PKI Certificates for managing SSH Keys, but JUNOS does not.
- Because of these limitations and the difficulty in auditing and managing SSH Keys on JUNOS devices, this method should not be used for Authentication of User logins or for the Root User.
Due to these limitations, it is recommended that SSH Key based Authentication be disabled when it is not required to support automation systems.
In some instances, such as when using PyEZ or NETCONF based automation over SSH, it may be preferable to authenticate a limited number of automation services using SSH Keys, rather than 'hard coding' user details into scripts. Where this is the case, then this recommendation should not be implemented as it disables all use of SSH Key based Authentication.
When using SSH Keys for automation, it is imperative to have strong key management procedures in use to control and audit access to the Private Keys used and a process to allow for rollover and revocation of compromised keys. Consider using a Centralized SSH Key Management solution when trying to achieve this at scale."
  solution    : "To disable the use of SSH Key based Authentication, issue the following command from the [edit system service ssh] hierarchy:
[edit system services ssh]
user@host# set no-public-keys

Impact:
Ensure that SSH Key based Authentication is not required for automation systems and that any User Logins previously using SSH Keys have been configured with an alternative authentication methods before disabling SSH Key based Authentication.

Default Value:
SSH Key based authentication is supported, but no keys are configured by default."
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|16.3,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|2NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system services ssh .+"
  expect      : "set system services ssh no-public-keys"
</custom_item>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for web-management"
      regex       : "set system services .+"
      expect      : "set system services web-management"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "6.10.2.3 Ensure Web-Management is Set to use PKI Certificate for HTTPS"
      info        : "JWeb should only be accessed using HTTPS with a PKI Certificate

    Rationale:
    JWeb can be configured to provide a Web GUI over either HTTP or HTTPS.
    When configured to use HTTPS X.509 Certificates are used to:
    - Share Public Encryption Keys
    - Provide Identity Information
    - Validate the Web Server's Identity
    - Enforce Encryption Key Rollover by limiting their validity period
    JWeb can be configured to use Self Signed 'System-Generated' X.509 Certificates, where the JUNOS device makes an identity claim, such as 'I am myrouter.myorg.com', without any external validation. When an administrator connects to JWeb their browser will generate a Security Error due to this lack of validation, which the user will need to accept in order to proceed to the interface.
    Without validation from a trusted Certificate Authority (CA), either an Internal or Public CA, administrators may be unable to detect when a management session is being intercepted or impersonated by an attacker. Additionally, a Self Signed certificate cannot be centrally revoked should a compromise be detected, relying instead on each user manually removing trust for the compromised Certificate.
    A Certificate Authority is a Trusted Third Party which validates X.509 Certificates by signing them, using a secure Hashing algorithm and their own Private Key. A CA may be part of an organization's internal Public Key Infrastructure (PKI) or an Public CA service such as those provided by Verisign, Entrust or Microsoft.
    Commonly, for signing Certificates used for internal management and systems, Organizations will configure their own PKI rather than paying for Public CA Services - configuring their End Points to trust Certificates signed by their CA through Group Policy or similar methods.
    Either option is equally acceptable for use with JWeb, but Self Signed Certificates should not be used.
    In addition, JUNOS offers two options for the storage and management of Certificates and their associated Private Keys:
    - in the configuration under the [edit security certificates] hierarchy
    - in a protected PKI store in memory
    While the keys are hashed when stored in the configuration file, they are still exposed through backups and management access to the device. Storing Certificates and Keys in the device's PKI store means that the Private Keys are never accessible and that additional protections to this restricted area of memory can be used.
    Due to these limitations PKI Certificates from a trusted Certificate Authority should always be used for JWeb Management and should always be stored in the device's PKI store rather than local configuration."
      solution    : "To configure Web-Management with a PKI Certificate issue the following command from the [edit system service web-management] hierarchy:
    [edit system services web-management]
    user@host# set https pki-local-certificate <Certificate ID>
    Where <Certificate ID> is the name of a Certificate which has already been loaded to the devices PKI Store.
    To create a new Public/Private Key Pair in the devices PKI Store and generate Certificate Signing Request issue the following commands from Operational Mode:
    user@host> request security pki generate-key-pair certificate-id <Certificate ID> type <Algorithm> size <Size>

    user@host> request security pki generate-certificate-request certificate-id <Certificate ID> domain-name <Device DNS Name> subject <Device Subject DN>
    Where:
    - <Certificate ID> is the Name that will be used for this Certificate throughout configuration
    - <Algorithm> is the Encryption Algorithm to be used (this should be either RSA or ECC)
    - <Size> is the number of Bits used for the keys (use at least 2048bits for RSA or 256bits for ECC)
    - <Device DNS Name> is the FQDN which will be used to manage the device and
    -<Device Subject DN> is the Distinguished Name used to identify this device and certificate.
    Optionally, fields for email address, the device's IP Address and and output Filename for the PKCS#10 CSR which will be generated can be included.
    The CSR should then be submitted to the Certificate Authority for review and signing.
    Once the CA returns the Certificate it can be uploaded to the JUNOS device and imported with the following command from Operational Mode:
    user@host> request security pki local-certificate load certificate-id <Certificate ID> filename <File Upload Location>

    Impact:
    Ensure an alternative method to manage the JUNOS device is configured and working prior to changing the Certificate used for HTTPS to ensure continued access in the event of any errors.

    Default Value:
    Varies by platform. For some Branch and SME focused devices, like the SRX300 or EX2300, JWeb is enabled by default. For most larger Enterprise and SP devices JWeb is disabled by default."
      reference   : "800-171|3.13.11,800-53|SC-13,CSCv7|11.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|2S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set system services web-management .+"
      expect      : "set system services web-management https pki-local-certificate .+"
    </custom_item>

    <custom_item>
      type        : CONFIG_CHECK
      description : "6.10.2.7 Ensure Web-Management Interface Restriction is set to OOB Management"
      info        : "JWeb access should be restricted to trusted networks

    Rationale:
    By default, when configured, the JWeb service will listen for incoming connections on all interfaces which have an IP Address configured, exposing JWeb to users on all networks through which the device is reachable.
    Because control of Network Systems can have a serious impact on the security of your environment, the JUNOS device should only be manageable using Out Of Band (OOB) Management networks reached through the devices' dedicated Management Interface (called FXP0.0 on most platforms).
    This can be accomplished by limiting the interfaces on which the JWeb HTTPS service operates to only include the devices' OOB Interface. Firewall Filters or Security Policy (SRX) should also be used to further restrict management to authorized sources (see Recommendations in Section 2 - Firewall for further details).
    Some JUNOS devices do not have dedicated OOB Management ports. In some cases a 'revenue port' can be configured to act as a Management port, such as by defining a 'management' functional zone with a Branch/SME SRX Firewall. This type of restricted OOB Management Port is accepted as meeting this recommendation, but is not tested for under the audit procedure as a variety of ports might be used."
      solution    : "To apply JWEB Interface restrictions issue the following commands from the [edit system services web-management https] hierarchy:
    To set a single Interface:
    [edit system services web-management https]
    user@host#set interface <interface>
    Or to set multiple Interfaces:
    [edit system services web-management https]
    user@host#set interface [ <interface 1> <interface 2> <interface n> ]
    Interfaces should only be fxp0.0, em0.0, me0.0 or jmgmt0.0 (dependent on platform) dedicated Out Of Band Management ports.

    Impact:
    Ensure that JWeb Management is operational and reachable using the selected interfaces before applying interface restrictions in a production environment.

    Default Value:
    Varies by platform. For some Branch and SME focused devices, like the SRX300 or EX2300, JWeb is enabled by default. For most larger Enterprise and SP devices JWeb is disabled by default.
    When configured, by default JWeb listens on all interfaces for Web Management sessions."
      reference   : "800-171|3.13.1,800-53|SC-7(11),CSCv7|11.7,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|2S,NIAv2|GS7c,TBA-FIISB|31.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set system services web-management .+"
# Note: Variable @JWEB_OOB_INTERFACE@ replaced with "fxp0" in field "expect".
      expect      : "set system services web-management .+ interface (fxp0|em0|me0|jmgmt0|fxp0)"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.10.2.3 Ensure Web-Management is Set to use PKI Certificate for HTTPS"
      info        : "JWeb should only be accessed using HTTPS with a PKI Certificate

    Rationale:
    JWeb can be configured to provide a Web GUI over either HTTP or HTTPS.
    When configured to use HTTPS X.509 Certificates are used to:
    - Share Public Encryption Keys
    - Provide Identity Information
    - Validate the Web Server's Identity
    - Enforce Encryption Key Rollover by limiting their validity period
    JWeb can be configured to use Self Signed 'System-Generated' X.509 Certificates, where the JUNOS device makes an identity claim, such as 'I am myrouter.myorg.com', without any external validation. When an administrator connects to JWeb their browser will generate a Security Error due to this lack of validation, which the user will need to accept in order to proceed to the interface.
    Without validation from a trusted Certificate Authority (CA), either an Internal or Public CA, administrators may be unable to detect when a management session is being intercepted or impersonated by an attacker. Additionally, a Self Signed certificate cannot be centrally revoked should a compromise be detected, relying instead on each user manually removing trust for the compromised Certificate.
    A Certificate Authority is a Trusted Third Party which validates X.509 Certificates by signing them, using a secure Hashing algorithm and their own Private Key. A CA may be part of an organization's internal Public Key Infrastructure (PKI) or an Public CA service such as those provided by Verisign, Entrust or Microsoft.
    Commonly, for signing Certificates used for internal management and systems, Organizations will configure their own PKI rather than paying for Public CA Services - configuring their End Points to trust Certificates signed by their CA through Group Policy or similar methods.
    Either option is equally acceptable for use with JWeb, but Self Signed Certificates should not be used.
    In addition, JUNOS offers two options for the storage and management of Certificates and their associated Private Keys:
    - in the configuration under the [edit security certificates] hierarchy
    - in a protected PKI store in memory
    While the keys are hashed when stored in the configuration file, they are still exposed through backups and management access to the device. Storing Certificates and Keys in the device's PKI store means that the Private Keys are never accessible and that additional protections to this restricted area of memory can be used.
    Due to these limitations PKI Certificates from a trusted Certificate Authority should always be used for JWeb Management and should always be stored in the device's PKI store rather than local configuration.

    NOTE: The JWeb service does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.13.11,800-53|SC-13,CSCv7|11.5,CSF|PR.DS-5,ITSG-33|SC-13,LEVEL|2S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>

    <report type:"PASSED">
      description : "6.10.2.7 Ensure Web-Management Interface Restriction is set to OOB Management"
      info        : "JWeb access should be restricted to trusted networks

    Rationale:
    By default, when configured, the JWeb service will listen for incoming connections on all interfaces which have an IP Address configured, exposing JWeb to users on all networks through which the device is reachable.
    Because control of Network Systems can have a serious impact on the security of your environment, the JUNOS device should only be manageable using Out Of Band (OOB) Management networks reached through the devices' dedicated Management Interface (called FXP0.0 on most platforms).
    This can be accomplished by limiting the interfaces on which the JWeb HTTPS service operates to only include the devices' OOB Interface. Firewall Filters or Security Policy (SRX) should also be used to further restrict management to authorized sources (see Recommendations in Section 2 - Firewall for further details).
    Some JUNOS devices do not have dedicated OOB Management ports. In some cases a 'revenue port' can be configured to act as a Management port, such as by defining a 'management' functional zone with a Branch/SME SRX Firewall. This type of restricted OOB Management Port is accepted as meeting this recommendation, but is not tested for under the audit procedure as a variety of ports might be used.

    NOTE: The JWeb service does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.13.1,800-53|SC-7,CSCv7|11.7,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7,LEVEL|2S,NIAv2|GS7c"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for XNM/JunoScript"
      regex       : "set system services xnm-ssl"
      expect      : "set system services xnm-ssl"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "6.10.3.2 Ensure XNM-SSL Connection Limit is Set"
      info        : "If the XNM-SSL service is configured, connection limits should be set.

    Rationale:
    JUNOScript can be configured to use SSL transport to prevent the exposure of sensitive data and authentication details on the network. If configured the XNM-SSL service will provide services on port TCP/3220.
    An attacker may attempt to open a large number of sessions to the XNM-SSL service to exhaust the routers resources or an authorized user may do so accidently, especially given that the service is designed to allow a scripting and automation interface to JUNOS. To limit the impact of any such incident, the number of concurrent connections to the XNM-SSL service should explicitly limited.
    A relatively low value of 10 is recommended, but may not be appropriate for all environments so it is left to the administrator's discretion."
      solution    : "The XNM-SSL Connection Limit can be configured by issuing the following command from the [edit system services xnm-ssl] hierarchy;
    [edit system services xnm-ssl]
    user@host#set connection-limit <limit>
    Where <limit> is the permitted number of concurrent connections required.

    Impact:
    If the connection limit has been reached, additional JUNOScript sessions will be rejected until an existing session has ended.

    Default Value:
    The XNM-SSL Service is disabled by default.
    When it is first configured the default Connection Limit is 75."
      reference   : "800-53|SC-5,CSCv7|11.5,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|2S,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set system services xnm-ssl .+"
# Note: Variable @XNM_CONNECTION_LIMIT@ replaced with "10" in field "not_expect".
      not_expect  : "set system services xnm-ssl connection-limit 10"
    </custom_item>

    <custom_item>
      type        : CONFIG_CHECK
      description : "6.10.3.3 Ensure XNM-SSL Rate Limit is Set"
      info        : "If the XNM-SSL service is configured, the Rate Limit should be set.

    Rationale:
    JUNOScript can be configured to use SSL transport to prevent the exposure of sensitive data and authentication details on the network. If configured the XNM-SSL service will provide services on port TCP/3220.
    An attacker may attempt to open a large number of sessions to the XNM-SSL service to exhaust the routers resources or an authorized user may do so accidently, especially given that the service is designed to allow a scripting interface to JUNOS.
    To limit the impact of any such incident, the rate at which new connections to the XNM-SSL service should explicitly limited. Rate Limits are set in terms of the number of connection attempts per minute. Established connections do not count towards this count. A relatively low value of 60 (the equivalent of one attempt per second, sustained over a minute) is recommended, but may not be appropriate for all environments so it is left to the administrator's discretion."
      solution    : "The XNM-SSL Rate Limit can be configured by issuing the following command from the [edit system services xnm-ssl] hierarchy;
    [edit system services xnm-ssl]
    user@host#set rate-limit <limit>
    Where <limit> is the desired Rate Limit measured in Connection Attempts per Minute.

    Impact:
    If the Rate Limit is exceeded, new connection attempts will be rejected until the new connection rate drops below the configured limit.

    Default Value:
    The XNM-SSL Service is disabled by default. When it is first configured the default Rate Limit is 150 connection attempts per second."
      reference   : "800-53|SC-5,CSCv7|11.5,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|2S,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set system services xnm-ssl .+"
# Note: Variable @XNM_RATE_LIMIT@ replaced with "10" in field "not_expect".
      not_expect  : "set system services xnm-ssl connection-limit 10"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.10.3.2 Ensure XNM-SSL Connection Limit is Set"
      info        : "If the XNM-SSL service is configured, connection limits should be set.

    Rationale:
    JUNOScript can be configured to use SSL transport to prevent the exposure of sensitive data and authentication details on the network. If configured the XNM-SSL service will provide services on port TCP/3220.
    An attacker may attempt to open a large number of sessions to the XNM-SSL service to exhaust the routers resources or an authorized user may do so accidently, especially given that the service is designed to allow a scripting and automation interface to JUNOS. To limit the impact of any such incident, the number of concurrent connections to the XNM-SSL service should explicitly limited.
    A relatively low value of 10 is recommended, but may not be appropriate for all environments so it is left to the administrator's discretion.

    NOTE: XNM-SSL does not appear to be configured on the target. This check is not applicable."
      reference   : "800-53|SC-5,CSCv7|11.5,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|2S,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>

    <report type:"PASSED">
      description : "6.10.3.3 Ensure XNM-SSL Rate Limit is Set"
      info        : "If the XNM-SSL service is configured, the Rate Limit should be set.

    Rationale:
    JUNOScript can be configured to use SSL transport to prevent the exposure of sensitive data and authentication details on the network. If configured the XNM-SSL service will provide services on port TCP/3220.
    An attacker may attempt to open a large number of sessions to the XNM-SSL service to exhaust the routers resources or an authorized user may do so accidently, especially given that the service is designed to allow a scripting interface to JUNOS.
    To limit the impact of any such incident, the rate at which new connections to the XNM-SSL service should explicitly limited. Rate Limits are set in terms of the number of connection attempts per minute. Established connections do not count towards this count. A relatively low value of 60 (the equivalent of one attempt per second, sustained over a minute) is recommended, but may not be appropriate for all environments so it is left to the administrator's discretion.

    NOTE: XNM-SSL does not appear to be configured on the target. This check is not applicable."
      reference   : "800-53|SC-5,CSCv7|11.5,CSF|DE.CM-1,CSF|PR.DS-4,ITSG-33|SC-5,LEVEL|2S,NESA|T3.3.1,NIAv2|GS10c,NIAv2|GS8e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : CONFIG_CHECK
      description : "Check for REST"
      regex       : "set system services rest"
      expect      : "set system services rest"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CONFIG_CHECK
      description : "6.10.5.3 Ensure REST is Set to use PKI Certificate for HTTPS"
      info        : "The REST API should only be accessed using HTTPS with a PKI Certificate

    Rationale:
    The JUNOS REST API can be configured for access using either HTTP or HTTPS for connections.
    When configured to use HTTPS X.509 Certificates are used to:
    - Share Public Encryption Keys
    - Provide Identity Information
    - Validate the Web Server's Identity
    - Enforce Encryption Key Rollover by limiting their validity period
    JWeb can be configured to use Self Signed 'System-Generated' X.509 Certificates, where the JUNOS device makes an identity claim, such as 'I am myrouter.myorg.com', without any external validation. When an administrator connects to JWeb their browser will generate a Security Error due to this lack of validation, which the user will need to accept in order to proceed to the interface.
    Without validation from a trusted Certificate Authority (CA), either an Internal or Public CA, administrators may be unable to detect when a management session is being intercepted or impersonated by an attacker. Additionally, a Self Signed certificate cannot be centrally revoked should a compromise be detected, relying instead on each user manually removing trust for the compromised Certificate.
    A Certificate Authority is a Trusted Third Party which validates X.509 Certificates by signing them, using a secure Hashing algorithm and their own Private Key. A CA may be part of an organization's internal Public Key Infrastructure (PKI) or a Public CA service such as those provided by Verisign, Entrust or Microsoft.
    Commonly, for signing Certificates used for internal management and systems, Organizations will configure their own PKI rather than paying for Public CA Services - configuring their End Points to trust Certificates signed by their CA through Group Policy or similar methods.
    Either option is equally acceptable for use with JWeb, but Self Signed Certificates should not be used.

    NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "To configure REST over HTTPS, enter the following command from the [edit system services rest] hierarchy:
    [edit system services rest]
    user@host# set https server-certificate <Certificate ID>
    Where <Certificate ID> is the name of a Certificate which has already been loaded to the devices PKI Store.
    To create a new Public/Private Key Pair in the devices PKI Store and generate Certificate Signing Request issue the following commands from Operational Mode:
    user@host> request security pki generate-key-pair certificate-id <Certificate ID> type <Algorithm> size <Size>

    user@host> request security pki generate-certificate-request certificate-id <Certificate ID> domain-name <Device DNS Name> subject <Device Subject DN>
    Where:
    <Certificate ID> is the Name that will be used for this Certificate throughout configuration
    <Algorithm> is the Encryption Algorithm to be used (this should be either RSA or ECDSA)
    <Size> is the number of Bits used for the keys (use at least 2048bits for RSA or 256bits for ECDSA)
    <Device DNS Name> is the FQDN which will be used to manage the device and <Device Subject DN> is the Distinguished Name used to identify this device and certificate.
    Optionally, fields for email address, the device's IP Address and output Filename for the PKCS#10 CSR which will be generated can be included.
    The CSR should then be submitted to the Certificate Authority for review and signing.
    Once the CA returns the Certificate it can be uploaded to the JUNOS device and imported with the following command from Operational Mode:
    user@host> request security pki local-certificate load certificate-id <Certificate ID> filename <File Upload Location>

    Impact:
    REST API Management may be lost if the Certificate is not valid or issued from a Certificate Authority which the Network Management/Automation Systems are not configured to trust.

    Default Value:
    By default the REST API is disabled."
      reference   : "800-171|3.13.10,800-53|SC-12,CSCv7|11.5,ISO/IEC-27001|A.10.1.2,ITSG-33|SC-12,LEVEL|2S,NESA|T7.4.1,NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set system services rest https server-certificate"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CONFIG_CHECK
      description : "6.10.5.4 Ensure REST HTTPS is Set to use Mutual Authentication"
      info        : "The REST HTTPS API should be configured for Mutual Authentication

    Rationale:
    The JUNOS REST API can be configured for access using either HTTP or HTTPS for connections.
    When configured to use HTTPS, X.509 Certificates are used to validate the JUNOS Devices identity to API Clients when they connect. Optionally, TLS Mutual Authentication may also be configured, whereby the REST API Client must also provide an X.509 Certificate signed by a mutually trusted Certificate Authority before it is permitted to connect.
    Using a mutually trusted Certificate Authority (CA), either an Internal or Public CA, allows for both the Client Device (such as a Network Automation Server) and JUNOS Device to detect when a management session is being intercepted or impersonated by an attacker. Additionally, a centralized CA is able to revoke any Certificate's which may be compromised or have been issued to Clients who are no longer authorized.
    A Certificate Authority is a Trusted Third Party which validates X.509 Certificates by signing them, using a secure Hashing algorithm and their own Private Key. A CA may be part of an organization's internal Public Key Infrastructure (PKI) or a Public CA service such as those provided by Verisign, Entrust or Microsoft.
    Commonly, for signing Certificates used for internal management and systems, Organizations will configure their own PKI rather than paying for Public CA Services - configuring their End Points to trust Certificates signed by their CA through Group Policy or similar methods.
    Either option is equally acceptable for use REST TLS Mutual Authentication, but a ca-profile must be configured on the JUNOS Device (even where the device has preconfigured trust for some Public CAs).
    TLS/HTTPS Mutual Authentication does not replace User Authentication, which is still performed via an HTTP Authentication Header using details configured Local or Remote (via RADIUS/TACACS+) User."
      solution    : "To configure REST HTTPS Mutual Authentication, enter the following command from the [edit system services rest] hierarchy:
    [edit system services rest]
    user@host# set https mutual-authentication <CA Profile>
    Where <CA Profile> is the name of an existing Certificate Authority Profile configured on the JUNOS Device for a Trusted CA.
    To configure a new CA Profile, use the following commands from the [edit security pki] hierarchy:
    [edit security pki]
    user@host# set ca-profile <CA Profile> ca-identity <CA ID>
    It is recommended that a Certificate Revocation List be set for the CA Profile, by including the <CRL URL> using the following command:
    [edit security pki]
    user@host# set ca-profile <CA Profile> revocation-check crl <CRL URL>
    Finally, the CAs' Public Certificate should be obtained an uploaded to the JUNOS Device and linked to the CA Profile:
    [edit security pki]
    user@host# run request security pki ca-certificate load ca-profile <CA Profile> filename <path and filename>

    Impact:
    REST API Management may be lost if the Certificate is not valid or if Automation/Network Management Systems using the REST API are not also configured to support Mutual Authentication using valid Certificates from the same Certificate Authority.

    Default Value:
    By default the REST API is disabled."
      reference   : "800-53|IA-3,CSCv7|11.5,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3,TBA-FIISB|27.1"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set system services rest https .+"
      expect      : "set system services rest https mutual-authentication .+"
    </custom_item>

    <custom_item>
      type            : CONFIG_CHECK
      description     : "6.10.5.6 Ensure REST HTTPS Cipher List is Set to Suite B Only"
      info            : "The REST API should only be accessed using HTTPS with secure Cipher Suites.

    Rationale:
    The JUNOS REST API can be configured for access using either HTTP or HTTPS for connections.
    When configured to use HTTPS, the device supports a wide range of Cipher Suites which define the Encryption, Hashing and Key Exchange methods and algorithms. By default, in the interests of compatibility, this includes support for a number of older, weaker algorithms such as RC4 Encryption or MD5 Hashing, which are no longer considered suitable for protecting sensitive data or device management.
    In Secure Environments, the REST API HTTPS Service should be configured to accept only Cipher Suites listed in the National Security Agencies Suite B Standards.
    Suite B standards for Cryptographic functions are developed and distributed by the US National Security Agency as part of Cryptographic Modernization Program for protection of US Government data, both unclassified and classified (to Secret). The Suite B Profile for Transport Layer Security (TLS) is set in RFC6460 and specifies two acceptable Profiles using ECDH with standard NIST Elliptic Curves, AES in Galois Counter Mode and SHA2."
      solution        : "To restrict the Cipher Suites used REST over HTTPS, enter the following command from the [edit system services rest] hierarchy:
    [edit system services rest]
    user@host# set https cipher-list [ ecdhe-rsa-with-aes-128-gcm-SHA256 ecdhe-rsa-with-aes-256-gcm-SHA384 ]
    Either Cipher Suite may be omitted, but at least one of these Cipher Suites must be set. No other Cipher Suites may be used.

    Impact:
    REST API Management may be lost if the Network Management System or Hosts do not support the secure Cipher Suites.

    Default Value:
    By default the REST API is disabled. When the REST API HTTPS Service is enabled, all Cipher Suites (including those with RC4 and insecure ciphers) are accepted, except for JUNOS FIPS mode, which supports only rsa-with-aes-256-gcm-SHA384, dhe-rsa-with-aes-128-gcm-SHA256, dhe-rsa-with-aes-256-gcm-SHA384, ecdhe-rsa-with-aes-128-gcm and ecdhe-rsa-with-aes-256-gcm."
      reference       : "800-171|3.13.11,800-53|SC-13,CSCv7|11.5,CSF|PR.DS-5,ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,LEVEL|2S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
      see_also        : "https://workbench.cisecurity.org/files/2278"
      regex           : "set system services rest https cipher-suites (ecdhe-rsa-withaes-128-gcm-SHA256|ecdhe-rsa-with-aes-256-gcm-SHA384)"
      number_of_lines : "^[1-2]$"
    </custom_item>

    <custom_item>
      type        : CONFIG_CHECK
      description : "6.10.5.11 Ensure REST Service Address is Set to OOB Management Only"
      info        : "The REST API Service Address should be set to OOB Management.

    Rationale:
    The REST API service allows remote scripts or users to connect to a JUNOS Device and execute RPC commands to operate and configure the device, potentially granting full control if connecting using a privileged account.
    To protect the REST API from unauthorized use, access should be restricted to specific network management segments.
    By default, when enabled, the REST API listens on port TCP/3000 (for HTTP) or TCP/3443 (for HTTPS) on all IP Addresses configured on the JUNOS Device. The addresses option can be configured with one or more IP Addresses to restrict the REST API to listening only on these addresses.
    In Secure Environments, all Management Services including the REST API should be restricted to being access only through the JUNOS Device's dedicate Out of Band Management Interface (fxp0, em0, etc)."
      solution    : "To restrict the IP Address/es on which the REST API will listen, enter the following command from the [edit system services rest] hierarchy:
    [edit system services rest]
    user@host# set https addresses <Service IP>
    Where <Service IP> is a single IP Address configured on the Device's Out of Band Management Interface.
    To add multiple addresses, enter the following command:
    [edit system services rest]
    user@host# set https addresses [<Service IP 1> <Service IP 2> <Service IP ...> ]
    To remove a single address from the current list enter the following command:
    [edit system services rest]
    user@host# delete https addresses <Service IP>

    Impact:
    Hosts will be unable to connect to the REST API HTTPS Service on any addresses which are not configured.

    Default Value:
    By default the REST API is disabled. When enabled, the REST API HTTPS Service listens on all configured IP Addresses."
      reference   : "800-171|3.13.1,800-53|SC-7(11),CSCv6|11.4,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(11),LEVEL|2S,NIAv2|GS7c,TBA-FIISB|31.3"
      see_also    : "https://workbench.cisecurity.org/files/2278"
      regex       : "set system services rest https .+"
      expect      : "set system services rest https addresses .+"
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "6.10.5.3 Ensure REST is Set to use PKI Certificate for HTTPS"
      info        : "The REST API should only be accessed using HTTPS with a PKI Certificate

  Rationale:
  The JUNOS REST API can be configured for access using either HTTP or HTTPS for connections.
  When configured to use HTTPS X.509 Certificates are used to:
  - Share Public Encryption Keys
  - Provide Identity Information
  - Validate the Web Server's Identity
  - Enforce Encryption Key Rollover by limiting their validity period
  JWeb can be configured to use Self Signed 'System-Generated' X.509 Certificates, where the JUNOS device makes an identity claim, such as 'I am myrouter.myorg.com', without any external validation. When an administrator connects to JWeb their browser will generate a Security Error due to this lack of validation, which the user will need to accept in order to proceed to the interface.
  Without validation from a trusted Certificate Authority (CA), either an Internal or Public CA, administrators may be unable to detect when a management session is being intercepted or impersonated by an attacker. Additionally, a Self Signed certificate cannot be centrally revoked should a compromise be detected, relying instead on each user manually removing trust for the compromised Certificate.
  A Certificate Authority is a Trusted Third Party which validates X.509 Certificates by signing them, using a secure Hashing algorithm and their own Private Key. A CA may be part of an organization's internal Public Key Infrastructure (PKI) or a Public CA service such as those provided by Verisign, Entrust or Microsoft.
  Commonly, for signing Certificates used for internal management and systems, Organizations will configure their own PKI rather than paying for Public CA Services - configuring their End Points to trust Certificates signed by their CA through Group Policy or similar methods.
  Either option is equally acceptable for use with JWeb, but Self Signed Certificates should not be used.

  NOTE: REST does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.13.10,800-53|SC-12,CSCv7|11.5,ITSG-33|SC-12,LEVEL|2S,NESA|T7.4.1,NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>

    <report type:"PASSED">
      description : "6.10.5.4 Ensure REST HTTPS is Set to use Mutual Authentication"
      info        : "The REST HTTPS API should be configured for Mutual Authentication

  Rationale:
  The JUNOS REST API can be configured for access using either HTTP or HTTPS for connections.
  When configured to use HTTPS, X.509 Certificates are used to validate the JUNOS Devices identity to API Clients when they connect. Optionally, TLS Mutual Authentication may also be configured, whereby the REST API Client must also provide an X.509 Certificate signed by a mutually trusted Certificate Authority before it is permitted to connect.
  Using a mutually trusted Certificate Authority (CA), either an Internal or Public CA, allows for both the Client Device (such as a Network Automation Server) and JUNOS Device to detect when a management session is being intercepted or impersonated by an attacker. Additionally, a centralized CA is able to revoke any Certificate's which may be compromised or have been issued to Clients who are no longer authorized.
  A Certificate Authority is a Trusted Third Party which validates X.509 Certificates by signing them, using a secure Hashing algorithm and their own Private Key. A CA may be part of an organization's internal Public Key Infrastructure (PKI) or a Public CA service such as those provided by Verisign, Entrust or Microsoft.
  Commonly, for signing Certificates used for internal management and systems, Organizations will configure their own PKI rather than paying for Public CA Services - configuring their End Points to trust Certificates signed by their CA through Group Policy or similar methods.
  Either option is equally acceptable for use REST TLS Mutual Authentication, but a ca-profile must be configured on the JUNOS Device (even where the device has preconfigured trust for some Public CAs).
  TLS/HTTPS Mutual Authentication does not replace User Authentication, which is still performed via an HTTP Authentication Header using details configured Local or Remote (via RADIUS/TACACS+) User.

  NOTE: REST does not appear to be configured on the target. This check is not applicable."
      reference   : "800-53|IA-3,CSCv7|11.5,CSF|PR.AC-1,ITSG-33|IA-3,LEVEL|2S,NESA|T5.4.3,TBA-FIISB|27.1"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>

    <report type:"PASSED">
      description : "6.10.5.6 Ensure REST HTTPS Cipher List is Set to Suite B Only"
      info        : "The REST API should only be accessed using HTTPS with secure Cipher Suites.

  Rationale:
  The JUNOS REST API can be configured for access using either HTTP or HTTPS for connections.
  When configured to use HTTPS, the device supports a wide range of Cipher Suites which define the Encryption, Hashing and Key Exchange methods and algorithms. By default, in the interests of compatibility, this includes support for a number of older, weaker algorithms such as RC4 Encryption or MD5 Hashing, which are no longer considered suitable for protecting sensitive data or device management.
  In Secure Environments, the REST API HTTPS Service should be configured to accept only Cipher Suites listed in the National Security Agencies Suite B Standards.
  Suite B standards for Cryptographic functions are developed and distributed by the US National Security Agency as part of Cryptographic Modernization Program for protection of US Government data, both unclassified and classified (to Secret). The Suite B Profile for Transport Layer Security (TLS) is set in RFC6460 and specifies two acceptable Profiles using ECDH with standard NIST Elliptic Curves, AES in Galois Counter Mode and SHA2.

  NOTE: REST does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.13.11,800-53|SC-13,CSCv7|11.5,CSF|PR.DS-5,ITSG-33|SC-13,LEVEL|2S,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>

    <report type:"PASSED">
      description : "6.10.5.11 Ensure REST Service Address is Set to OOB Management Only"
      info        : "The REST API Service Address should be set to OOB Management.

  Rationale:
  The REST API service allows remote scripts or users to connect to a JUNOS Device and execute RPC commands to operate and configure the device, potentially granting full control if connecting using a privileged account.
  To protect the REST API from unauthorized use, access should be restricted to specific network management segments.
  By default, when enabled, the REST API listens on port TCP/3000 (for HTTP) or TCP/3443 (for HTTPS) on all IP Addresses configured on the JUNOS Device. The addresses option can be configured with one or more IP Addresses to restrict the REST API to listening only on these addresses.
  In Secure Environments, all Management Services including the REST API should be restricted to being access only through the JUNOS Device's dedicate Out of Band Management Interface (fxp0, em0, etc).

  NOTE: REST does not appear to be configured on the target. This check is not applicable."
      reference   : "800-171|3.13.1,800-53|SC-7,CSCv6|11.4,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7,LEVEL|2S,NIAv2|GS7c"
      see_also    : "https://workbench.cisecurity.org/files/2278"
    </report>
  </else>
</if>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.11.1 Ensure Auxiliary Port is Set to Disabled"
  info        : "The Auxiliary Port should be disabled.

Rationale:
The Auxiliary Port on a Juniper Device is used to connect Modems and other devices to allow remote administration of the router when other connectivity is not possible.
Connections to the Auxiliary Port are treated in a very similar fashion to local Console Port connections.
Although this is a useful function, in most enterprise settings the Auxiliary Port is not utilized at all and so should be shutdown to prevent potential abuse."
  solution    : "To disable the Auxiliary Port, issue the following command from the [edit system ports] hierarchy;
[edit system ports]
user@host#set auxiliary disable

Impact:
The Auxiliary port will not be available.

Default Value:
The Auxiliary port is enabled by default on most platforms."
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system ports auxiliary .+"
  expect      : "set system ports auxiliary disable"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.11.3 Ensure Console Port is Set to Disabled"
  info        : "The JUNOS Device's Console Port should be disabled.

Rationale:
Administrators often use Console Port on a JUNOS Device to configure the Device via the CLI when they have physical access to the device.
In high security environments or deployments where the physical security of the JUNOS Device cannot be assured, such as CPE (Customer Premises Equipment), Point of Sales (POS) or Branch Office installations, disabling the console port will increase the difficulty of accessing the router for an attacker with physical access.
Connecting to the console will not allow access to the CLI without restarting the JUNOS Device to access recovery options, an event which will show up in your monitoring and audit logs."
  solution    : "To disable the Console Port, issue the following command from the [edit system ports] hierarchy;
[edit system ports]
user@host#set console disabled

Impact:
The JUNOS Device's CLI will no longer be accessible through the Console Port without rebooting the device.

Default Value:
By default, the Console Port is enabled"
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system ports console .+"
  expect      : "set system ports console disable"
</custom_item>

<custom_item>
  type        : CONFIG_CHECK
  description : "6.11.4 Ensure Console Port is Set as Insecure"
  info        : "The JUNOS Device's Console Port should be set as Insecure.

Rationale:
Administrators often use Console Port to configure the JUNOS Device when they have physical access to the device.
In high security environments or deployments where the physical security of the router is minimal, such as CPE (Customer Premises Equipment), Point of Sale (POS) or Branch Office installations, it is important to prevent both customers and intruders from accessing the Device's CLI or using the Password Recovery process using the Console Port.
Normally if an attacker is able to connect a console cable and then restart the device, it is possible to reset the root password in order to gain full control.
To prevent this, the Console Port should be set as Insecure. This option, which persists after restart, prevents login to the JUNOS Device's Console Port using the Root account. When rebooting the JUNOS Device, the Root password will be required before beginning the Password Recovery process, such as booting into Single User Mode or running the Password Recovery Utility (depending on model)."
  solution    : "To set the Console Port as Insecure, issue the following command from the [edit system ports] hierarchy;
[edit system ports]
user@host#set console insecure

Impact:
The Console Port will not permit logins using the Root account.
On reboot, access to the Password Recovery process will require the Root password to be entered.

Default Value:
By default Root password recovery is possible from the console."
  reference   : "800-171|3.1.5,800-53|AC-6(1),CSCv7|4,CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),LEVEL|2S,NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,SWIFT-CSCv1|5.1"
  see_also    : "https://workbench.cisecurity.org/files/2278"
  regex       : "set system ports console .+"
  expect      : "set system ports console insecure"
</custom_item>

<custom_item>
  type            : CONFIG_CHECK
  description     : "6.12.2 Ensure At Least 2 External SYSLOG Hosts are Set with Any/Info"
  info            : "Logging data must be sent to at least two external SYSLOG servers.

Rationale:
Log information from a JUNOS Device can be vital in detecting an attack and to allow incidents to be analyzed, investigated and (where appropriate) prosecuted. SYSLOG information is also helpful in diagnosing and resolving non-security related operational issues on the network.
Because of this, one of the first tasks an attacker will attempt to accomplish after gaining access to a Network Device is to alter or delete logs to cover their tracks.
To prevent an attacker or a fault denying you access to log data, it is vital to send logs to at least one External Logging and/or SIEM (Security Incident and Event Manager) Server. JUNOS Devices use the industry standard SYSLOG protocol for this.
SYSLOG entries are generated by a range of sources on a JUNOS Device, such as authorization which reports Authentication and Authorization events or PFE for events encountered by the Packet Forwarding Engine. Each of these sources are referred to as a Facility.
In addition to indicating what facility generated a log message, JUNOS SYSLOG also indicates and allows the administrator to filter based on the Severity Level for each message. There are eight possible levels, which are as follows:
- Emergency (0)
- Alert (1)
- Critical (2)
- Error (3)
- Warning (4)
- Notice (5)
- Informational (6)
- Any (7) (called Debug on many SYSLOG systems)
Each increase in level represents an increase in the detail and number of log messages created. Each level includes the messages from all preceding levels, so Critical includes all messages from both the Alert and Emergency levels.
To ensure that vital messages about the Health and Security of the JUNOS Device are not missed, or lost should an attacker delete local logs, at least two External SYSLOG or SIEM Servers should be configured to receive log messages from any Facility and at least info Severity.
SYSLOG messages are sent in a 'fire and forget' manner over UDP, with no acknowledgement or ability to resend missed messages in the event a server is unable to handle them. Adding a second server significantly reduces the risk that messages are lost in the event of a network or server issue."
  solution        : "SYSLOG data is recorded locally by default, you can configure external SYSLOG servers by issuing the following commands from the [edit system syslog] hierarchy;
[edit system syslog]
user@host# set host <Server 1> any <Severity>

[edit system syslog]
user@host# set host <Server 2> any <Severity>
Where:
- <Server 1> is the IP Address or Fully Qualified Domain Name of the first Remote SYSLOG or SIEM Server
- <Server 2> is the IP Address or FQDN of a separate second Remote SYSLOG or SIEM Server. For added resilience, you may wish to place the second server on a different network to the first and this is recommended where possible.
- <Severity> should be either any or info
Some SYSLOG or SIEM Servers may require additional configuration items such as explicit-priority or structured-data options to be configured.
It is possible to filter SYSLOG messages to be forwarded to the host using a match or match-string condition. This should not be set for the device's the Remote SYSLOG Hosts configured in meeting this Recommendation.

Impact:
Network Devices, particularly Firewalls, can generate a significant volumes of log data, it is essential that the target SYSLOG servers are suitably resourced to handle the expected volume of messages and it is strongly recommended that robust archiving and retention processes be employed.

Default Value:
Log messages are not sent to remote hosts by default, but are stored locally in files in the /var/log/ folder."
  reference       : "800-171|3.3.8,800-53|AU-9(2),CN-L3|8.1.3.5(d),CN-L3|8.1.4.3(c),CSCv7|6.5,CSF|PR.PT-1,ITSG-33|AU-9(2),LEVEL|2S,NESA|M5.2.3,NESA|M5.5.2,NIAv2|SS13e,PCI-DSSv3.1|10.5.3,PCI-DSSv3.1|10.5.4,PCI-DSSv3.2|10.5.3,PCI-DSSv3.2|10.5.4"
  see_also        : "https://workbench.cisecurity.org/files/2278"
  regex           : "set system syslog host .+ any (any|info)"
  number_of_lines : "^([2-9]|[1-9][0-9]+)$"
</custom_item>

</check_type>
